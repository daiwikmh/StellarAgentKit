{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/utils/sui-types.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/bcs/type-tag-serializer.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/bcs/bcs.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/bcs/effects.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/bcs/index.ts", "../../src/services/models/sui/_framework/util.ts", "../../src/services/models/sui/bridge/index.ts", "../../src/services/models/sui/cctp-bridge/index.ts", "../../src/services/models/sui/utils/index.ts", "../../src/index.ts", "../../src/configs/mainnet.ts", "../../src/services/index.ts", "../../src/exceptions/exceptions.ts", "../../src/chains/chain.enums.ts", "../../src/chains/index.ts", "../../src/client/core-api/api-client.ts", "../../src/version.ts", "../../src/utils/calculation/index.ts", "../../src/client/core-api/core-api.model.ts", "../../src/client/core-api/core-api-mapper.ts", "../../node_modules/.pnpm/timed-cache@2.0.0/node_modules/timed-cache/cache.js", "../../src/client/core-api/api-client-caching.ts", "../../src/client/core-api/core-client-base.ts", "../../src/client/core-api/core-client-filtered.ts", "../../src/client/core-api/core-client-pool-info-caching.ts", "../../src/services/bridge/index.ts", "../../src/utils/utils.ts", "../../src/services/bridge/evm/index.ts", "../../src/services/models/abi/Bridge.ts", "../../src/services/models/abi/CctpBridge.ts", "../../src/services/bridge/get-cctp-sol-token-recipient-address.ts", "../../src/services/utils/sol/accounts.ts", "../../src/services/utils/sol/anchor-provider.ts", "../../src/services/bridge/utils.ts", "../../src/services/bridge/models/bridge.ts", "../../src/services/bridge/raw-bridge-transaction-builder.ts", "../../src/services/bridge/sol/index.ts", "../../src/services/models/sol/types/bridge.ts", "../../src/services/models/sol/types/cctp_bridge.ts", "../../src/services/utils/sol/index.ts", "../../src/services/utils/sol/compute-budget.ts", "../../src/utils/sol/utils.ts", "../../src/services/models/sol/index.ts", "../../src/services/bridge/sol/jupiter.ts", "../../src/services/bridge/srb/index.ts", "../../src/services/models/srb/bridge-contract.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/version.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/client/errors.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/client/rpc-websocket-client.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/client/http-transport.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/client/client.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/serializer.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/utils/index.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/utils/suins.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/utils/constants.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/Inputs.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/Commands.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/data/internal.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/Transaction.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/data/v1.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/data/v2.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/json-rpc-resolver.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/object.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/pure.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/TransactionData.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/hash.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/utils.ts", "../../node_modules/.pnpm/@mysten+sui@1.18.0_typescript@5.5.4/node_modules/@mysten/sui/src/transactions/intents/CoinWithBalance.ts", "../../src/services/bridge/sui/index.ts", "../../src/services/models/sui/bridge/bridge-interface/functions.ts", "../../src/services/models/sui/cctp-bridge/cctp-bridge-interface/functions.ts", "../../src/services/models/sui/utils/bytes32/functions.ts", "../../src/services/models/sui/_framework/reified.ts", "../../src/services/models/sui/_framework/vector.ts", "../../src/services/models/sui/_dependencies/source/0x1/ascii/structs.ts", "../../src/services/models/sui/_dependencies/source/0x1/index.ts", "../../src/services/models/sui/_dependencies/source/0x1/string/structs.ts", "../../src/services/models/sui/sui/object/structs.ts", "../../src/services/models/sui/sui/index.ts", "../../src/services/utils/sui/paginated.ts", "../../src/services/bridge/trx/index.ts", "../../src/services/utils/index.ts", "../../src/services/utils/trx/index.ts", "../../src/services/liquidity-pool/index.ts", "../../src/services/utils/calculation/index.ts", "../../src/services/liquidity-pool/evm/index.ts", "../../src/services/models/abi/Pool.ts", "../../src/services/liquidity-pool/models/pool.model.ts", "../../src/services/liquidity-pool/models/pool.ts", "../../src/services/liquidity-pool/raw-pool-transaction-builder.ts", "../../src/services/liquidity-pool/sol/index.ts", "../../src/services/liquidity-pool/srb/index.ts", "../../src/services/models/srb/pool-contract.ts", "../../src/services/models/srb/utils.ts", "../../src/services/liquidity-pool/sui/index.ts", "../../src/services/models/sui/bridge/pool/structs.ts", "../../src/services/models/sui/sui/balance/structs.ts", "../../src/services/models/sui/bridge/pool-rewards/structs.ts", "../../src/services/models/sui/bridge/pool-state/structs.ts", "../../src/services/models/sui/bridge/user-deposit/structs.ts", "../../src/services/utils/sui/coins.ts", "../../src/services/utils/sui/view.ts", "../../src/services/liquidity-pool/trx/index.ts", "../../src/utils/calculation/swap-and-bridge-fee-calc.ts", "../../src/utils/calculation/swap-and-bridge-details.ts", "../../src/utils/sol/index.ts", "../../src/utils/srb/index.ts", "../../src/services/models/srb/token-contract.ts", "../../src/utils/index.ts", "../../src/models/index.ts", "../../src/services/token/index.ts", "../../src/services/models/abi/ERC20.ts", "../../src/services/token/models/token.ts", "../../src/services/token/evm/index.ts", "../../src/services/token/sol/index.ts", "../../src/services/token/srb/index.ts", "../../src/services/token/sui/index.ts", "../../src/services/token/trx/index.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase58, splitGenericParameters } from '@mysten/bcs';\n\nconst TX_DIGEST_LENGTH = 32;\n\n/** Returns whether the tx digest is valid based on the serialization format */\nexport function isValidTransactionDigest(value: string): value is string {\n\ttry {\n\t\tconst buffer = fromBase58(value);\n\t\treturn buffer.length === TX_DIGEST_LENGTH;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\n// TODO - can we automatically sync this with rust length definition?\n// Source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67\n// which uses the Move account address length\n// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .\n\nexport const SUI_ADDRESS_LENGTH = 32;\nexport function isValidSuiAddress(value: string): value is string {\n\treturn isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\n\nexport function isValidSuiObjectId(value: string): boolean {\n\treturn isValidSuiAddress(value);\n}\n\ntype StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: (string | StructTag)[];\n};\n\nfunction parseTypeTag(type: string): string | StructTag {\n\tif (!type.includes('::')) return type;\n\n\treturn parseStructTag(type);\n}\n\nexport function parseStructTag(type: string): StructTag {\n\tconst [address, module] = type.split('::');\n\n\tconst rest = type.slice(address.length + module.length + 4);\n\tconst name = rest.includes('<') ? rest.slice(0, rest.indexOf('<')) : rest;\n\tconst typeParams = rest.includes('<')\n\t\t? splitGenericParameters(rest.slice(rest.indexOf('<') + 1, rest.lastIndexOf('>'))).map(\n\t\t\t\t(typeParam) => parseTypeTag(typeParam.trim()),\n\t\t\t)\n\t\t: [];\n\n\treturn {\n\t\taddress: normalizeSuiAddress(address),\n\t\tmodule,\n\t\tname,\n\t\ttypeParams,\n\t};\n}\n\nexport function normalizeStructTag(type: string | StructTag): string {\n\tconst { address, module, name, typeParams } =\n\t\ttypeof type === 'string' ? parseStructTag(type) : type;\n\n\tconst formattedTypeParams =\n\t\ttypeParams?.length > 0\n\t\t\t? `<${typeParams\n\t\t\t\t\t.map((typeParam) =>\n\t\t\t\t\t\ttypeof typeParam === 'string' ? typeParam : normalizeStructTag(typeParam),\n\t\t\t\t\t)\n\t\t\t\t\t.join(',')}>`\n\t\t\t: '';\n\n\treturn `${address}::${module}::${name}${formattedTypeParams}`;\n}\n\n/**\n * Perform the following operations:\n * 1. Make the address lower case\n * 2. Prepend `0x` if the string does not start with `0x`.\n * 3. Add more zeros if the length of the address(excluding `0x`) is less than `SUI_ADDRESS_LENGTH`\n *\n * WARNING: if the address value itself starts with `0x`, e.g., `0x0x`, the default behavior\n * is to treat the first `0x` not as part of the address. The default behavior can be overridden by\n * setting `forceAdd0x` to true\n *\n */\nexport function normalizeSuiAddress(value: string, forceAdd0x: boolean = false): string {\n\tlet address = value.toLowerCase();\n\tif (!forceAdd0x && address.startsWith('0x')) {\n\t\taddress = address.slice(2);\n\t}\n\treturn `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, '0')}`;\n}\n\nexport function normalizeSuiObjectId(value: string, forceAdd0x: boolean = false): string {\n\treturn normalizeSuiAddress(value, forceAdd0x);\n}\n\nfunction isHex(value: string): boolean {\n\treturn /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\n\nfunction getHexByteLength(value: string): number {\n\treturn /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { splitGenericParameters } from '@mysten/bcs';\n\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { TypeTag } from './types.js';\n\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\n\nexport class TypeTagSerializer {\n\tstatic parseFromStr(str: string, normalizeAddress = false): TypeTag {\n\t\tif (str === 'address') {\n\t\t\treturn { address: null };\n\t\t} else if (str === 'bool') {\n\t\t\treturn { bool: null };\n\t\t} else if (str === 'u8') {\n\t\t\treturn { u8: null };\n\t\t} else if (str === 'u16') {\n\t\t\treturn { u16: null };\n\t\t} else if (str === 'u32') {\n\t\t\treturn { u32: null };\n\t\t} else if (str === 'u64') {\n\t\t\treturn { u64: null };\n\t\t} else if (str === 'u128') {\n\t\t\treturn { u128: null };\n\t\t} else if (str === 'u256') {\n\t\t\treturn { u256: null };\n\t\t} else if (str === 'signer') {\n\t\t\treturn { signer: null };\n\t\t}\n\n\t\tconst vectorMatch = str.match(VECTOR_REGEX);\n\t\tif (vectorMatch) {\n\t\t\treturn {\n\t\t\t\tvector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress),\n\t\t\t};\n\t\t}\n\n\t\tconst structMatch = str.match(STRUCT_REGEX);\n\t\tif (structMatch) {\n\t\t\tconst address = normalizeAddress ? normalizeSuiAddress(structMatch[1]) : structMatch[1];\n\t\t\treturn {\n\t\t\t\tstruct: {\n\t\t\t\t\taddress,\n\t\t\t\t\tmodule: structMatch[2],\n\t\t\t\t\tname: structMatch[3],\n\t\t\t\t\ttypeParams:\n\t\t\t\t\t\tstructMatch[5] === undefined\n\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t: TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tthrow new Error(`Encountered unexpected token when parsing type args for ${str}`);\n\t}\n\n\tstatic parseStructTypeArgs(str: string, normalizeAddress = false): TypeTag[] {\n\t\treturn splitGenericParameters(str).map((tok) =>\n\t\t\tTypeTagSerializer.parseFromStr(tok, normalizeAddress),\n\t\t);\n\t}\n\n\tstatic tagToString(tag: TypeTag): string {\n\t\tif ('bool' in tag) {\n\t\t\treturn 'bool';\n\t\t}\n\t\tif ('u8' in tag) {\n\t\t\treturn 'u8';\n\t\t}\n\t\tif ('u16' in tag) {\n\t\t\treturn 'u16';\n\t\t}\n\t\tif ('u32' in tag) {\n\t\t\treturn 'u32';\n\t\t}\n\t\tif ('u64' in tag) {\n\t\t\treturn 'u64';\n\t\t}\n\t\tif ('u128' in tag) {\n\t\t\treturn 'u128';\n\t\t}\n\t\tif ('u256' in tag) {\n\t\t\treturn 'u256';\n\t\t}\n\t\tif ('address' in tag) {\n\t\t\treturn 'address';\n\t\t}\n\t\tif ('signer' in tag) {\n\t\t\treturn 'signer';\n\t\t}\n\t\tif ('vector' in tag) {\n\t\t\treturn `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n\t\t}\n\t\tif ('struct' in tag) {\n\t\t\tconst struct = tag.struct;\n\t\t\tconst typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(', ');\n\t\t\treturn `${struct.address}::${struct.module}::${struct.name}${\n\t\t\t\ttypeParams ? `<${typeParams}>` : ''\n\t\t\t}`;\n\t\t}\n\t\tthrow new Error('Invalid TypeTag');\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType, BcsTypeOptions } from '@mysten/bcs';\nimport { bcs, fromBase58, fromBase64, fromHex, toBase58, toBase64, toHex } from '@mysten/bcs';\n\nimport { isValidSuiAddress, normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../utils/sui-types.js';\nimport { TypeTagSerializer } from './type-tag-serializer.js';\nimport type { TypeTag as TypeTagType } from './types.js';\n\nfunction unsafe_u64(options?: BcsTypeOptions<number>) {\n\treturn bcs\n\t\t.u64({\n\t\t\tname: 'unsafe_u64',\n\t\t\t...(options as object),\n\t\t})\n\t\t.transform({\n\t\t\tinput: (val: number | string) => val,\n\t\t\toutput: (val) => Number(val),\n\t\t});\n}\n\nfunction optionEnum<T extends BcsType<any, any>>(type: T) {\n\treturn bcs.enum('Option', {\n\t\tNone: null,\n\t\tSome: type,\n\t});\n}\n\nexport const Address = bcs.bytes(SUI_ADDRESS_LENGTH).transform({\n\tvalidate: (val) => {\n\t\tconst address = typeof val === 'string' ? val : toHex(val);\n\t\tif (!address || !isValidSuiAddress(normalizeSuiAddress(address))) {\n\t\t\tthrow new Error(`Invalid Sui address ${address}`);\n\t\t}\n\t},\n\tinput: (val: string | Uint8Array) =>\n\t\ttypeof val === 'string' ? fromHex(normalizeSuiAddress(val)) : val,\n\toutput: (val) => normalizeSuiAddress(toHex(val)),\n});\n\nexport const ObjectDigest = bcs.vector(bcs.u8()).transform({\n\tname: 'ObjectDigest',\n\tinput: (value: string) => fromBase58(value),\n\toutput: (value) => toBase58(new Uint8Array(value)),\n\tvalidate: (value) => {\n\t\tif (fromBase58(value).length !== 32) {\n\t\t\tthrow new Error('ObjectDigest must be 32 bytes');\n\t\t}\n\t},\n});\n\nexport const SuiObjectRef = bcs.struct('SuiObjectRef', {\n\tobjectId: Address,\n\tversion: bcs.u64(),\n\tdigest: ObjectDigest,\n});\n\nexport const SharedObjectRef = bcs.struct('SharedObjectRef', {\n\tobjectId: Address,\n\tinitialSharedVersion: bcs.u64(),\n\tmutable: bcs.bool(),\n});\n\nexport const ObjectArg = bcs.enum('ObjectArg', {\n\tImmOrOwnedObject: SuiObjectRef,\n\tSharedObject: SharedObjectRef,\n\tReceiving: SuiObjectRef,\n});\n\nexport const CallArg = bcs.enum('CallArg', {\n\tPure: bcs.struct('Pure', {\n\t\tbytes: bcs.vector(bcs.u8()).transform({\n\t\t\tinput: (val: string | Uint8Array) => (typeof val === 'string' ? fromBase64(val) : val),\n\t\t\toutput: (val) => toBase64(new Uint8Array(val)),\n\t\t}),\n\t}),\n\tObject: ObjectArg,\n});\n\nconst InnerTypeTag: BcsType<TypeTagType, TypeTagType> = bcs.enum('TypeTag', {\n\tbool: null,\n\tu8: null,\n\tu64: null,\n\tu128: null,\n\taddress: null,\n\tsigner: null,\n\tvector: bcs.lazy(() => InnerTypeTag),\n\tstruct: bcs.lazy(() => StructTag),\n\tu16: null,\n\tu32: null,\n\tu256: null,\n}) as BcsType<TypeTagType>;\n\nexport const TypeTag = InnerTypeTag.transform({\n\tinput: (typeTag: string | TypeTagType) =>\n\t\ttypeof typeTag === 'string' ? TypeTagSerializer.parseFromStr(typeTag, true) : typeTag,\n\toutput: (typeTag: TypeTagType) => TypeTagSerializer.tagToString(typeTag),\n});\n\nexport const Argument = bcs.enum('Argument', {\n\tGasCoin: null,\n\tInput: bcs.u16(),\n\tResult: bcs.u16(),\n\tNestedResult: bcs.tuple([bcs.u16(), bcs.u16()]),\n});\n\nexport const ProgrammableMoveCall = bcs.struct('ProgrammableMoveCall', {\n\tpackage: Address,\n\tmodule: bcs.string(),\n\tfunction: bcs.string(),\n\ttypeArguments: bcs.vector(TypeTag),\n\targuments: bcs.vector(Argument),\n});\n\nexport const Command = bcs.enum('Command', {\n\t/**\n\t * A Move Call - any public Move function can be called via\n\t * this transaction. The results can be used that instant to pass\n\t * into the next transaction.\n\t */\n\tMoveCall: ProgrammableMoveCall,\n\t/**\n\t * Transfer vector of objects to a receiver.\n\t */\n\tTransferObjects: bcs.struct('TransferObjects', {\n\t\tobjects: bcs.vector(Argument),\n\t\taddress: Argument,\n\t}),\n\t// /**\n\t//  * Split `amount` from a `coin`.\n\t//  */\n\tSplitCoins: bcs.struct('SplitCoins', {\n\t\tcoin: Argument,\n\t\tamounts: bcs.vector(Argument),\n\t}),\n\t// /**\n\t//  * Merge Vector of Coins (`sources`) into a `destination`.\n\t//  */\n\tMergeCoins: bcs.struct('MergeCoins', {\n\t\tdestination: Argument,\n\t\tsources: bcs.vector(Argument),\n\t}),\n\t// /**\n\t//  * Publish a Move module.\n\t//  */\n\tPublish: bcs.struct('Publish', {\n\t\tmodules: bcs.vector(\n\t\t\tbcs.vector(bcs.u8()).transform({\n\t\t\t\tinput: (val: string | Uint8Array) => (typeof val === 'string' ? fromBase64(val) : val),\n\t\t\t\toutput: (val) => toBase64(new Uint8Array(val)),\n\t\t\t}),\n\t\t),\n\t\tdependencies: bcs.vector(Address),\n\t}),\n\t// /**\n\t//  * Build a vector of objects using the input arguments.\n\t//  * It is impossible to export construct a `vector<T: key>` otherwise,\n\t//  * so this call serves a utility function.\n\t//  */\n\tMakeMoveVec: bcs.struct('MakeMoveVec', {\n\t\ttype: optionEnum(TypeTag).transform({\n\t\t\tinput: (val: string | null) =>\n\t\t\t\tval === null\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tNone: true,\n\t\t\t\t\t\t}\n\t\t\t\t\t: {\n\t\t\t\t\t\t\tSome: val,\n\t\t\t\t\t\t},\n\t\t\toutput: (val) => val.Some ?? null,\n\t\t}),\n\t\telements: bcs.vector(Argument),\n\t}),\n\tUpgrade: bcs.struct('Upgrade', {\n\t\tmodules: bcs.vector(\n\t\t\tbcs.vector(bcs.u8()).transform({\n\t\t\t\tinput: (val: string | Uint8Array) => (typeof val === 'string' ? fromBase64(val) : val),\n\t\t\t\toutput: (val) => toBase64(new Uint8Array(val)),\n\t\t\t}),\n\t\t),\n\t\tdependencies: bcs.vector(Address),\n\t\tpackage: Address,\n\t\tticket: Argument,\n\t}),\n});\n\nexport const ProgrammableTransaction = bcs.struct('ProgrammableTransaction', {\n\tinputs: bcs.vector(CallArg),\n\tcommands: bcs.vector(Command),\n});\n\nexport const TransactionKind = bcs.enum('TransactionKind', {\n\tProgrammableTransaction: ProgrammableTransaction,\n\tChangeEpoch: null,\n\tGenesis: null,\n\tConsensusCommitPrologue: null,\n});\n\nexport const TransactionExpiration = bcs.enum('TransactionExpiration', {\n\tNone: null,\n\tEpoch: unsafe_u64(),\n});\n\nexport const StructTag = bcs.struct('StructTag', {\n\taddress: Address,\n\tmodule: bcs.string(),\n\tname: bcs.string(),\n\ttypeParams: bcs.vector(InnerTypeTag),\n});\n\nexport const GasData = bcs.struct('GasData', {\n\tpayment: bcs.vector(SuiObjectRef),\n\towner: Address,\n\tprice: bcs.u64(),\n\tbudget: bcs.u64(),\n});\n\nexport const TransactionDataV1 = bcs.struct('TransactionDataV1', {\n\tkind: TransactionKind,\n\tsender: Address,\n\tgasData: GasData,\n\texpiration: TransactionExpiration,\n});\n\nexport const TransactionData = bcs.enum('TransactionData', {\n\tV1: TransactionDataV1,\n});\n\nexport const IntentScope = bcs.enum('IntentScope', {\n\tTransactionData: null,\n\tTransactionEffects: null,\n\tCheckpointSummary: null,\n\tPersonalMessage: null,\n});\n\nexport const IntentVersion = bcs.enum('IntentVersion', {\n\tV0: null,\n});\n\nexport const AppId = bcs.enum('AppId', {\n\tSui: null,\n});\n\nexport const Intent = bcs.struct('Intent', {\n\tscope: IntentScope,\n\tversion: IntentVersion,\n\tappId: AppId,\n});\n\nexport function IntentMessage<T extends BcsType<any>>(T: T) {\n\treturn bcs.struct(`IntentMessage<${T.name}>`, {\n\t\tintent: Intent,\n\t\tvalue: T,\n\t});\n}\n\nexport const CompressedSignature = bcs.enum('CompressedSignature', {\n\tED25519: bcs.fixedArray(64, bcs.u8()),\n\tSecp256k1: bcs.fixedArray(64, bcs.u8()),\n\tSecp256r1: bcs.fixedArray(64, bcs.u8()),\n\tZkLogin: bcs.vector(bcs.u8()),\n});\n\nexport const PublicKey = bcs.enum('PublicKey', {\n\tED25519: bcs.fixedArray(32, bcs.u8()),\n\tSecp256k1: bcs.fixedArray(33, bcs.u8()),\n\tSecp256r1: bcs.fixedArray(33, bcs.u8()),\n\tZkLogin: bcs.vector(bcs.u8()),\n});\n\nexport const MultiSigPkMap = bcs.struct('MultiSigPkMap', {\n\tpubKey: PublicKey,\n\tweight: bcs.u8(),\n});\n\nexport const MultiSigPublicKey = bcs.struct('MultiSigPublicKey', {\n\tpk_map: bcs.vector(MultiSigPkMap),\n\tthreshold: bcs.u16(),\n});\n\nexport const MultiSig = bcs.struct('MultiSig', {\n\tsigs: bcs.vector(CompressedSignature),\n\tbitmap: bcs.u16(),\n\tmultisig_pk: MultiSigPublicKey,\n});\n\nexport const base64String = bcs.vector(bcs.u8()).transform({\n\tinput: (val: string | Uint8Array) => (typeof val === 'string' ? fromBase64(val) : val),\n\toutput: (val) => toBase64(new Uint8Array(val)),\n});\n\nexport const SenderSignedTransaction = bcs.struct('SenderSignedTransaction', {\n\tintentMessage: IntentMessage(TransactionData),\n\ttxSignatures: bcs.vector(base64String),\n});\n\nexport const SenderSignedData = bcs.vector(SenderSignedTransaction, {\n\tname: 'SenderSignedData',\n});\n\nexport const PasskeyAuthenticator = bcs.struct('PasskeyAuthenticator', {\n\tauthenticatorData: bcs.vector(bcs.u8()),\n\tclientDataJson: bcs.string(),\n\tuserSignature: bcs.vector(bcs.u8()),\n});\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/bcs';\n\nimport { Address, ObjectDigest, SuiObjectRef } from './bcs.js';\n\nconst PackageUpgradeError = bcs.enum('PackageUpgradeError', {\n\tUnableToFetchPackage: bcs.struct('UnableToFetchPackage', { packageId: Address }),\n\tNotAPackage: bcs.struct('NotAPackage', { objectId: Address }),\n\tIncompatibleUpgrade: null,\n\tDigestDoesNotMatch: bcs.struct('DigestDoesNotMatch', { digest: bcs.vector(bcs.u8()) }),\n\tUnknownUpgradePolicy: bcs.struct('UnknownUpgradePolicy', { policy: bcs.u8() }),\n\tPackageIDDoesNotMatch: bcs.struct('PackageIDDoesNotMatch', {\n\t\tpackageId: Address,\n\t\tticketId: Address,\n\t}),\n});\n\nconst ModuleId = bcs.struct('ModuleId', {\n\taddress: Address,\n\tname: bcs.string(),\n});\nconst MoveLocation = bcs.struct('MoveLocation', {\n\tmodule: ModuleId,\n\tfunction: bcs.u16(),\n\tinstruction: bcs.u16(),\n\tfunctionName: bcs.option(bcs.string()),\n});\n\nconst CommandArgumentError = bcs.enum('CommandArgumentError', {\n\tTypeMismatch: null,\n\tInvalidBCSBytes: null,\n\tInvalidUsageOfPureArg: null,\n\tInvalidArgumentToPrivateEntryFunction: null,\n\tIndexOutOfBounds: bcs.struct('IndexOutOfBounds', { idx: bcs.u16() }),\n\tSecondaryIndexOutOfBounds: bcs.struct('SecondaryIndexOutOfBounds', {\n\t\tresultIdx: bcs.u16(),\n\t\tsecondaryIdx: bcs.u16(),\n\t}),\n\tInvalidResultArity: bcs.struct('InvalidResultArity', { resultIdx: bcs.u16() }),\n\tInvalidGasCoinUsage: null,\n\tInvalidValueUsage: null,\n\tInvalidObjectByValue: null,\n\tInvalidObjectByMutRef: null,\n\tSharedObjectOperationNotAllowed: null,\n});\n\nconst TypeArgumentError = bcs.enum('TypeArgumentError', {\n\tTypeNotFound: null,\n\tConstraintNotSatisfied: null,\n});\n\nconst ExecutionFailureStatus = bcs.enum('ExecutionFailureStatus', {\n\tInsufficientGas: null,\n\tInvalidGasObject: null,\n\tInvariantViolation: null,\n\tFeatureNotYetSupported: null,\n\tMoveObjectTooBig: bcs.struct('MoveObjectTooBig', {\n\t\tobjectSize: bcs.u64(),\n\t\tmaxObjectSize: bcs.u64(),\n\t}),\n\tMovePackageTooBig: bcs.struct('MovePackageTooBig', {\n\t\tobjectSize: bcs.u64(),\n\t\tmaxObjectSize: bcs.u64(),\n\t}),\n\tCircularObjectOwnership: bcs.struct('CircularObjectOwnership', { object: Address }),\n\tInsufficientCoinBalance: null,\n\tCoinBalanceOverflow: null,\n\tPublishErrorNonZeroAddress: null,\n\tSuiMoveVerificationError: null,\n\tMovePrimitiveRuntimeError: bcs.option(MoveLocation),\n\tMoveAbort: bcs.tuple([MoveLocation, bcs.u64()]),\n\tVMVerificationOrDeserializationError: null,\n\tVMInvariantViolation: null,\n\tFunctionNotFound: null,\n\tArityMismatch: null,\n\tTypeArityMismatch: null,\n\tNonEntryFunctionInvoked: null,\n\tCommandArgumentError: bcs.struct('CommandArgumentError', {\n\t\targIdx: bcs.u16(),\n\t\tkind: CommandArgumentError,\n\t}),\n\tTypeArgumentError: bcs.struct('TypeArgumentError', {\n\t\targumentIdx: bcs.u16(),\n\t\tkind: TypeArgumentError,\n\t}),\n\tUnusedValueWithoutDrop: bcs.struct('UnusedValueWithoutDrop', {\n\t\tresultIdx: bcs.u16(),\n\t\tsecondaryIdx: bcs.u16(),\n\t}),\n\tInvalidPublicFunctionReturnType: bcs.struct('InvalidPublicFunctionReturnType', {\n\t\tidx: bcs.u16(),\n\t}),\n\tInvalidTransferObject: null,\n\tEffectsTooLarge: bcs.struct('EffectsTooLarge', { currentSize: bcs.u64(), maxSize: bcs.u64() }),\n\tPublishUpgradeMissingDependency: null,\n\tPublishUpgradeDependencyDowngrade: null,\n\tPackageUpgradeError: bcs.struct('PackageUpgradeError', { upgradeError: PackageUpgradeError }),\n\tWrittenObjectsTooLarge: bcs.struct('WrittenObjectsTooLarge', {\n\t\tcurrentSize: bcs.u64(),\n\t\tmaxSize: bcs.u64(),\n\t}),\n\tCertificateDenied: null,\n\tSuiMoveVerificationTimedout: null,\n\tSharedObjectOperationNotAllowed: null,\n\tInputObjectDeleted: null,\n\tExecutionCancelledDueToSharedObjectCongestion: bcs.struct(\n\t\t'ExecutionCancelledDueToSharedObjectCongestion',\n\t\t{\n\t\t\tcongestedObjects: bcs.vector(Address),\n\t\t},\n\t),\n\tAddressDeniedForCoin: bcs.struct('AddressDeniedForCoin', {\n\t\taddress: Address,\n\t\tcoinType: bcs.string(),\n\t}),\n\tCoinTypeGlobalPause: bcs.struct('CoinTypeGlobalPause', { coinType: bcs.string() }),\n\tExecutionCancelledDueToRandomnessUnavailable: null,\n});\n\nconst ExecutionStatus = bcs.enum('ExecutionStatus', {\n\tSuccess: null,\n\tFailed: bcs.struct('ExecutionFailed', {\n\t\terror: ExecutionFailureStatus,\n\t\tcommand: bcs.option(bcs.u64()),\n\t}),\n});\n\nconst GasCostSummary = bcs.struct('GasCostSummary', {\n\tcomputationCost: bcs.u64(),\n\tstorageCost: bcs.u64(),\n\tstorageRebate: bcs.u64(),\n\tnonRefundableStorageFee: bcs.u64(),\n});\n\nconst Owner = bcs.enum('Owner', {\n\tAddressOwner: Address,\n\tObjectOwner: Address,\n\tShared: bcs.struct('Shared', {\n\t\tinitialSharedVersion: bcs.u64(),\n\t}),\n\tImmutable: null,\n});\n\nconst TransactionEffectsV1 = bcs.struct('TransactionEffectsV1', {\n\tstatus: ExecutionStatus,\n\texecutedEpoch: bcs.u64(),\n\tgasUsed: GasCostSummary,\n\tmodifiedAtVersions: bcs.vector(bcs.tuple([Address, bcs.u64()])),\n\tsharedObjects: bcs.vector(SuiObjectRef),\n\ttransactionDigest: ObjectDigest,\n\tcreated: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n\tmutated: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n\tunwrapped: bcs.vector(bcs.tuple([SuiObjectRef, Owner])),\n\tdeleted: bcs.vector(SuiObjectRef),\n\tunwrappedThenDeleted: bcs.vector(SuiObjectRef),\n\twrapped: bcs.vector(SuiObjectRef),\n\tgasObject: bcs.tuple([SuiObjectRef, Owner]),\n\teventsDigest: bcs.option(ObjectDigest),\n\tdependencies: bcs.vector(ObjectDigest),\n});\n\nconst VersionDigest = bcs.tuple([bcs.u64(), ObjectDigest]);\n\nconst ObjectIn = bcs.enum('ObjectIn', {\n\tNotExist: null,\n\tExist: bcs.tuple([VersionDigest, Owner]),\n});\n\nconst ObjectOut = bcs.enum('ObjectOut', {\n\tNotExist: null,\n\tObjectWrite: bcs.tuple([ObjectDigest, Owner]),\n\tPackageWrite: VersionDigest,\n});\n\nconst IDOperation = bcs.enum('IDOperation', {\n\tNone: null,\n\tCreated: null,\n\tDeleted: null,\n});\n\nconst EffectsObjectChange = bcs.struct('EffectsObjectChange', {\n\tinputState: ObjectIn,\n\toutputState: ObjectOut,\n\tidOperation: IDOperation,\n});\n\nconst UnchangedSharedKind = bcs.enum('UnchangedSharedKind', {\n\tReadOnlyRoot: VersionDigest,\n\tMutateDeleted: bcs.u64(),\n\tReadDeleted: bcs.u64(),\n\tCancelled: bcs.u64(),\n\tPerEpochConfig: null,\n});\n\nconst TransactionEffectsV2 = bcs.struct('TransactionEffectsV2', {\n\tstatus: ExecutionStatus,\n\texecutedEpoch: bcs.u64(),\n\tgasUsed: GasCostSummary,\n\ttransactionDigest: ObjectDigest,\n\tgasObjectIndex: bcs.option(bcs.u32()),\n\teventsDigest: bcs.option(ObjectDigest),\n\tdependencies: bcs.vector(ObjectDigest),\n\tlamportVersion: bcs.u64(),\n\tchangedObjects: bcs.vector(bcs.tuple([Address, EffectsObjectChange])),\n\tunchangedSharedObjects: bcs.vector(bcs.tuple([Address, UnchangedSharedKind])),\n\tauxDataDigest: bcs.option(ObjectDigest),\n});\n\nexport const TransactionEffects = bcs.enum('TransactionEffects', {\n\tV1: TransactionEffectsV1,\n\tV2: TransactionEffectsV2,\n});\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { bcs } from '@mysten/bcs';\n\nimport {\n\tAddress,\n\tAppId,\n\tArgument,\n\tCallArg,\n\tCommand,\n\tCompressedSignature,\n\tGasData,\n\tIntent,\n\tIntentMessage,\n\tIntentScope,\n\tIntentVersion,\n\tMultiSig,\n\tMultiSigPkMap,\n\tMultiSigPublicKey,\n\tObjectArg,\n\tObjectDigest,\n\tPasskeyAuthenticator,\n\tProgrammableMoveCall,\n\tProgrammableTransaction,\n\tPublicKey,\n\tSenderSignedData,\n\tSenderSignedTransaction,\n\tSharedObjectRef,\n\tStructTag,\n\tSuiObjectRef,\n\tTransactionData,\n\tTransactionDataV1,\n\tTransactionExpiration,\n\tTransactionKind,\n\tTypeTag,\n} from './bcs.js';\nimport { TransactionEffects } from './effects.js';\n\nexport type { TypeTag } from './types.js';\n\nexport { TypeTagSerializer } from './type-tag-serializer.js';\nexport { BcsType, type BcsTypeOptions } from '@mysten/bcs';\n\nconst suiBcs = {\n\t...bcs,\n\tU8: bcs.u8(),\n\tU16: bcs.u16(),\n\tU32: bcs.u32(),\n\tU64: bcs.u64(),\n\tU128: bcs.u128(),\n\tU256: bcs.u256(),\n\tULEB128: bcs.uleb128(),\n\tBool: bcs.bool(),\n\tString: bcs.string(),\n\tAddress,\n\tAppId,\n\tArgument,\n\tCallArg,\n\tCompressedSignature,\n\tGasData,\n\tIntent,\n\tIntentMessage,\n\tIntentScope,\n\tIntentVersion,\n\tMultiSig,\n\tMultiSigPkMap,\n\tMultiSigPublicKey,\n\tObjectArg,\n\tObjectDigest,\n\tProgrammableMoveCall,\n\tProgrammableTransaction,\n\tPublicKey,\n\tSenderSignedData,\n\tSenderSignedTransaction,\n\tSharedObjectRef,\n\tStructTag,\n\tSuiObjectRef,\n\tCommand,\n\tTransactionData,\n\tTransactionDataV1,\n\tTransactionExpiration,\n\tTransactionKind,\n\tTypeTag,\n\tTransactionEffects,\n\tPasskeyAuthenticator,\n};\n\nexport { suiBcs as bcs };\n", "// @ts-nocheck\n\nimport { bcs, BcsType } from \"@mysten/sui/bcs\";\nimport {\n  Transaction,\n  TransactionArgument,\n  TransactionObjectArgument,\n  TransactionObjectInput,\n} from \"@mysten/sui/transactions\";\n\nexport interface FieldsWithTypes {\n  fields: Record<string, any>;\n  type: string;\n}\n\nexport type ObjectId = string;\n\nexport type PureArg = bigint | string | number | boolean | null | TransactionArgument | Array<PureArg>;\nexport type GenericArg =\n  | TransactionObjectInput\n  | PureArg\n  | Array<TransactionObjectInput>\n  | Array<PureArg>\n  | Array<GenericArg>;\n\nexport function splitGenericParameters(str: string, genericSeparators: [string, string] = [\"<\", \">\"]) {\n  const [left, right] = genericSeparators;\n  const tok: string[] = [];\n  let word = \"\";\n  let nestedAngleBrackets = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === left) {\n      nestedAngleBrackets++;\n    }\n    if (char === right) {\n      nestedAngleBrackets--;\n    }\n    if (nestedAngleBrackets === 0 && char === \",\") {\n      tok.push(word.trim());\n      word = \"\";\n      continue;\n    }\n    word += char;\n  }\n\n  tok.push(word.trim());\n\n  return tok;\n}\n\nexport function parseTypeName(name: string): {\n  typeName: string;\n  typeArgs: string[];\n} {\n  if (typeof name !== \"string\") {\n    throw new Error(`Illegal type passed as a name of the type: ${name}`);\n  }\n\n  const [left, right] = [\"<\", \">\"];\n\n  const l_bound = name.indexOf(left);\n  const r_bound = Array.from(name).reverse().indexOf(right);\n\n  // if there are no generics - exit gracefully.\n  if (l_bound === -1 && r_bound === -1) {\n    return { typeName: name, typeArgs: [] };\n  }\n\n  // if one of the bounds is not defined - throw an Error.\n  if (l_bound === -1 || r_bound === -1) {\n    throw new Error(`Unclosed generic in name '${name}'`);\n  }\n\n  const typeName = name.slice(0, l_bound);\n  const typeArgs = splitGenericParameters(name.slice(l_bound + 1, name.length - r_bound - 1), [left, right]);\n\n  return { typeName, typeArgs };\n}\n\nexport function isTransactionArgument(arg: GenericArg): arg is TransactionArgument {\n  if (!arg || typeof arg !== \"object\" || Array.isArray(arg)) {\n    return false;\n  }\n\n  return \"GasCoin\" in arg || \"Input\" in arg || \"Result\" in arg || \"NestedResult\" in arg;\n}\n\nexport function obj(tx: Transaction, arg: TransactionObjectInput) {\n  return isTransactionArgument(arg) ? arg : tx.object(arg);\n}\n\nexport function pure(tx: Transaction, arg: PureArg, type: string): TransactionArgument {\n  if (isTransactionArgument(arg)) {\n    return obj(tx, arg);\n  }\n\n  function getBcsForType(type: string): BcsType<any> {\n    const { typeName, typeArgs } = parseTypeName(type);\n    switch (typeName) {\n      case \"bool\":\n        return bcs.Bool;\n      case \"u8\":\n        return bcs.U8;\n      case \"u16\":\n        return bcs.U16;\n      case \"u32\":\n        return bcs.U32;\n      case \"u64\":\n        return bcs.U64;\n      case \"u128\":\n        return bcs.U128;\n      case \"u256\":\n        return bcs.U256;\n      case \"address\":\n        return bcs.Address;\n      case \"0x1::string::String\":\n      case \"0x1::ascii::String\":\n        return bcs.String;\n      case \"0x2::object::ID\":\n        return bcs.Address;\n      case \"0x1::option::Option\":\n        return bcs.option(getBcsForType(typeArgs[0]));\n      case \"vector\":\n        return bcs.vector(getBcsForType(typeArgs[0]));\n      default:\n        throw new Error(`invalid primitive type ${type}`);\n    }\n  }\n\n  function hasUndefinedOrNull(items: PureArg[]) {\n    for (const item of items) {\n      if (typeof item === \"undefined\" || item === null) {\n        return true;\n      }\n\n      if (Array.isArray(item)) {\n        return hasUndefinedOrNull(item);\n      }\n    }\n\n    return false;\n  }\n\n  function consistsOnlyOfPrimitiveValues(items: PureArg[]) {\n    for (const item of items) {\n      if (!Array.isArray(item)) {\n        if (item === null) {\n          continue;\n        }\n        switch (typeof item) {\n          case \"string\":\n          case \"number\":\n          case \"bigint\":\n          case \"boolean\":\n            continue;\n          default:\n            return false;\n        }\n      }\n\n      return consistsOnlyOfPrimitiveValues(item);\n    }\n\n    return true;\n  }\n\n  function hasPrimitiveValues(items: PureArg[]) {\n    for (const item of items) {\n      if (!Array.isArray(item)) {\n        switch (typeof item) {\n          case \"string\":\n          case \"number\":\n          case \"bigint\":\n          case \"boolean\":\n            return true;\n          default:\n            continue;\n        }\n      }\n\n      return hasPrimitiveValues(item);\n    }\n\n    return false;\n  }\n\n  // handle some cases when TransactionArgument is nested within a vector or option\n  const { typeName, typeArgs } = parseTypeName(type);\n  switch (typeName) {\n    case \"0x1::option::Option\":\n      if (arg === null) {\n        return tx.pure.option(\"bool\", null); // 'bool' is arbitrary\n      }\n      if (consistsOnlyOfPrimitiveValues([arg])) {\n        return tx.pure(getBcsForType(type).serialize(arg));\n      }\n      if (hasPrimitiveValues([arg])) {\n        throw new Error(\"mixing primitive and TransactionArgument values is not supported\");\n      }\n\n      // wrap it with some\n      return tx.moveCall({\n        target: `0x1::option::some`,\n        typeArguments: [typeArgs[0]],\n        arguments: [pure(tx, arg, typeArgs[0])],\n      });\n    case \"vector\":\n      if (!Array.isArray(arg)) {\n        throw new Error(\"expected an array for vector type\");\n      }\n      if (arg.length === 0) {\n        return tx.pure(bcs.vector(bcs.Bool).serialize([])); // bcs.Bool is arbitrary\n      }\n      if (hasUndefinedOrNull(arg)) {\n        throw new Error(\"the provided array contains undefined or null values\");\n      }\n      if (consistsOnlyOfPrimitiveValues(arg)) {\n        return tx.pure(getBcsForType(type).serialize(arg));\n      }\n      if (hasPrimitiveValues(arg)) {\n        throw new Error(\"mixing primitive and TransactionArgument values is not supported\");\n      }\n\n      return tx.makeMoveVec({\n        type: typeArgs[0],\n        elements: arg as Array<TransactionObjectArgument>,\n      });\n    default:\n      return tx.pure(getBcsForType(type).serialize(arg));\n  }\n}\n\nexport function option(tx: Transaction, type: string, arg: GenericArg | null) {\n  if (isTransactionArgument(arg)) {\n    return arg;\n  }\n\n  if (typeArgIsPure(type)) {\n    return pure(tx, arg as PureArg | TransactionArgument, `0x1::option::Option<${type}>`);\n  }\n\n  if (arg === null) {\n    return tx.moveCall({\n      target: `0x1::option::none`,\n      typeArguments: [type],\n      arguments: [],\n    });\n  }\n\n  // wrap it with some\n  const val = generic(tx, type, arg);\n  return tx.moveCall({\n    target: `0x1::option::some`,\n    typeArguments: [type],\n    arguments: [val],\n  });\n}\n\nexport function generic(tx: Transaction, type: string, arg: GenericArg) {\n  if (typeArgIsPure(type)) {\n    return pure(tx, arg as PureArg | TransactionArgument, type);\n  } else {\n    const { typeName, typeArgs } = parseTypeName(type);\n    if (typeName === \"vector\" && Array.isArray(arg)) {\n      const itemType = typeArgs[0];\n\n      return tx.makeMoveVec({\n        type: itemType,\n        elements: arg.map((item) => obj(tx, item as TransactionObjectInput)) as Array<TransactionObjectArgument>,\n      });\n    } else {\n      return obj(tx, arg as TransactionObjectInput);\n    }\n  }\n}\n\nexport function vector(tx: Transaction, itemType: string, items: Array<GenericArg> | TransactionArgument) {\n  if (typeof items === \"function\") {\n    throw new Error(\"Transaction plugins are not supported\");\n  }\n\n  if (typeArgIsPure(itemType)) {\n    return pure(tx, items as PureArg, `vector<${itemType}>`);\n  } else if (isTransactionArgument(items)) {\n    return items;\n  } else {\n    const { typeName: itemTypeName, typeArgs: itemTypeArgs } = parseTypeName(itemType);\n    if (itemTypeName === \"0x1::option::Option\") {\n      const elements = items.map((item) => option(tx, itemTypeArgs[0], item)) as Array<TransactionObjectArgument>;\n      return tx.makeMoveVec({\n        type: itemType,\n        elements,\n      });\n    }\n\n    return tx.makeMoveVec({\n      type: itemType,\n      elements: items as Array<TransactionObjectArgument>,\n    });\n  }\n}\n\nexport function typeArgIsPure(type: string): boolean {\n  const { typeName, typeArgs } = parseTypeName(type);\n  switch (typeName) {\n    case \"bool\":\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n    case \"address\":\n    case \"signer\":\n      return true;\n    case \"vector\":\n      return typeArgIsPure(typeArgs[0]);\n    case \"0x1::string::String\":\n    case \"0x1::ascii::String\":\n    case \"0x2::object::ID\":\n      return true;\n    case \"0x1::option::Option\":\n      return typeArgIsPure(typeArgs[0]);\n    default:\n      return false;\n  }\n}\n\nexport function compressSuiAddress(addr: string): string {\n  // remove leading zeros\n  const stripped = addr.split(\"0x\").join(\"\");\n  for (let i = 0; i < stripped.length; i++) {\n    if (stripped[i] !== \"0\") {\n      return `0x${stripped.substring(i)}`;\n    }\n  }\n  return \"0x0\";\n}\n\n// Recursively removes leading zeros from a type.\n// e.g. `0x00000002::module::Name<0x00001::a::C>` -> `0x2::module::Name<0x1::a::C>`\nexport function compressSuiType(type: string): string {\n  const { typeName, typeArgs } = parseTypeName(type);\n  switch (typeName) {\n    case \"bool\":\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n    case \"address\":\n    case \"signer\":\n      return typeName;\n    case \"vector\":\n      return `vector<${compressSuiType(typeArgs[0])}>`;\n    default: {\n      const tok = typeName.split(\"::\");\n      tok[0] = compressSuiAddress(tok[0]);\n      const compressedName = tok.join(\"::\");\n      if (typeArgs.length > 0) {\n        return `${compressedName}<${typeArgs.map((typeArg) => compressSuiType(typeArg)).join(\",\")}>`;\n      } else {\n        return compressedName;\n      }\n    }\n  }\n}\n\nexport function composeSuiType(typeName: string, ...typeArgs: string[]): string {\n  if (typeArgs.length > 0) {\n    return `${typeName}<${typeArgs.join(\", \")}>`;\n  } else {\n    return typeName;\n  }\n}\n", "// @ts-nocheck\nimport { compressSuiType } from \"../_framework/util\";\n\nclass PackageAddress {\n  private static $PACKAGE_ID = \"\";\n  private static $PUBLISHED_AT = \"\";\n  private static $PKG_V = [];\n\n  get PACKAGE_ID() {\n    return compressSuiType(PackageAddress.$PACKAGE_ID);\n  }\n\n  get PUBLISHED_AT() {\n    return compressSuiType(PackageAddress.$PUBLISHED_AT);\n  }\n\n  get PKG_V1() {\n    return compressSuiType(PackageAddress.$PKG_V[1]);\n  }\n\n  setPackageId(address: string): void {\n    PackageAddress.$PACKAGE_ID = address;\n  }\n\n  setPublishedAt(address: string): void {\n    PackageAddress.$PUBLISHED_AT = address;\n  }\n\n  setPkgV(v: number, address: string): void {\n    PackageAddress.$PKG_V[v] = address;\n  }\n\n  setAddress(address: string, pkgV1?: string) {\n    PackageAddress.$PACKAGE_ID = address;\n    PackageAddress.$PUBLISHED_AT = address;\n    PackageAddress.$PKG_V[1] = pkgV1 || address;\n  }\n}\n\nconst packageAddress = new PackageAddress();\nexport = packageAddress;\n", "// @ts-nocheck\nimport { compressSuiType } from \"../_framework/util\";\n\nclass PackageAddress {\n  private static $PACKAGE_ID = \"\";\n  private static $PUBLISHED_AT = \"\";\n  private static $PKG_V = [];\n  get PACKAGE_ID() {\n    return compressSuiType(PackageAddress.$PACKAGE_ID);\n  }\n  get PUBLISHED_AT() {\n    return compressSuiType(PackageAddress.$PUBLISHED_AT);\n  }\n  get PKG_V1() {\n    return compressSuiType(PackageAddress.$PKG_V[1]);\n  }\n  setPackageId(address: string): void {\n    PackageAddress.$PACKAGE_ID = address;\n  }\n  setPublishedAt(address: string): void {\n    PackageAddress.$PUBLISHED_AT = address;\n  }\n  setPkgV(v: number, address: string): void {\n    PackageAddress.$PKG_V[v] = address;\n  }\n  setAddress(address: string, pkgV1?: string) {\n    PackageAddress.$PACKAGE_ID = address;\n    PackageAddress.$PUBLISHED_AT = address;\n    PackageAddress.$PKG_V[1] = pkgV1 || address;\n  }\n}\nconst packageAddress = new PackageAddress();\nexport = packageAddress;\n", "// @ts-nocheck\nimport { compressSuiType } from \"../_framework/util\";\n\nclass PackageAddress {\n  private static $PACKAGE_ID = \"\";\n  private static $PUBLISHED_AT = \"\";\n  private static $PKG_V = [];\n  get PACKAGE_ID() {\n    return compressSuiType(PackageAddress.$PACKAGE_ID);\n  }\n  get PUBLISHED_AT() {\n    return compressSuiType(PackageAddress.$PUBLISHED_AT);\n  }\n  get PKG_V1() {\n    return compressSuiType(PackageAddress.$PKG_V[1]);\n  }\n  setPackageId(address: string): void {\n    PackageAddress.$PACKAGE_ID = address;\n  }\n  setPublishedAt(address: string): void {\n    PackageAddress.$PUBLISHED_AT = address;\n  }\n  setPkgV(v: number, address: string): void {\n    PackageAddress.$PKG_V[v] = address;\n  }\n  setAddress(address: string, pkgV1?: string) {\n    PackageAddress.$PACKAGE_ID = address;\n    PackageAddress.$PUBLISHED_AT = address;\n    PackageAddress.$PKG_V[1] = pkgV1 || address;\n  }\n}\nconst packageAddress = new PackageAddress();\nexport = packageAddress;\n", "import { BigSource } from \"big.js\";\nimport { AdditionalBasicChainProperties } from \"./chains/models\";\nimport { mainnet } from \"./configs\";\nimport {\n  AmountFormat,\n  AmountFormatted,\n  AmountsAndGasFeeOptions,\n  BridgeService,\n  ChainDetailsMap,\n  CheckAddressResponse,\n  ExtraGasMaxLimitResponse,\n  GasBalanceResponse,\n  GasFeeOptions,\n  GetNativeTokenBalanceParams,\n  GetTokenBalanceParams,\n  LiquidityPoolService,\n  Messenger,\n  PendingStatusInfoResponse,\n  PoolInfo,\n  Provider,\n  SendAmountDetails,\n  SwapAndBridgeCalculationData,\n  TokenWithChainDetails,\n  TransferStatusResponse,\n} from \"./models\";\nimport { AllbridgeCoreSdkService, NodeRpcUrlsConfig } from \"./services\";\nimport { CctpParams } from \"./services/bridge/sol\";\nimport { DefaultUtils, Utils } from \"./utils\";\n\nexport * from \"./configs\";\nexport * from \"./models\";\n\nexport interface AllbridgeCoreSdkOptions {\n  coreApiUrl: string;\n  /**\n   * A set of query parameters to be added to all requests to the Core API.\n   */\n  coreApiQueryParams?: Record<string, string>;\n  /**\n   * A set of headers to be added to all requests to the Core API.\n   */\n  coreApiHeaders?: Record<string, string>;\n  /**\n   * Jupiter Swap Api</br>\n   * Default: https://lite-api.jup.ag/swap/v1</br>\n   * {@link https://dev.jup.ag/docs/swap-api/}\n   */\n  jupiterUrl: string;\n  /**\n   * Jupiter Api Key Header</br>\n   * {@link https://dev.jup.ag/docs/api-setup}\n   */\n  jupiterApiKeyHeader?: string;\n  /**\n   * Jupiter v6 'maxAccounts' parameter</br>\n   * Rough estimate of the max accounts to be used for the quote, so that you can compose with your own accounts</br>\n   * {@link https://station.jup.ag/docs/apis/swap-api#using-maxaccounts}\n   */\n  jupiterMaxAccounts?: number;\n  wormholeMessengerProgramId: string;\n  solanaLookUpTable: string;\n  sorobanNetworkPassphrase: string;\n  /**\n   * Optional. Will be used in methods</br>\n   * {@link LiquidityPoolService.getPoolInfoFromChain} and {@link LiquidityPoolService.getAmountToBeWithdrawn}</br>\n   * to fetch information from the blockchain with fewer HTTP requests using JSON-RPC API\n   */\n  tronJsonRpc?: string;\n  cctpParams: CctpParams;\n  /**\n   * The number of seconds that pool information taken from the chain will be cached.\n   *\n   * @type {number}\n   */\n  cachePoolInfoChainSec: number;\n\n  /**\n   * @internal\n   * Optional additional properties to merge with the default properties.\n   */\n  additionalChainsProperties?: Record<string, AdditionalBasicChainProperties>;\n}\n\n/**\n * Type representing RPC node URLs for different blockchain chains.</br>\n * Provide node RPC URL for chain connection you intend to communicate with</br>\n * - required for SOL, TRX chains</br>\n * - optional for EVM chains -- you can interact by passing a {@link Provider} that will be used to communicate with the chain</br>\n * @typedef {Record<string, string>} NodeRpcUrls\n * @property {string} chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n * @property {string} rpcUrl - The RPC node URL for the specified chain.\n */\nexport type NodeRpcUrls = Record<string, string>;\n\n/**\n * @deprecated Use {@link NodeRpcUrls}\n */\nexport interface NodeUrlsConfig {\n  solanaRpcUrl: string;\n  tronRpcUrl: string;\n}\n\n/**\n * @deprecated Use {@link NodeRpcUrls}\n */\nfunction isNodeUrlsConfig(nodeUrls: NodeUrlsConfig | NodeRpcUrls): nodeUrls is NodeUrlsConfig {\n  return \"solanaRpcUrl\" in nodeUrls;\n}\n\nexport class AllbridgeCoreSdk {\n  readonly params: AllbridgeCoreSdkOptions;\n\n  bridge: BridgeService;\n  pool: LiquidityPoolService;\n  utils: Utils;\n\n  private service: AllbridgeCoreSdkService;\n\n  /**\n   * Initializes the SDK object.\n   * @param nodeUrls node rpc urls for full functionality\n   * @param params\n   * Optional.\n   * If not defined, the default {@link mainnet} parameters are used.\n   */\n  constructor(nodeUrls: NodeUrlsConfig | NodeRpcUrls, params: AllbridgeCoreSdkOptions = mainnet) {\n    let nodeRpcUrlsConfig: NodeRpcUrlsConfig;\n    if (isNodeUrlsConfig(nodeUrls)) {\n      nodeRpcUrlsConfig = new NodeRpcUrlsConfig({ SOL: nodeUrls.solanaRpcUrl, TRX: nodeUrls.tronRpcUrl });\n    } else {\n      nodeRpcUrlsConfig = new NodeRpcUrlsConfig(nodeUrls);\n    }\n    this.service = new AllbridgeCoreSdkService(nodeRpcUrlsConfig, params);\n    this.bridge = this.service.bridge;\n    this.pool = this.service.pool;\n    this.utils = new DefaultUtils(nodeRpcUrlsConfig, params);\n    this.params = params;\n  }\n\n  /**\n   * Returns {@link ChainDetailsMap} containing a list of supported tokens groped by chain.\n   *\n   * @param type - A string value which specifies ChainDetailsMap to retrieve.\n   *               Can be either 'swap' for send or 'pool' for liquidity pools setup.\n   *               Defaults to 'swap'.\n   */\n  async chainDetailsMap(type: \"swap\" | \"pool\" = \"swap\"): Promise<ChainDetailsMap> {\n    return this.service.chainDetailsMap(type);\n  }\n\n  /**\n   * Returns a list of supported {@link TokenWithChainDetails | tokens}.\n   *\n   * @param type - A string value which specifies a set of tokens to retrieve.\n   *               Can be either 'swap' for tokens to send or 'pool' for liquidity pools operations.\n   *               Defaults to 'swap'.\n   * @returns A promise that resolves to an array of {@link TokenWithChainDetails}.\n   */\n  async tokens(type: \"swap\" | \"pool\" = \"swap\"): Promise<TokenWithChainDetails[]> {\n    return this.service.tokens(type);\n  }\n\n  /**\n   * Returns a list of supported {@link TokenWithChainDetails | tokens} on the selected chain.\n   * @param chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n   * @param type - A string value which specifies a set of tokens to retrieve.\n   *               Can be either 'swap' for tokens to send or 'pool' for liquidity pools operations.\n   *               Defaults to 'swap'.\n   */\n  async tokensByChain(chainSymbol: string, type: \"swap\" | \"pool\" = \"swap\"): Promise<TokenWithChainDetails[]> {\n    return this.service.tokensByChain(chainSymbol, type);\n  }\n\n  /**\n   * Fetches information about tokens transfer by chosen chainSymbol and transaction Id from the Allbridge Core API.\n   * @param chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n   * @param txId\n   */\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return this.service.getTransferStatus(chainSymbol, txId);\n  }\n\n  /**\n   * Get gas balance\n   * @param chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n   * @param address\n   */\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.service.getGasBalance(chainSymbol, address);\n  }\n\n  /**\n   * Check address and show gas balance\n   * @deprecated\n   * @param chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n   * @param recipientAddress\n   * @param tokenAddress\n   */\n  async checkAddress(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    chainSymbol: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    recipientAddress: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    tokenAddress?: string\n  ): Promise<CheckAddressResponse> {\n    return await this.service.checkAddress();\n  }\n\n  /**\n   * Returns information about pending transactions for the same destination chain and the amount of tokens can be received as a result of transfer considering pending transactions.\n   * @param amount the amount of tokens that will be sent\n   * @param amountFormat amount format\n   * @param sourceToken selected token transfer from\n   * @param destToken selected token transfer to\n   * @returns range of possible amount based on already pending transactions\n   */\n  async getPendingStatusInfo(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<PendingStatusInfoResponse> {\n    return this.service.getPendingStatusInfo(amount, amountFormat, sourceToken, destToken);\n  }\n\n  /**\n   * Get token balance\n   * @param params\n   * @param provider\n   * @returns Token balance\n   */\n  async getTokenBalance(params: GetTokenBalanceParams, provider?: Provider): Promise<string> {\n    return this.service.getTokenBalance(params, provider);\n  }\n\n  /**\n   * Get native (gas) token balance\n   * @param params\n   * @param provider\n   * @returns Token balance\n   */\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams, provider?: Provider): Promise<AmountFormatted> {\n    return this.service.getNativeTokenBalance(params, provider);\n  }\n\n  /**\n   * @deprecated\n   * Calculates the percentage of fee from the initial amount that is charged when swapping from the selected source chain.\n   * (Does not include fee related to the destination chain. Does not include gas fee)\n   * @param amountFloat initial amount of tokens to swap\n   * @param sourceChainToken selected token on the source chain\n   * @returns fee percent\n   */\n  async calculateFeePercentOnSourceChain(\n    amountFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails\n  ): Promise<number> {\n    return this.service.calculateFeePercentOnSourceChain(amountFloat, sourceChainToken);\n  }\n\n  /**\n   * @deprecated\n   * Calculates the percentage of fee that is charged when swapping to the selected destination chain. The destination chain fee percent applies to the amount after the source chain fee.\n   * (Does not include fee related to the source chain. Does not include gas fee)\n   * @see {@link calculateFeePercentOnSourceChain}\n   * @param amountFloat initial amount of tokens to swap\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @returns fee percent\n   */\n  async calculateFeePercentOnDestinationChain(\n    amountFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails\n  ): Promise<number> {\n    return this.service.calculateFeePercentOnDestinationChain(amountFloat, sourceChainToken, destinationChainToken);\n  }\n\n  /**\n   * Calculates the amount of tokens to be received as a result of transfer\n   * and fetches {@link GasFeeOptions} which contains available ways to pay the gas fee.\n   * @param amountToSendFloat the amount of tokens that will be sent\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger\n   */\n  async getAmountToBeReceivedAndGasFeeOptions(\n    amountToSendFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<AmountsAndGasFeeOptions> {\n    return this.service.getAmountToBeReceivedAndGasFeeOptions(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      messenger\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to send based on requested tokens amount be received as a result of transfer.\n   * and fetches {@link GasFeeOptions} which contains available ways to pay the gas fee.\n   * @param amountToBeReceivedFloat the amount of tokens that should be received\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger\n   */\n  async getAmountToSendAndGasFeeOptions(\n    amountToBeReceivedFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<AmountsAndGasFeeOptions> {\n    return this.service.getAmountToSendAndGasFeeOptions(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      messenger\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to be received as a result of transfer.\n   * @param amountToSendFloat the amount of tokens that will be sent\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger Optional. selected messenger\n   */\n  async getAmountToBeReceived(\n    amountToSendFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    /**\n     * The Messengers for different routes.\n     * Optional.\n     * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n     */\n    messenger?: Messenger\n  ): Promise<string> {\n    return this.service.getAmountToBeReceived(amountToSendFloat, sourceChainToken, destinationChainToken, messenger);\n  }\n\n  /**\n   * Calculates the amount of tokens to be received as a result of transfer based on actual blockchain pool state.\n   * @param amountToSendFloat the amount of tokens that will be sent\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger Optional. selected messenger\n   * @param sourceProvider Optional. source chain Provider\n   * @param destinationProvider Optional. destination chain Provider\n   */\n  async getAmountToBeReceivedFromChain(\n    amountToSendFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    /**\n     * The Messengers for different routes.\n     * Optional.\n     * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n     */\n    messenger?: Messenger,\n    sourceProvider?: Provider,\n    destinationProvider?: Provider\n  ): Promise<string> {\n    return this.service.getAmountToBeReceivedFromChain(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      messenger,\n      sourceProvider,\n      destinationProvider\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to be received as a result of transfer based on passed pool state.\n   * @param amountToSendFloat the amount of tokens that will be sent\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param sourcePool source token pool state\n   * @param destinationPool destination token pool state\n   * @param messenger Optional. selected messenger\n   */\n  getAmountToBeReceivedFromPools(\n    amountToSendFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    sourcePool: PoolInfo,\n    destinationPool: PoolInfo,\n    messenger?: Messenger\n  ): string {\n    return this.service.getAmountToBeReceivedFromPools(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destinationPool,\n      messenger\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to send based on requested tokens amount be received as a result of transfer.\n   * @param amountToBeReceivedFloat the amount of tokens that should be received\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger Optional. selected messenger\n   */\n  async getAmountToSend(\n    amountToBeReceivedFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    /**\n     * The Messengers for different routes.\n     * Optional.\n     * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n     */\n    messenger?: Messenger\n  ): Promise<string> {\n    return this.service.getAmountToSend(amountToBeReceivedFloat, sourceChainToken, destinationChainToken, messenger);\n  }\n\n  /**\n   * Calculates the amount of tokens to send based on requested tokens amount be received as a result of transfer based on actual blockchain pool state.\n   * @param amountToBeReceivedFloat the amount of tokens that should be received\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger Optional. selected messenger\n   * @param sourceProvider Optional. source chain Provider\n   * @param destinationProvider Optional. destination chain Provider\n   */\n  async getAmountToSendFromChain(\n    amountToBeReceivedFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    /**\n     * The Messengers for different routes.\n     * Optional.\n     * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n     */\n    messenger?: Messenger,\n    sourceProvider?: Provider,\n    destinationProvider?: Provider\n  ): Promise<string> {\n    return this.service.getAmountToSendFromChain(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      messenger,\n      sourceProvider,\n      destinationProvider\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to send based on requested tokens amount be received as a result of transfer based on passed pool state.\n   * @param amountToBeReceivedFloat the amount of tokens that should be received\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param sourcePool source token pool state\n   * @param destinationPool destination token pool state\n   * @param messenger Optional. selected messenger\n   */\n  getAmountToSendFromPools(\n    amountToBeReceivedFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    sourcePool: PoolInfo,\n    destinationPool: PoolInfo,\n    messenger?: Messenger\n  ): string {\n    return this.service.getAmountToSendFromPools(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destinationPool,\n      messenger\n    );\n  }\n\n  /**\n   * Fetches possible ways to pay the transfer gas fee.\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger\n   * @returns {@link GasFeeOptions}\n   */\n  async getGasFeeOptions(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<GasFeeOptions> {\n    return this.service.getGasFeeOptions(sourceChainToken, destinationChainToken, messenger);\n  }\n\n  /**\n   * Gets the average time in ms to complete a transfer for given tokens and messenger.\n   * @param sourceChainToken selected token on the source chain.\n   * @param destinationChainToken selected token on the destination chain.\n   * @param messenger\n   * @returns Average transfer time in milliseconds or null if a given combination of tokens and messenger is not supported.\n   */\n  getAverageTransferTime(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): number | null {\n    return this.service.getAverageTransferTime(sourceChainToken, destinationChainToken, messenger);\n  }\n\n  /**\n   * Gets information about the poolInfo by token\n   * @param token\n   * @returns poolInfo\n   */\n  async getPoolInfoByToken(token: TokenWithChainDetails): Promise<PoolInfo> {\n    return this.service.getPoolInfoByToken(token);\n  }\n\n  /**\n   * Forces refresh of cached information about the state of liquidity pools.\n   * Outdated cache leads to calculated amounts being less accurate.\n   * The cache is invalidated at regular intervals, but it can be forced to be refreshed by calling this method.+\n   *\n   * @param tokens if present, the corresponding liquidity pools will be updated\n   */\n  async refreshPoolInfo(tokens?: TokenWithChainDetails | TokenWithChainDetails[]): Promise<void> {\n    return this.service.refreshPoolInfo(tokens);\n  }\n\n  /**\n   * Convert APR to percentage view\n   * @param apr\n   * @returns aprPercentageView\n   */\n  aprInPercents(apr: string): string {\n    return this.service.aprInPercents(apr);\n  }\n\n  /**\n   * Get possible limit of extra gas amount.\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @returns {@link ExtraGasMaxLimitResponse}\n   */\n  async getExtraGasMaxLimits(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails\n  ): Promise<ExtraGasMaxLimitResponse> {\n    return this.service.getExtraGasMaxLimits(sourceChainToken, destinationChainToken);\n  }\n\n  /**\n   * @param amount - amount\n   * @param amountFormat - AmountFormat\n   * @param sourceToken - selected token on the source chain\n   * @return virtual amount\n   */\n  async getVUsdFromAmount(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails\n  ): Promise<AmountFormatted> {\n    return this.service.getVUsdFromAmount(amount, amountFormat, sourceToken);\n  }\n\n  /**\n   * @param vUsdAmount - amount of vUsd, int format\n   * @param destToken selected token on the destination chain\n   * @return amount of destToken\n   */\n  async getAmountFromVUsd(vUsdAmount: string, destToken: TokenWithChainDetails): Promise<AmountFormatted> {\n    return this.service.getAmountFromVUsd(vUsdAmount, destToken);\n  }\n\n  /**\n   * @deprecated Use {@link getSendAmountDetails}\n   * @param amountInTokenPrecision\n   * @param sourceToken\n   * @param destToken\n   */\n  async swapAndBridgeFeeCalculation(\n    amountInTokenPrecision: string,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SwapAndBridgeCalculationData> {\n    return this.service.swapAndBridgeFeeCalculation(amountInTokenPrecision, sourceToken, destToken);\n  }\n\n  /**\n   * @deprecated Use {@link getAmountToBeReceived} and then {@link getSendAmountDetails}\n   * @param amountInTokenPrecision\n   * @param sourceToken\n   * @param destToken\n   */\n  async swapAndBridgeFeeCalculationReverse(\n    amountInTokenPrecision: string,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SwapAndBridgeCalculationData> {\n    return this.service.swapAndBridgeFeeCalculationReverse(amountInTokenPrecision, sourceToken, destToken);\n  }\n\n  /**\n   *  Show amount changes (fee and amount adjustment) during send through pools on source and destination chains\n   */\n  async getSendAmountDetails(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SendAmountDetails> {\n    return this.service.getSendAmountDetails(amount, amountFormat, sourceToken, destToken);\n  }\n}\n", "import { AllbridgeCoreSdkOptions, NodeRpcUrls, NodeUrlsConfig } from \"../index\";\n\nexport const mainnet: AllbridgeCoreSdkOptions = {\n  coreApiUrl: \"https://core.api.allbridgecoreapi.net\",\n  coreApiQueryParams: {},\n  coreApiHeaders: {},\n  jupiterUrl: \"https://lite-api.jup.ag/swap/v1\",\n  wormholeMessengerProgramId: \"worm2ZoG2kUd4vFXhvjh93UUH596ayRfgQ2MgjNMTth\",\n  solanaLookUpTable: \"2JcBAEVnAwVo4u8d61iqgHPrzZuugur7cVTjWubsVLHj\",\n  sorobanNetworkPassphrase: \"Public Global Stellar Network ; September 2015\",\n  tronJsonRpc: \"https://api.trongrid.io/jsonrpc\",\n  cctpParams: {\n    cctpTransmitterProgramId: \"CCTPmbSD7gX1bxKPAmg77w8oFzNFpaQiQUWD43TKaecd\",\n    cctpTokenMessengerMinter: \"CCTPiPYPc6AsJuwueEnWgSgucamXDZwBd53dQ11YiKX3\",\n    cctpDomains: { ETH: 0, AVA: 1, OPT: 2, ARB: 3, SOL: 5, BAS: 6, POL: 7, SUI: 8 },\n  },\n  cachePoolInfoChainSec: 20,\n};\n\n/**\n *  This is default rpc urls for Solana and Tron,<p/> Override and use your own for proper and stable work\n *  @deprecated use {@link nodeRpcUrlsDefault}\n */\nexport const nodeUrlsDefault: NodeUrlsConfig = {\n  solanaRpcUrl: \"https://api.mainnet-beta.solana.com\",\n  tronRpcUrl: \"https://api.trongrid.io\",\n};\n\n/**\n *  This is default rpc urls for Solana and Tron,<p/> Override and use your own for proper and stable work\n */\nexport const nodeRpcUrlsDefault: NodeRpcUrls = {\n  SOL: \"https://api.mainnet-beta.solana.com\",\n  TRX: \"https://api.trongrid.io\",\n  SRB: \"https://rpc.stellar.org:443\",\n  STLR: \"https://horizon.stellar.org\",\n  SUI: \"https://fullnode.mainnet.sui.io\",\n};\n", "import { Big } from \"big.js\";\nimport { Chains } from \"../chains\";\nimport { ApiClientImpl } from \"../client/core-api/api-client\";\nimport { ApiClientCaching } from \"../client/core-api/api-client-caching\";\nimport {\n  AddressStatus,\n  CheckAddressResponse,\n  GasBalanceResponse,\n  Messenger,\n  PendingInfoDTO,\n  TransferStatusResponse,\n} from \"../client/core-api/core-api.model\";\nimport { AllbridgeCoreClientImpl } from \"../client/core-api/core-client-base\";\nimport { AllbridgeCoreClientFiltered, AllbridgeCoreClientFilteredImpl } from \"../client/core-api/core-client-filtered\";\nimport { AllbridgeCoreClientPoolInfoCaching } from \"../client/core-api/core-client-pool-info-caching\";\nimport { mainnet } from \"../configs\";\nimport { AllbridgeCoreSdkOptions, BasicChainProperties, NodeRpcUrls, SdkError } from \"../index\";\nimport {\n  AmountFormat,\n  AmountFormatted,\n  AmountsAndGasFeeOptions,\n  CCTPDoesNotSupportedError,\n  ExtraGasMaxLimitResponse,\n  GasFeeOptions,\n  GetTokenBalanceParams,\n  InsufficientPoolLiquidityError,\n  NodeRpcUrlNotInitializedError,\n  PendingStatusInfoResponse,\n  Provider,\n  SendAmountDetails,\n  SwapAndBridgeCalculationData,\n} from \"../models\";\nimport { ChainDetailsMap, PoolInfo, PoolKeyObject, TokenWithChainDetails } from \"../tokens-info\";\nimport {\n  aprInPercents,\n  convertAmountPrecision,\n  convertFloatAmountToInt,\n  convertIntAmountToFloat,\n  fromSystemPrecision,\n  getFeePercent,\n  getSwapFromVUsdPoolInfo,\n  swapFromVUsd,\n  swapFromVUsdReverse,\n  swapToVUsd,\n  swapToVUsdReverse,\n} from \"../utils/calculation\";\nimport { SYSTEM_PRECISION } from \"../utils/calculation/constants\";\nimport { getSendAmountDetails } from \"../utils/calculation/swap-and-bridge-details\";\nimport {\n  swapAndBridgeFeeCalculation,\n  swapAndBridgeFeeCalculationReverse,\n} from \"../utils/calculation/swap-and-bridge-fee-calc\";\nimport { getPoolInfoByToken, validateAmountDecimals, validateAmountGtZero } from \"../utils/utils\";\nimport { BridgeService, DefaultBridgeService } from \"./bridge\";\nimport { GetNativeTokenBalanceParams } from \"./bridge/models\";\nimport { getExtraGasMaxLimits, getGasFeeOptions } from \"./bridge/utils\";\nimport { DefaultLiquidityPoolService, LiquidityPoolService } from \"./liquidity-pool\";\nimport { DefaultTokenService, TokenService } from \"./token\";\n\nexport class NodeRpcUrlsConfig {\n  constructor(private nodeRpcUrls: NodeRpcUrls) {}\n\n  getNodeRpcUrl(chainSymbol: string): string {\n    const nodeRpcUrl = this.nodeRpcUrls[chainSymbol];\n    if (nodeRpcUrl !== undefined) {\n      return nodeRpcUrl;\n    } else {\n      throw new NodeRpcUrlNotInitializedError(chainSymbol);\n    }\n  }\n}\n\nexport class AllbridgeCoreSdkService {\n  private readonly api: AllbridgeCoreClientFiltered;\n\n  private readonly tokenService: TokenService;\n\n  readonly params: AllbridgeCoreSdkOptions;\n\n  bridge: BridgeService;\n  pool: LiquidityPoolService;\n\n  constructor(nodeRpcUrlsConfig: NodeRpcUrlsConfig, params: AllbridgeCoreSdkOptions = mainnet) {\n    Chains.addChainsProperties(params.additionalChainsProperties as Record<string, BasicChainProperties>);\n    const apiClient = new ApiClientImpl(params);\n    const apiClientCaching = new ApiClientCaching(apiClient);\n    const coreClient = new AllbridgeCoreClientImpl(apiClientCaching);\n    const coreClientPoolInfoCaching = new AllbridgeCoreClientPoolInfoCaching(coreClient);\n    this.api = new AllbridgeCoreClientFilteredImpl(coreClientPoolInfoCaching, params);\n    this.tokenService = new DefaultTokenService(this.api, nodeRpcUrlsConfig, params);\n    this.bridge = new DefaultBridgeService(this.api, nodeRpcUrlsConfig, params, this.tokenService);\n    this.pool = new DefaultLiquidityPoolService(this.api, nodeRpcUrlsConfig, params, this.tokenService);\n    this.params = params;\n  }\n\n  async chainDetailsMap(type: \"swap\" | \"pool\"): Promise<ChainDetailsMap> {\n    return this.api.getChainDetailsMap(type);\n  }\n\n  async tokens(type: \"swap\" | \"pool\"): Promise<TokenWithChainDetails[]> {\n    return this.api.tokens(type);\n  }\n\n  async tokensByChain(chainSymbol: string, type: \"swap\" | \"pool\"): Promise<TokenWithChainDetails[]> {\n    const map = await this.api.getChainDetailsMap(type);\n    const chainDetails = map[chainSymbol];\n    if (!chainDetails) {\n      return [];\n    }\n    return chainDetails.tokens;\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return this.api.getTransferStatus(chainSymbol, txId);\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.api.getGasBalance(chainSymbol, address);\n  }\n\n  async checkAddress(): Promise<CheckAddressResponse> {\n    return new Promise((resolve) => {\n      resolve({\n        status: AddressStatus.OK,\n        gasBalance: null,\n      });\n    });\n  }\n\n  async getPendingStatusInfo(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<PendingStatusInfoResponse> {\n    validateAmountGtZero(amount);\n    let amountInTokenPrecision;\n    if (amountFormat == AmountFormat.FLOAT) {\n      validateAmountDecimals(\"amount\", amount, sourceToken.decimals);\n      amountInTokenPrecision = convertFloatAmountToInt(amount, sourceToken.decimals).toFixed();\n    } else {\n      amountInTokenPrecision = amount;\n    }\n\n    const vUsdAmountInt = swapToVUsd(\n      amountInTokenPrecision,\n      sourceToken,\n      await getPoolInfoByToken(this.api, sourceToken)\n    );\n    const destPoolInfo = await getPoolInfoByToken(this.api, destToken);\n    const amountResultIntFormatted: AmountFormatted = this.getAmountFromVUsdFormatted(\n      vUsdAmountInt,\n      destToken,\n      destPoolInfo\n    );\n\n    let pendingInfoDTO: PendingInfoDTO | undefined;\n    const pendingInfo = await this.api.getPendingInfo();\n    for (const tokenAddress in pendingInfo[destToken.chainSymbol]) {\n      const info = pendingInfo[destToken.chainSymbol];\n      if (!info) {\n        throw new SdkError(\"Cannot find pending info for \" + destToken.chainSymbol);\n      }\n      pendingInfoDTO = info[tokenAddress];\n    }\n    if (pendingInfoDTO) {\n      const destPoolAfterPending = getSwapFromVUsdPoolInfo(pendingInfoDTO.totalSentAmount, destPoolInfo);\n      const amountResultIntAfterPendingFormatted: AmountFormatted = this.getAmountFromVUsdFormatted(\n        vUsdAmountInt,\n        destToken,\n        destPoolAfterPending\n      );\n\n      let estimatedAmount: { min: AmountFormatted; max: AmountFormatted };\n      if (Big(amountResultIntAfterPendingFormatted.int).gt(amountResultIntFormatted.int)) {\n        estimatedAmount = { min: amountResultIntFormatted, max: amountResultIntAfterPendingFormatted };\n      } else {\n        estimatedAmount = { min: amountResultIntAfterPendingFormatted, max: amountResultIntFormatted };\n      }\n\n      return {\n        pendingTxs: pendingInfoDTO.pendingTxs,\n        pendingAmount: {\n          [AmountFormat.INT]: convertAmountPrecision(\n            pendingInfoDTO.totalSentAmount,\n            SYSTEM_PRECISION,\n            destToken.decimals\n          ).toFixed(0),\n          [AmountFormat.FLOAT]: convertIntAmountToFloat(pendingInfoDTO.totalSentAmount, SYSTEM_PRECISION).toFixed(),\n        },\n        estimatedAmount,\n      };\n    }\n    return {\n      pendingTxs: 0,\n      pendingAmount: {\n        [AmountFormat.INT]: \"0\",\n        [AmountFormat.FLOAT]: \"0\",\n      },\n      estimatedAmount: {\n        min: amountResultIntFormatted,\n        max: amountResultIntFormatted,\n      },\n    };\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams, provider?: Provider): Promise<string> {\n    return this.tokenService.getTokenBalance(params, provider);\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams, provider?: Provider): Promise<AmountFormatted> {\n    return this.tokenService.getNativeTokenBalance(params, provider);\n  }\n\n  async calculateFeePercentOnSourceChain(\n    amountFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails\n  ): Promise<number> {\n    validateAmountGtZero(amountFloat);\n    validateAmountDecimals(\"amountFloat\", amountFloat, sourceChainToken.decimals);\n    const amountInt = convertFloatAmountToInt(amountFloat, sourceChainToken.decimals);\n    if (amountInt.eq(0)) {\n      return 0;\n    }\n    const vUsdInSystemPrecision = swapToVUsd(\n      amountInt,\n      sourceChainToken,\n      await getPoolInfoByToken(this.api, sourceChainToken)\n    );\n    const vUsdInSourcePrecision = fromSystemPrecision(vUsdInSystemPrecision, sourceChainToken.decimals);\n    return getFeePercent(amountInt, vUsdInSourcePrecision);\n  }\n\n  async calculateFeePercentOnDestinationChain(\n    amountFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails\n  ): Promise<number> {\n    validateAmountGtZero(amountFloat);\n    validateAmountDecimals(\"amountFloat\", amountFloat, sourceChainToken.decimals);\n    const amountInt = convertFloatAmountToInt(amountFloat, sourceChainToken.decimals);\n    if (amountInt.eq(0)) {\n      return 0;\n    }\n    const vUsdInSystemPrecision = swapToVUsd(\n      amountInt,\n      sourceChainToken,\n      await getPoolInfoByToken(this.api, sourceChainToken)\n    );\n    const usd = swapFromVUsd(\n      vUsdInSystemPrecision,\n      destinationChainToken,\n      await getPoolInfoByToken(this.api, destinationChainToken)\n    );\n    const vUsdInDestinationPrecision = fromSystemPrecision(vUsdInSystemPrecision, destinationChainToken.decimals);\n    return getFeePercent(vUsdInDestinationPrecision, usd);\n  }\n\n  async getAmountToBeReceivedAndGasFeeOptions(\n    amountToSendFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<AmountsAndGasFeeOptions> {\n    validateAmountGtZero(amountToSendFloat);\n    validateAmountDecimals(\"amountToSendFloat\", amountToSendFloat, sourceChainToken.decimals);\n    return {\n      amountToSendFloat: Big(amountToSendFloat).toFixed(),\n      amountToBeReceivedFloat: await this.getAmountToBeReceived(\n        amountToSendFloat,\n        sourceChainToken,\n        destinationChainToken,\n        messenger\n      ),\n      gasFeeOptions: await this.getGasFeeOptions(sourceChainToken, destinationChainToken, messenger),\n    };\n  }\n\n  async getAmountToSendAndGasFeeOptions(\n    amountToBeReceivedFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<AmountsAndGasFeeOptions> {\n    validateAmountGtZero(amountToBeReceivedFloat);\n    validateAmountDecimals(\"amountToBeReceivedFloat\", amountToBeReceivedFloat, destinationChainToken.decimals);\n    return {\n      amountToSendFloat: await this.getAmountToSend(\n        amountToBeReceivedFloat,\n        sourceChainToken,\n        destinationChainToken,\n        messenger\n      ),\n      amountToBeReceivedFloat: Big(amountToBeReceivedFloat).toFixed(),\n      gasFeeOptions: await this.getGasFeeOptions(sourceChainToken, destinationChainToken, messenger),\n    };\n  }\n\n  async getAmountToBeReceived(\n    amountToSendFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger?: Messenger\n  ): Promise<string> {\n    const sourcePool: PoolInfo = await getPoolInfoByToken(this.api, sourceChainToken);\n    const destPool: PoolInfo = await getPoolInfoByToken(this.api, destinationChainToken);\n    return this.getAmountToBeReceivedFromPools(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destPool,\n      messenger\n    );\n  }\n\n  async getAmountToBeReceivedFromChain(\n    amountToSendFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger?: Messenger,\n    sourceProvider?: Provider,\n    destinationProvider?: Provider\n  ): Promise<string> {\n    const sourcePool: PoolInfo = await this.pool.getPoolInfoFromChain(sourceChainToken, sourceProvider);\n    const destPool: PoolInfo = await this.pool.getPoolInfoFromChain(destinationChainToken, destinationProvider);\n    return this.getAmountToBeReceivedFromPools(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destPool,\n      messenger\n    );\n  }\n\n  getAmountToBeReceivedFromPools(\n    amountToSendFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    sourcePool: PoolInfo,\n    destinationPool: PoolInfo,\n    messenger?: Messenger\n  ): string {\n    validateAmountGtZero(amountToSendFloat);\n    validateAmountDecimals(\"amountToSendFloat\", amountToSendFloat, sourceChainToken.decimals);\n    const amountToSend = convertFloatAmountToInt(amountToSendFloat, sourceChainToken.decimals);\n\n    if (messenger && messenger == Messenger.CCTP) {\n      if (!sourceChainToken.cctpAddress || !destinationChainToken.cctpAddress || !sourceChainToken.cctpFeeShare) {\n        throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n      }\n      const result = amountToSend.mul(Big(1).minus(sourceChainToken.cctpFeeShare)).round(0, Big.roundUp);\n      const resultInDestPrecision = convertAmountPrecision(\n        result,\n        sourceChainToken.decimals,\n        destinationChainToken.decimals\n      ).round(0);\n      return convertIntAmountToFloat(resultInDestPrecision, destinationChainToken.decimals).toFixed();\n    }\n\n    if (messenger && messenger == Messenger.CCTP_V2) {\n      if (!sourceChainToken.cctpV2Address || !destinationChainToken.cctpV2Address || !sourceChainToken.cctpV2FeeShare) {\n        throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP V2 protocol\");\n      }\n      const result = amountToSend.mul(Big(1).minus(sourceChainToken.cctpV2FeeShare)).round(0, Big.roundUp);\n      const resultInDestPrecision = convertAmountPrecision(\n        result,\n        sourceChainToken.decimals,\n        destinationChainToken.decimals\n      ).round(0);\n\n      return convertIntAmountToFloat(resultInDestPrecision, destinationChainToken.decimals).toFixed();\n    }\n\n    const vUsd = swapToVUsd(amountToSend, sourceChainToken, sourcePool);\n    return this.getAmountFromVUsdFormatted(vUsd, destinationChainToken, destinationPool).float;\n  }\n\n  async getAmountToSend(\n    amountToBeReceivedFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger?: Messenger\n  ): Promise<string> {\n    const sourcePool: PoolInfo = await getPoolInfoByToken(this.api, sourceChainToken);\n    const destPool: PoolInfo = await getPoolInfoByToken(this.api, destinationChainToken);\n    return this.getAmountToSendFromPools(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destPool,\n      messenger\n    );\n  }\n\n  async getAmountToSendFromChain(\n    amountToBeReceivedFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger?: Messenger,\n    sourceProvider?: Provider,\n    destinationProvider?: Provider\n  ): Promise<string> {\n    const sourcePool: PoolInfo = await this.pool.getPoolInfoFromChain(sourceChainToken, sourceProvider);\n    const destPool: PoolInfo = await this.pool.getPoolInfoFromChain(destinationChainToken, destinationProvider);\n    return this.getAmountToSendFromPools(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destPool,\n      messenger\n    );\n  }\n\n  getAmountToSendFromPools(\n    amountToBeReceivedFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    sourcePool: PoolInfo,\n    destinationPool: PoolInfo,\n    messenger?: Messenger\n  ): string {\n    validateAmountGtZero(amountToBeReceivedFloat);\n    validateAmountDecimals(\"amountToBeReceivedFloat\", amountToBeReceivedFloat, destinationChainToken.decimals);\n    const amountToBeReceived = convertFloatAmountToInt(amountToBeReceivedFloat, destinationChainToken.decimals);\n\n    if (messenger && messenger == Messenger.CCTP) {\n      if (!sourceChainToken.cctpAddress || !destinationChainToken.cctpAddress || !sourceChainToken.cctpFeeShare) {\n        throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n      }\n      const result = amountToBeReceived.div(Big(1).minus(sourceChainToken.cctpFeeShare)).round(0, Big.roundDown);\n      const resultInSourcePrecision = convertAmountPrecision(\n        result,\n        destinationChainToken.decimals,\n        sourceChainToken.decimals\n      ).round(0);\n      return convertIntAmountToFloat(resultInSourcePrecision, sourceChainToken.decimals).toFixed();\n    }\n\n    if (messenger && messenger == Messenger.CCTP_V2) {\n      if (!sourceChainToken.cctpV2Address || !destinationChainToken.cctpV2Address || !sourceChainToken.cctpV2FeeShare) {\n        throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP V2 protocol\");\n      }\n      const result = amountToBeReceived.div(Big(1).minus(sourceChainToken.cctpV2FeeShare)).round(0, Big.roundDown);\n      const resultInSourcePrecision = convertAmountPrecision(\n        result,\n        destinationChainToken.decimals,\n        sourceChainToken.decimals\n      ).round(0);\n      return convertIntAmountToFloat(resultInSourcePrecision, sourceChainToken.decimals).toFixed();\n    }\n\n    const vUsd = swapFromVUsdReverse(amountToBeReceived, destinationChainToken, destinationPool);\n    const resultInt = swapToVUsdReverse(vUsd, sourceChainToken, sourcePool);\n    if (Big(resultInt).lte(0)) {\n      throw new InsufficientPoolLiquidityError();\n    }\n    return convertIntAmountToFloat(resultInt, sourceChainToken.decimals).toFixed();\n  }\n\n  async getGasFeeOptions(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<GasFeeOptions> {\n    return getGasFeeOptions(\n      sourceChainToken.allbridgeChainId,\n      sourceChainToken.chainType,\n      destinationChainToken.allbridgeChainId,\n      sourceChainToken.decimals,\n      messenger,\n      this.api\n    );\n  }\n\n  getAverageTransferTime(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): number | null {\n    return sourceChainToken.transferTime?.[destinationChainToken.chainSymbol]?.[messenger] ?? null;\n  }\n\n  async getPoolInfoByToken(token: TokenWithChainDetails): Promise<PoolInfo> {\n    return await this.api.getPoolInfoByKey({ chainSymbol: token.chainSymbol, poolAddress: token.poolAddress });\n  }\n\n  async refreshPoolInfo(tokens?: TokenWithChainDetails | TokenWithChainDetails[]): Promise<void> {\n    if (tokens) {\n      const tokensArray = tokens instanceof Array ? tokens : [tokens];\n      const poolKeys: PoolKeyObject[] = tokensArray.map((t) => {\n        return { chainSymbol: t.chainSymbol, poolAddress: t.poolAddress };\n      });\n      return this.api.refreshPoolInfo(poolKeys);\n    }\n    return this.api.refreshPoolInfo();\n  }\n\n  aprInPercents(apr: string): string {\n    return aprInPercents(apr);\n  }\n\n  async getExtraGasMaxLimits(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails\n  ): Promise<ExtraGasMaxLimitResponse> {\n    return await getExtraGasMaxLimits(sourceChainToken, destinationChainToken, this.api);\n  }\n\n  async getVUsdFromAmount(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails\n  ): Promise<AmountFormatted> {\n    validateAmountGtZero(amount);\n    let amountInTokenPrecision;\n    if (amountFormat == AmountFormat.FLOAT) {\n      validateAmountDecimals(\"amount\", amount, sourceToken.decimals);\n      amountInTokenPrecision = convertFloatAmountToInt(amount, sourceToken.decimals).toFixed();\n    } else {\n      amountInTokenPrecision = amount;\n    }\n\n    const vUsdAmount = swapToVUsd(amountInTokenPrecision, sourceToken, await getPoolInfoByToken(this.api, sourceToken));\n    return {\n      [AmountFormat.INT]: vUsdAmount,\n      [AmountFormat.FLOAT]: convertIntAmountToFloat(vUsdAmount, SYSTEM_PRECISION).toFixed(),\n    };\n  }\n\n  async getAmountFromVUsd(vUsdAmount: string, destToken: TokenWithChainDetails): Promise<AmountFormatted> {\n    return this.getAmountFromVUsdFormatted(vUsdAmount, destToken, await getPoolInfoByToken(this.api, destToken));\n  }\n\n  private getAmountFromVUsdFormatted(\n    vUsdAmountInt: string,\n    destToken: TokenWithChainDetails,\n    destPoolInfo: Pick<PoolInfo, \"vUsdBalance\" | \"aValue\" | \"dValue\" | \"tokenBalance\">\n  ): AmountFormatted {\n    validateAmountGtZero(vUsdAmountInt);\n    const amountResultInt = swapFromVUsd(vUsdAmountInt, destToken, destPoolInfo);\n    if (Big(amountResultInt).lt(0)) {\n      throw new InsufficientPoolLiquidityError();\n    }\n    return {\n      [AmountFormat.INT]: amountResultInt,\n      [AmountFormat.FLOAT]: convertIntAmountToFloat(amountResultInt, destToken.decimals).toFixed(),\n    };\n  }\n\n  async swapAndBridgeFeeCalculation(\n    amountInTokenPrecision: string,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SwapAndBridgeCalculationData> {\n    return swapAndBridgeFeeCalculation(\n      amountInTokenPrecision,\n      {\n        decimals: sourceToken.decimals,\n        feeShare: sourceToken.feeShare,\n        poolInfo: await getPoolInfoByToken(this.api, sourceToken),\n      },\n      {\n        decimals: destToken.decimals,\n        feeShare: destToken.feeShare,\n        poolInfo: await getPoolInfoByToken(this.api, destToken),\n      }\n    );\n  }\n\n  async swapAndBridgeFeeCalculationReverse(\n    amountInTokenPrecision: string,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SwapAndBridgeCalculationData> {\n    const result = swapAndBridgeFeeCalculationReverse(\n      amountInTokenPrecision,\n      {\n        decimals: sourceToken.decimals,\n        feeShare: sourceToken.feeShare,\n        poolInfo: await getPoolInfoByToken(this.api, sourceToken),\n      },\n      {\n        decimals: destToken.decimals,\n        feeShare: destToken.feeShare,\n        poolInfo: await getPoolInfoByToken(this.api, destToken),\n      }\n    );\n    const newAmount = result.swapFromVUsdCalcResult.amountIncludingCommissionInTokenPrecision;\n    if (Big(newAmount).lt(0)) {\n      throw new InsufficientPoolLiquidityError();\n    }\n    return result;\n  }\n\n  async getSendAmountDetails(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SendAmountDetails> {\n    validateAmountGtZero(amount);\n    let amountInTokenPrecision;\n    if (amountFormat == AmountFormat.FLOAT) {\n      validateAmountDecimals(\"amount\", amount, sourceToken.decimals);\n      amountInTokenPrecision = convertFloatAmountToInt(amount, sourceToken.decimals).toFixed();\n    } else {\n      amountInTokenPrecision = amount;\n    }\n\n    return getSendAmountDetails(\n      amountInTokenPrecision,\n      sourceToken,\n      await getPoolInfoByToken(this.api, sourceToken),\n      destToken,\n      await getPoolInfoByToken(this.api, destToken)\n    );\n  }\n}\n", "export abstract class SdkRootError extends Error {\n  public errorCode: ErrorCode;\n\n  protected constructor(code: ErrorCode, message?: string) {\n    super(message);\n    this.errorCode = code;\n  }\n}\n\nexport class SdkError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.SDK_ERROR, message);\n  }\n}\n\nexport class InvalidAmountError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.INVALID_AMOUNT_ERROR, message);\n  }\n}\n\nexport class AmountNotEnoughError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.AMOUNT_NOT_ENOUGH_ERROR, message);\n  }\n}\n\nexport class InsufficientPoolLiquidityError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.INSUFFICIENT_POOL_LIQUIDITY_ERROR, message);\n  }\n}\n\nexport class JupiterError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.JUPITER_ERROR, message);\n  }\n}\n\nexport class InvalidGasFeePaymentOptionError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.INVALID_GAS_FEE_PAYMENT_OPTION_ERROR, message);\n  }\n}\n\nexport class InvalidMessengerOptionError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.INVALID_MESSENGER_OPTION_ERROR, message);\n  }\n}\n\nexport class MethodNotSupportedError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.METHOD_NOT_SUPPORTED_ERROR, message);\n  }\n}\n\nexport class VerifyTxError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.VERIFY_TX_ERROR, message);\n  }\n}\n\nexport class InvalidTxError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.INVALID_TX_ERROR, message);\n  }\n}\n\nexport class ExtraGasMaxLimitExceededError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.EXTRA_GAS_MAX_LIMIT_EXCEEDED_ERROR, message);\n  }\n}\n\nexport class ArgumentInvalidDecimalsError extends SdkRootError {\n  constructor(argName: string, decimalsIs: number, decimalsRequired: number) {\n    super(\n      ErrorCode.ARGUMENT_INVALID_DECIMALS_ERROR,\n      `Argument '${argName}' decimals '${decimalsIs}' cannot be greater than '${decimalsRequired}'`\n    );\n  }\n}\n\nexport class TimeoutError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.TIMEOUT_ERROR, message);\n  }\n}\n\nexport class NodeRpcUrlNotInitializedError extends SdkRootError {\n  constructor(chainSymbol: string) {\n    super(ErrorCode.NODE_RPC_URL_NOT_INITIALIZED_ERROR, `For chain '${chainSymbol}' Node RPC URL not initialized`);\n  }\n}\n\nexport class CCTPDoesNotSupportedError extends SdkRootError {\n  constructor(message?: string) {\n    super(ErrorCode.CCTP_DOES_NOT_SUPPORTED_ERROR, message);\n  }\n}\n\nexport class TxTooLargeError extends SdkRootError {\n  constructor() {\n    super(\n      ErrorCode.TX_TOO_LARGE,\n      \"Transaction too large: try again later or switch to another messenger or pay relayer fee in native gas currency\"\n    );\n  }\n}\n\nexport enum ErrorCode {\n  SDK_ERROR = \"SdkError\",\n  INVALID_AMOUNT_ERROR = \"InvalidAmountError\",\n  AMOUNT_NOT_ENOUGH_ERROR = \"AmountNotEnoughError\",\n  INSUFFICIENT_POOL_LIQUIDITY_ERROR = \"InsufficientPoolLiquidityError\",\n  JUPITER_ERROR = \"JupiterError\",\n  INVALID_GAS_FEE_PAYMENT_OPTION_ERROR = \"InvalidGasFeePaymentOptionError\",\n  INVALID_MESSENGER_OPTION_ERROR = \"InvalidMessengerOptionError\",\n  METHOD_NOT_SUPPORTED_ERROR = \"MethodNotSupportedError\",\n  VERIFY_TX_ERROR = \"VerifyTxError\",\n  INVALID_TX_ERROR = \"InvalidTxError\",\n  EXTRA_GAS_MAX_LIMIT_EXCEEDED_ERROR = \"ExtraGasMaxLimitExceededError\",\n  ARGUMENT_INVALID_DECIMALS_ERROR = \"ArgumentInvalidDecimalsError\",\n  TIMEOUT_ERROR = \"TimeoutError\",\n  NODE_RPC_URL_NOT_INITIALIZED_ERROR = \"NodeRpcUrlNotInitializedError\",\n  CCTP_DOES_NOT_SUPPORTED_ERROR = \"CCTPDoesNotSupportedError\",\n  TX_TOO_LARGE = \"TxTooLargeError\",\n}\n", "export enum ChainSymbol {\n  /**\n   * The BNB Smart Chain main network.\n   */\n  BSC = \"BSC\",\n\n  /**\n   * The Ethereum main network.\n   */\n  ETH = \"ETH\",\n\n  /**\n   * The Base main network.\n   */\n  BAS = \"BAS\",\n\n  /**\n   * The Solana network.\n   */\n  SOL = \"SOL\",\n\n  /**\n   * The TRON network.\n   */\n  TRX = \"TRX\",\n\n  /**\n   * The Polygon network.\n   */\n  POL = \"POL\",\n\n  /**\n   * The Arbitrum network.\n   */\n  ARB = \"ARB\",\n\n  /**\n   * The Celo network.\n   */\n  CEL = \"CEL\",\n\n  /**\n   * The Avalanche main network.\n   */\n  AVA = \"AVA\",\n\n  /**\n   * The Soroban network.\n   */\n  SRB = \"SRB\",\n\n  /**\n   * The Stellar network.\n   */\n  STLR = \"STLR\",\n\n  /**\n   * The OP Mainnet network.\n   */\n  OPT = \"OPT\",\n\n  /**\n   * The SUI network.\n   */\n  SUI = \"SUI\",\n}\n\nexport enum ChainType {\n  EVM = \"EVM\",\n  SOLANA = \"SOLANA\",\n  TRX = \"TRX\",\n  SRB = \"SRB\",\n  SUI = \"SUI\",\n}\n", "import { SdkError } from \"../exceptions\";\nimport { ChainSymbol, ChainType } from \"./chain.enums\";\nimport { BasicChainProperties } from \"./models\";\n\n/**\n * Native gas tokens decimals by ChainType\n */\nconst chainDecimalsByType: Record<ChainType, number> = {\n  EVM: 18,\n  SOLANA: 9,\n  TRX: 6,\n  SRB: 7,\n  SUI: 9,\n};\n\nconst defaultProperties: Record<string, BasicChainProperties> = {\n  [ChainSymbol.BSC]: {\n    chainSymbol: ChainSymbol.BSC,\n    chainId: \"0x38\",\n    name: \"BNB Chain\",\n    chainType: ChainType.EVM,\n  },\n  [ChainSymbol.ETH]: {\n    chainSymbol: ChainSymbol.ETH,\n    chainId: \"0x1\",\n    name: \"Ethereum\",\n    chainType: ChainType.EVM,\n  },\n  [ChainSymbol.BAS]: {\n    chainSymbol: ChainSymbol.BAS,\n    chainId: \"0x2105\",\n    name: \"Base\",\n    chainType: ChainType.EVM,\n  },\n  [ChainSymbol.ARB]: {\n    chainSymbol: ChainSymbol.ARB,\n    chainId: \"0xa4b1\",\n    name: \"Arbitrum\",\n    chainType: ChainType.EVM,\n  },\n  [ChainSymbol.AVA]: {\n    chainSymbol: ChainSymbol.AVA,\n    chainId: \"0xa86a\",\n    name: \"Avalanche\",\n    chainType: ChainType.EVM,\n  },\n  [ChainSymbol.CEL]: {\n    chainSymbol: ChainSymbol.CEL,\n    chainId: \"0xa4ec\",\n    name: \"Celo\",\n    chainType: ChainType.EVM,\n  },\n  [ChainSymbol.POL]: {\n    chainSymbol: ChainSymbol.POL,\n    chainId: \"0x89\",\n    name: \"Polygon\",\n    chainType: ChainType.EVM,\n  },\n  [ChainSymbol.OPT]: {\n    chainSymbol: ChainSymbol.OPT,\n    chainId: \"0xa\",\n    name: \"OP Mainnet\",\n    chainType: ChainType.EVM,\n  },\n  [ChainSymbol.SOL]: {\n    chainSymbol: ChainSymbol.SOL,\n    name: \"Solana\",\n    chainType: ChainType.SOLANA,\n  },\n  [ChainSymbol.TRX]: {\n    chainSymbol: ChainSymbol.TRX,\n    name: \"Tron\",\n    chainType: ChainType.TRX,\n  },\n  [ChainSymbol.SRB]: {\n    chainSymbol: ChainSymbol.SRB,\n    name: \"Stellar\",\n    chainType: ChainType.SRB,\n  },\n  [ChainSymbol.STLR]: {\n    chainSymbol: ChainSymbol.STLR,\n    name: \"Stellar\",\n    chainType: ChainType.SRB,\n  },\n  [ChainSymbol.SUI]: {\n    chainSymbol: ChainSymbol.SUI,\n    name: \"Sui\",\n    chainType: ChainType.SUI,\n  },\n};\n\nexport const Chains = (() => {\n  let chainProperties: Record<string, BasicChainProperties> = { ...defaultProperties };\n\n  return {\n    addChainsProperties(additionalProperties?: Record<string, BasicChainProperties>) {\n      chainProperties = { ...chainProperties, ...additionalProperties };\n    },\n\n    getChainProperty(chainSymbol: string): BasicChainProperties {\n      const property = chainProperties[chainSymbol];\n      if (!property) {\n        throw new SdkError(`Cannot find chain properties for ${chainSymbol}`);\n      }\n      return property;\n    },\n\n    getChainsProperties(): Record<string, BasicChainProperties> {\n      return chainProperties;\n    },\n\n    getChainDecimalsByType(chainType: ChainType): number {\n      return chainDecimalsByType[chainType];\n    },\n  };\n})();\n", "import axios, { Axios } from \"axios\";\nimport { ChainDetailsMapWithFlags, PoolInfoMap, PoolKeyObject } from \"../../tokens-info\";\nimport { VERSION } from \"../../version\";\nimport {\n  mapChainDetailsResponseToChainDetailsMap,\n  mapChainDetailsResponseToPoolInfoMap,\n  mapPoolInfoResponseToPoolInfoMap,\n} from \"./core-api-mapper\";\nimport {\n  ChainDetailsResponse,\n  GasBalanceResponse,\n  PendingInfoResponse,\n  PoolInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\nimport { AllbridgeCoreClientParams } from \"./core-client-base\";\n\nexport interface TokenInfo {\n  chainDetailsMap: ChainDetailsMapWithFlags;\n  poolInfoMap: PoolInfoMap;\n}\n\nexport interface ApiClient {\n  getTokenInfo(): Promise<TokenInfo>;\n\n  getPendingInfo(): Promise<PendingInfoResponse>;\n\n  getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse>;\n\n  getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse>;\n\n  getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse>;\n\n  getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap>;\n}\n\nexport class ApiClientImpl implements ApiClient {\n  private api: Axios;\n\n  constructor(params: AllbridgeCoreClientParams) {\n    this.api = axios.create({\n      baseURL: params.coreApiUrl,\n      headers: {\n        Accept: \"application/json\",\n        ...params.coreApiHeaders,\n        \"x-Sdk-Agent\": \"AllbridgeCoreSDK/\" + VERSION,\n      },\n      params: params.coreApiQueryParams,\n    });\n  }\n\n  async getTokenInfo(): Promise<TokenInfo> {\n    const { data } = await this.api.get<ChainDetailsResponse>(\"/token-info\", { params: { filter: \"all\" } });\n    return {\n      chainDetailsMap: mapChainDetailsResponseToChainDetailsMap(data),\n      poolInfoMap: mapChainDetailsResponseToPoolInfoMap(data),\n    };\n  }\n\n  async getPendingInfo(): Promise<PendingInfoResponse> {\n    const { data } = await this.api.get<PendingInfoResponse>(\"/pending-info\");\n    return data;\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    const { data } = await this.api.get<GasBalanceResponse>(`/check/${chainSymbol}/${address}`);\n    return data;\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    const { data } = await this.api.get<TransferStatusResponse>(`/chain/${chainSymbol}/${txId}`);\n    return data;\n  }\n\n  async getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    const { data } = await this.api.post<ReceiveTransactionCostResponse>(\"/receive-fee\", args, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return {\n      exchangeRate: data.exchangeRate,\n      fee: data.fee,\n      sourceNativeTokenPrice: data.sourceNativeTokenPrice,\n    };\n  }\n\n  async getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap> {\n    const poolKeys = pools instanceof Array ? pools : [pools];\n    const { data } = await this.api.post<PoolInfoResponse>(\n      \"/pool-info\",\n      { pools: poolKeys },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    return mapPoolInfoResponseToPoolInfoMap(data);\n  }\n}\n", "export const VERSION = \"3.22.0\";\n", "import { Big, BigSource } from \"big.js\";\nimport BN from \"bn.js\";\nimport { InsufficientPoolLiquidityError } from \"../../exceptions\";\nimport { PoolInfo, Token } from \"../../tokens-info\";\nimport { SYSTEM_PRECISION } from \"./constants\";\n\nexport function getFeePercent(input: BigSource, output: BigSource): number {\n  return Big(100).minus(Big(100).times(output).div(input)).toNumber();\n}\n\nexport function toSystemPrecision(amount: BigSource, decimals: number): Big {\n  return convertAmountPrecision(amount, decimals, SYSTEM_PRECISION).round(0, Big.roundDown);\n}\n\nexport function fromSystemPrecision(amount: BigSource, decimals: number): Big {\n  return convertAmountPrecision(amount, SYSTEM_PRECISION, decimals);\n}\n\nexport function convertAmountPrecision(amount: BigSource, decimalsFrom: number, decimalsTo: number): Big {\n  const dif = Big(decimalsTo).minus(decimalsFrom).toNumber();\n  return Big(amount).times(toPowBase10(dif));\n}\n\nexport function toPowBase10(decimals: number): Big {\n  return Big(10).pow(decimals);\n}\n\nexport function convertFloatAmountToInt(amountFloat: BigSource, decimals: number): Big {\n  return Big(amountFloat).times(toPowBase10(decimals));\n}\n\nexport function convertIntAmountToFloat(amountInt: BigSource, decimals: number): Big {\n  const amountValue = Big(amountInt);\n  if (amountValue.eq(0)) {\n    return Big(0);\n  }\n  return Big(amountValue).div(toPowBase10(decimals));\n}\n\nexport function calculatePoolInfoImbalance(poolInfo: Pick<PoolInfo, \"tokenBalance\" | \"vUsdBalance\">): string {\n  return convertIntAmountToFloat(Big(poolInfo.tokenBalance).minus(poolInfo.vUsdBalance).toFixed(), SYSTEM_PRECISION)\n    .div(2)\n    .toFixed();\n}\n\nexport function swapToVUsd(\n  amount: BigSource,\n  { feeShare, decimals }: Pick<Token, \"feeShare\" | \"decimals\">,\n  poolInfo: Omit<PoolInfo, \"p\" | \"imbalance\">\n): string {\n  const amountValue = Big(amount);\n  if (amountValue.lte(0)) {\n    return \"0\";\n  }\n  const fee = amountValue.times(feeShare);\n  const amountWithoutFee = amountValue.minus(fee);\n  const inSystemPrecision = toSystemPrecision(amountWithoutFee, decimals);\n  const tokenBalance = Big(poolInfo.tokenBalance).plus(inSystemPrecision);\n  const vUsdNewAmount = getY(tokenBalance, poolInfo.aValue, poolInfo.dValue);\n  return Big(poolInfo.vUsdBalance).minus(vUsdNewAmount).round(0, Big.roundDown).toFixed();\n}\n\nexport function swapFromVUsd(\n  amount: BigSource,\n  { feeShare, decimals }: Pick<Token, \"feeShare\" | \"decimals\">,\n  poolInfo: Pick<PoolInfo, \"vUsdBalance\" | \"aValue\" | \"dValue\" | \"tokenBalance\">\n): string {\n  const amountValue = Big(amount);\n  if (amountValue.lte(0)) {\n    return Big(0).toFixed();\n  }\n  const vUsdBalance = amountValue.plus(poolInfo.vUsdBalance);\n  const newAmount = getY(vUsdBalance, poolInfo.aValue, poolInfo.dValue);\n  const result = fromSystemPrecision(Big(poolInfo.tokenBalance).minus(newAmount), decimals);\n  const fee = Big(result).times(feeShare);\n  return Big(result).minus(fee).round(0, Big.roundDown).toFixed();\n}\n\nexport function getSwapFromVUsdPoolInfo(\n  vUsdAmount: BigSource,\n  poolInfo: Omit<PoolInfo, \"imbalance\">\n): Pick<PoolInfo, \"vUsdBalance\" | \"aValue\" | \"dValue\" | \"tokenBalance\"> {\n  const amountValue = Big(vUsdAmount);\n  if (amountValue.lte(0)) {\n    return poolInfo;\n  }\n  const vUsdBalance = amountValue.plus(poolInfo.vUsdBalance);\n  const newAmount = getY(vUsdBalance, poolInfo.aValue, poolInfo.dValue);\n  return {\n    aValue: poolInfo.aValue,\n    dValue: poolInfo.dValue,\n    tokenBalance: newAmount.toFixed(0),\n    vUsdBalance: vUsdBalance.toFixed(0),\n  };\n}\n\n/**\n * @param amount - vUsd amount should be received\n * @param feeShare\n * @param decimals\n * @param poolInfo\n */\nexport function swapToVUsdReverse(\n  amount: BigSource,\n  { feeShare, decimals }: Pick<Token, \"feeShare\" | \"decimals\">,\n  poolInfo: Omit<PoolInfo, \"imbalance\">\n): Big {\n  if (Big(amount).lte(0)) {\n    return Big(0);\n  }\n  const vUsdNewAmount = Big(poolInfo.vUsdBalance).minus(amount);\n  if (vUsdNewAmount.lte(0)) {\n    throw new InsufficientPoolLiquidityError();\n  }\n  const tokenBalance = getY(vUsdNewAmount, poolInfo.aValue, poolInfo.dValue);\n  const inSystemPrecision = Big(tokenBalance).minus(poolInfo.tokenBalance);\n  const amountWithoutFee = fromSystemPrecision(inSystemPrecision, decimals);\n  const reversedFeeShare = Big(feeShare).div(Big(1).minus(feeShare));\n  const fee = Big(amountWithoutFee).times(reversedFeeShare).round(0, Big.roundUp);\n  return Big(amountWithoutFee).plus(fee).round(0, Big.roundDown);\n}\n\n/**\n * @param amount - amount should be received\n * @param feeShare\n * @param decimals\n * @param poolInfo\n */\nexport function swapFromVUsdReverse(\n  amount: BigSource,\n  { feeShare, decimals }: Pick<Token, \"feeShare\" | \"decimals\">,\n  poolInfo: Omit<PoolInfo, \"imbalance\">\n): Big {\n  if (Big(amount).lte(0)) {\n    return Big(0);\n  }\n  const reversedFeeShare = Big(feeShare).div(Big(1).minus(feeShare));\n  const fee = Big(amount).times(reversedFeeShare).round(0, Big.roundUp);\n  const amountWithFee = Big(amount).plus(fee);\n  const inSystemPrecision = toSystemPrecision(amountWithFee, decimals);\n  const tokenBalance = Big(poolInfo.tokenBalance).minus(inSystemPrecision);\n  if (tokenBalance.lte(0)) {\n    throw new InsufficientPoolLiquidityError();\n  }\n  const vUsdNewAmount = getY(tokenBalance, poolInfo.aValue, poolInfo.dValue);\n  return Big(vUsdNewAmount).minus(poolInfo.vUsdBalance).round(0, Big.roundDown);\n}\n\n// y = (sqrt(x(4ad\u00B3 + x (4a(d - x) - d )\u00B2)) + x (4a(d - x) - d ))/8ax\n// commonPart = 4a(d - x) - d\n// sqrt = sqrt(x * (4ad\u00B3 + x * commonPart\u00B2)\n// y =   (sqrt + x * commonPart) / divider\nexport function getY(x: BigSource, a: BigSource, d: BigSource): Big {\n  const commonPartBig = Big(4).times(a).times(Big(d).minus(x)).minus(d);\n  const dCubed = Big(d).pow(3);\n  const commonPartSquared = commonPartBig.pow(2);\n  const sqrtBig = Big(x)\n    .times(Big(x).times(commonPartSquared).plus(Big(4).times(a).times(dCubed)))\n    .sqrt()\n    .round(0, Big.roundDown);\n  const dividerBig = Big(8).times(a).times(x);\n  const result = commonPartBig.times(x).plus(sqrtBig).div(dividerBig).round(0, Big.roundDown);\n  if (result.eq(0)) {\n    return Big(0);\n  }\n  return result.plus(1); // +1 to offset rounding errors\n}\n\nexport function getEarned(userLpAmount: string, userRewardDebt: string, accRewardPerShareP: string, p: number): string {\n  const userLpAmountBN = new BN(userLpAmount);\n  const accRewardPerSharePBN = new BN(accRewardPerShareP);\n  const userRewardDebtBN = new BN(userRewardDebt);\n  const rewards = userLpAmountBN.mul(accRewardPerSharePBN).shrn(p);\n  return rewards.sub(userRewardDebtBN).toString();\n}\n\nexport function aprInPercents(apr: string): string {\n  return Big(apr).gt(0) ? `${Number(Big(apr).times(100).toFixed(2)).toLocaleString()}%` : \"N/A\";\n}\n\n// a = 8Axy(x+y)\n// b = xy(16A - 4) / 3\n// c = sqrt(a\u00B2 + b\u00B3)\n// D = cbrt(a + c) + cbrt(a - c)\nexport function getD(aValue: string, x: string, y: string): string {\n  const xy = Big(x).times(y);\n  const xPlusY = Big(x).plus(y);\n  const a = Big(8).times(aValue).times(xy).times(xPlusY);\n  const b = xy.times(Big(16).times(aValue).minus(4)).div(3);\n  const aSquared = a.times(a);\n  const bCubed = b.times(b).times(b);\n  const a2b3 = aSquared.plus(bCubed);\n  const c = Big(a2b3).sqrt();\n  const cbrtAPlusC = Big(Math.cbrt(+a.plus(c).toFixed()));\n  const cbrtAMinusC = Big(Math.cbrt(+a.minus(c).toFixed()));\n  return cbrtAPlusC.plus(cbrtAMinusC).toFixed();\n}\n", "import { ChainSymbol } from \"../../chains/chain.enums\";\nimport { PoolInfo, SuiAddresses } from \"../../tokens-info\";\n\nexport type ChainDetailsResponse = Record<string, ChainDetailsDTO>;\n\nexport interface ChainDetailsDTO {\n  tokens: TokenDTO[];\n  chainId: number;\n  bridgeAddress: string;\n  transferTime: TransferTimeDTO;\n  txCostAmount: TxCostAmountDTO;\n  confirmations: number;\n  suiAddresses?: SuiAddresses;\n}\n\nexport enum AddressStatus {\n  OK = \"OK\",\n  INVALID = \"INVALID\",\n  FORBIDDEN = \"FORBIDDEN\",\n  UNINITIALIZED = \"UNINITIALIZED\",\n  CONTRACT_ADDRESS = \"CONTRACT_ADDRESS\",\n  WRONG_ASSOCIATED_ACCOUNT_OWNER = \"WRONG_ASSOCIATED_ACCOUNT_OWNER\",\n}\n\nexport interface TokenDTO {\n  symbol: string;\n  name: string;\n  decimals: number;\n  poolAddress: string;\n  tokenAddress: string;\n  poolInfo: PoolInfoDTO;\n  feeShare: string;\n  apr: string;\n  apr7d: string;\n  apr30d: string;\n  lpRate: string;\n  flags: {\n    swap: boolean;\n    pool: boolean;\n  };\n}\n\nexport interface PoolInfoDTO {\n  aValue: string;\n  dValue: string;\n  tokenBalance: string;\n  vUsdBalance: string;\n  totalLpAmount: string;\n  accRewardPerShareP: string;\n  p: number;\n}\n\nexport enum MessengerKeyDTO {\n  ALLBRIDGE = \"allbridge\",\n  WORMHOLE = \"wormhole\",\n  CCTP = \"cctp\",\n  CCTP_V2 = \"cctpV2\",\n}\n\nexport type TransferTimeDTO = Record<string, MessengerTransferTimeDTO>;\n\nexport interface TxCostAmountDTO {\n  maxAmount: string;\n  swap: string;\n  transfer: string;\n}\n\nexport type MessengerTransferTimeDTO = {\n  [messenger in MessengerKeyDTO]: number;\n};\n\nexport enum Messenger {\n  ALLBRIDGE = 1,\n  WORMHOLE = 2,\n  CCTP = 3,\n  CCTP_V2 = 4,\n}\n\nexport interface ReceiveTransactionCostRequest {\n  sourceChainId: number;\n  destinationChainId: number;\n  messenger: Messenger;\n}\n\nexport interface ReceiveTransactionCostResponse {\n  exchangeRate: string;\n  fee: string;\n  sourceNativeTokenPrice: string;\n}\n\nexport interface GasBalanceResponse {\n  gasBalance: string | null;\n  status: AddressStatus;\n}\n\nexport interface CheckAddressResponse {\n  gasBalance: string | null;\n  status: AddressStatus;\n}\n\nexport interface TransferStatusResponse {\n  txId: string;\n\n  sourceChainSymbol: ChainSymbol;\n  destinationChainSymbol: ChainSymbol;\n\n  sendAmount: string;\n  sendAmountFormatted: number;\n\n  stableFee: string;\n  stableFeeFormatted: number;\n\n  sourceTokenAddress: string;\n  destinationTokenAddress: string;\n\n  originSourceTokenAddress?: string;\n  originDestinationTokenAddress?: string;\n\n  senderAddress: string;\n  recipientAddress: string;\n\n  signaturesCount: number;\n  signaturesNeeded: number;\n\n  send: BridgeTransaction;\n  receive?: BridgeTransaction;\n\n  responseTime?: number;\n}\n\nexport interface BridgeTransaction {\n  txId: string;\n\n  sourceChainId: number;\n  destinationChainId: number;\n\n  fee: string;\n  feeFormatted: number;\n\n  stableFee: string;\n  stableFeeFormatted: number;\n\n  amount: string;\n  amountFormatted: number;\n  virtualAmount: string;\n\n  bridgeContract: string;\n  sender: string;\n  recipient: string;\n\n  sourceTokenAddress: string;\n  destinationTokenAddress: string;\n\n  originSourceTokenAddress?: string;\n  originDestinationTokenAddress?: string;\n\n  hash: string;\n\n  messenger: Messenger;\n\n  blockTime: number;\n  blockId: string;\n\n  confirmations: number;\n  confirmationsNeeded: number;\n\n  isClaimable?: boolean;\n}\n\nexport type PoolInfoResponse = Record<ChainSymbol, PoolInfo>;\nexport type PendingInfoResponse = Partial<Record<ChainSymbol, TokenPendingInfoDTO>>;\nexport type TokenPendingInfoDTO = Record<string, PendingInfoDTO>;\n\nexport interface PendingInfoDTO {\n  pendingTxs: number;\n  totalSentAmount: string;\n}\n", "import { Chains } from \"../../chains\";\nimport { ChainSymbol } from \"../../chains/chain.enums\";\nimport {\n  ChainDetails,\n  ChainDetailsMap,\n  ChainDetailsMapWithFlags,\n  ChainDetailsWithTokensWithFlags,\n  MessengerTransferTime,\n  PoolInfoMap,\n  PoolKeyObject,\n  TokenWithChainDetailsWithFlags,\n  TransferTime,\n} from \"../../tokens-info\";\nimport { calculatePoolInfoImbalance } from \"../../utils/calculation\";\nimport {\n  ChainDetailsDTO,\n  ChainDetailsResponse,\n  Messenger,\n  MessengerKeyDTO,\n  MessengerTransferTimeDTO,\n  PoolInfoResponse,\n  TokenDTO,\n  TransferTimeDTO,\n} from \"./core-api.model\";\n\nexport function mapChainDetailsResponseToChainDetailsMap(response: ChainDetailsResponse): ChainDetailsMapWithFlags {\n  return Object.entries(response).reduce<ChainDetailsMapWithFlags>((map, entry) => {\n    const chainSymbol = entry[0];\n    const chainDetailsDTO = entry[1];\n    const chainDetails = mapChainDetailsFromDto(chainSymbol, chainDetailsDTO);\n    if (chainDetails) {\n      map[chainSymbol] = chainDetails;\n    }\n    return map;\n  }, {});\n}\n\nexport function mapChainDetailsResponseToPoolInfoMap(response: ChainDetailsResponse): PoolInfoMap {\n  const poolInfoMap: PoolInfoMap = {};\n  for (const [chainSymbolValue, chainDetailsDTO] of Object.entries(response)) {\n    const chainSymbol = chainSymbolValue;\n    for (const token of chainDetailsDTO.tokens) {\n      const poolKey = mapPoolKeyObjectToPoolKey({\n        chainSymbol,\n        poolAddress: token.poolAddress,\n      });\n      const imbalance = calculatePoolInfoImbalance(token.poolInfo);\n      poolInfoMap[poolKey] = { ...token.poolInfo, imbalance };\n    }\n  }\n  return poolInfoMap;\n}\n\nfunction mapTokenWithChainDetailsFromDto(chainDetails: ChainDetails, dto: TokenDTO): TokenWithChainDetailsWithFlags {\n  const { name: chainName, ...chainDetailsWithoutName } = chainDetails;\n  const { poolInfo: _poolInfo, ...dtoWithoutPoolInfo } = dto;\n  return {\n    ...dtoWithoutPoolInfo,\n    ...chainDetailsWithoutName,\n    chainName,\n  };\n}\n\nfunction mapMessengerKeyDtoToMessenger(dto: MessengerKeyDTO): Messenger | null {\n  switch (dto) {\n    case MessengerKeyDTO.ALLBRIDGE:\n      return Messenger.ALLBRIDGE;\n    case MessengerKeyDTO.WORMHOLE:\n      return Messenger.WORMHOLE;\n    case MessengerKeyDTO.CCTP:\n      return Messenger.CCTP;\n    case MessengerKeyDTO.CCTP_V2:\n      return Messenger.CCTP_V2;\n  }\n}\n\nfunction mapTransferTimeFromDto(dto: TransferTimeDTO): TransferTime {\n  return Object.entries(dto).reduce<TransferTime>((result, [key, value]) => {\n    result[key as ChainSymbol] = mapMessengerTransferTimeFromDto(value);\n    return result;\n  }, {});\n}\n\nfunction mapMessengerTransferTimeFromDto(dto: MessengerTransferTimeDTO): MessengerTransferTime {\n  return Object.entries(dto).reduce<MessengerTransferTime>((messengerTransferTime, [key, value]) => {\n    const messenger = mapMessengerKeyDtoToMessenger(key as MessengerKeyDTO);\n    if (messenger) {\n      messengerTransferTime[messenger] = value;\n    }\n    return messengerTransferTime;\n  }, {});\n}\n\nfunction mapChainDetailsFromDto(chainSymbol: string, dto: ChainDetailsDTO): ChainDetailsWithTokensWithFlags | null {\n  const basicChainProperties = Chains.getChainsProperties()[chainSymbol];\n  if (!basicChainProperties) {\n    return null;\n  }\n  const chainDetails: ChainDetails = {\n    ...basicChainProperties,\n    allbridgeChainId: dto.chainId,\n    bridgeAddress: dto.bridgeAddress,\n    transferTime: mapTransferTimeFromDto(dto.transferTime),\n    txCostAmount: dto.txCostAmount,\n    confirmations: dto.confirmations,\n    suiAddresses: dto.suiAddresses,\n  };\n  return {\n    ...chainDetails,\n    tokens: dto.tokens.map((tokenDto) => mapTokenWithChainDetailsFromDto(chainDetails, tokenDto)),\n  };\n}\n\nexport function mapPoolKeyToPoolKeyObject(poolKey: string): PoolKeyObject {\n  const dividerPosition = poolKey.indexOf(\"_\");\n  return {\n    chainSymbol: poolKey.substring(0, dividerPosition),\n    poolAddress: poolKey.substring(dividerPosition + 1),\n  };\n}\n\nexport function mapPoolKeyObjectToPoolKey(poolKeyObject: PoolKeyObject): string {\n  return poolKeyObject.chainSymbol + \"_\" + poolKeyObject.poolAddress;\n}\n\nexport function mapChainDetailsMapToPoolKeyObjects(chainDetailsMap: ChainDetailsMap): PoolKeyObject[] {\n  const result = [];\n  for (const [chainSymbolValue, chainDetails] of Object.entries(chainDetailsMap)) {\n    const chainSymbol = chainSymbolValue;\n    for (const token of chainDetails.tokens) {\n      result.push({\n        chainSymbol,\n        poolAddress: token.poolAddress,\n      });\n    }\n  }\n  return result;\n}\n\nexport function mapPoolInfoResponseToPoolInfoMap(responseBody: PoolInfoResponse): PoolInfoMap {\n  const poolInfoMap: PoolInfoMap = {};\n  for (const [chainSymbolValue, poolInfoByAddress] of Object.entries(responseBody)) {\n    const chainSymbol = chainSymbolValue;\n    for (const [poolAddress, poolInfo] of Object.entries(poolInfoByAddress)) {\n      poolInfo.imbalance = calculatePoolInfoImbalance(poolInfo);\n      poolInfoMap[mapPoolKeyObjectToPoolKey({ chainSymbol, poolAddress })] = poolInfo;\n    }\n  }\n  return poolInfoMap;\n}\n", "/**\n * ///////////////////////////////////////\n * //////////// Cache module /////////////\n * ///////////////////////////////////////\n *\n * This module offers object caching mechanisms for\n * third-party modules. It allows to manage the lifecycle\n * of cached objects by associating them with a time-to-live.\n */\n\n/**\n * Shortcut function for checking if an object has\n * a given property directly on itself.\n */\nconst has = (obj, key) => obj !== null && Object.prototype.hasOwnProperty.call(obj, key);\n\n/**\n * A prefix used to forbid access to internal properties\n * of the object storage.\n */\nconst prefix = '__cache__';\n\n/**\n * If the key is an object, we serialize it, so it\n * can be cached transparently.\n */\nconst serialize = function (key) {\n  if (typeof key !== 'string') {\n    return (prefix + JSON.stringify(key));\n  }\n  return (prefix + key);\n};\n\n/**\n * The `timed-cache` implementation.\n */\nclass Cache {\n\n  /**\n   * Cache constructor.\n   * @param {*} options the `options` object\n   * holder used by the cache implementation. \n   */\n  constructor(options = { defaultTtl: 60 * 1000 }) {\n    // The cache storage.\n    this.cache = {};\n    // The default cached objects expiration\n    // delay is expressed in milliseconds and\n    // is defined by an internal default value\n    // or a user value if it is passed to the\n    // constructor.\n    this.defaultTtl = options.defaultTtl || 60 * 1000;\n  }\n\n  /**\n   * Puts a key/value pair into the cache storage.\n   */\n  put(key, value, options) {\n    const ttl  = (options ? options.ttl : undefined) || this.defaultTtl;\n    const callback = (options ? options.callback : undefined) || function () {};\n    const key_ = serialize(key);\n  \n    // Checking whether the given key already\n    // has a value.\n    const v = this.cache[key_];\n  \n    if (v) {\n      // We clear the timeout associated with\n      // the existing value.\n      clearTimeout(v.handle);\n    }\n  \n    // We then create a new timeout function for\n    // the new value.\n    const handle = setTimeout(() => this.remove(key), ttl);\n  \n    // And we save the value into the cache storage\n    // with the handle.\n    this.cache[key_] = { handle, data: value, callback };\n  }\n\n  /**\n   * Returns a cached value associated with the\n   * given key if it exists, returns an undefined\n   * value otherwise.\n   */\n  get(key) {\n    const value = this.cache[serialize(key)];\n    return (value && value.data);\n  }\n\n  /**\n   * Clears the cache entry associated\n   * with the given `key`.\n   */\n  remove(key) {\n    const key_  = serialize(key);\n    const value = this.cache[key_];\n  \n    if (value) {\n      clearTimeout(value.handle);\n      delete this.cache[key_];\n      value.callback(key, value.data);\n    }\n  }\n\n  /**\n   * Clears the internal cache.\n   */\n  clear() {\n    for (const entry in this.cache) {\n      if (has(this.cache, entry)) {\n        clearTimeout(this.cache[entry].handle);\n      }\n    }\n    this.cache = {};\n  }\n\n  /**\n   * Returns the size of the cache object in\n   * terms of referenced elements.\n   */\n  size() {\n    return (Object.keys(this.cache).length);\n  }\n}\n\nexport default Cache;\n", "import Cache from \"timed-cache\";\nimport { PoolInfoMap, PoolKeyObject } from \"../../tokens-info\";\nimport { ApiClient, TokenInfo } from \"./api-client\";\nimport {\n  GasBalanceResponse,\n  PendingInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\n\nconst _20_SECONDS_TTL = 20 * 1000;\nconst _55_SECONDS_TTL = 55 * 1000;\n\nexport class ApiClientCaching implements ApiClient {\n  private tokenInfoCache: Cache<Promise<TokenInfo>>;\n  private pendingInfoCache: Cache<Promise<PendingInfoResponse>>;\n  private gasBalanceCache: Cache<Promise<GasBalanceResponse>>;\n  private receivedTransactionCache: Cache<ReceiveTransactionCostResponse>;\n\n  constructor(private apiClient: ApiClient) {\n    this.tokenInfoCache = new Cache({ defaultTtl: _55_SECONDS_TTL });\n    this.receivedTransactionCache = new Cache({ defaultTtl: _20_SECONDS_TTL });\n    this.pendingInfoCache = new Cache({ defaultTtl: _20_SECONDS_TTL });\n    this.gasBalanceCache = new Cache({ defaultTtl: _20_SECONDS_TTL });\n  }\n\n  getTokenInfo(): Promise<TokenInfo> {\n    const TOKEN_INFO_CACHE_KEY = \"TOKEN_INFO_CACHE_KEY\";\n    const tokenInfo = this.tokenInfoCache.get(TOKEN_INFO_CACHE_KEY);\n    if (tokenInfo) {\n      return tokenInfo;\n    }\n    const tokenInfoPromise = this.apiClient.getTokenInfo();\n    this.tokenInfoCache.put(TOKEN_INFO_CACHE_KEY, tokenInfoPromise);\n    return tokenInfoPromise;\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    const GAS_BALANCE_CACHE_KEY = `GAS_BALANCE_${chainSymbol}_${address}`;\n    const gasBalance = this.gasBalanceCache.get(GAS_BALANCE_CACHE_KEY);\n    if (gasBalance) {\n      return gasBalance;\n    }\n    const gasBalancePromise = this.apiClient.getGasBalance(chainSymbol, address);\n    this.gasBalanceCache.put(GAS_BALANCE_CACHE_KEY, gasBalancePromise);\n    return gasBalancePromise;\n  }\n\n  async getPendingInfo(): Promise<PendingInfoResponse> {\n    const PENDING_INFO_CACHE_KEY = \"PENDING_INFO_CACHE_KEY\";\n    const pendingInfo = this.pendingInfoCache.get(PENDING_INFO_CACHE_KEY);\n    if (pendingInfo) {\n      return pendingInfo;\n    }\n    const pendingInfoPromise = this.apiClient.getPendingInfo();\n    this.pendingInfoCache.put(PENDING_INFO_CACHE_KEY, pendingInfoPromise);\n    return pendingInfoPromise;\n  }\n\n  async getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    const RECEIVE_TX_COST_KEY = `RECEIVE_TX_COST_${args.sourceChainId}_${args.destinationChainId}_${args.messenger}`;\n    const transactionCost = this.receivedTransactionCache.get(RECEIVE_TX_COST_KEY);\n    if (transactionCost) {\n      return transactionCost;\n    }\n    const fetchedTransactionCost = await this.apiClient.getReceiveTransactionCost(args);\n    this.receivedTransactionCache.put(RECEIVE_TX_COST_KEY, fetchedTransactionCost);\n    return fetchedTransactionCost;\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return this.apiClient.getTransferStatus(chainSymbol, txId);\n  }\n\n  async getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap> {\n    return this.apiClient.getPoolInfoMap(pools);\n  }\n}\n", "import {\n  ChainDetailsMapWithFlags,\n  PoolInfoMap,\n  PoolKeyObject,\n  TokenWithChainDetailsWithFlags,\n} from \"../../tokens-info\";\nimport { ApiClient } from \"./api-client\";\nimport {\n  GasBalanceResponse,\n  PendingInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\n\nexport interface AllbridgeCoreClientParams {\n  coreApiUrl: string;\n  coreApiHeaders?: Record<string, string>;\n  coreApiQueryParams?: Record<string, string>;\n}\n\nexport interface AllbridgeCoreClient {\n  getPendingInfo(): Promise<PendingInfoResponse>;\n\n  getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse>;\n\n  getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse>;\n\n  getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse>;\n}\n\nexport interface AllbridgeCoreClientWithTokens extends AllbridgeCoreClient {\n  getChainDetailsMap(): Promise<ChainDetailsMapWithFlags>;\n\n  tokens(): Promise<TokenWithChainDetailsWithFlags[]>;\n}\n\nexport interface AllbridgeCoreClientWithPoolInfo extends AllbridgeCoreClientWithTokens {\n  getChainDetailsMapAndPoolInfoMap(): Promise<{\n    chainDetailsMap: ChainDetailsMapWithFlags;\n    poolInfoMap: PoolInfoMap;\n  }>;\n\n  getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap>;\n}\n\nexport class AllbridgeCoreClientImpl implements AllbridgeCoreClientWithPoolInfo {\n  constructor(private apiClient: ApiClient) {}\n\n  async getChainDetailsMap(): Promise<ChainDetailsMapWithFlags> {\n    return (await this.apiClient.getTokenInfo()).chainDetailsMap;\n  }\n\n  async tokens(): Promise<TokenWithChainDetailsWithFlags[]> {\n    const map = await this.getChainDetailsMap();\n    return Object.values(map).flatMap((chainDetails) => chainDetails.tokens);\n  }\n\n  async getPendingInfo(): Promise<PendingInfoResponse> {\n    return this.apiClient.getPendingInfo();\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.apiClient.getGasBalance(chainSymbol, address);\n  }\n\n  async getChainDetailsMapAndPoolInfoMap(): Promise<{\n    chainDetailsMap: ChainDetailsMapWithFlags;\n    poolInfoMap: PoolInfoMap;\n  }> {\n    return await this.apiClient.getTokenInfo();\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return await this.apiClient.getTransferStatus(chainSymbol, txId);\n  }\n\n  async getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    return await this.apiClient.getReceiveTransactionCost(args);\n  }\n\n  async getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap> {\n    return await this.apiClient.getPoolInfoMap(pools);\n  }\n}\n", "import { AllbridgeCoreSdkOptions } from \"../../index\";\nimport {\n  ChainDetailsMap,\n  PoolInfo,\n  PoolKeyObject,\n  TokenWithChainDetails,\n  TokenWithChainDetailsWithFlags,\n} from \"../../tokens-info\";\nimport {\n  GasBalanceResponse,\n  PendingInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\nimport { AllbridgeCoreClient, AllbridgeCoreClientWithTokens } from \"./core-client-base\";\nimport { AllbridgeCoreClientPoolsExt } from \"./core-client-pool-info-caching\";\n\nexport interface AllbridgeCoreClientFiltered extends AllbridgeCoreClient, AllbridgeCoreClientPoolsExt {\n  getChainDetailsMap(type: \"swap\" | \"pool\"): Promise<ChainDetailsMap>;\n\n  tokens(type: \"swap\" | \"pool\"): Promise<TokenWithChainDetails[]>;\n}\n\nexport class AllbridgeCoreClientFilteredImpl implements AllbridgeCoreClientFiltered {\n  private readonly isStaging: boolean;\n\n  constructor(\n    private client: AllbridgeCoreClientWithTokens & AllbridgeCoreClientPoolsExt,\n    params: AllbridgeCoreSdkOptions\n  ) {\n    this.isStaging = params.coreApiQueryParams?.staging === \"true\";\n  }\n\n  async getChainDetailsMap(type: \"swap\" | \"pool\"): Promise<ChainDetailsMap> {\n    const chainDetailsMapWithFlags = await this.client.getChainDetailsMap();\n    const result: ChainDetailsMap = {};\n\n    for (const key in chainDetailsMapWithFlags) {\n      const chainDetailsWithTokensWithFlag = chainDetailsMapWithFlags[key];\n      if (chainDetailsWithTokensWithFlag) {\n        result[key] = {\n          ...chainDetailsWithTokensWithFlag,\n          tokens: filterAndConvertToTokenWithChainDetails(chainDetailsWithTokensWithFlag.tokens, type, this.isStaging),\n        };\n      }\n    }\n    return result;\n  }\n\n  async tokens(type: \"swap\" | \"pool\"): Promise<TokenWithChainDetails[]> {\n    return filterAndConvertToTokenWithChainDetails(await this.client.tokens(), type, this.isStaging);\n  }\n\n  async getPendingInfo(): Promise<PendingInfoResponse> {\n    return this.client.getPendingInfo();\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.client.getGasBalance(chainSymbol, address);\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return await this.client.getTransferStatus(chainSymbol, txId);\n  }\n\n  async getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    return await this.client.getReceiveTransactionCost(args);\n  }\n\n  cachePut(poolKeyObject: PoolKeyObject, poolInfo: PoolInfo): void {\n    return this.client.cachePut(poolKeyObject, poolInfo);\n  }\n\n  getPoolInfoByKey(poolKeyObject: PoolKeyObject): Promise<PoolInfo> {\n    return this.client.getPoolInfoByKey(poolKeyObject);\n  }\n\n  refreshPoolInfo(poolKeyObjects?: PoolKeyObject | PoolKeyObject[]): Promise<void> {\n    return this.client.refreshPoolInfo(poolKeyObjects);\n  }\n}\n\nfunction filterAndConvertToTokenWithChainDetails(\n  tokens: TokenWithChainDetailsWithFlags[],\n  type: \"swap\" | \"pool\",\n  isStaging: boolean\n): TokenWithChainDetails[] {\n  return tokens.filter((token) => (isStaging ? true : token.flags[type])).map(convertToTokenWithChainDetails);\n}\n\nfunction convertToTokenWithChainDetails(token: TokenWithChainDetailsWithFlags): TokenWithChainDetails {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { flags, ...rest } = token;\n  return rest;\n}\n", "import Cache from \"timed-cache\";\nimport { SdkError } from \"../../exceptions\";\nimport {\n  ChainDetailsMapWithFlags,\n  PoolInfo,\n  PoolInfoMap,\n  PoolKeyObject,\n  TokenWithChainDetailsWithFlags,\n} from \"../../tokens-info\";\nimport { mapChainDetailsMapToPoolKeyObjects, mapPoolKeyObjectToPoolKey } from \"./core-api-mapper\";\nimport {\n  GasBalanceResponse,\n  PendingInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\nimport { AllbridgeCoreClientWithPoolInfo, AllbridgeCoreClientWithTokens } from \"./core-client-base\";\n\nconst _55_SECONDS_TTL = 55 * 1000;\n\nexport interface AllbridgeCoreClientPoolsExt {\n  getPoolInfoByKey(poolKeyObject: PoolKeyObject): Promise<PoolInfo>;\n  refreshPoolInfo(poolKeyObjects?: PoolKeyObject | PoolKeyObject[]): Promise<void>;\n  cachePut(poolKeyObject: PoolKeyObject, poolInfo: PoolInfo): void;\n}\n\nexport class AllbridgeCoreClientPoolInfoCaching implements AllbridgeCoreClientWithTokens, AllbridgeCoreClientPoolsExt {\n  private readonly poolInfoCache;\n\n  constructor(private readonly client: AllbridgeCoreClientWithPoolInfo) {\n    this.poolInfoCache = new PoolInfoCache();\n  }\n\n  async getChainDetailsMap(): Promise<ChainDetailsMapWithFlags> {\n    const result = await this.client.getChainDetailsMapAndPoolInfoMap();\n    return result.chainDetailsMap;\n  }\n\n  async tokens(): Promise<TokenWithChainDetailsWithFlags[]> {\n    return await this.client.tokens();\n  }\n\n  getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return this.client.getTransferStatus(chainSymbol, txId);\n  }\n\n  getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    return this.client.getReceiveTransactionCost(args);\n  }\n\n  getPendingInfo(): Promise<PendingInfoResponse> {\n    return this.client.getPendingInfo();\n  }\n\n  getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.client.getGasBalance(chainSymbol, address);\n  }\n\n  async getPoolInfoByKey(poolKeyObject: PoolKeyObject): Promise<PoolInfo> {\n    this.poolInfoCache.putAllIfNotExists((await this.client.getChainDetailsMapAndPoolInfoMap()).poolInfoMap);\n    const poolInfo = this.poolInfoCache.get(poolKeyObject);\n\n    if (poolInfo) {\n      return poolInfo;\n    } else {\n      const poolInfoMap = await this.client.getPoolInfoMap(poolKeyObject);\n      this.poolInfoCache.putAll(poolInfoMap);\n      const result = poolInfoMap[mapPoolKeyObjectToPoolKey(poolKeyObject)];\n      if (result) {\n        return result;\n      }\n      throw new SdkError(\n        \"Cannot find pool info for \" + poolKeyObject.poolAddress + \" on chain \" + poolKeyObject.chainSymbol\n      );\n    }\n  }\n\n  async refreshPoolInfo(poolKeyObjects?: PoolKeyObject | PoolKeyObject[]): Promise<void> {\n    let poolInfoMap;\n    if (poolKeyObjects) {\n      this.poolInfoCache.putAllIfNotExists((await this.client.getChainDetailsMapAndPoolInfoMap()).poolInfoMap);\n      poolInfoMap = await this.client.getPoolInfoMap(poolKeyObjects);\n    } else {\n      const result = await this.client.getChainDetailsMapAndPoolInfoMap();\n      poolInfoMap = await this.client.getPoolInfoMap(mapChainDetailsMapToPoolKeyObjects(result.chainDetailsMap));\n    }\n    this.poolInfoCache.putAll(poolInfoMap);\n  }\n\n  cachePut(poolKeyObject: PoolKeyObject, poolInfo: PoolInfo): void {\n    this.poolInfoCache.put(mapPoolKeyObjectToPoolKey(poolKeyObject), poolInfo);\n  }\n}\n\nclass PoolInfoCache {\n  private cache;\n\n  constructor() {\n    this.cache = new Cache<PoolInfo>({ defaultTtl: _55_SECONDS_TTL });\n  }\n\n  putAll(poolInfoMap: PoolInfoMap) {\n    for (const [key, value] of Object.entries(poolInfoMap)) {\n      this.cache.put(key, value);\n    }\n  }\n\n  putAllIfNotExists(poolInfoMap: PoolInfoMap) {\n    for (const [key, value] of Object.entries(poolInfoMap)) {\n      if (!this.cache.get(key)) {\n        this.cache.put(key, value);\n      }\n    }\n  }\n\n  put(key: string, poolInfo: PoolInfo) {\n    this.cache.put(key, poolInfo);\n  }\n\n  get(poolKeyObject: PoolKeyObject): PoolInfo | undefined {\n    const key = mapPoolKeyObjectToPoolKey(poolKeyObject);\n    return this.cache.get(key);\n  }\n}\n", "import { TronWeb } from \"tronweb\";\nimport { Web3 } from \"web3\";\nimport { NodeRpcUrlsConfig } from \"..\";\nimport { Chains } from \"../../chains\";\nimport { Messenger } from \"../../client/core-api/core-api.model\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport { CCTPDoesNotSupportedError } from \"../../exceptions\";\nimport { AllbridgeCoreSdkOptions, ChainSymbol, ChainType, EssentialWeb3 } from \"../../index\";\nimport { TokenWithChainDetails } from \"../../tokens-info\";\nimport { validateAmountDecimals, validateAmountGtZero } from \"../../utils/utils\";\nimport { Provider, TransactionResponse } from \"../models\";\nimport { TokenService } from \"../token\";\nimport { EvmBridgeService } from \"./evm\";\nimport { ApproveParams, CheckAllowanceParams, GetAllowanceParams, SendParams, ChainBridgeService } from \"./models\";\nimport { DefaultRawBridgeTransactionBuilder, RawBridgeTransactionBuilder } from \"./raw-bridge-transaction-builder\";\nimport { SolanaBridgeService } from \"./sol\";\nimport { SrbBridgeService } from \"./srb\";\nimport { SuiBridgeService } from \"./sui\";\nimport { TronBridgeService } from \"./trx\";\n\nexport interface BridgeService {\n  rawTxBuilder: RawBridgeTransactionBuilder;\n\n  /**\n   * Get amount of tokens approved to be sent by the bridge\n   * @param provider - will be used to access the network\n   * @param params See {@link GetAllowanceParams}\n   * @returns the amount of approved tokens\n   */\n  getAllowance(provider: Provider, params: GetAllowanceParams): Promise<string>;\n\n  /**\n   * Get amount of tokens approved to be sent by the bridge\n   * @param params See {@link GetAllowanceParams}\n   * @returns the amount of approved tokens\n   */\n  getAllowance(params: GetAllowanceParams): Promise<string>;\n\n  /**\n   * Check if the amount of approved tokens is enough to make a transfer\n   * @param provider - will be used to access the network\n   * @param params See {@link CheckAllowanceParams}\n   * @returns true if the amount of approved tokens is enough to make a transfer\n   */\n  checkAllowance(provider: Provider, params: CheckAllowanceParams): Promise<boolean>;\n\n  /**\n   * Check if the amount of approved tokens is enough to make a transfer\n   * @param params See {@link CheckAllowanceParams}\n   * @returns true if the amount of approved tokens is enough to make a transfer\n   */\n  checkAllowance(params: CheckAllowanceParams): Promise<boolean>;\n\n  /**\n   * @deprecated Use {@link rawTxBuilder}.{@link RawBridgeTransactionBuilder.approve}<p>\n   * Approve tokens usage by another address on chains\n   * <p>\n   * For ETH/USDT: due to specificity of the USDT contract:<br/>\n   * If the current allowance is not 0, this function will perform an additional transaction to set allowance to 0 before setting the new allowance value.\n   * @param provider - will be used to access the network\n   * @param approveData\n   */\n  approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;\n\n  /**\n   * @deprecated Use {@link rawTxBuilder}.{@link RawBridgeTransactionBuilder.send}<p>\n   * Send tokens through the ChainBridgeService\n   * @param provider - will be used to access the network\n   * @param params\n   */\n  send(provider: Provider, params: SendParams): Promise<TransactionResponse>;\n}\n\nexport class DefaultBridgeService implements BridgeService {\n  public rawTxBuilder: RawBridgeTransactionBuilder;\n\n  constructor(\n    private api: AllbridgeCoreClient,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    private params: AllbridgeCoreSdkOptions,\n    private tokenService: TokenService\n  ) {\n    this.rawTxBuilder = new DefaultRawBridgeTransactionBuilder(api, nodeRpcUrlsConfig, params, tokenService);\n  }\n\n  async getAllowance(a: Provider | GetAllowanceParams, b?: GetAllowanceParams): Promise<string> {\n    let provider: Provider | undefined;\n    let params: GetAllowanceParams;\n    if (b) {\n      provider = a as Provider;\n      params = b;\n    } else {\n      params = a as GetAllowanceParams;\n    }\n    const spender = getSpender(params.token, params.messenger);\n    return await this.tokenService.getAllowance({ ...params, spender }, provider);\n  }\n\n  async checkAllowance(a: Provider | CheckAllowanceParams, b?: CheckAllowanceParams): Promise<boolean> {\n    let provider: Provider | undefined;\n    let params: CheckAllowanceParams;\n    if (b) {\n      provider = a as Provider;\n      params = b;\n    } else {\n      params = a as CheckAllowanceParams;\n    }\n    const spender = getSpender(params.token, params.messenger);\n    return this.tokenService.checkAllowance({ ...params, spender }, provider);\n  }\n\n  async approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse> {\n    const spender = getSpender(approveData.token, approveData.messenger);\n    return this.tokenService.approve(provider, { ...approveData, spender });\n  }\n\n  async send(provider: Provider, params: SendParams): Promise<TransactionResponse> {\n    validateAmountGtZero(params.amount);\n    validateAmountDecimals(\"amount\", params.amount, params.sourceToken.decimals);\n    return getChainBridgeService(\n      params.sourceToken.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).send(params);\n  }\n}\n\nexport function getSpender(token: TokenWithChainDetails, messenger?: Messenger): string {\n  if (messenger && messenger == Messenger.CCTP) {\n    if (token.cctpAddress) {\n      return token.cctpAddress;\n    } else {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n    }\n  } else if (messenger && messenger == Messenger.CCTP_V2) {\n    if (token.cctpV2Address) {\n      return token.cctpV2Address;\n    } else {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP V2 protocol\");\n    }\n  } else {\n    return token.bridgeAddress;\n  }\n}\n\nexport function getChainBridgeService(\n  chainSymbol: string,\n  api: AllbridgeCoreClient,\n  nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n  params: AllbridgeCoreSdkOptions,\n  provider?: Provider\n): ChainBridgeService {\n  switch (Chains.getChainProperty(chainSymbol).chainType) {\n    case ChainType.EVM: {\n      if (provider) {\n        return new EvmBridgeService(provider as EssentialWeb3, api, nodeRpcUrlsConfig);\n      } else {\n        const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n        return new EvmBridgeService(new Web3(nodeRpcUrl), api, nodeRpcUrlsConfig);\n      }\n    }\n    case ChainType.TRX: {\n      if (provider) {\n        return new TronBridgeService(provider as TronWeb, api);\n      } else {\n        const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n        return new TronBridgeService(\n          new TronWeb({\n            fullHost: nodeRpcUrl,\n            solidityNode: nodeRpcUrl,\n            eventServer: nodeRpcUrl,\n          }),\n          api\n        );\n      }\n    }\n    case ChainType.SOLANA: {\n      return new SolanaBridgeService(\n        nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SOL),\n        {\n          wormholeMessengerProgramId: params.wormholeMessengerProgramId,\n          solanaLookUpTable: params.solanaLookUpTable,\n          cctpParams: params.cctpParams,\n          jupiterParams: {\n            jupiterUrl: params.jupiterUrl,\n            jupiterApiKeyHeader: params.jupiterApiKeyHeader,\n            jupiterMaxAccounts: params.jupiterMaxAccounts,\n          },\n        },\n        api\n      );\n    }\n    case ChainType.SRB: {\n      return new SrbBridgeService(nodeRpcUrlsConfig, params, api);\n    }\n    case ChainType.SUI: {\n      return new SuiBridgeService(nodeRpcUrlsConfig, api);\n    }\n  }\n}\n", "import { Big, BigSource } from \"big.js\";\nimport { AllbridgeCoreClientPoolsExt } from \"../client/core-api/core-client-pool-info-caching\";\nimport { ArgumentInvalidDecimalsError, InvalidAmountError, TimeoutError } from \"../exceptions\";\nimport { PoolInfo, TokenWithChainDetails } from \"../tokens-info\";\n\nexport async function getPoolInfoByToken(\n  api: AllbridgeCoreClientPoolsExt,\n  sourceChainToken: TokenWithChainDetails\n): Promise<PoolInfo> {\n  return await api.getPoolInfoByKey({\n    chainSymbol: sourceChainToken.chainSymbol,\n    poolAddress: sourceChainToken.poolAddress,\n  });\n}\n\nexport function validateAmountGtZero(amount: BigSource) {\n  if (Big(amount).lte(0)) {\n    throw new InvalidAmountError(\"Amount must be greater than zero\");\n  }\n}\n\nexport function validateAmountDecimals(argName: string, amountFloat: number | string | Big, decimalRequired: number) {\n  const amount = Big(amountFloat).toFixed();\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [integerPart, fractionalPart] = amount.split(\".\");\n\n  if (fractionalPart && fractionalPart.length > decimalRequired) {\n    throw new ArgumentInvalidDecimalsError(argName, fractionalPart.length, decimalRequired);\n  }\n}\n\nexport async function promiseWithTimeout<T>(promise: Promise<T>, msg: string, timeoutMs: number): Promise<T> {\n  return (await Promise.race([\n    promise,\n    new Promise((resolve, reject) => {\n      setTimeout(() => reject(new TimeoutError(msg)), timeoutMs);\n    }),\n  ])) as any as T;\n}\n\nexport async function promiseWithTimeoutAndRetries<T>(\n  toTry: () => Promise<T>,\n  msg: string,\n  maxRetries: number,\n  timeoutMs: number\n): Promise<T> {\n  if (maxRetries < 1)\n    throw new Error(`Bad argument: 'maxRetries' must be greater than 0, but ${maxRetries} was received.`);\n  let attemptCount = 0;\n  while (true) {\n    try {\n      return await promiseWithTimeout(toTry(), msg, timeoutMs);\n    } catch (ignoreError) {\n      if (++attemptCount >= maxRetries) throw new TimeoutError(msg);\n    }\n  }\n}\n\n/**\n * Keep calling a `fn` for `secondsToWait` seconds, if `keepWaitingIf` is true.\n * Returns an array of all attempts to call the function.\n */\nexport async function withExponentialBackoff<T>(\n  fn: (previousFailure?: T) => Promise<T>,\n  keepWaitingIf: (result: T) => boolean,\n  secondsToWait: number,\n  exponentialFactor = 1.5,\n  verbose = false\n): Promise<T[]> {\n  const attempts: T[] = [];\n\n  let count = 0;\n  const initialAttempt = await fn();\n  attempts.push(initialAttempt);\n  if (!keepWaitingIf(initialAttempt)) return attempts;\n\n  const waitUntil = new Date(Date.now() + secondsToWait * 1000).valueOf();\n  let waitTime = 1000;\n  let totalWaitTime = waitTime;\n\n  while (Date.now() < waitUntil) {\n    const lastAttempt = attempts[attempts.length - 1];\n    if (lastAttempt === undefined || !keepWaitingIf(lastAttempt)) break;\n\n    count++;\n    // Wait a beat\n    if (verbose) {\n      console.info(\n        `Waiting ${waitTime}ms before trying again (bringing the total wait time to ${totalWaitTime}ms so far, of total ${\n          secondsToWait * 1000\n        }ms)`\n      );\n    }\n    await new Promise((res) => setTimeout(res, waitTime));\n    // Exponential backoff\n    waitTime = waitTime * exponentialFactor;\n    if (new Date(Date.now() + waitTime).valueOf() > waitUntil) {\n      waitTime = waitUntil - Date.now();\n      if (verbose) {\n        console.info(`was gonna wait too long; new waitTime: ${waitTime}ms`);\n      }\n    }\n    totalWaitTime = waitTime + totalWaitTime;\n    // Try again\n    const nextAttempt = await fn(lastAttempt);\n    attempts.push(nextAttempt);\n    if (verbose && keepWaitingIf(nextAttempt)) {\n      console.info(\n        `${count}. Called ${fn.name}; ${attempts.length} prev attempts. Most recent: ${JSON.stringify(\n          attempts[attempts.length - 1],\n          null,\n          2\n        )}`\n      );\n    }\n  }\n\n  return attempts;\n}\n", "import { Big } from \"big.js\";\nimport BN from \"bn.js\";\nimport { Contract, Transaction as Web3Transaction } from \"web3\";\nimport { PayableMethodObject } from \"web3-eth-contract\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport {\n  ChainSymbol,\n  ChainType,\n  FeePaymentMethod,\n  Messenger,\n  EssentialWeb3,\n  SwapParams,\n  TransactionResponse,\n} from \"../../../models\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { RawTransaction } from \"../../models\";\nimport Bridge from \"../../models/abi/Bridge\";\nimport CctpBridge from \"../../models/abi/CctpBridge\";\nimport { getCctpSolTokenRecipientAddress } from \"../get-cctp-sol-token-recipient-address\";\nimport { SendParams, ChainBridgeService, TxSwapParamsEvm, TxSendParamsEvm } from \"../models\";\nimport { getNonce, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\n\nexport class EvmBridgeService extends ChainBridgeService {\n  chainType: ChainType.EVM = ChainType.EVM;\n\n  constructor(\n    public web3: EssentialWeb3,\n    public api: AllbridgeCoreClient,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig\n  ) {\n    super();\n  }\n\n  async send(params: SendParams): Promise<TransactionResponse> {\n    const rawTransaction = await this.buildRawTransactionSend(params);\n    return this.sendRawTransaction(rawTransaction);\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction> {\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildRawTransactionSwapFromParams(txSwapParams);\n  }\n\n  async buildRawTransactionSwapFromParams(params: TxSwapParamsEvm): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toAccountAddress,\n      toTokenAddress,\n      minimumReceiveAmount,\n    } = params;\n\n    const bridgeContract = this.getBridgeContract(contractAddress);\n\n    const swapMethod = bridgeContract.methods.swap(\n      amount,\n      fromTokenAddress,\n      toTokenAddress,\n      toAccountAddress,\n      minimumReceiveAmount\n    );\n\n    return Promise.resolve({\n      from: fromAccountAddress,\n      to: contractAddress,\n      data: swapMethod.encodeABI(),\n    });\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      messenger,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = txSendParams;\n\n    const nonce = \"0x\" + getNonce().toString(\"hex\");\n    let sendMethod: PayableMethodObject;\n    let value: string;\n\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n    if (messenger === Messenger.CCTP || messenger === Messenger.CCTP_V2) {\n      const cctp = await this.buildRawTransactionCctpSend(params, txSendParams, totalFee);\n      sendMethod = cctp.sendMethod;\n      value = cctp.value;\n    } else {\n      const bridgeContract = this.getBridgeContract(contractAddress);\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        sendMethod = bridgeContract.methods.swapAndBridge(\n          fromTokenAddress,\n          amount,\n          toAccountAddress,\n          toChainId,\n          toTokenAddress,\n          nonce,\n          messenger,\n          totalFee\n        );\n        value = \"0\";\n      } else {\n        sendMethod = bridgeContract.methods.swapAndBridge(\n          fromTokenAddress,\n          amount,\n          toAccountAddress,\n          toChainId,\n          toTokenAddress,\n          nonce,\n          messenger,\n          0\n        );\n        value = totalFee;\n      }\n    }\n\n    return Promise.resolve({\n      from: fromAccountAddress,\n      to: contractAddress,\n      value: value,\n      data: sendMethod.encodeABI(),\n    });\n  }\n\n  private async buildRawTransactionCctpSend(\n    params: SendParams,\n    txSendParams: TxSendParamsEvm,\n    totalFee: string\n  ): Promise<{\n    sendMethod: PayableMethodObject;\n    value: string;\n  }> {\n    const { amount, contractAddress, toChainId, toAccountAddress, gasFeePaymentMethod } = txSendParams;\n\n    const cctpBridgeContract = this.getCctpBridgeContract(contractAddress);\n    let sendMethod: PayableMethodObject;\n    let value: string;\n\n    if (params.destinationToken.chainType === ChainType.SOLANA) {\n      const recipient = await getCctpSolTokenRecipientAddress(\n        this.chainType,\n        params.toAccountAddress,\n        params.destinationToken.tokenAddress,\n        this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SOL)\n      );\n\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        sendMethod = cctpBridgeContract.methods.bridgeWithWalletAddress(\n          amount,\n          recipient,\n          toAccountAddress,\n          toChainId,\n          totalFee\n        );\n        value = \"0\";\n      } else {\n        sendMethod = cctpBridgeContract.methods.bridgeWithWalletAddress(\n          amount,\n          recipient,\n          toAccountAddress,\n          toChainId,\n          0\n        );\n        value = totalFee;\n      }\n    } else {\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        sendMethod = cctpBridgeContract.methods.bridge(amount, toAccountAddress, toChainId, totalFee);\n        value = \"0\";\n      } else {\n        sendMethod = cctpBridgeContract.methods.bridge(amount, toAccountAddress, toChainId, 0);\n        value = totalFee;\n      }\n    }\n    return { sendMethod, value };\n  }\n\n  private async sendRawTransaction(rawTransaction: RawTransaction) {\n    const estimateGas = await this.web3.eth.estimateGas(rawTransaction as Web3Transaction);\n\n    // @ts-expect-error DISABLE SITE SUGGESTED GAS FEE IN METAMASK\n    // prettier-ignore\n    const feeOptions: { maxPriorityFeePerGas?: number | string | BN; maxFeePerGas?: number | string | BN } = { maxPriorityFeePerGas: null, maxFeePerGas: null };\n    const { transactionHash } = await this.web3.eth.sendTransaction({\n      ...(rawTransaction as object),\n      gas: estimateGas,\n      ...feeOptions,\n    } as Web3Transaction);\n    return { txId: transactionHash.toString() };\n  }\n\n  private getBridgeContract(contractAddress: string) {\n    return new this.web3.eth.Contract(Bridge.abi, contractAddress) as Contract<typeof Bridge.abi>;\n  }\n\n  private getCctpBridgeContract(contractAddress: string) {\n    return new this.web3.eth.Contract(CctpBridge.abi, contractAddress) as Contract<typeof CctpBridge.abi>;\n  }\n}\n", "const artifact = {\n  abi: [\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"_chainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"_chainPrecision\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"contract Messenger\",\n          name: \"_allbridgeMessenger\",\n          type: \"address\",\n        },\n        {\n          internalType: \"contract WormholeMessenger\",\n          name: \"_wormholeMessenger\",\n          type: \"address\",\n        },\n        {\n          internalType: \"contract IGasOracle\",\n          name: \"_gasOracle\",\n          type: \"address\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"constructor\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"gas\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"BridgingFeeFromTokens\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"previousOwner\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"newOwner\",\n          type: \"address\",\n        },\n      ],\n      name: \"OwnershipTransferred\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"bridgeTransactionCost\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"messageTransactionCost\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"ReceiveFee\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"sender\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"Received\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"sender\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"recipient\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"sendToken\",\n          type: \"bytes32\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"receiveToken\",\n          type: \"bytes32\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"sendAmount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"receiveAmount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"Swapped\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"recipient\",\n          type: \"bytes32\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"nonce\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"enum MessengerProtocol\",\n          name: \"messenger\",\n          type: \"uint8\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"message\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"TokensReceived\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"recipient\",\n          type: \"bytes32\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"destinationChainId\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"receiveToken\",\n          type: \"bytes32\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"nonce\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"enum MessengerProtocol\",\n          name: \"messenger\",\n          type: \"uint8\",\n        },\n      ],\n      name: \"TokensSent\",\n      type: \"event\",\n    },\n    {\n      stateMutability: \"payable\",\n      type: \"fallback\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"_chainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"tokenAddress\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"addBridgeToken\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"contract Pool\",\n          name: \"pool\",\n          type: \"address\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"token\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"addPool\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"canSwap\",\n      outputs: [\n        {\n          internalType: \"uint8\",\n          name: \"\",\n          type: \"uint8\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"chainId\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"gasUsage\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"destinationChainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"enum MessengerProtocol\",\n          name: \"messenger\",\n          type: \"uint8\",\n        },\n        {\n          internalType: \"address\",\n          name: \"tokenAddress\",\n          type: \"address\",\n        },\n      ],\n      name: \"getBridgingCostInTokens\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"enum MessengerProtocol\",\n          name: \"protocol\",\n          type: \"uint8\",\n        },\n      ],\n      name: \"getMessageCost\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"enum MessengerProtocol\",\n          name: \"protocol\",\n          type: \"uint8\",\n        },\n      ],\n      name: \"getMessageGasUsage\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getTransactionCost\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"message\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"enum MessengerProtocol\",\n          name: \"protocol\",\n          type: \"uint8\",\n        },\n      ],\n      name: \"hasReceivedMessage\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"message\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"hasSentMessage\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"recipient\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"sourceChainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"destinationChainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"receiveToken\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"nonce\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"enum MessengerProtocol\",\n          name: \"messenger\",\n          type: \"uint8\",\n        },\n      ],\n      name: \"hashMessage\",\n      outputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"\",\n          type: \"bytes32\",\n        },\n      ],\n      stateMutability: \"pure\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"tokenAddress\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"otherBridgeTokens\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"isSupported\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"otherBridges\",\n      outputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"bridgeAddress\",\n          type: \"bytes32\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"owner\",\n      outputs: [\n        {\n          internalType: \"address\",\n          name: \"\",\n          type: \"address\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"tokenId\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"pools\",\n      outputs: [\n        {\n          internalType: \"contract Pool\",\n          name: \"\",\n          type: \"address\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"messageHash\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"processedMessages\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"isProcessed\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"recipient\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"sourceChainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"receiveToken\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"nonce\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"enum MessengerProtocol\",\n          name: \"messenger\",\n          type: \"uint8\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"receiveAmountMin\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"receiveTokens\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"_chainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"bridgeAddress\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"registerBridge\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"_chainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"tokenAddress\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"removeBridgeToken\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"renounceOwnership\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"messageHash\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"sentMessages\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"isSent\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"contract Messenger\",\n          name: \"_allbridgeMessenger\",\n          type: \"address\",\n        },\n      ],\n      name: \"setAllbridgeMessenger\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"contract IGasOracle\",\n          name: \"_gasOracle\",\n          type: \"address\",\n        },\n      ],\n      name: \"setGasOracle\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"gasAmount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"setGasUsage\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"_rebalancer\",\n          type: \"address\",\n        },\n      ],\n      name: \"setRebalancer\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"_stopAuthority\",\n          type: \"address\",\n        },\n      ],\n      name: \"setStopAuthority\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"contract WormholeMessenger\",\n          name: \"_wormholeMessenger\",\n          type: \"address\",\n        },\n      ],\n      name: \"setWormholeMessenger\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"startSwap\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"stopSwap\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"token\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"receiveToken\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"address\",\n          name: \"recipient\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"receiveAmountMin\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"swap\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes32\",\n          name: \"token\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"recipient\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"destinationChainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"receiveToken\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"nonce\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"enum MessengerProtocol\",\n          name: \"messenger\",\n          type: \"uint8\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"feeTokenAmount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"swapAndBridge\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"newOwner\",\n          type: \"address\",\n        },\n      ],\n      name: \"transferOwnership\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"contract IERC20\",\n          name: \"token\",\n          type: \"address\",\n        },\n      ],\n      name: \"withdrawBridgingFeeInTokens\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"withdrawGasTokens\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      stateMutability: \"payable\",\n      type: \"receive\",\n    },\n  ],\n} as const;\nexport default artifact;\n", "const artifact = {\n  abi: [\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId_\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"chainPrecision_\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"address\",\n          name: \"tokenAddress\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"cctpMessenger_\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"cctpTransmitter_\",\n          type: \"address\",\n        },\n        {\n          internalType: \"contract IGasOracle\",\n          name: \"gasOracle_\",\n          type: \"address\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"constructor\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"previousOwner\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"newOwner\",\n          type: \"address\",\n        },\n      ],\n      name: \"OwnershipTransferred\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"recipient\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"ReceivedExtraGas\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"sender\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"ReceivedGas\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"sender\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"nonce\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"newRecipient\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"RecipientReplaced\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"recipientWalletAddress\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"TokensSentExtras\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"sender\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"bytes32\",\n          name: \"recipient\",\n          type: \"bytes32\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"destinationChainId\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"nonce\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"receivedRelayerFeeFromGas\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"receivedRelayerFeeFromTokens\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"relayerFee\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"receivedRelayerFeeTokenAmount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"adminFeeTokenAmount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"TokensSent\",\n      type: \"event\",\n    },\n    {\n      stateMutability: \"payable\",\n      type: \"fallback\",\n    },\n    {\n      inputs: [],\n      name: \"adminFeeShareBP\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"recipient\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"destinationChainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"relayerFeeTokenAmount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"bridge\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"recipient\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"recipientWalletAddress\",\n          type: \"bytes32\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"destinationChainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"relayerFeeTokenAmount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"bridgeWithWalletAddress\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"chainId\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"bytes\",\n          name: \"originalMessage\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"originalAttestation\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"bytes32\",\n          name: \"newRecipient\",\n          type: \"bytes32\",\n        },\n      ],\n      name: \"changeRecipient\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"gasUsage\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"destinationChainId\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getBridgingCostInTokens\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId_\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getDomainByChainId\",\n      outputs: [\n        {\n          internalType: \"uint32\",\n          name: \"\",\n          type: \"uint32\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getTransactionCost\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"sourceChainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint64\",\n          name: \"nonce\",\n          type: \"uint64\",\n        },\n      ],\n      name: \"isMessageProcessed\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"owner\",\n      outputs: [\n        {\n          internalType: \"address\",\n          name: \"\",\n          type: \"address\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"recipient\",\n          type: \"address\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"message\",\n          type: \"bytes\",\n        },\n        {\n          internalType: \"bytes\",\n          name: \"signature\",\n          type: \"bytes\",\n        },\n      ],\n      name: \"receiveTokens\",\n      outputs: [],\n      stateMutability: \"payable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId_\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint32\",\n          name: \"domain\",\n          type: \"uint32\",\n        },\n      ],\n      name: \"registerBridgeDestination\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"renounceOwnership\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"adminFeeShareBP_\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"setAdminFeeShare\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"contract IGasOracle\",\n          name: \"gasOracle_\",\n          type: \"address\",\n        },\n      ],\n      name: \"setGasOracle\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"gasAmount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"setGasUsage\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"newOwner\",\n          type: \"address\",\n        },\n      ],\n      name: \"transferOwnership\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"chainId_\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"unregisterBridgeDestination\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"withdrawFeeInTokens\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"withdrawGas\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      stateMutability: \"payable\",\n      type: \"receive\",\n    },\n  ],\n} as const;\nexport default artifact;\n", "import * as anchor from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { ChainType } from \"../../chains/chain.enums\";\nimport { SdkError } from \"../../exceptions\";\nimport { getAssociatedAccount } from \"../utils/sol/accounts\";\nimport { buildAnchorProvider } from \"../utils/sol/anchor-provider\";\nimport { formatAddress } from \"./utils\";\n\n// 1. OVERLOADS\nexport function getCctpSolTokenRecipientAddress(\n  chainType: ChainType.EVM | ChainType.SUI,\n  toAccountAddress: string,\n  destinationTokenAddress: string,\n  solRpcUrl: string\n): Promise<string>;\nexport function getCctpSolTokenRecipientAddress(\n  chainType: ChainType.TRX,\n  toAccountAddress: string,\n  destinationTokenAddress: string,\n  solRpcUrl: string\n): Promise<Buffer>;\nexport function getCctpSolTokenRecipientAddress(\n  chainType: ChainType.SOLANA | ChainType.SRB,\n  toAccountAddress: string,\n  destinationTokenAddress: string,\n  solRpcUrl: string\n): Promise<number[]>;\nexport function getCctpSolTokenRecipientAddress(\n  chainType: ChainType,\n  toAccountAddress: string,\n  destinationTokenAddress: string,\n  solRpcUrl: string\n): Promise<string | number[] | Buffer>;\n\n// 2. COMMON Realization\nexport async function getCctpSolTokenRecipientAddress(\n  chainType: ChainType,\n  toAccountAddress: string,\n  destinationTokenAddress: string,\n  solRpcUrl: string\n): Promise<string | number[] | Buffer> {\n  let recipientWalletAddress: string | number[] | Buffer;\n  const receiverAccount = new PublicKey(toAccountAddress);\n  const receiveMint = new PublicKey(destinationTokenAddress);\n  const receiveUserToken = await getAssociatedAccount(receiverAccount, receiveMint);\n  const provider = buildAnchorProvider(solRpcUrl, toAccountAddress);\n  anchor.setProvider(provider);\n  const accountData = await anchor.Spl.token(provider).account.token.fetchNullable(receiveUserToken);\n  if (accountData?.authority.equals(receiverAccount)) {\n    recipientWalletAddress = formatAddress(receiveUserToken.toBase58(), ChainType.SOLANA, chainType);\n  } else {\n    const tokenAccounts = await provider.connection.getTokenAccountsByOwner(receiverAccount, {\n      mint: receiveMint,\n    });\n    if (tokenAccounts.value.length === 0 && !accountData) {\n      recipientWalletAddress = formatAddress(receiveUserToken.toBase58(), ChainType.SOLANA, chainType);\n    } else if (tokenAccounts.value.length > 0) {\n      const firstTokenAccount = tokenAccounts.value[0];\n\n      if (!firstTokenAccount?.pubkey) {\n        throw new SdkError(\"First token account or its public key is undefined\");\n      }\n      recipientWalletAddress = formatAddress(firstTokenAccount.pubkey.toBase58(), ChainType.SOLANA, chainType);\n    } else {\n      throw new SdkError(\"Associated account has wrong owner\");\n    }\n  }\n  return recipientWalletAddress;\n}\n", "import * as anchor from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport async function getAssociatedAccount(publicKey: PublicKey, mintAccount: PublicKey): Promise<PublicKey> {\n  return anchor.utils.token.associatedAddress({\n    mint: mintAccount,\n    owner: publicKey,\n  });\n}\n\nexport async function getConfigAccount(programId: PublicKey): Promise<PublicKey> {\n  const [configPda] = await PublicKey.findProgramAddress([anchor.utils.bytes.utf8.encode(\"config\")], programId);\n  return configPda;\n}\n\nexport async function getLockAccount(nonce: number[], bridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [lockPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"lock\"), Uint8Array.from(nonce)],\n    bridgeProgramId\n  );\n  return lockPda;\n}\n\nexport async function getPriceAccount(chainId: number, gasOracleProgramId: PublicKey): Promise<PublicKey> {\n  const [pricePda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"price_v2\"), Uint8Array.from([chainId])],\n    gasOracleProgramId\n  );\n  return pricePda;\n}\n\nexport async function getAuthorityAccount(bridgeProgramId: PublicKey): Promise<PublicKey> {\n  const configAccount = await getConfigAccount(bridgeProgramId);\n  const [poolAuthority] = await PublicKey.findProgramAddress([configAccount.toBuffer()], bridgeProgramId);\n  return poolAuthority;\n}\n\nexport async function getCctpAuthorityAccount(\n  cctpBridgeAccount: PublicKey,\n  cctpBridgeProgramId: PublicKey\n): Promise<PublicKey> {\n  const [poolAuthority] = await PublicKey.findProgramAddress([cctpBridgeAccount.toBuffer()], cctpBridgeProgramId);\n  return poolAuthority;\n}\n\nexport async function getBridgeTokenAccount(mintAccount: PublicKey, bridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [poolPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"token\"), mintAccount.toBytes()],\n    bridgeProgramId\n  );\n  return poolPda;\n}\n\nexport async function getOtherChainTokenAccount(\n  chainId: number,\n  token: Buffer,\n  bridgeProgramId: PublicKey\n): Promise<PublicKey> {\n  const [otherChainTokenPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"other_bridge_token\"), Buffer.from([chainId]), token],\n    bridgeProgramId\n  );\n  return otherChainTokenPda;\n}\n\nexport async function getChainBridgeAccount(chainId: number, bridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [chainBridgePda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"chain_bridge\"), Uint8Array.from([chainId])],\n    bridgeProgramId\n  );\n  return chainBridgePda;\n}\n\nexport async function getGasUsageAccount(chainId: number, messengerProgramId: PublicKey): Promise<PublicKey> {\n  const [chainBridgePda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"gas_usage\"), Uint8Array.from([chainId])],\n    messengerProgramId\n  );\n  return chainBridgePda;\n}\n\nexport async function getSendMessageAccount(\n  messageWithSigner: Uint8Array,\n  messengerProgramId: PublicKey\n): Promise<PublicKey> {\n  const [sentMessagePda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"sent_message\"), messageWithSigner],\n    messengerProgramId\n  );\n  return sentMessagePda;\n}\n\nexport async function getUserDepositAccount(\n  userPublicKey: PublicKey,\n  tokenMintAccount: PublicKey,\n  bridgeProgramId: PublicKey\n): Promise<PublicKey> {\n  const [userDepositPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"user_deposit\"), tokenMintAccount.toBytes(), userPublicKey.toBytes()],\n    bridgeProgramId\n  );\n  return userDepositPda;\n}\n\nexport async function getCctpBridgeAccount(mintAccount: PublicKey, cctpBridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [configPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"cctp_bridge\"), mintAccount.toBytes()],\n    cctpBridgeProgramId\n  );\n  return configPda;\n}\n\nexport async function getCctpBridgeTokenAccount(token: PublicKey, cctpBridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [poolPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"token\"), token.toBytes()],\n    cctpBridgeProgramId\n  );\n  return poolPda;\n}\n\nexport function getCctpLockAccount(cctpBridgeProgramId: PublicKey, messageSentEventDataAccount: PublicKey): PublicKey {\n  const [tokenMessengerEventAuthority] = PublicKey.findProgramAddressSync(\n    [anchor.utils.bytes.utf8.encode(\"lock\"), messageSentEventDataAccount.toBuffer()],\n    cctpBridgeProgramId\n  );\n  return tokenMessengerEventAuthority;\n}\n\nexport function getCctpAccounts(\n  domain: number,\n  mintAccount: PublicKey,\n  cctpTransmitterProgramId: PublicKey,\n  cctpTokenMessengerMinter: PublicKey\n) {\n  const messageTransmitterAccount = findProgramAddress(\"message_transmitter\", cctpTransmitterProgramId);\n  const tokenMessenger = findProgramAddress(\"token_messenger\", cctpTokenMessengerMinter);\n  const tokenMessengerEventAuthority = findProgramAddress(\"__event_authority\", cctpTokenMessengerMinter);\n  const tokenMinter = findProgramAddress(\"token_minter\", cctpTokenMessengerMinter);\n  const localToken = findProgramAddress(\"local_token\", cctpTokenMessengerMinter, [mintAccount]);\n  const remoteTokenMessengerKey = findProgramAddress(\"remote_token_messenger\", cctpTokenMessengerMinter, [\n    domain.toString(),\n  ]);\n  const authorityPda = findProgramAddress(\"sender_authority\", cctpTokenMessengerMinter);\n  return {\n    messageTransmitterAccount,\n    tokenMessenger,\n    tokenMessengerEventAuthority,\n    tokenMinter,\n    localToken,\n    remoteTokenMessengerKey,\n    authorityPda,\n  };\n}\n\nfunction findProgramAddress(\n  label: string,\n  programId: PublicKey,\n  extraSeeds: (string | number[] | Buffer | PublicKey)[] = []\n): PublicKey {\n  const seeds = [Buffer.from(anchor.utils.bytes.utf8.encode(label))];\n  for (const extraSeed of extraSeeds) {\n    if (typeof extraSeed === \"string\") {\n      seeds.push(Buffer.from(anchor.utils.bytes.utf8.encode(extraSeed)));\n    } else if (Array.isArray(extraSeed)) {\n      seeds.push(Buffer.from(Uint8Array.from(extraSeed)));\n    } else if (Buffer.isBuffer(extraSeed)) {\n      seeds.push(Buffer.from(Uint8Array.from(extraSeed)));\n    } else {\n      seeds.push(Buffer.from(Uint8Array.from(extraSeed.toBuffer())));\n    }\n  }\n  const res = PublicKey.findProgramAddressSync(seeds, programId);\n  return res[0];\n}\n", "import { AnchorProvider, Provider } from \"@project-serum/anchor\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport function buildAnchorProvider(solanaRpcUrl: string, accountAddress: string): Provider {\n  const connection = new Connection(solanaRpcUrl, \"confirmed\");\n\n  const publicKey = new PublicKey(accountAddress);\n\n  return new AnchorProvider(\n    connection,\n    // @ts-expect-error enough wallet for fetch actions\n    { publicKey: publicKey },\n    {\n      preflightCommitment: \"confirmed\",\n      commitment: \"confirmed\",\n    }\n  );\n}\n", "import { PublicKey } from \"@solana/web3.js\";\nimport { Address } from \"@stellar/stellar-sdk\";\nimport { Big, BigSource } from \"big.js\";\nimport randomBytes from \"randombytes\";\nimport { utils as TronWebUtils } from \"tronweb\";\nimport { Chains } from \"../../chains\";\nimport { Messenger } from \"../../client/core-api/core-api.model\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport {\n  AmountNotEnoughError,\n  CCTPDoesNotSupportedError,\n  ExtraGasMaxLimitExceededError,\n  InvalidGasFeePaymentOptionError,\n  SdkError,\n} from \"../../exceptions\";\nimport {\n  AmountFormat,\n  ChainType,\n  ExtraGasMaxLimitResponse,\n  ExtraGasMaxLimits,\n  FeePaymentMethod,\n  GasFeeOptions,\n  SwapParams,\n} from \"../../models\";\nimport { ChainDetailsMap, TokenWithChainDetails } from \"../../tokens-info\";\nimport { convertAmountPrecision, convertFloatAmountToInt, convertIntAmountToFloat } from \"../../utils/calculation\";\nimport {\n  SendParams,\n  TxSendParams,\n  TxSendParamsEvm,\n  TxSendParamsSol,\n  TxSendParamsSrb,\n  TxSendParamsSui,\n  TxSendParamsTrx,\n  TxSwapParams,\n  TxSwapParamsEvm,\n  TxSwapParamsSol,\n  TxSwapParamsSrb,\n  TxSwapParamsSui,\n  TxSwapParamsTrx,\n} from \"./models\"; // 1. OVERLOADS\n\n// 1. OVERLOADS\nexport function formatAddress(address: string, from: ChainType, to: ChainType.EVM | ChainType.SUI): string;\nexport function formatAddress(address: string, from: ChainType, to: ChainType.TRX): Buffer;\nexport function formatAddress(address: string, from: ChainType, to: ChainType.SOLANA | ChainType.SRB): number[];\nexport function formatAddress(address: string, from: ChainType, to: ChainType): string | number[] | Buffer;\n\n// 2. COMMON Realization\nexport function formatAddress(address: string, from: ChainType, to: ChainType): string | number[] | Buffer {\n  let buffer: Buffer;\n  switch (from) {\n    case ChainType.EVM: {\n      buffer = evmAddressToBuffer32(address);\n      break;\n    }\n    case ChainType.SOLANA: {\n      buffer = new PublicKey(address).toBuffer();\n      break;\n    }\n    case ChainType.TRX: {\n      buffer = tronAddressToBuffer32(address);\n      break;\n    }\n    case ChainType.SRB: {\n      buffer = new Address(address).toBuffer();\n      break;\n    }\n    case ChainType.SUI: {\n      buffer = evmAddressToBuffer32(address);\n      break;\n    }\n  }\n\n  switch (to) {\n    case ChainType.EVM: {\n      return \"0x\" + buffer.toString(\"hex\");\n    }\n    case ChainType.SOLANA: {\n      return Array.from(buffer);\n    }\n    case ChainType.TRX: {\n      return buffer;\n    }\n    case ChainType.SRB: {\n      return buffer.toJSON().data;\n    }\n    case ChainType.SUI: {\n      return \"0x\" + buffer.toString(\"hex\");\n    }\n  }\n}\n\nexport function normalizeSuiHex(hex: string): string {\n  return hex.replace(/^0x/i, \"\");\n}\n\nexport function hexToBuffer(hex: string): Buffer {\n  return Buffer.from(hex.replace(/^0x/i, \"\"), \"hex\");\n}\n\nexport function evmAddressToBuffer32(address: string): Buffer {\n  const length = 32;\n  const buff = hexToBuffer(address);\n  return Buffer.concat([Buffer.alloc(length - buff.length, 0), buff], length);\n}\n\nexport function tronAddressToBuffer32(address: string): Buffer {\n  const ethAddress = tronAddressToEthAddress(address);\n  const buffer = hexToBuffer(ethAddress);\n  return bufferToSize(buffer, 32);\n}\n\nexport function tronAddressToEthAddress(address: string): string {\n  const bytes = TronWebUtils.crypto.decodeBase58Address(address);\n  if (!bytes) return \"\";\n  return TronWebUtils.bytes.byteArray2hexStr(bytes).replace(/^41/, \"0x\");\n}\n\nfunction bufferToSize(buffer: Buffer, size: number): Buffer {\n  if (buffer.length >= size) {\n    return buffer;\n  }\n  const result = Buffer.alloc(size, 0);\n  buffer.copy(result, size - buffer.length);\n  return result;\n}\n\nexport function getTokenByTokenAddress(\n  chainDetailsMap: ChainDetailsMap,\n  chainSymbol: string,\n  tokenAddress: string\n): TokenWithChainDetails {\n  const chainDetail = chainDetailsMap[chainSymbol];\n  if (!chainDetail) {\n    throw new SdkError(\"Cannot find chain detail for \" + chainSymbol);\n  }\n  const token = chainDetail.tokens.find((value) => value.tokenAddress.toUpperCase() === tokenAddress.toUpperCase());\n  if (!token) {\n    throw new SdkError(\"Cannot find token info about token \" + tokenAddress + \" on chain \" + chainSymbol);\n  }\n  return token;\n}\n\nexport function getNonce(): Buffer {\n  return randomBytes(32);\n}\n\nexport function getNonceBigInt(): bigint {\n  const bigint = randomBytes(32).readBigInt64BE();\n  if (bigint < 0) {\n    return bigint * -1n;\n  }\n  return bigint;\n}\n\n// 1. OVERLOADS\nexport function prepareTxSwapParams(\n  bridgeChainType: ChainType.EVM | ChainType.SUI,\n  params: SwapParams\n): TxSwapParamsEvm | TxSwapParamsSui;\nexport function prepareTxSwapParams(bridgeChainType: ChainType.TRX, params: SwapParams): TxSwapParamsTrx;\nexport function prepareTxSwapParams(\n  bridgeChainType: ChainType.SOLANA | ChainType.SRB,\n  params: SwapParams\n): TxSwapParamsSol | TxSwapParamsSrb;\nexport function prepareTxSwapParams(bridgeChainType: ChainType, params: SwapParams): TxSwapParams;\n\n// 2. COMMON Realization\nexport function prepareTxSwapParams(bridgeChainType: ChainType, params: SwapParams): TxSwapParams {\n  const txSwapParams = {} as TxSwapParams;\n  const sourceToken = params.sourceToken;\n  txSwapParams.amount = convertFloatAmountToInt(params.amount, sourceToken.decimals).toFixed();\n  txSwapParams.contractAddress = sourceToken.bridgeAddress;\n  txSwapParams.fromAccountAddress = params.fromAccountAddress;\n  if (bridgeChainType === ChainType.SUI) {\n    if (!sourceToken.originTokenAddress) {\n      throw new SdkError(\"SUI sourceToken must contain 'originTokenAddress'\");\n    }\n    txSwapParams.fromTokenAddress = sourceToken.originTokenAddress;\n  } else {\n    txSwapParams.fromTokenAddress = formatAddress(sourceToken.tokenAddress, bridgeChainType, bridgeChainType);\n  }\n  txSwapParams.toAccountAddress = params.toAccountAddress;\n  if (bridgeChainType === ChainType.SUI) {\n    if (!params.destinationToken.originTokenAddress) {\n      throw new SdkError(\"SUI destinationToken must contain 'originTokenAddress'\");\n    }\n    txSwapParams.toTokenAddress = params.destinationToken.originTokenAddress;\n  } else {\n    txSwapParams.toTokenAddress = formatAddress(params.destinationToken.tokenAddress, bridgeChainType, bridgeChainType);\n  }\n  txSwapParams.minimumReceiveAmount = params.minimumReceiveAmount\n    ? convertFloatAmountToInt(params.minimumReceiveAmount, params.destinationToken.decimals).toFixed()\n    : \"0\";\n  return txSwapParams;\n}\n\n// 1. OVERLOADS\nexport function prepareTxSendParams(\n  bridgeChainType: ChainType.EVM | ChainType.SUI,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParamsEvm | TxSendParamsSui>;\nexport function prepareTxSendParams(\n  bridgeChainType: ChainType.TRX,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParamsTrx>;\nexport function prepareTxSendParams(\n  bridgeChainType: ChainType.SOLANA | ChainType.SRB,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParamsSol | TxSendParamsSrb>;\nexport function prepareTxSendParams(\n  bridgeChainType: ChainType,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParams>;\n\n// 2. COMMON Realization\nexport async function prepareTxSendParams(\n  bridgeChainType: ChainType,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParams> {\n  const txSendParams = {} as TxSendParams;\n\n  txSendParams.fromChainId = params.sourceToken.allbridgeChainId;\n  txSendParams.fromChainSymbol = params.sourceToken.chainSymbol;\n  const toChainType = Chains.getChainProperty(params.destinationToken.chainSymbol).chainType;\n  if (bridgeChainType === ChainType.SUI) {\n    if (!params.sourceToken.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    txSendParams.fromTokenAddress = params.sourceToken.originTokenAddress;\n  } else {\n    txSendParams.fromTokenAddress = params.sourceToken.tokenAddress;\n  }\n\n  txSendParams.toChainId = params.destinationToken.allbridgeChainId;\n  txSendParams.toTokenAddress = params.destinationToken.tokenAddress;\n\n  if (params.gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n    txSendParams.gasFeePaymentMethod = FeePaymentMethod.WITH_STABLECOIN;\n  } else {\n    // default FeePaymentMethod.WITH_NATIVE_CURRENCY\n    txSendParams.gasFeePaymentMethod = FeePaymentMethod.WITH_NATIVE_CURRENCY;\n  }\n  const sourceToken = params.sourceToken;\n\n  if (params.messenger === Messenger.CCTP) {\n    if (!sourceToken.cctpAddress || !params.destinationToken.cctpAddress) {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n    }\n    txSendParams.contractAddress = sourceToken.cctpAddress;\n  } else if (params.messenger === Messenger.CCTP_V2) {\n    if (!sourceToken.cctpV2Address || !params.destinationToken.cctpV2Address) {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP V2 protocol\");\n    }\n    txSendParams.contractAddress = sourceToken.cctpV2Address;\n  } else {\n    txSendParams.contractAddress = sourceToken.bridgeAddress;\n  }\n\n  txSendParams.messenger = params.messenger;\n  txSendParams.fromAccountAddress = params.fromAccountAddress;\n  txSendParams.amount = convertFloatAmountToInt(params.amount, sourceToken.decimals).toFixed();\n\n  //Fee\n  let { fee, feeFormat } = params;\n  if (!fee) {\n    const gasFeeOptions = await getGasFeeOptions(\n      txSendParams.fromChainId,\n      params.sourceToken.chainType,\n      txSendParams.toChainId,\n      sourceToken.decimals,\n      txSendParams.messenger,\n      api\n    );\n\n    const gasFeeOption = gasFeeOptions[txSendParams.gasFeePaymentMethod];\n    if (!gasFeeOption) {\n      throw new InvalidGasFeePaymentOptionError();\n    }\n    fee = gasFeeOption[AmountFormat.INT];\n    feeFormat = AmountFormat.INT;\n  }\n  if (feeFormat == AmountFormat.FLOAT) {\n    switch (txSendParams.gasFeePaymentMethod) {\n      case FeePaymentMethod.WITH_NATIVE_CURRENCY:\n        txSendParams.fee = convertFloatAmountToInt(fee, Chains.getChainDecimalsByType(sourceToken.chainType)).toFixed(\n          0\n        );\n        break;\n      case FeePaymentMethod.WITH_STABLECOIN:\n        txSendParams.fee = convertFloatAmountToInt(fee, sourceToken.decimals).toFixed(0);\n        break;\n    }\n  } else {\n    txSendParams.fee = fee;\n  }\n\n  //ExtraGas\n  const { extraGas, extraGasFormat } = params;\n  if (extraGas && +extraGas > 0) {\n    if (extraGasFormat == AmountFormat.FLOAT) {\n      switch (txSendParams.gasFeePaymentMethod) {\n        case FeePaymentMethod.WITH_NATIVE_CURRENCY:\n          txSendParams.extraGas = convertFloatAmountToInt(\n            extraGas,\n            Chains.getChainDecimalsByType(sourceToken.chainType)\n          ).toFixed(0);\n          break;\n        case FeePaymentMethod.WITH_STABLECOIN:\n          txSendParams.extraGas = convertFloatAmountToInt(extraGas, sourceToken.decimals).toFixed(0);\n          break;\n      }\n    } else {\n      txSendParams.extraGas = extraGas;\n    }\n    await validateExtraGasNotExceeded(\n      txSendParams.extraGas,\n      txSendParams.gasFeePaymentMethod,\n      sourceToken,\n      params.destinationToken,\n      api\n    );\n  }\n\n  if (bridgeChainType !== ChainType.SUI) {\n    txSendParams.fromTokenAddress = formatAddress(txSendParams.fromTokenAddress, bridgeChainType, bridgeChainType);\n  }\n  txSendParams.toAccountAddress = formatAddress(params.toAccountAddress, toChainType, bridgeChainType);\n  txSendParams.toTokenAddress = formatAddress(txSendParams.toTokenAddress, toChainType, bridgeChainType);\n  if (txSendParams.gasFeePaymentMethod == FeePaymentMethod.WITH_STABLECOIN) {\n    validateAmountEnough(txSendParams.amount, sourceToken.decimals, txSendParams.fee, txSendParams.extraGas);\n  }\n  return txSendParams;\n}\n\nfunction validateAmountEnough(\n  amountInt: BigSource,\n  decimals: number,\n  feeInt: BigSource,\n  extraGasInt: BigSource | undefined\n) {\n  const amountTotal = Big(amountInt)\n    .minus(feeInt)\n    .minus(extraGasInt ?? 0);\n  if (amountTotal.lte(0)) {\n    throw new AmountNotEnoughError(\n      `Amount not enough to pay fee, ${convertIntAmountToFloat(\n        Big(amountTotal).minus(1).neg(),\n        decimals\n      ).toFixed()} stables is missing`\n    );\n  }\n}\n\nexport async function getGasFeeOptions(\n  sourceAllbridgeChainId: number,\n  sourceChainType: ChainType,\n  destinationAllbridgeChainId: number,\n  sourceChainTokenDecimals: number,\n  messenger: Messenger,\n  api: AllbridgeCoreClient\n): Promise<GasFeeOptions> {\n  const transactionCostResponse = await api.getReceiveTransactionCost({\n    sourceChainId: sourceAllbridgeChainId,\n    destinationChainId: destinationAllbridgeChainId,\n    messenger,\n  });\n\n  const gasFeeOptions: GasFeeOptions = {\n    [FeePaymentMethod.WITH_NATIVE_CURRENCY]: {\n      [AmountFormat.INT]: transactionCostResponse.fee,\n      [AmountFormat.FLOAT]: convertIntAmountToFloat(\n        transactionCostResponse.fee,\n        Chains.getChainDecimalsByType(sourceChainType)\n      ).toFixed(),\n    },\n  };\n  if (transactionCostResponse.sourceNativeTokenPrice) {\n    const gasFeeIntWithStables = convertAmountPrecision(\n      new Big(transactionCostResponse.fee).mul(transactionCostResponse.sourceNativeTokenPrice),\n      Chains.getChainDecimalsByType(sourceChainType),\n      sourceChainTokenDecimals\n    ).toFixed(0, Big.roundUp);\n    gasFeeOptions[FeePaymentMethod.WITH_STABLECOIN] = {\n      [AmountFormat.INT]: gasFeeIntWithStables,\n      [AmountFormat.FLOAT]: convertIntAmountToFloat(gasFeeIntWithStables, sourceChainTokenDecimals).toFixed(),\n    };\n  }\n\n  return gasFeeOptions;\n}\n\nasync function validateExtraGasNotExceeded(\n  extraGasInt: string,\n  gasFeePaymentMethod: FeePaymentMethod,\n  sourceToken: TokenWithChainDetails,\n  destinationToken: TokenWithChainDetails,\n  api: AllbridgeCoreClient\n) {\n  const extraGasLimits = await getExtraGasMaxLimits(sourceToken, destinationToken, api);\n  const extraGasMaxLimit = extraGasLimits.extraGasMax[gasFeePaymentMethod];\n  if (!extraGasMaxLimit) {\n    throw new InvalidGasFeePaymentOptionError(`Impossible to pay extra gas by '${gasFeePaymentMethod}' payment method`);\n  }\n  const extraGasMaxIntLimit = extraGasMaxLimit[AmountFormat.INT];\n  if (Big(extraGasInt).gt(extraGasMaxIntLimit)) {\n    throw new ExtraGasMaxLimitExceededError(\n      `Extra gas ${extraGasInt} in int format, exceeded limit ${extraGasMaxIntLimit} for '${gasFeePaymentMethod}' payment method`\n    );\n  }\n}\n\nexport async function getExtraGasMaxLimits(\n  sourceChainToken: TokenWithChainDetails,\n  destinationChainToken: TokenWithChainDetails,\n  api: AllbridgeCoreClient\n): Promise<ExtraGasMaxLimitResponse> {\n  const extraGasMaxLimits: ExtraGasMaxLimits = {};\n  const transactionCostResponse = await api.getReceiveTransactionCost({\n    sourceChainId: sourceChainToken.allbridgeChainId,\n    destinationChainId: destinationChainToken.allbridgeChainId,\n    messenger: Messenger.ALLBRIDGE,\n  });\n  const maxAmount = destinationChainToken.txCostAmount.maxAmount;\n  const maxAmountFloat = convertIntAmountToFloat(\n    maxAmount,\n    Chains.getChainDecimalsByType(destinationChainToken.chainType)\n  ).toFixed();\n  const maxAmountFloatInSourceNative = Big(maxAmountFloat)\n    .div(transactionCostResponse.exchangeRate)\n    .toFixed(Chains.getChainDecimalsByType(sourceChainToken.chainType), Big.roundDown);\n  const maxAmountInSourceNative = convertFloatAmountToInt(\n    maxAmountFloatInSourceNative,\n    Chains.getChainDecimalsByType(sourceChainToken.chainType)\n  ).toFixed(0);\n  extraGasMaxLimits[FeePaymentMethod.WITH_NATIVE_CURRENCY] = {\n    [AmountFormat.INT]: maxAmountInSourceNative,\n    [AmountFormat.FLOAT]: maxAmountFloatInSourceNative,\n  };\n  if (transactionCostResponse.sourceNativeTokenPrice) {\n    const maxAmountFloatInStable = Big(maxAmountFloatInSourceNative)\n      .mul(transactionCostResponse.sourceNativeTokenPrice)\n      .toFixed(sourceChainToken.decimals, Big.roundDown);\n    extraGasMaxLimits[FeePaymentMethod.WITH_STABLECOIN] = {\n      [AmountFormat.INT]: convertFloatAmountToInt(maxAmountFloatInStable, sourceChainToken.decimals).toFixed(0),\n      [AmountFormat.FLOAT]: maxAmountFloatInStable,\n    };\n  }\n  return {\n    extraGasMax: extraGasMaxLimits,\n    destinationChain: {\n      gasAmountMax: {\n        [AmountFormat.INT]: maxAmount,\n        [AmountFormat.FLOAT]: maxAmountFloat,\n      },\n      swap: {\n        [AmountFormat.INT]: destinationChainToken.txCostAmount.swap,\n        [AmountFormat.FLOAT]: convertIntAmountToFloat(\n          destinationChainToken.txCostAmount.swap,\n          Chains.getChainDecimalsByType(destinationChainToken.chainType)\n        ).toFixed(),\n      },\n      transfer: {\n        [AmountFormat.INT]: destinationChainToken.txCostAmount.transfer,\n        [AmountFormat.FLOAT]: convertIntAmountToFloat(\n          destinationChainToken.txCostAmount.transfer,\n          Chains.getChainDecimalsByType(destinationChainToken.chainType)\n        ).toFixed(),\n      },\n    },\n    exchangeRate: transactionCostResponse.exchangeRate,\n    sourceNativeTokenPrice: transactionCostResponse.sourceNativeTokenPrice,\n  };\n}\n\nexport function isSendParams(params: SwapParams | SendParams): params is SendParams {\n  return params.sourceToken.chainSymbol !== params.destinationToken.chainSymbol;\n}\n", "import { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { RawTransaction, TransactionResponse } from \"../../models\";\nimport { SendParams, SwapParams } from \"./bridge.model\";\n\nexport abstract class ChainBridgeService {\n  abstract chainType: ChainType;\n  abstract api: AllbridgeCoreClient;\n\n  /**\n   * @deprecated Use {@link buildRawTransactionSend} or {@link buildRawTransactionSwap} instead<p>\n   * Send tokens through the ChainBridgeService\n   * @param params\n   */\n  abstract send(params: SendParams): Promise<TransactionResponse>;\n  abstract buildRawTransactionSend(params: SendParams): Promise<RawTransaction>;\n  abstract buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction>;\n}\n", "import { NodeRpcUrlsConfig } from \"..\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport { AllbridgeCoreSdkOptions } from \"../../index\";\nimport { validateAmountDecimals, validateAmountGtZero } from \"../../utils/utils\";\nimport { Provider, RawTransaction } from \"../models\";\nimport { TokenService } from \"../token\";\nimport { ApproveParams, SendParams, SwapParams } from \"./models\";\nimport { isSendParams } from \"./utils\";\nimport { getChainBridgeService, getSpender } from \"./index\";\n\nexport interface RawBridgeTransactionBuilder {\n  /**\n   * Creates a Raw Transaction for approving tokens usage by the bridge\n   * @param provider - will be used to access the network\n   * @param approveData\n   */\n  approve(provider: Provider, approveData: ApproveParams): Promise<RawTransaction>;\n  /**\n   * Creates a Raw Transaction for approving tokens usage by the bridge\n   * @param approveData\n   */\n  approve(approveData: ApproveParams): Promise<RawTransaction>;\n  /**\n   * Creates a Raw Transaction for initiating the transfer of tokens\n   * @param params\n   * @param provider - will be used to access the network\n   */\n  send(params: SwapParams | SendParams, provider?: Provider): Promise<RawTransaction>;\n}\n\nexport class DefaultRawBridgeTransactionBuilder implements RawBridgeTransactionBuilder {\n  constructor(\n    private api: AllbridgeCoreClient,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    private params: AllbridgeCoreSdkOptions,\n    private tokenService: TokenService\n  ) {}\n\n  async approve(a: Provider | ApproveParams, b?: ApproveParams): Promise<RawTransaction> {\n    let provider: Provider | undefined;\n    let approveData: ApproveParams;\n    if (b) {\n      provider = a as Provider;\n      approveData = b;\n    } else {\n      approveData = a as ApproveParams;\n    }\n    const spender = getSpender(approveData.token, approveData.messenger);\n    return this.tokenService.buildRawTransactionApprove(\n      {\n        ...approveData,\n        spender,\n      },\n      provider\n    );\n  }\n\n  async send(params: SwapParams | SendParams, provider?: Provider): Promise<RawTransaction> {\n    validateAmountGtZero(params.amount);\n    validateAmountDecimals(\"amount\", params.amount, params.sourceToken.decimals);\n    if (isSendParams(params)) {\n      return getChainBridgeService(\n        params.sourceToken.chainSymbol,\n        this.api,\n        this.nodeRpcUrlsConfig,\n        this.params,\n        provider\n      ).buildRawTransactionSend(params);\n    }\n    return getChainBridgeService(\n      params.sourceToken.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).buildRawTransactionSwap(params);\n  }\n}\n", "/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { BN, Program, Spl, web3 } from \"@project-serum/anchor\";\nimport {\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessageArgs,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { Big } from \"big.js\";\nimport { Chains } from \"../../../chains\";\nimport { Messenger } from \"../../../client/core-api/core-api.model\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport {\n  AmountNotEnoughError,\n  CCTPDoesNotSupportedError,\n  JupiterError,\n  MethodNotSupportedError,\n  SdkError,\n  SdkRootError,\n} from \"../../../exceptions\";\nimport { ChainType, FeePaymentMethod, SwapParams, TxFeeParams } from \"../../../models\";\nimport { convertIntAmountToFloat } from \"../../../utils/calculation\";\nimport { RawTransaction, TransactionResponse } from \"../../models\";\nimport { SwapAndBridgeSolData, SwapAndBridgeSolDataCctpData } from \"../../models/sol\";\nimport { Bridge as BridgeType, IDL as bridgeIdl } from \"../../models/sol/types/bridge\";\nimport { CctpBridge as CctpBridgeType, IDL as cctpBridgeIdl } from \"../../models/sol/types/cctp_bridge\";\nimport { getMessage, getTokenAccountData, getVUsdAmount } from \"../../utils/sol\";\nimport {\n  getAssociatedAccount,\n  getAuthorityAccount,\n  getBridgeTokenAccount,\n  getCctpAccounts,\n  getCctpAuthorityAccount,\n  getCctpBridgeAccount,\n  getCctpBridgeTokenAccount,\n  getCctpLockAccount,\n  getChainBridgeAccount,\n  getConfigAccount,\n  getGasUsageAccount,\n  getLockAccount,\n  getOtherChainTokenAccount,\n  getPriceAccount,\n  getSendMessageAccount,\n} from \"../../utils/sol/accounts\";\nimport { buildAnchorProvider } from \"../../utils/sol/anchor-provider\";\nimport { addUnitLimitAndUnitPriceToTx, addUnitLimitAndUnitPriceToVersionedTx } from \"../../utils/sol/compute-budget\";\nimport { SendParams, TxSendParamsSol, TxSwapParamsSol } from \"../models\";\nimport { ChainBridgeService } from \"../models/bridge\";\nimport { getNonce, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\nimport { JupiterService } from \"./jupiter\";\n\nexport interface SolanaBridgeParams {\n  wormholeMessengerProgramId: string;\n  solanaLookUpTable: string;\n  cctpParams: CctpParams;\n  jupiterParams: JupiterParams;\n}\n\nexport interface JupiterParams {\n  jupiterUrl: string;\n  jupiterApiKeyHeader?: string;\n  jupiterMaxAccounts?: number;\n}\n\nexport interface CctpParams {\n  cctpTransmitterProgramId: string;\n  cctpTokenMessengerMinter: string;\n  cctpDomains: CctpDomains;\n}\n\n/**\n * Type representing a map of CCTP domains to their corresponding numeric values.\n *\n * @typedef {Record<string, number>} CctpDomains\n * @property {string} chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n * @property {number} value - The numeric value associated with the specified chain.\n */\nexport type CctpDomains = Record<string, number>;\n\nconst COMPUTE_UNIT_LIMIT = 1000000;\n\nconst JUP_ADD_INDEX = 1.1;\n\nexport class SolanaBridgeService extends ChainBridgeService {\n  chainType: ChainType.SOLANA = ChainType.SOLANA;\n  jupiterService: JupiterService;\n\n  constructor(\n    public solanaRpcUrl: string,\n    public params: SolanaBridgeParams,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n    this.jupiterService = new JupiterService(solanaRpcUrl, params.jupiterParams);\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction> {\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildSwapTransaction(\n      txSwapParams,\n      params.sourceToken.poolAddress,\n      params.destinationToken.poolAddress,\n      params.txFeeParams\n    );\n  }\n\n  private async buildSwapTransaction(\n    params: TxSwapParamsSol,\n    poolAddress: string,\n    toPoolAddress: string,\n    txFeeParams?: TxFeeParams\n  ): Promise<VersionedTransaction> {\n    const {\n      fromAccountAddress,\n      amount,\n      contractAddress,\n      fromTokenAddress,\n      toTokenAddress,\n      toAccountAddress,\n      minimumReceiveAmount,\n    } = params;\n    const account = fromAccountAddress;\n    const bridgeAddress = contractAddress;\n    const tokenAddress = fromTokenAddress;\n    const receiveTokenAddress = toTokenAddress;\n    const receivePoolAddress = toPoolAddress;\n    const receiverOriginal = toAccountAddress;\n\n    const userAccount = new PublicKey(account);\n    const provider = buildAnchorProvider(this.solanaRpcUrl, userAccount.toString());\n    const bridge = new Program<BridgeType>(bridgeIdl, bridgeAddress, provider);\n\n    const bridgeAuthority = await getAuthorityAccount(bridge.programId);\n    const configAccount = await getConfigAccount(bridge.programId);\n\n    const sendMint = new PublicKey(tokenAddress);\n    const sendBridgeToken = await getBridgeTokenAccount(sendMint, bridge.programId);\n    const sendPool = new PublicKey(poolAddress);\n    const sendUserToken = await getAssociatedAccount(userAccount, sendMint);\n\n    const receiverAccount = new PublicKey(receiverOriginal);\n    const receiveMint = new PublicKey(receiveTokenAddress);\n    const receiveBridgeToken = await getBridgeTokenAccount(receiveMint, bridge.programId);\n    const receivePool = new PublicKey(receivePoolAddress);\n    const receiveUserToken = await getAssociatedAccount(receiverAccount, receiveMint);\n\n    const preInstructions: TransactionInstruction[] = [\n      web3.ComputeBudgetProgram.setComputeUnitLimit({\n        units: COMPUTE_UNIT_LIMIT,\n      }),\n    ];\n\n    try {\n      await getTokenAccountData(receiveUserToken, provider);\n    } catch (e) {\n      const associatedProgram = Spl.associatedToken(provider);\n      const createReceiveUserTokenInstruction: TransactionInstruction = await associatedProgram.methods\n        .create()\n        .accounts({\n          mint: receiveMint,\n          owner: receiverAccount,\n          associatedAccount: receiveUserToken,\n        })\n        .instruction();\n      preInstructions.push(createReceiveUserTokenInstruction);\n    }\n    const transaction = await bridge.methods\n      .swap(new BN(amount), new BN(minimumReceiveAmount || 0))\n      .accounts({\n        payer: userAccount,\n        config: configAccount,\n        bridgeAuthority,\n        user: userAccount,\n        sendBridgeToken,\n        sendMint,\n        sendPool,\n        sendUserToken,\n        receiveBridgeToken,\n        receiveMint,\n        receivePool,\n        receiveUserToken,\n      })\n      .preInstructions(preInstructions)\n      .transaction();\n\n    const connection = provider.connection;\n    transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n    transaction.feePayer = userAccount;\n    await addUnitLimitAndUnitPriceToTx(transaction, txFeeParams, this.solanaRpcUrl);\n    return await this.convertToVersionedTransaction(transaction, connection);\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    let solTxSendParams = this.addPoolAddress(params, txSendParams);\n\n    const isJupiterForStableCoin = solTxSendParams.gasFeePaymentMethod == FeePaymentMethod.WITH_STABLECOIN;\n\n    let jupTx;\n    if (isJupiterForStableCoin) {\n      try {\n        const { tx, solTxSendUpdatedParams } = await this.processJup(solTxSendParams, params, true);\n        jupTx = tx;\n        solTxSendParams = { ...solTxSendParams, ...solTxSendUpdatedParams };\n      } catch (e) {\n        try {\n          const { tx, solTxSendUpdatedParams } = await this.processJup(solTxSendParams, params, false);\n          jupTx = tx;\n          solTxSendParams = { ...solTxSendParams, ...solTxSendUpdatedParams };\n        } catch (e) {\n          if (e instanceof SdkRootError) {\n            throw e;\n          }\n          if (e instanceof Error && e.message) {\n            throw new JupiterError(`Some error occurred during creation Jupiter swap transaction. ${e.message}`);\n          }\n          throw new JupiterError(\"Some error occurred during creation Jupiter swap transaction\");\n        }\n      }\n    }\n\n    let swapAndBridgeTx: VersionedTransaction;\n    let requiredMessageSigner: Keypair | undefined = undefined;\n    switch (txSendParams.messenger) {\n      case Messenger.ALLBRIDGE: {\n        const swapAndBridgeSolData = await this.prepareSwapAndBridgeData(solTxSendParams);\n        swapAndBridgeTx = await this.buildSwapAndBridgeAllbridgeTransaction(swapAndBridgeSolData);\n        break;\n      }\n      case Messenger.WORMHOLE: {\n        const swapAndBridgeSolData = await this.prepareSwapAndBridgeData(solTxSendParams);\n        const { transaction, messageAccount } = await this.buildSwapAndBridgeWormholeTransaction(swapAndBridgeSolData);\n        swapAndBridgeTx = transaction;\n        requiredMessageSigner = messageAccount;\n        break;\n      }\n      case Messenger.CCTP:\n      case Messenger.CCTP_V2: {\n        const swapAndBridgeSolData = await this.prepareSwapAndBridgeCctpData(solTxSendParams);\n        const { transaction, messageSentEventDataKeypair } = await this.buildSwapAndBridgeCctpTransaction(\n          params.destinationToken.chainSymbol,\n          swapAndBridgeSolData\n        );\n        swapAndBridgeTx = transaction;\n        requiredMessageSigner = messageSentEventDataKeypair;\n        break;\n      }\n    }\n\n    if (isJupiterForStableCoin) {\n      if (!jupTx) {\n        throw new JupiterError(\"Swap tx is absent\");\n      }\n      swapAndBridgeTx = await this.jupiterService.amendJupiterWithSdkTx(jupTx, swapAndBridgeTx);\n    }\n\n    await addUnitLimitAndUnitPriceToVersionedTx(swapAndBridgeTx, params.txFeeParams, this.solanaRpcUrl);\n\n    if (requiredMessageSigner) {\n      swapAndBridgeTx.sign([requiredMessageSigner]);\n    }\n    return swapAndBridgeTx;\n  }\n\n  private async processJup(\n    solTxSendParams: SolTxSendParams,\n    params: SendParams,\n    exactOut: boolean\n  ): Promise<{\n    tx: VersionedTransaction;\n    solTxSendUpdatedParams: {\n      amount: string;\n      fee: string;\n      extraGas?: string;\n      gasFeePaymentMethod: FeePaymentMethod;\n    };\n  }> {\n    const { fee, extraGas, gasFeePaymentMethod } = await this.convertStableCoinFeeAndExtraGasToNativeCurrency(\n      params.sourceToken.decimals,\n      solTxSendParams\n    );\n\n    let amountToProcess = exactOut ? Big(fee) : Big(solTxSendParams.fee);\n    if (extraGas) {\n      amountToProcess = amountToProcess.plus(extraGas);\n    }\n    if (!exactOut) {\n      amountToProcess = amountToProcess.mul(JUP_ADD_INDEX);\n    }\n\n    const { tx, amountIn } = await this.jupiterService.getJupiterSwapTx(\n      params.fromAccountAddress,\n      params.sourceToken.tokenAddress,\n      amountToProcess.toFixed(0),\n      exactOut\n    );\n\n    let newAmount: string;\n    if (exactOut) {\n      if (!amountIn) {\n        throw new JupiterError(\"Cannot get inAmount\");\n      }\n      newAmount = Big(solTxSendParams.amount).minus(Big(amountIn).mul(JUP_ADD_INDEX)).toFixed(0);\n    } else {\n      newAmount = Big(solTxSendParams.amount).minus(amountToProcess).toFixed(0);\n    }\n    if (Big(newAmount).lte(0)) {\n      throw new AmountNotEnoughError(\n        `Amount not enough to pay fee, ${convertIntAmountToFloat(\n          Big(newAmount).minus(1).neg(),\n          params.sourceToken.decimals\n        ).toFixed()} stables is missing`\n      );\n    }\n    return {\n      tx: tx,\n      solTxSendUpdatedParams: {\n        amount: newAmount,\n        fee: fee,\n        extraGas: extraGas,\n        gasFeePaymentMethod: gasFeePaymentMethod,\n      },\n    };\n  }\n\n  private addPoolAddress(params: SendParams, txSendParams: TxSendParamsSol): SolTxSendParams {\n    return {\n      ...txSendParams,\n      poolAddress: params.sourceToken.poolAddress,\n    };\n  }\n\n  async convertStableCoinFeeAndExtraGasToNativeCurrency(\n    tokenDecimals: number,\n    solTxSendParams: SolTxSendParams\n  ): Promise<{ fee: string; extraGas?: string; gasFeePaymentMethod: FeePaymentMethod }> {\n    if (solTxSendParams.gasFeePaymentMethod == FeePaymentMethod.WITH_STABLECOIN) {\n      const sourceNativeTokenPrice = (\n        await this.api.getReceiveTransactionCost({\n          sourceChainId: solTxSendParams.fromChainId,\n          destinationChainId: solTxSendParams.toChainId,\n          messenger: solTxSendParams.messenger,\n        })\n      ).sourceNativeTokenPrice;\n      const fee = Big(solTxSendParams.fee)\n        .div(sourceNativeTokenPrice)\n        .mul(Big(10).pow(Chains.getChainDecimalsByType(ChainType.SOLANA) - tokenDecimals))\n        .toFixed(0);\n      let extraGas;\n      if (solTxSendParams.extraGas) {\n        extraGas = Big(solTxSendParams.extraGas)\n          .div(sourceNativeTokenPrice)\n          .mul(Big(10).pow(Chains.getChainDecimalsByType(ChainType.SOLANA) - tokenDecimals))\n          .toFixed(0);\n      }\n      return { fee, extraGas, gasFeePaymentMethod: FeePaymentMethod.WITH_NATIVE_CURRENCY };\n    }\n    return {\n      fee: solTxSendParams.fee,\n      extraGas: solTxSendParams.extraGas,\n      gasFeePaymentMethod: FeePaymentMethod.WITH_NATIVE_CURRENCY,\n    };\n  }\n\n  private getExtraGasInstruction(\n    extraGas: string,\n    userAccount: PublicKey,\n    configAccount: PublicKey\n  ): TransactionInstruction | undefined {\n    return web3.SystemProgram.transfer({\n      fromPubkey: userAccount,\n      toPubkey: configAccount,\n      lamports: +extraGas,\n    });\n  }\n\n  private async prepareSwapAndBridgeData(txSendParams: SolTxSendParams): Promise<SwapAndBridgeSolData> {\n    const {\n      amount,\n      contractAddress,\n      fromChainId,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      poolAddress,\n      extraGas,\n    } = txSendParams;\n    const tokenAddress = fromTokenAddress;\n    const account = fromAccountAddress;\n    const destinationChainId = toChainId;\n    const receiveTokenAddress = toTokenAddress;\n    const receiverInBuffer32 = toAccountAddress;\n    const bridgeAddress = contractAddress;\n    const sourceChainId = fromChainId;\n\n    const provider = buildAnchorProvider(this.solanaRpcUrl, account);\n    const bridge = new Program<BridgeType>(bridgeIdl, bridgeAddress, provider);\n    const nonce = Array.from(getNonce());\n    const poolAccount = new PublicKey(poolAddress);\n    const vUsdAmount = await getVUsdAmount(amount, bridge, poolAccount);\n\n    const lockAccount = await getLockAccount(nonce, bridge.programId);\n    const bridgeAuthority = await getAuthorityAccount(bridge.programId);\n    const userToken = await getAssociatedAccount(new PublicKey(account), new PublicKey(tokenAddress));\n    const bridgeTokenAccount = await getBridgeTokenAccount(new PublicKey(tokenAddress), bridge.programId);\n    const chainBridgeAccount = await getChainBridgeAccount(destinationChainId, bridge.programId);\n    const otherBridgeTokenAccount = await getOtherChainTokenAccount(\n      destinationChainId,\n      Buffer.from(receiveTokenAddress),\n      bridge.programId\n    );\n\n    const configAccount = await getConfigAccount(bridge.programId);\n    const configAccountInfo = await bridge.account.config.fetch(configAccount);\n    const priceAccount = await getPriceAccount(destinationChainId, configAccountInfo.gasOracleProgramId);\n    const thisGasPriceAccount = await getPriceAccount(sourceChainId, configAccountInfo.gasOracleProgramId);\n\n    const message = getMessage({\n      amount: vUsdAmount,\n      recipient: Buffer.from(receiverInBuffer32),\n      nonce: Buffer.from(nonce),\n      receiveToken: Buffer.from(receiveTokenAddress),\n      destinationChainId,\n      sourceChainId,\n      chainBridge: (await getAuthorityAccount(bridge.programId)).toBuffer(),\n    });\n\n    const swapAndBridgeData = {} as SwapAndBridgeSolData;\n\n    swapAndBridgeData.bridge = bridge;\n    swapAndBridgeData.amount = new BN(amount);\n    swapAndBridgeData.vusdAmount = new BN(vUsdAmount);\n    swapAndBridgeData.nonce = nonce;\n    swapAndBridgeData.recipient = Array.from(receiverInBuffer32);\n    swapAndBridgeData.receiveToken = Array.from(receiveTokenAddress);\n    swapAndBridgeData.poolAccount = poolAccount;\n    swapAndBridgeData.lockAccount = lockAccount;\n    swapAndBridgeData.bridgeAuthority = bridgeAuthority;\n    swapAndBridgeData.userToken = userToken;\n    swapAndBridgeData.bridgeTokenAccount = bridgeTokenAccount;\n    swapAndBridgeData.chainBridgeAccount = chainBridgeAccount;\n    swapAndBridgeData.otherBridgeTokenAccount = otherBridgeTokenAccount;\n    swapAndBridgeData.userAccount = new PublicKey(account);\n    swapAndBridgeData.destinationChainId = destinationChainId;\n    // @ts-expect-error\n    swapAndBridgeData.mint = new PublicKey(tokenAddress);\n    swapAndBridgeData.config = configAccount;\n    swapAndBridgeData.configAccountInfo = configAccountInfo;\n    swapAndBridgeData.gasPrice = priceAccount;\n    swapAndBridgeData.thisGasPrice = thisGasPriceAccount;\n    swapAndBridgeData.message = message;\n\n    if (extraGas) {\n      swapAndBridgeData.extraGasInstruction = this.getExtraGasInstruction(\n        extraGas,\n        swapAndBridgeData.userAccount,\n        configAccount\n      );\n    }\n    return swapAndBridgeData;\n  }\n\n  private async buildSwapAndBridgeAllbridgeTransaction(\n    swapAndBridgeData: SwapAndBridgeSolData\n  ): Promise<VersionedTransaction> {\n    const {\n      bridge,\n      vusdAmount,\n      nonce,\n      recipient,\n      receiveToken,\n      poolAccount,\n      lockAccount,\n      bridgeAuthority,\n      userToken,\n      bridgeTokenAccount,\n      chainBridgeAccount,\n      otherBridgeTokenAccount,\n      userAccount,\n      destinationChainId,\n      mint,\n      config,\n      configAccountInfo,\n      gasPrice,\n      thisGasPrice,\n      message,\n      extraGasInstruction,\n    } = swapAndBridgeData;\n    const allbridgeMessengerProgramId = configAccountInfo.allbridgeMessengerProgramId;\n    const messengerGasUsageAccount = await getGasUsageAccount(destinationChainId, allbridgeMessengerProgramId);\n    const messengerConfig = await getConfigAccount(allbridgeMessengerProgramId);\n\n    const sentMessageAccount = await getSendMessageAccount(message, allbridgeMessengerProgramId);\n\n    const instructions: TransactionInstruction[] = [];\n    if (extraGasInstruction) {\n      instructions.push(extraGasInstruction);\n    }\n\n    const transaction = await bridge.methods\n      .swapAndBridge({\n        vusdAmount,\n        nonce,\n        destinationChainId,\n        recipient,\n        receiveToken,\n      })\n      .accounts({\n        mint,\n        user: userAccount,\n        config,\n        lock: lockAccount,\n        pool: poolAccount,\n        gasPrice,\n        thisGasPrice,\n        bridgeAuthority,\n        userToken,\n        bridgeToken: bridgeTokenAccount,\n        chainBridge: chainBridgeAccount,\n        messenger: allbridgeMessengerProgramId,\n        messengerGasUsage: messengerGasUsageAccount,\n        messengerConfig,\n        sentMessageAccount,\n        otherBridgeToken: otherBridgeTokenAccount,\n      })\n      .preInstructions([\n        web3.ComputeBudgetProgram.setComputeUnitLimit({\n          units: COMPUTE_UNIT_LIMIT,\n        }),\n      ])\n      .postInstructions(instructions)\n      .transaction();\n    const connection = buildAnchorProvider(this.solanaRpcUrl, userAccount.toString()).connection;\n    transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n    transaction.feePayer = userAccount;\n    return await this.convertToVersionedTransaction(transaction, connection);\n  }\n\n  private async convertToVersionedTransaction(tx: Transaction, connection: Connection): Promise<VersionedTransaction> {\n    const allbridgeTableAccount = await connection\n      .getAddressLookupTable(new PublicKey(this.params.solanaLookUpTable))\n      .then((res) => res.value);\n    if (!allbridgeTableAccount) {\n      throw new SdkError(\"Cannot find allbridgeLookupTableAccount\");\n    }\n    const messageV0 = new web3.TransactionMessage({\n      payerKey: tx.feePayer,\n      recentBlockhash: tx.recentBlockhash,\n      instructions: tx.instructions,\n    } as TransactionMessageArgs).compileToV0Message([allbridgeTableAccount]);\n    return new web3.VersionedTransaction(messageV0);\n  }\n\n  private async buildSwapAndBridgeWormholeTransaction(\n    swapAndBridgeData: SwapAndBridgeSolData\n  ): Promise<{ transaction: VersionedTransaction; messageAccount: Keypair }> {\n    const {\n      bridge,\n      vusdAmount,\n      nonce,\n      recipient,\n      receiveToken,\n      poolAccount,\n      lockAccount,\n      bridgeAuthority,\n      userToken,\n      bridgeTokenAccount,\n      chainBridgeAccount,\n      otherBridgeTokenAccount,\n      userAccount,\n      destinationChainId,\n      mint,\n      config,\n      configAccountInfo,\n      gasPrice,\n      thisGasPrice,\n      message,\n      extraGasInstruction,\n    } = swapAndBridgeData;\n    const wormholeProgramId = this.params.wormholeMessengerProgramId;\n\n    const [whBridgeAccount] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"Bridge\")],\n      new PublicKey(wormholeProgramId)\n    );\n    const [whFeeCollectorAccount] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"fee_collector\")],\n      new PublicKey(wormholeProgramId)\n    );\n    const [whSequenceAccount] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"Sequence\"), bridgeAuthority.toBuffer()],\n      new PublicKey(wormholeProgramId)\n    );\n\n    const messengerGasUsageAccount = await getGasUsageAccount(\n      destinationChainId,\n      configAccountInfo.wormholeMessengerProgramId\n    );\n    const wormholeMessengerConfigAccount = await getConfigAccount(configAccountInfo.wormholeMessengerProgramId);\n    const messageAccount = Keypair.generate();\n\n    const provider = buildAnchorProvider(this.solanaRpcUrl, userAccount.toString());\n\n    const bridgeAccountInfo = await provider.connection.getAccountInfo(whBridgeAccount);\n    if (bridgeAccountInfo == null) {\n      throw new SdkError(\"Cannot fetch wormhole bridge account info\");\n    }\n    const feeLamports = new BN(bridgeAccountInfo.data.slice(16, 24), \"le\").toString();\n\n    const feeInstruction = SystemProgram.transfer({\n      fromPubkey: userAccount,\n      toPubkey: whFeeCollectorAccount,\n      lamports: +feeLamports,\n    });\n\n    const instructions: TransactionInstruction[] = [];\n    if (extraGasInstruction) {\n      instructions.push(extraGasInstruction);\n    }\n\n    const accounts = {\n      mint,\n      user: userAccount,\n      config,\n      lock: lockAccount,\n      pool: poolAccount,\n      gasPrice,\n      thisGasPrice,\n      bridgeAuthority,\n      userToken,\n      bridgeToken: bridgeTokenAccount,\n      chainBridge: chainBridgeAccount,\n      otherBridgeToken: otherBridgeTokenAccount,\n      messengerGasUsage: messengerGasUsageAccount,\n      wormholeProgram: wormholeProgramId,\n      bridge: whBridgeAccount,\n      message: messageAccount.publicKey,\n      wormholeMessenger: configAccountInfo.wormholeMessengerProgramId,\n      sequence: whSequenceAccount,\n      feeCollector: whFeeCollectorAccount,\n      wormholeMessengerConfig: wormholeMessengerConfigAccount,\n      clock: web3.SYSVAR_CLOCK_PUBKEY,\n    };\n\n    const transaction = await bridge.methods\n      .swapAndBridgeWormhole({\n        vusdAmount,\n        nonce: nonce,\n        destinationChainId,\n        recipient,\n        receiveToken,\n      })\n      .accounts(accounts)\n      .preInstructions([\n        web3.ComputeBudgetProgram.setComputeUnitLimit({\n          units: COMPUTE_UNIT_LIMIT,\n        }),\n        feeInstruction,\n      ])\n      .postInstructions(instructions)\n      .signers([messageAccount])\n      .transaction();\n    transaction.recentBlockhash = (await provider.connection.getLatestBlockhash()).blockhash;\n    transaction.feePayer = userAccount;\n    return { transaction: await this.convertToVersionedTransaction(transaction, provider.connection), messageAccount };\n  }\n\n  private async prepareSwapAndBridgeCctpData(txSendParams: SolTxSendParams): Promise<SwapAndBridgeSolDataCctpData> {\n    const {\n      contractAddress,\n      amount,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      extraGas,\n    } = txSendParams;\n    const cctpAddress = contractAddress;\n    if (!cctpAddress) {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n    }\n    const CHAIN_ID = 4;\n\n    const account = fromAccountAddress;\n    const receiveTokenAddress = toTokenAddress;\n    const receiverInBuffer32 = toAccountAddress;\n\n    const provider = buildAnchorProvider(this.solanaRpcUrl, account);\n    const cctpBridge: Program<CctpBridgeType> = new Program<CctpBridgeType>(cctpBridgeIdl, cctpAddress, provider);\n    const mint = new PublicKey(fromTokenAddress);\n    const cctpBridgeAccount = await getCctpBridgeAccount(mint, cctpBridge.programId);\n    const userAccount = new PublicKey(account);\n\n    const configAccountInfo = await cctpBridge.account.cctpBridge.fetch(cctpBridgeAccount);\n\n    const swapAndBridgeData = {} as SwapAndBridgeSolDataCctpData;\n\n    swapAndBridgeData.cctpBridge = cctpBridge;\n    swapAndBridgeData.cctpBridgeAccount = cctpBridgeAccount;\n    swapAndBridgeData.cctpAddressAccount = new PublicKey(cctpAddress);\n    swapAndBridgeData.amount = new BN(amount);\n    swapAndBridgeData.recipient = Array.from(receiverInBuffer32);\n    swapAndBridgeData.receiveToken = Array.from(receiveTokenAddress);\n    swapAndBridgeData.userToken = await getAssociatedAccount(userAccount, mint);\n    swapAndBridgeData.bridgeAuthority = await getCctpAuthorityAccount(cctpBridgeAccount, cctpBridge.programId);\n    swapAndBridgeData.bridgeTokenAccount = await getCctpBridgeTokenAccount(mint, cctpBridge.programId);\n    swapAndBridgeData.chainBridgeAccount = await getChainBridgeAccount(toChainId, cctpBridge.programId);\n    swapAndBridgeData.userAccount = userAccount;\n    swapAndBridgeData.destinationChainId = toChainId;\n    swapAndBridgeData.mint = mint;\n    swapAndBridgeData.gasPrice = await getPriceAccount(toChainId, configAccountInfo.gasOracleProgramId);\n    swapAndBridgeData.thisGasPrice = await getPriceAccount(CHAIN_ID, configAccountInfo.gasOracleProgramId);\n    swapAndBridgeData.provider = provider;\n\n    if (extraGas) {\n      swapAndBridgeData.extraGasInstruction = this.getExtraGasInstruction(\n        extraGas,\n        swapAndBridgeData.userAccount,\n        cctpBridgeAccount\n      );\n    }\n    return swapAndBridgeData;\n  }\n\n  async buildSwapAndBridgeCctpTransaction(\n    destinationChainSymbol: string,\n    swapAndBridgeData: SwapAndBridgeSolDataCctpData\n  ): Promise<{ transaction: VersionedTransaction; messageSentEventDataKeypair: Keypair }> {\n    const {\n      cctpBridge,\n      cctpBridgeAccount,\n      amount,\n      recipient,\n      receiveToken,\n      bridgeAuthority,\n      userToken,\n      bridgeTokenAccount,\n      chainBridgeAccount,\n      userAccount,\n      destinationChainId,\n      mint,\n      gasPrice,\n      thisGasPrice,\n      extraGasInstruction,\n      provider,\n    } = swapAndBridgeData;\n    const domain = this.params.cctpParams.cctpDomains[destinationChainSymbol];\n    const cctpTransmitterProgramIdAddress = this.params.cctpParams.cctpTransmitterProgramId;\n    const cctpTokenMessengerMinterAddress = this.params.cctpParams.cctpTokenMessengerMinter;\n    if (domain == undefined || !cctpTransmitterProgramIdAddress || !cctpTokenMessengerMinterAddress) {\n      throw new SdkError(\"CCTP is not configured\");\n    }\n    const cctpTransmitterProgramId = new PublicKey(cctpTransmitterProgramIdAddress);\n    const cctpTokenMessengerMinter = new PublicKey(cctpTokenMessengerMinterAddress);\n    const {\n      messageTransmitterAccount,\n      tokenMessenger,\n      tokenMessengerEventAuthority,\n      tokenMinter,\n      localToken,\n      remoteTokenMessengerKey,\n      authorityPda,\n    } = getCctpAccounts(domain, mint, cctpTransmitterProgramId, cctpTokenMessengerMinter);\n\n    const instructions: TransactionInstruction[] = [];\n    if (extraGasInstruction) {\n      instructions.push(extraGasInstruction);\n    }\n\n    const messageSentEventDataKeypair = Keypair.generate();\n    const lockAccount = getCctpLockAccount(cctpBridge.programId, messageSentEventDataKeypair.publicKey);\n\n    const tx = await cctpBridge.methods\n      .bridge({\n        amount,\n        destinationChainId,\n        recipient,\n        receiveToken,\n      })\n      .accounts({\n        mint: mint,\n        user: userAccount,\n        cctpBridge: cctpBridgeAccount,\n\n        messageSentEventData: messageSentEventDataKeypair.publicKey,\n        lock: lockAccount,\n\n        cctpMessenger: cctpTokenMessengerMinter,\n        messageTransmitterProgram: cctpTransmitterProgramId,\n        messageTransmitterAccount: messageTransmitterAccount,\n        tokenMessenger: tokenMessenger,\n        tokenMinter: tokenMinter,\n        localToken: localToken,\n        remoteTokenMessengerKey: remoteTokenMessengerKey,\n        authorityPda: authorityPda,\n        eventAuthority: tokenMessengerEventAuthority,\n\n        bridgeToken: bridgeTokenAccount,\n        gasPrice: gasPrice,\n        thisGasPrice: thisGasPrice,\n        chainBridge: chainBridgeAccount,\n        userToken,\n        bridgeAuthority: bridgeAuthority,\n      })\n      .preInstructions([\n        web3.ComputeBudgetProgram.setComputeUnitLimit({\n          units: 2000000,\n        }),\n      ])\n      .postInstructions(instructions)\n      .transaction();\n    const connection = provider.connection;\n    tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n    tx.feePayer = userAccount;\n    return { transaction: await this.convertToVersionedTransaction(tx, connection), messageSentEventDataKeypair };\n  }\n\n  send(params: SendParams): Promise<TransactionResponse> {\n    throw new MethodNotSupportedError();\n  }\n}\n\ninterface SolTxSendParams extends TxSendParamsSol {\n  poolAddress: string;\n}\n", "export interface Bridge {\n  version: \"0.1.0\";\n  name: \"bridge\";\n  instructions: [\n    {\n      name: \"initialize\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"InitializeArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"initializePool\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"token\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"InitializePoolArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"initDepositAccount\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userDeposit\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"deposit\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userDeposit\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        },\n      ];\n    },\n    {\n      name: \"withdraw\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userDeposit\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"amountLp\";\n          type: \"u64\";\n        },\n      ];\n    },\n    {\n      name: \"swapAndBridge\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"lock\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"otherBridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"messenger\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"messengerConfig\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"sentMessageAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"messengerGasUsage\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"gasPrice\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"thisGasPrice\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"chainBridge\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"BridgeArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"swapAndBridgeWormhole\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"lock\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"otherBridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"gasPrice\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"thisGasPrice\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"chainBridge\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"wormholeMessenger\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"wormholeMessengerConfig\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"wormholeProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"bridge\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"message\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"sequence\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"feeCollector\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"messengerGasUsage\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"clock\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"BridgeArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"swap\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"sendMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"receiveMint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"sendPool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"receivePool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"sendBridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"receiveBridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"sendUserToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"receiveUserToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        },\n        {\n          name: \"receiveAmountMin\";\n          type: \"u64\";\n        },\n      ];\n    },\n    {\n      name: \"registerChainBridge\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"chainBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"RegisterChainBridgeArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"updateChainBridge\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"chainBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"UpdateChainBridgeArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"receiveAndSwap\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"receivedMessageAccount\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"unlock\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"chainBridge\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"messengerProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"UnlockArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"receiveAndSwapWormhole\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"receivedMessageAccount\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"unlock\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"chainBridge\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"messengerProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"UnlockArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"withdrawGasToken\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"recipient\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        },\n      ];\n    },\n    {\n      name: \"claimRewards\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userDeposit\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"setAdmin\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"newAdmin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"startBridge\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"actionType\";\n          type: {\n            defined: \"ActionType\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"stopBridge\";\n      accounts: [\n        {\n          name: \"stopAuthority\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"actionType\";\n          type: {\n            defined: \"ActionType\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"setRebalancer\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"rebalancer\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"setStopAuthority\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"newAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"setAllbridgeMessengerProgramId\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"newProgramId\";\n          type: \"publicKey\";\n        },\n      ];\n    },\n    {\n      name: \"setWormholeMessengerProgramId\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"newProgramId\";\n          type: \"publicKey\";\n        },\n      ];\n    },\n    {\n      name: \"setGasOracleProgramId\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"newProgramId\";\n          type: \"publicKey\";\n        },\n      ];\n    },\n    {\n      name: \"setPoolFeeShare\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"feeShareBp\";\n          type: \"u64\";\n        },\n      ];\n    },\n    {\n      name: \"setBalanceRatioMin\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"balanceRatioMinBp\";\n          type: \"u16\";\n        },\n      ];\n    },\n    {\n      name: \"setPoolAdminFeeShare\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"feeShareBp\";\n          type: \"u64\";\n        },\n      ];\n    },\n    {\n      name: \"addOtherBridgeToken\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"otherBridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"chainId\";\n          type: \"u8\";\n        },\n        {\n          name: \"tokenAddress\";\n          type: {\n            array: [\"u8\", 32];\n          };\n        },\n      ];\n    },\n    {\n      name: \"removeOtherBridgeToken\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"config\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"otherBridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"chainId\";\n          type: \"u8\";\n        },\n        {\n          name: \"tokenAddress\";\n          type: {\n            array: [\"u8\", 32];\n          };\n        },\n      ];\n    },\n    {\n      name: \"withdrawAdminFee\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"adminToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"adjustTotalLpAmount\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"config\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"pool\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"userDeposit\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: \"chainBridge\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"address\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"chainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"gasUsage\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"config\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"admin\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"allbridgeMessengerProgramId\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"wormholeMessengerProgramId\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"gasOracleProgramId\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"rebalancer\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"stopAuthority\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"authorityBumpSeed\";\n            type: \"u8\";\n          },\n          {\n            name: \"canSwap\";\n            type: \"bool\";\n          },\n          {\n            name: \"canDeposit\";\n            type: \"bool\";\n          },\n          {\n            name: \"canWithdraw\";\n            type: \"bool\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"lock\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"sender\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"sentTokenAddress\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"amount\";\n            type: \"u64\";\n          },\n          {\n            name: \"vusdAmount\";\n            type: \"u64\";\n          },\n          {\n            name: \"recipient\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"destinationChainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"receiveToken\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"nonce\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"messenger\";\n            type: {\n              defined: \"Messenger\";\n            };\n          },\n          {\n            name: \"slot\";\n            type: \"u64\";\n          },\n          {\n            name: \"fee\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"otherBridgeToken\";\n      type: {\n        kind: \"struct\";\n        fields: [];\n      };\n    },\n    {\n      name: \"pool\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"mint\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"a\";\n            type: \"u64\";\n          },\n          {\n            name: \"d\";\n            type: \"u64\";\n          },\n          {\n            name: \"tokenBalance\";\n            type: \"u64\";\n          },\n          {\n            name: \"vUsdBalance\";\n            type: \"u64\";\n          },\n          {\n            name: \"reserves\";\n            type: \"u64\";\n          },\n          {\n            name: \"decimals\";\n            type: \"u8\";\n          },\n          {\n            name: \"totalLpAmount\";\n            type: \"u64\";\n          },\n          {\n            name: \"feeShareBp\";\n            type: \"u64\";\n          },\n          {\n            name: \"adminFeeShareBp\";\n            type: \"u64\";\n          },\n          {\n            name: \"accRewardPerShareP\";\n            type: \"u128\";\n          },\n          {\n            name: \"adminFeeAmount\";\n            type: \"u64\";\n          },\n          {\n            name: \"balanceRatioMinBp\";\n            type: \"u16\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"unlock\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"hash\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"amount\";\n            type: \"u64\";\n          },\n          {\n            name: \"fee\";\n            type: \"u64\";\n          },\n          {\n            name: \"vUsdAmount\";\n            type: \"u64\";\n          },\n          {\n            name: \"slot\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"userDeposit\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"userAddress\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"mint\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"lpAmount\";\n            type: \"u64\";\n          },\n          {\n            name: \"rewardDebt\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: \"RegisterChainBridgeArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"chainBridgeAddress\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"chainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"gasUsage\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"UpdateChainBridgeArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"chainBridgeAddress\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"chainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"gasUsage\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"InitializeArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"allbridgeMessengerProgramId\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"wormholeMessengerProgramId\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"gasOracleProgramId\";\n            type: \"publicKey\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"InitializePoolArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"a\";\n            type: \"u64\";\n          },\n          {\n            name: \"feeShareBp\";\n            type: \"u64\";\n          },\n          {\n            name: \"adminFeeShareBp\";\n            type: \"u64\";\n          },\n          {\n            name: \"balanceRatioMinBp\";\n            type: \"u16\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"BridgeArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"nonce\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"recipient\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"destinationChainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"receiveToken\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"vusdAmount\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"UnlockArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"nonce\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"amount\";\n            type: \"u64\";\n          },\n          {\n            name: \"recipient\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"sourceChainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"receiveToken\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"messenger\";\n            type: {\n              defined: \"Messenger\";\n            };\n          },\n          {\n            name: \"hash\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"receiveAmountMin\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"RewardError\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"FeeTooHigh\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"Messenger\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"None\";\n          },\n          {\n            name: \"Allbridge\";\n          },\n          {\n            name: \"Wormhole\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"ActionType\";\n      type: {\n        kind: \"enum\";\n        variants: [\n          {\n            name: \"Deposit\";\n          },\n          {\n            name: \"Withdraw\";\n          },\n          {\n            name: \"Swap\";\n          },\n        ];\n      };\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: \"AccountAlreadyInitialized\";\n      msg: \"This account has already been initialized\";\n    },\n    {\n      code: 6001;\n      name: \"AdminAuthorityInvalid\";\n      msg: \"This instruction requires admin authority\";\n    },\n    {\n      code: 6002;\n      name: \"InvalidSignature\";\n      msg: \"Provided signature has wrong signer or message\";\n    },\n    {\n      code: 6003;\n      name: \"InvalidHash\";\n      msg: \"Wrong unlock message hash\";\n    },\n    {\n      code: 6004;\n      name: \"PoolOverflow\";\n      msg: \"PoolInfo overflow\";\n    },\n    {\n      code: 6005;\n      name: \"ReservesExhausted\";\n      msg: \"Reserves exhausted\";\n    },\n    {\n      code: 6006;\n      name: \"ZeroAmount\";\n      msg: \"Zero amount\";\n    },\n    {\n      code: 6007;\n      name: \"ZeroChanges\";\n      msg: \"Zero changes\";\n    },\n    {\n      code: 6008;\n      name: \"HighVusdAmount\";\n      msg: \"vUSD amount is too high\";\n    },\n    {\n      code: 6009;\n      name: \"BalanceRatioExceeded\";\n      msg: \"Balance ratio exceeded\";\n    },\n    {\n      code: 6010;\n      name: \"InsufficientReceivedAmount\";\n      msg: \"Received insufficient amount\";\n    },\n    {\n      code: 6011;\n      name: \"ForbiddenAction\";\n      msg: \"ForbiddenAction\";\n    },\n    {\n      code: 6012;\n      name: \"ValueTooHigh\";\n      msg: \"Value is too high\";\n    },\n  ];\n}\n\nexport const IDL: Bridge = {\n  version: \"0.1.0\",\n  name: \"bridge\",\n  instructions: [\n    {\n      name: \"initialize\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"InitializeArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"initializePool\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"token\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"InitializePoolArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"initDepositAccount\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userDeposit\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"deposit\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userDeposit\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"withdraw\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userDeposit\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amountLp\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"swapAndBridge\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"lock\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"otherBridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"messenger\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"messengerConfig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"sentMessageAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"messengerGasUsage\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"gasPrice\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"thisGasPrice\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"chainBridge\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"BridgeArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"swapAndBridgeWormhole\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"lock\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"otherBridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"gasPrice\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"thisGasPrice\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"chainBridge\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"wormholeMessenger\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"wormholeMessengerConfig\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"wormholeProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"bridge\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"message\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"sequence\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"feeCollector\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"messengerGasUsage\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"clock\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"BridgeArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"swap\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"sendMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"receiveMint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"sendPool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"receivePool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"sendBridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"receiveBridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"sendUserToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"receiveUserToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n        {\n          name: \"receiveAmountMin\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"registerChainBridge\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"chainBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"RegisterChainBridgeArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"updateChainBridge\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"chainBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"UpdateChainBridgeArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"receiveAndSwap\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"receivedMessageAccount\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"unlock\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"chainBridge\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"messengerProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"UnlockArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"receiveAndSwapWormhole\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"receivedMessageAccount\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"unlock\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"chainBridge\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"messengerProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"UnlockArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"withdrawGasToken\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"recipient\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"claimRewards\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userDeposit\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"setAdmin\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"newAdmin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"startBridge\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"actionType\",\n          type: {\n            defined: \"ActionType\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"stopBridge\",\n      accounts: [\n        {\n          name: \"stopAuthority\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"actionType\",\n          type: {\n            defined: \"ActionType\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"setRebalancer\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"rebalancer\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"setStopAuthority\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"newAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"setAllbridgeMessengerProgramId\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"newProgramId\",\n          type: \"publicKey\",\n        },\n      ],\n    },\n    {\n      name: \"setWormholeMessengerProgramId\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"newProgramId\",\n          type: \"publicKey\",\n        },\n      ],\n    },\n    {\n      name: \"setGasOracleProgramId\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"newProgramId\",\n          type: \"publicKey\",\n        },\n      ],\n    },\n    {\n      name: \"setPoolFeeShare\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"feeShareBp\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"setBalanceRatioMin\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"balanceRatioMinBp\",\n          type: \"u16\",\n        },\n      ],\n    },\n    {\n      name: \"setPoolAdminFeeShare\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"feeShareBp\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"addOtherBridgeToken\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"otherBridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"chainId\",\n          type: \"u8\",\n        },\n        {\n          name: \"tokenAddress\",\n          type: {\n            array: [\"u8\", 32],\n          },\n        },\n      ],\n    },\n    {\n      name: \"removeOtherBridgeToken\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"config\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"otherBridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"chainId\",\n          type: \"u8\",\n        },\n        {\n          name: \"tokenAddress\",\n          type: {\n            array: [\"u8\", 32],\n          },\n        },\n      ],\n    },\n    {\n      name: \"withdrawAdminFee\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"adminToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"adjustTotalLpAmount\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"config\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"pool\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"userDeposit\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: \"chainBridge\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"address\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"chainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"gasUsage\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"config\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"admin\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"allbridgeMessengerProgramId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"wormholeMessengerProgramId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"gasOracleProgramId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"rebalancer\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"stopAuthority\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"authorityBumpSeed\",\n            type: \"u8\",\n          },\n          {\n            name: \"canSwap\",\n            type: \"bool\",\n          },\n          {\n            name: \"canDeposit\",\n            type: \"bool\",\n          },\n          {\n            name: \"canWithdraw\",\n            type: \"bool\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"lock\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"sender\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"sentTokenAddress\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"amount\",\n            type: \"u64\",\n          },\n          {\n            name: \"vusdAmount\",\n            type: \"u64\",\n          },\n          {\n            name: \"recipient\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"destinationChainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"receiveToken\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"nonce\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"messenger\",\n            type: {\n              defined: \"Messenger\",\n            },\n          },\n          {\n            name: \"slot\",\n            type: \"u64\",\n          },\n          {\n            name: \"fee\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"otherBridgeToken\",\n      type: {\n        kind: \"struct\",\n        fields: [],\n      },\n    },\n    {\n      name: \"pool\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"mint\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"a\",\n            type: \"u64\",\n          },\n          {\n            name: \"d\",\n            type: \"u64\",\n          },\n          {\n            name: \"tokenBalance\",\n            type: \"u64\",\n          },\n          {\n            name: \"vUsdBalance\",\n            type: \"u64\",\n          },\n          {\n            name: \"reserves\",\n            type: \"u64\",\n          },\n          {\n            name: \"decimals\",\n            type: \"u8\",\n          },\n          {\n            name: \"totalLpAmount\",\n            type: \"u64\",\n          },\n          {\n            name: \"feeShareBp\",\n            type: \"u64\",\n          },\n          {\n            name: \"adminFeeShareBp\",\n            type: \"u64\",\n          },\n          {\n            name: \"accRewardPerShareP\",\n            type: \"u128\",\n          },\n          {\n            name: \"adminFeeAmount\",\n            type: \"u64\",\n          },\n          {\n            name: \"balanceRatioMinBp\",\n            type: \"u16\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"unlock\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"hash\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"amount\",\n            type: \"u64\",\n          },\n          {\n            name: \"fee\",\n            type: \"u64\",\n          },\n          {\n            name: \"vUsdAmount\",\n            type: \"u64\",\n          },\n          {\n            name: \"slot\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"userDeposit\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"userAddress\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"mint\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"lpAmount\",\n            type: \"u64\",\n          },\n          {\n            name: \"rewardDebt\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"RegisterChainBridgeArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"chainBridgeAddress\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"chainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"gasUsage\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"UpdateChainBridgeArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"chainBridgeAddress\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"chainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"gasUsage\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"InitializeArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"allbridgeMessengerProgramId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"wormholeMessengerProgramId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"gasOracleProgramId\",\n            type: \"publicKey\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"InitializePoolArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"a\",\n            type: \"u64\",\n          },\n          {\n            name: \"feeShareBp\",\n            type: \"u64\",\n          },\n          {\n            name: \"adminFeeShareBp\",\n            type: \"u64\",\n          },\n          {\n            name: \"balanceRatioMinBp\",\n            type: \"u16\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"BridgeArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"nonce\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"recipient\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"destinationChainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"receiveToken\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"vusdAmount\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"UnlockArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"nonce\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"amount\",\n            type: \"u64\",\n          },\n          {\n            name: \"recipient\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"sourceChainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"receiveToken\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"messenger\",\n            type: {\n              defined: \"Messenger\",\n            },\n          },\n          {\n            name: \"hash\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"receiveAmountMin\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"RewardError\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"FeeTooHigh\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"Messenger\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"None\",\n          },\n          {\n            name: \"Allbridge\",\n          },\n          {\n            name: \"Wormhole\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"ActionType\",\n      type: {\n        kind: \"enum\",\n        variants: [\n          {\n            name: \"Deposit\",\n          },\n          {\n            name: \"Withdraw\",\n          },\n          {\n            name: \"Swap\",\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: \"AccountAlreadyInitialized\",\n      msg: \"This account has already been initialized\",\n    },\n    {\n      code: 6001,\n      name: \"AdminAuthorityInvalid\",\n      msg: \"This instruction requires admin authority\",\n    },\n    {\n      code: 6002,\n      name: \"InvalidSignature\",\n      msg: \"Provided signature has wrong signer or message\",\n    },\n    {\n      code: 6003,\n      name: \"InvalidHash\",\n      msg: \"Wrong unlock message hash\",\n    },\n    {\n      code: 6004,\n      name: \"PoolOverflow\",\n      msg: \"PoolInfo overflow\",\n    },\n    {\n      code: 6005,\n      name: \"ReservesExhausted\",\n      msg: \"Reserves exhausted\",\n    },\n    {\n      code: 6006,\n      name: \"ZeroAmount\",\n      msg: \"Zero amount\",\n    },\n    {\n      code: 6007,\n      name: \"ZeroChanges\",\n      msg: \"Zero changes\",\n    },\n    {\n      code: 6008,\n      name: \"HighVusdAmount\",\n      msg: \"vUSD amount is too high\",\n    },\n    {\n      code: 6009,\n      name: \"BalanceRatioExceeded\",\n      msg: \"Balance ratio exceeded\",\n    },\n    {\n      code: 6010,\n      name: \"InsufficientReceivedAmount\",\n      msg: \"Received insufficient amount\",\n    },\n    {\n      code: 6011,\n      name: \"ForbiddenAction\",\n      msg: \"ForbiddenAction\",\n    },\n    {\n      code: 6012,\n      name: \"ValueTooHigh\",\n      msg: \"Value is too high\",\n    },\n  ],\n};\n", "export interface CctpBridge {\n  version: \"0.1.0\";\n  name: \"cctp_bridge\";\n  instructions: [\n    {\n      name: \"initialize\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"cctpBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"rent\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"InitializeArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"bridge\";\n      accounts: [\n        {\n          name: \"user\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"messageSentEventData\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"lock\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"cctpBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"cctpMessenger\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"messageTransmitterProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"messageTransmitterAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"tokenMessenger\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenMinter\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"localToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"remoteTokenMessengerKey\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"authorityPda\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"eventAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"gasPrice\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"thisGasPrice\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"chainBridge\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"userToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"BridgeArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"registerChainBridge\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"cctpBridge\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"chainBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"RegisterChainBridgeArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"updateChainBridge\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"cctpBridge\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"chainBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"args\";\n          type: {\n            defined: \"UpdateChainBridgeArgs\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"setAdminFeeShare\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"cctpBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"feeShareBp\";\n          type: \"u64\";\n        },\n      ];\n    },\n    {\n      name: \"setGasOracleProgramId\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"cctpBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"newProgramId\";\n          type: \"publicKey\";\n        },\n      ];\n    },\n    {\n      name: \"withdrawGasToken\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"recipient\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"cctpBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"amount\";\n          type: \"u64\";\n        },\n      ];\n    },\n    {\n      name: \"withdrawAdminFee\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"cctpBridge\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"adminToken\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"bridgeAuthority\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"setCctpTokenMessengerMinter\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"cctpBridge\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"newProgramId\";\n          type: \"publicKey\";\n        },\n      ];\n    },\n  ];\n  accounts: [\n    {\n      name: \"cctpBridge\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"mint\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"admin\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"cctpTokenMessengerMinter\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"gasOracleProgramId\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"authorityBumpSeed\";\n            type: \"u8\";\n          },\n          {\n            name: \"adminFeeShareBp\";\n            type: \"u64\";\n          },\n          {\n            name: \"adminFeeAmount\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"chainBridge\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"chainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"gasUsage\";\n            type: \"u64\";\n          },\n          {\n            name: \"domain\";\n            type: \"u32\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"lock\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"sender\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"amount\";\n            type: \"u64\";\n          },\n          {\n            name: \"adminFee\";\n            type: \"u64\";\n          },\n          {\n            name: \"relayerFee\";\n            type: \"u64\";\n          },\n          {\n            name: \"recipient\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"destinationChainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"slot\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: \"RegisterChainBridgeArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"chainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"gasUsage\";\n            type: \"u64\";\n          },\n          {\n            name: \"domain\";\n            type: \"u32\";\n          },\n          {\n            name: \"mint\";\n            type: \"publicKey\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"UpdateChainBridgeArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"chainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"gasUsage\";\n            type: \"u64\";\n          },\n          {\n            name: \"domain\";\n            type: \"u32\";\n          },\n          {\n            name: \"mint\";\n            type: \"publicKey\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"BridgeArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"recipient\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"destinationChainId\";\n            type: \"u8\";\n          },\n          {\n            name: \"receiveToken\";\n            type: {\n              array: [\"u8\", 32];\n            };\n          },\n          {\n            name: \"amount\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"InitializeArgs\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"gasOracleProgramId\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"cctpTokenMessengerMinter\";\n            type: \"publicKey\";\n          },\n        ];\n      };\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: \"ValueTooHigh\";\n      msg: \"Value is too high\";\n    },\n  ];\n}\n\nexport const IDL: CctpBridge = {\n  version: \"0.1.0\",\n  name: \"cctp_bridge\",\n  instructions: [\n    {\n      name: \"initialize\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"cctpBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"rent\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"InitializeArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"bridge\",\n      accounts: [\n        {\n          name: \"user\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"messageSentEventData\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"lock\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"cctpBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"cctpMessenger\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"messageTransmitterProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"messageTransmitterAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"tokenMessenger\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenMinter\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"localToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"remoteTokenMessengerKey\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"authorityPda\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"eventAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"gasPrice\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"thisGasPrice\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"chainBridge\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"userToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"BridgeArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"registerChainBridge\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"cctpBridge\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"chainBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"RegisterChainBridgeArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"updateChainBridge\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"cctpBridge\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"chainBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"args\",\n          type: {\n            defined: \"UpdateChainBridgeArgs\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"setAdminFeeShare\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"cctpBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"feeShareBp\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"setGasOracleProgramId\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"cctpBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"newProgramId\",\n          type: \"publicKey\",\n        },\n      ],\n    },\n    {\n      name: \"withdrawGasToken\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"recipient\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"cctpBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"amount\",\n          type: \"u64\",\n        },\n      ],\n    },\n    {\n      name: \"withdrawAdminFee\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"cctpBridge\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"adminToken\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"bridgeAuthority\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"setCctpTokenMessengerMinter\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"cctpBridge\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"newProgramId\",\n          type: \"publicKey\",\n        },\n      ],\n    },\n  ],\n  accounts: [\n    {\n      name: \"cctpBridge\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"mint\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"admin\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"cctpTokenMessengerMinter\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"gasOracleProgramId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"authorityBumpSeed\",\n            type: \"u8\",\n          },\n          {\n            name: \"adminFeeShareBp\",\n            type: \"u64\",\n          },\n          {\n            name: \"adminFeeAmount\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"chainBridge\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"chainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"gasUsage\",\n            type: \"u64\",\n          },\n          {\n            name: \"domain\",\n            type: \"u32\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"lock\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"sender\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"amount\",\n            type: \"u64\",\n          },\n          {\n            name: \"adminFee\",\n            type: \"u64\",\n          },\n          {\n            name: \"relayerFee\",\n            type: \"u64\",\n          },\n          {\n            name: \"recipient\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"destinationChainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"slot\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"RegisterChainBridgeArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"chainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"gasUsage\",\n            type: \"u64\",\n          },\n          {\n            name: \"domain\",\n            type: \"u32\",\n          },\n          {\n            name: \"mint\",\n            type: \"publicKey\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"UpdateChainBridgeArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"chainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"gasUsage\",\n            type: \"u64\",\n          },\n          {\n            name: \"domain\",\n            type: \"u32\",\n          },\n          {\n            name: \"mint\",\n            type: \"publicKey\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"BridgeArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"recipient\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"destinationChainId\",\n            type: \"u8\",\n          },\n          {\n            name: \"receiveToken\",\n            type: {\n              array: [\"u8\", 32],\n            },\n          },\n          {\n            name: \"amount\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"InitializeArgs\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"gasOracleProgramId\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"cctpTokenMessengerMinter\",\n            type: \"publicKey\",\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: \"ValueTooHigh\",\n      msg: \"Value is too high\",\n    },\n  ],\n};\n", "import { Program, Provider, Spl } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n/* eslint-disable-next-line  import/no-named-as-default */\nimport Big from \"big.js\";\nimport { Web3 } from \"web3\";\nimport { InvalidTxError, SdkError } from \"../../../exceptions\";\nimport { PoolInfo } from \"../../../tokens-info\";\nimport { swapToVUsd } from \"../../../utils/calculation\";\nimport { TokenAccountData } from \"../../models/sol\";\nimport { Bridge as BridgeType } from \"../../models/sol/types/bridge\";\n\nexport async function getTokenAccountData(account: PublicKey, provider: Provider): Promise<TokenAccountData> {\n  return await Spl.token(provider).account.token.fetch(account);\n}\n\nexport async function getVUsdAmount(\n  amount: string,\n  bridge: Program<BridgeType>,\n  poolAccount: PublicKey\n): Promise<string> {\n  const poolAccountInfo = await bridge.account.pool.fetch(poolAccount);\n  const decimals = poolAccountInfo.decimals;\n  const feeShare = Big(poolAccountInfo.feeShareBp.toString()).div(10000).toFixed();\n  const poolInfo: Omit<PoolInfo, \"p\" | \"imbalance\"> = {\n    aValue: poolAccountInfo.a.toString(),\n    dValue: poolAccountInfo.d.toString(),\n    totalLpAmount: poolAccountInfo.totalLpAmount.toString(),\n    tokenBalance: poolAccountInfo.tokenBalance.toString(),\n    vUsdBalance: poolAccountInfo.vUsdBalance.toString(),\n    accRewardPerShareP: poolAccountInfo.accRewardPerShareP.toString(),\n  };\n  return swapToVUsd(amount, { decimals, feeShare }, poolInfo);\n}\n\nexport function getMessage(args: {\n  amount: string;\n  recipient: Buffer;\n  sourceChainId: number;\n  destinationChainId: number;\n  receiveToken: Buffer;\n  nonce: Buffer;\n  chainBridge: Buffer;\n}): Buffer {\n  const amount = args.amount;\n  const recipient = \"0x\" + args.recipient.toString(\"hex\");\n  const sourceChainId = args.sourceChainId;\n  const destinationsChainId = args.destinationChainId;\n  const receiveToken = \"0x\" + args.receiveToken.toString(\"hex\");\n  const nonce = \"0x\" + args.nonce.toString(\"hex\");\n  const messenger = 1;\n  const chainBridge = \"0x\" + args.chainBridge.toString(\"hex\");\n\n  const message = Web3.utils.encodePacked(\n    { t: \"uint256\", v: amount },\n    { t: \"bytes32\", v: recipient },\n    { t: \"uint256\", v: sourceChainId },\n    { t: \"bytes32\", v: receiveToken },\n    { t: \"uint256\", v: nonce },\n    { t: \"uint8\", v: messenger }\n  );\n\n  if (!message) {\n    throw new SdkError(\"message cannot be undefined\");\n  }\n  const hash = Web3.utils.keccak256(Buffer.from(message.replace(\"0x\", \"\"), \"hex\") as any);\n\n  const hashBuffer = Buffer.from(hash.replace(\"0x\", \"\"), \"hex\");\n  hashBuffer[0] = sourceChainId;\n  hashBuffer[1] = destinationsChainId;\n\n  const messageWithSigner = Web3.utils.encodePacked(\n    { t: \"bytes32\", v: \"0x\" + hashBuffer.toString(\"hex\") },\n    { t: \"bytes32\", v: chainBridge }\n  );\n\n  if (!messageWithSigner) {\n    throw new InvalidTxError(\"messageWithSigner cannot be undefined\");\n  }\n\n  const hashWithSigner = Web3.utils.keccak256(Buffer.from(messageWithSigner.replace(\"0x\", \"\"), \"hex\") as any);\n\n  const hashWithSignerBuffer = Buffer.from(hashWithSigner.replace(\"0x\", \"\"), \"hex\");\n\n  hashWithSignerBuffer[0] = hashBuffer[0];\n  hashWithSignerBuffer[1] = hashBuffer[1];\n  return hashWithSignerBuffer;\n}\n", "import {\n  ComputeBudgetInstruction,\n  ComputeBudgetProgram,\n  Connection,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { Big } from \"big.js\";\nimport { TxTooLargeError } from \"../../../exceptions\";\nimport { toPowBase10 } from \"../../../utils/calculation\";\nimport { fetchAddressLookupTableAccountsFromTx } from \"../../../utils/sol/utils\";\nimport { SolanaAutoTxFee, TxFeeParams } from \"../../models\";\n\nexport async function addUnitLimitAndUnitPriceToTx(\n  transaction: Transaction,\n  txFeeParams: TxFeeParams | undefined,\n  solanaRpcUrl: string\n) {\n  const connection = new Connection(solanaRpcUrl, \"confirmed\");\n  /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n  const simUnitsConsumed = (await connection.simulateTransaction(transaction)).value.unitsConsumed!;\n  await addUnitLimitAndUnitPriceToInstructions(transaction.instructions, simUnitsConsumed, txFeeParams, connection);\n}\n\nexport async function addUnitLimitAndUnitPriceToVersionedTx(\n  transaction: VersionedTransaction,\n  txFeeParams: TxFeeParams | undefined,\n  solanaRpcUrl: string\n) {\n  const connection = new Connection(solanaRpcUrl, \"confirmed\");\n  const addressLookupTableAccounts = await fetchAddressLookupTableAccountsFromTx(transaction, connection);\n  const message = TransactionMessage.decompile(transaction.message, {\n    addressLookupTableAccounts: addressLookupTableAccounts,\n  });\n\n  if (transaction.serialize().length > 1232) {\n    throw new TxTooLargeError();\n  }\n\n  // const simUnitsConsumed = (await connection.simulateTransaction(transaction, { replaceRecentBlockhash: true })).value\n  //   .unitsConsumed!;\n  const simUnitsConsumed = 769230; // 1000000/1.3\n\n  await addUnitLimitAndUnitPriceToInstructions(message.instructions, simUnitsConsumed, txFeeParams, connection);\n\n  transaction.message = message.compileToV0Message(addressLookupTableAccounts);\n}\n\nasync function addUnitLimitAndUnitPriceToInstructions(\n  instructions: TransactionInstruction[],\n  simUnitsConsumed: number,\n  txFeeParams: TxFeeParams | undefined,\n  connection: Connection\n) {\n  if (simUnitsConsumed > 0) {\n    const units = updateUnitLimit(simUnitsConsumed, instructions);\n    if (txFeeParams?.solana) {\n      const solanaTxFee = txFeeParams.solana;\n      if (solanaTxFee === SolanaAutoTxFee) {\n        await updateUnitPrice(instructions, connection);\n      } else if (\"pricePerUnitInMicroLamports\" in solanaTxFee) {\n        await updateUnitPrice(instructions, connection, solanaTxFee.pricePerUnitInMicroLamports);\n      } else {\n        const pricePerUnitInMicroLamports = Big(solanaTxFee.extraFeeInLamports)\n          .div(units)\n          .mul(toPowBase10(6))\n          .toFixed(0);\n        await updateUnitPrice(instructions, connection, pricePerUnitInMicroLamports);\n      }\n    }\n  }\n}\n\nfunction updateUnitLimit(simUnitsConsumed: number, instructions: TransactionInstruction[]): string {\n  const computeUnitLimitIndex = instructions.findIndex(\n    (instruction) =>\n      instruction.programId.equals(ComputeBudgetProgram.programId) &&\n      ComputeBudgetInstruction.decodeInstructionType(instruction) === \"SetComputeUnitLimit\"\n  );\n  const units = Number((simUnitsConsumed * 1.3).toFixed(0));\n  const computeUnitLimitInstruction = ComputeBudgetProgram.setComputeUnitLimit({\n    units: units,\n  });\n  if (computeUnitLimitIndex >= 0) {\n    instructions[computeUnitLimitIndex] = computeUnitLimitInstruction;\n  } else {\n    instructions.push(computeUnitLimitInstruction);\n  }\n  return units.toString();\n}\n\nasync function updateUnitPrice(\n  instructions: TransactionInstruction[],\n  connection: Connection,\n  pricePerUnitInMicroLamports?: string\n): Promise<string> {\n  const computeUnitPriceIndex = instructions.findIndex(\n    (instruction) =>\n      instruction.programId.equals(ComputeBudgetProgram.programId) &&\n      ComputeBudgetInstruction.decodeInstructionType(instruction) === \"SetComputeUnitPrice\"\n  );\n  const unitPrice = pricePerUnitInMicroLamports\n    ? BigInt(pricePerUnitInMicroLamports)\n    : BigInt(await getAveragePrioritizationFee(connection));\n  const computeUnitPriceInstruction = ComputeBudgetProgram.setComputeUnitPrice({\n    microLamports: unitPrice,\n  });\n  if (computeUnitPriceIndex >= 0) {\n    instructions[computeUnitPriceIndex] = computeUnitPriceInstruction;\n  } else {\n    instructions.push(computeUnitPriceInstruction);\n  }\n  return unitPrice.toString();\n}\n\nasync function getAveragePrioritizationFee(connection: Connection) {\n  const prioritizationFees = await connection.getRecentPrioritizationFees();\n  let sum = 0;\n  for (const prioritizationFee of prioritizationFees) {\n    sum += prioritizationFee.prioritizationFee;\n  }\n  return (sum / prioritizationFees.length).toFixed(0);\n}\n", "import { AddressLookupTableAccount, Connection, VersionedTransaction } from \"@solana/web3.js\";\nimport { SdkError } from \"../../exceptions\";\n\nexport async function fetchAddressLookupTableAccountsFromTx(\n  transaction: VersionedTransaction,\n  connection: Connection\n): Promise<AddressLookupTableAccount[]> {\n  return await Promise.all(\n    transaction.message.addressTableLookups.map(async (lookup) => {\n      return new AddressLookupTableAccount({\n        key: lookup.accountKey,\n        state: AddressLookupTableAccount.deserialize(\n          await connection.getAccountInfo(lookup.accountKey).then((res) => {\n            if (!res) {\n              throw new SdkError(\"Cannot get AccountInfo\");\n            }\n            return res.data;\n          })\n        ),\n      });\n    })\n  );\n}\n", "import { BN, Program, Provider } from \"@project-serum/anchor\";\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { Bridge as BridgeType } from \"./types/bridge\";\nimport { CctpBridge as CctpBridgeType } from \"./types/cctp_bridge\";\n\nexport type SolanaTxFee = PricePerUnitInMicroLamports | ExtraFeeInLamports | typeof SolanaAutoTxFee;\n/**\n * Priority Fee will be calculated based on {@link https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getRecentPrioritizationFees}\n */\nexport const SolanaAutoTxFee = \"AUTO\";\n\n/**\n * Add Priority Fee as price per unit in micro-lamports\n */\nexport interface PricePerUnitInMicroLamports {\n  pricePerUnitInMicroLamports: string;\n}\n\n/**\n * Total Priority Fee impact will be as extraFeeInLamports param\n */\nexport interface ExtraFeeInLamports {\n  extraFeeInLamports: string;\n}\n\nexport interface SwapAndBridgeSolData {\n  bridge: Program<BridgeType>;\n  amount: BN;\n  vusdAmount: BN;\n  nonce: number[];\n  recipient: number[];\n  receiveToken: number[];\n  poolAccount: PublicKey;\n  lockAccount: PublicKey;\n  bridgeAuthority: PublicKey;\n  userToken: PublicKey;\n  bridgeTokenAccount: PublicKey;\n  chainBridgeAccount: PublicKey;\n  otherBridgeTokenAccount: PublicKey;\n  userAccount: PublicKey;\n  destinationChainId: number;\n  mint: string;\n  config: PublicKey;\n  configAccountInfo: ConfigAccountInfo;\n  gasPrice: PublicKey;\n  thisGasPrice: PublicKey;\n  message: Buffer;\n  extraGasInstruction?: TransactionInstruction;\n  provider: Provider;\n}\n\nexport interface SwapAndBridgeSolDataCctpData {\n  cctpBridge: Program<CctpBridgeType>;\n  cctpBridgeAccount: PublicKey;\n  cctpAddressAccount: PublicKey;\n  amount: BN;\n  recipient: number[];\n  receiveToken: number[];\n  userToken: PublicKey;\n  bridgeAuthority: PublicKey;\n  bridgeTokenAccount: PublicKey;\n  chainBridgeAccount: PublicKey;\n  userAccount: PublicKey;\n  destinationChainId: number;\n  mint: PublicKey;\n  gasPrice: PublicKey;\n  thisGasPrice: PublicKey;\n  extraGasInstruction?: TransactionInstruction;\n  provider: Provider;\n}\n\ninterface ConfigAccountInfo {\n  allbridgeMessengerProgramId: PublicKey;\n  wormholeMessengerProgramId: PublicKey;\n  gasOracleProgramId: PublicKey;\n}\n\nexport interface TokenAccountData {\n  amount: BN;\n  authority: PublicKey;\n  closeAuthority: unknown;\n  delegate: unknown;\n  delegatedAmount: BN;\n  isNative: unknown;\n  mint: PublicKey;\n  state: unknown;\n}\n", "import { NATIVE_MINT } from \"@solana/spl-token\";\nimport { Connection, TransactionMessage, VersionedTransaction } from \"@solana/web3.js\";\nimport axios, { AxiosError } from \"axios\";\nimport { JupiterError, SdkError } from \"../../../exceptions\";\nimport { fetchAddressLookupTableAccountsFromTx } from \"../../../utils/sol/utils\";\nimport { JupiterParams } from \"./index\";\n\nexport class JupiterService {\n  connection: Connection;\n  jupiterUrl: string;\n  apiKeyHeader?: string;\n  maxAccounts?: number;\n\n  constructor(solanaRpcUrl: string, jupiterParams: JupiterParams) {\n    this.connection = new Connection(solanaRpcUrl);\n    this.jupiterUrl = jupiterParams.jupiterUrl.replace(/\\/$/, \"\"); // trim last \"/\" if exist\n    this.apiKeyHeader = jupiterParams.jupiterApiKeyHeader;\n    this.maxAccounts = jupiterParams.jupiterMaxAccounts;\n  }\n\n  async getJupiterSwapTx(\n    userAddress: string,\n    stableTokenAddress: string,\n    amount: string,\n    exactOut: boolean\n  ): Promise<{ tx: VersionedTransaction; amountIn?: string }> {\n    let quoteResponse: any;\n    try {\n      const swapMode = exactOut ? \"ExactOut\" : \"ExactIn\";\n      let url = `${this.jupiterUrl}/quote?inputMint=${stableTokenAddress}&outputMint=${NATIVE_MINT.toString()}&amount=${amount}&swapMode=${swapMode}&slippageBps=100&onlyDirectRoutes=true`;\n\n      if (this.maxAccounts) {\n        url += `&maxAccounts=${this.maxAccounts}`;\n      }\n      quoteResponse = await axios.get(url, {\n        headers: this.apiKeyHeader ? { \"x-api-key\": this.apiKeyHeader } : undefined,\n      });\n    } catch (err) {\n      if (err instanceof AxiosError && err.response && err.response.data && err.response.data.error) {\n        throw new JupiterError(err.response.data.error);\n      }\n      throw new JupiterError(\"Cannot get route\");\n    }\n\n    let inAmount;\n    if (exactOut && quoteResponse?.data?.inAmount) {\n      inAmount = quoteResponse.data.inAmount;\n    } else if (exactOut) {\n      throw new JupiterError(\"Cannot get inAmount\");\n    }\n\n    let transactionResponse: any;\n    try {\n      transactionResponse = await axios.post(\n        `${this.jupiterUrl}/swap`,\n        {\n          quoteResponse: quoteResponse.data,\n          userPublicKey: userAddress,\n          wrapAndUnwrapSol: true,\n        },\n        {\n          headers: this.apiKeyHeader ? { \"x-api-key\": this.apiKeyHeader } : undefined,\n        }\n      );\n    } catch (err) {\n      if (err instanceof AxiosError && err.response && err.response.data && err.response.data.error) {\n        throw new JupiterError(err.response.data.error);\n      }\n      throw new JupiterError(\"Cannot get swap transaction\");\n    }\n\n    let swapTransaction;\n    if (transactionResponse?.data?.swapTransaction) {\n      swapTransaction = transactionResponse.data.swapTransaction;\n    } else {\n      throw new JupiterError(\"Cannot get swap transaction\");\n    }\n\n    const swapTransactionBuf = Buffer.from(swapTransaction, \"base64\");\n    const tx = VersionedTransaction.deserialize(swapTransactionBuf);\n\n    return exactOut ? { tx, amountIn: inAmount } : { tx };\n  }\n\n  async amendJupiterWithSdkTx(\n    transaction: VersionedTransaction,\n    sdkTx: VersionedTransaction\n  ): Promise<VersionedTransaction> {\n    try {\n      const addressLookupTableAccounts = await fetchAddressLookupTableAccountsFromTx(transaction, this.connection);\n      const sdkAddressLookupTableAccounts = await fetchAddressLookupTableAccountsFromTx(sdkTx, this.connection);\n\n      const message = TransactionMessage.decompile(transaction.message, {\n        addressLookupTableAccounts: addressLookupTableAccounts,\n      });\n      const sdkMessage = TransactionMessage.decompile(sdkTx.message, {\n        addressLookupTableAccounts: sdkAddressLookupTableAccounts,\n      });\n      sdkMessage.instructions.shift();\n      message.instructions.push(...sdkMessage.instructions);\n\n      addressLookupTableAccounts.push(...sdkAddressLookupTableAccounts);\n\n      transaction.message = message.compileToV0Message(addressLookupTableAccounts);\n\n      if (sdkTx.message.header.numRequiredSignatures === 2 && transaction.signatures.length === 1) {\n        const signature = sdkTx.signatures[0];\n        if (!signature) {\n          throw new SdkError(\"Signature is undefined\");\n        }\n        transaction.signatures.push(signature);\n      }\n      return transaction;\n    } catch (e) {\n      if (e instanceof Error && e.message) {\n        throw new JupiterError(`Some error occurred during creation final swap and bridge transaction. ${e.message}`);\n      }\n      throw new JupiterError(\"Some error occurred during creation final swap and bridge transaction\");\n    }\n  }\n}\n", "import { Address, contract } from \"@stellar/stellar-sdk\";\nimport { Big } from \"big.js\";\nimport { ChainSymbol } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { MethodNotSupportedError } from \"../../../exceptions\";\nimport { AllbridgeCoreSdkOptions, ChainType } from \"../../../index\";\nimport { FeePaymentMethod } from \"../../../models\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { RawTransaction, TransactionResponse } from \"../../models\";\nimport { BridgeContract } from \"../../models/srb/bridge-contract\";\nimport { ChainBridgeService, SendParams, SwapParams, TxSendParamsSrb, TxSwapParamsSol } from \"../models\";\nimport { getNonceBigInt, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\nimport ContractClientOptions = contract.ClientOptions;\n\nexport class SrbBridgeService extends ChainBridgeService {\n  chainType: ChainType.SRB = ChainType.SRB;\n\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions,\n    readonly api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    return await this.buildRawTransactionSendFromParams(txSendParams);\n  }\n\n  async buildRawTransactionSendFromParams(params: TxSendParamsSrb): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = params;\n\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n    const contract = this.getContract(BridgeContract, contractAddress, fromAccountAddress);\n    let tx;\n    if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n      tx = await contract.swap_and_bridge({\n        sender: fromAccountAddress,\n        token: Address.contract(Buffer.from(fromTokenAddress)).toString(),\n        amount: BigInt(amount),\n        recipient: Buffer.from(toAccountAddress),\n        destination_chain_id: +toChainId,\n        receive_token: Buffer.from(toTokenAddress),\n        nonce: getNonceBigInt(),\n        gas_amount: BigInt(0),\n        fee_token_amount: BigInt(totalFee),\n      });\n    } else {\n      tx = await contract.swap_and_bridge({\n        sender: fromAccountAddress,\n        token: Address.contract(Buffer.from(fromTokenAddress)).toString(),\n        amount: BigInt(amount),\n        recipient: Buffer.from(toAccountAddress),\n        destination_chain_id: +toChainId,\n        receive_token: Buffer.from(toTokenAddress),\n        nonce: getNonceBigInt(),\n        gas_amount: BigInt(totalFee),\n        fee_token_amount: BigInt(0),\n      });\n    }\n    return tx.toXDR();\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction> {\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildRawTransactionSwapFromParams(txSwapParams);\n  }\n\n  async buildRawTransactionSwapFromParams(params: TxSwapParamsSol): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toAccountAddress,\n      toTokenAddress,\n      minimumReceiveAmount,\n    } = params;\n    const contract = this.getContract(BridgeContract, contractAddress, fromAccountAddress);\n    return (\n      await contract.swap({\n        sender: fromAccountAddress,\n        amount: BigInt(amount),\n        token: Address.contract(Buffer.from(fromTokenAddress)).toBuffer(),\n        receive_token: Buffer.from(toTokenAddress),\n        recipient: toAccountAddress,\n        receive_amount_min: BigInt(minimumReceiveAmount),\n      })\n    ).toXDR();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  send(params: SendParams): Promise<TransactionResponse> {\n    throw new MethodNotSupportedError();\n  }\n\n  private getContract<T>(contract: new (args: ContractClientOptions) => T, address: string, sender?: string): T {\n    const config: ContractClientOptions = {\n      publicKey: sender,\n      contractId: address,\n      networkPassphrase: this.params.sorobanNetworkPassphrase,\n      rpcUrl: this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB),\n    };\n    return new contract(config);\n  }\n}\n", "import { contract } from \"@stellar/stellar-sdk\";\nimport u128 = contract.u128;\nimport u32 = contract.u32;\nimport u256 = contract.u256;\nimport AssembledTransaction = contract.AssembledTransaction;\nimport Result = contract.Result;\nimport Option = contract.Option;\nimport ContractSpec = contract.Spec;\nimport ContractClient = contract.Client;\nimport ContractClientOptions = contract.ClientOptions;\n\nexport interface Swapped {\n  receive_amount: u128;\n  receive_token: Buffer;\n  recipient: string;\n  send_amount: u128;\n  send_token: Buffer;\n  sender: string;\n}\n\nexport interface TokensSent {\n  amount: u128;\n  destination_chain_id: u32;\n  nonce: u256;\n  receive_token: Buffer;\n  recipient: Buffer;\n}\n\nexport interface TokensReceived {\n  amount: u128;\n  message: Buffer;\n  nonce: u256;\n  recipient: Buffer;\n}\n\nexport interface ReceiveFee {\n  bridge_transaction_cost: u128;\n  extra_gas: u128;\n  message_transaction_cost: u128;\n}\n\nexport interface BridgingFeeFromTokens {\n  fee_token_amount: u128;\n  gas: u128;\n}\n\nexport interface AnotherBridge {\n  address: Buffer;\n  tokens: Map<Buffer, boolean>;\n}\n\nexport interface Bridge {\n  /**\n   * precomputed values of the scaling factor required for paying the bridging fee with stable tokens\n   */\n  bridging_fee_conversion_factor: Map<string, u128>;\n  can_swap: boolean;\n  /**\n   * precomputed values to divide by to change the precision from the Gas Oracle precision to the token precision\n   */\n  from_gas_oracle_factor: Map<string, u128>;\n  messenger: string;\n  pools: Map<Buffer, string>;\n  rebalancer: string;\n}\n\nexport type DataKey =\n  | { tag: \"OtherBridge\"; values: readonly [u32] }\n  | { tag: \"SentMessage\"; values: readonly [Buffer] }\n  | { tag: \"ReceivedMessage\"; values: readonly [Buffer] };\n\nexport type Admin = readonly [string];\nexport type GasOracleAddress = readonly [string];\nexport type GasUsage = readonly [Map<u32, u128>];\nexport type NativeToken = readonly [string];\nexport type StopAuthority = readonly [string];\nexport const Errors = {\n  0: { message: \"\" },\n  1: { message: \"\" },\n  2: { message: \"\" },\n  3: { message: \"\" },\n  4: { message: \"\" },\n  5: { message: \"\" },\n  6: { message: \"\" },\n  7: { message: \"\" },\n  8: { message: \"\" },\n  9: { message: \"\" },\n  10: { message: \"\" },\n  11: { message: \"\" },\n  12: { message: \"\" },\n  103: { message: \"\" },\n  104: { message: \"\" },\n  105: { message: \"\" },\n  106: { message: \"\" },\n  107: { message: \"\" },\n  108: { message: \"\" },\n  109: { message: \"\" },\n  203: { message: \"\" },\n  204: { message: \"\" },\n  205: { message: \"\" },\n  206: { message: \"\" },\n  207: { message: \"\" },\n  208: { message: \"\" },\n  209: { message: \"\" },\n  210: { message: \"\" },\n  211: { message: \"\" },\n  212: { message: \"\" },\n  214: { message: \"\" },\n  215: { message: \"\" },\n  216: { message: \"\" },\n  217: { message: \"\" },\n  218: { message: \"\" },\n  300: { message: \"\" },\n  301: { message: \"\" },\n  302: { message: \"\" },\n  303: { message: \"\" },\n  400: { message: \"\" },\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport interface BridgeContract {\n  /**\n   * Construct and simulate a initialize transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  initialize: (\n    {\n      admin,\n      messenger,\n      gas_oracle,\n      native_token,\n    }: {\n      admin: string;\n      messenger: string;\n      gas_oracle: string;\n      native_token: string;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a swap_and_bridge transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  swap_and_bridge: (\n    {\n      sender,\n      token,\n      amount,\n      recipient,\n      destination_chain_id,\n      receive_token,\n      nonce,\n      gas_amount,\n      fee_token_amount,\n    }: {\n      sender: string;\n      token: string;\n      amount: u128;\n      recipient: Buffer;\n      destination_chain_id: u32;\n      receive_token: Buffer;\n      nonce: u256;\n      gas_amount: u128;\n      fee_token_amount: u128;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a receive_tokens transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  receive_tokens: (\n    {\n      sender,\n      amount,\n      recipient,\n      source_chain_id,\n      receive_token,\n      nonce,\n      receive_amount_min,\n      extra_gas,\n    }: {\n      sender: string;\n      amount: u128;\n      recipient: string;\n      source_chain_id: u32;\n      receive_token: Buffer;\n      nonce: u256;\n      receive_amount_min: u128;\n      extra_gas: Option<u128>;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a swap transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  swap: (\n    {\n      sender,\n      amount,\n      token,\n      receive_token,\n      recipient,\n      receive_amount_min,\n    }: {\n      sender: string;\n      amount: u128;\n      token: Buffer;\n      receive_token: Buffer;\n      recipient: string;\n      receive_amount_min: u128;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a stop_swap transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  stop_swap: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a start_swap transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  start_swap: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_gas_oracle transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_gas_oracle: (\n    { new_address }: { new_address: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_stop_authority transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_stop_authority: (\n    { stop_authority }: { stop_authority: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_rebalancer transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_rebalancer: (\n    { rebalancer }: { rebalancer: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_messenger transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_messenger: (\n    { messenger }: { messenger: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_gas_usage transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_gas_usage: (\n    { chain_id, gas_usage }: { chain_id: u32; gas_usage: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a register_bridge transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  register_bridge: (\n    { chain_id, bridge_address }: { chain_id: u32; bridge_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a add_bridge_token transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  add_bridge_token: (\n    { chain_id, token_address }: { chain_id: u32; token_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a remove_bridge_token transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  remove_bridge_token: (\n    { chain_id, token_address }: { chain_id: u32; token_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a add_pool transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  add_pool: (\n    { pool, token }: { pool: string; token: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a withdraw_gas_tokens transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  withdraw_gas_tokens: (\n    { sender, amount }: { sender: string; amount: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a withdraw_bridging_fee_in_tokens transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  withdraw_bridging_fee_in_tokens: (\n    { sender, token_address }: { sender: string; token_address: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a has_processed_message transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  has_processed_message: (\n    { message }: { message: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<boolean>>>;\n\n  /**\n   * Construct and simulate a has_received_message transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  has_received_message: (\n    { message }: { message: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<boolean>>>;\n\n  /**\n   * Construct and simulate a get_pool_address transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_pool_address: (\n    { token_address }: { token_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_config transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_config: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<Bridge>>>;\n\n  /**\n   * Construct and simulate a get_stop_authority transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_stop_authority: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_transaction_cost transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_transaction_cost: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_gas_usage transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_gas_usage: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_admin transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_admin: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_gas_oracle transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_gas_oracle: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_another_bridge transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_another_bridge: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<AnotherBridge>>>;\n\n  /**\n   * Construct and simulate a set_admin transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_admin: (\n    { new_admin }: { new_admin: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a upgrade transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  upgrade: (\n    { new_wasm_hash }: { new_wasm_hash: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class BridgeContract extends ContractClient {\n  constructor(public readonly options: ContractClientOptions) {\n    super(\n      new ContractSpec([\n        \"AAAAAAAAAAAAAAAKaW5pdGlhbGl6ZQAAAAAABAAAAAAAAAAFYWRtaW4AAAAAAAATAAAAAAAAAAltZXNzZW5nZXIAAAAAAAATAAAAAAAAAApnYXNfb3JhY2xlAAAAAAATAAAAAAAAAAxuYXRpdmVfdG9rZW4AAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAPc3dhcF9hbmRfYnJpZGdlAAAAAAkAAAAAAAAABnNlbmRlcgAAAAAAEwAAAAAAAAAFdG9rZW4AAAAAAAATAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAACXJlY2lwaWVudAAAAAAAA+4AAAAgAAAAAAAAABRkZXN0aW5hdGlvbl9jaGFpbl9pZAAAAAQAAAAAAAAADXJlY2VpdmVfdG9rZW4AAAAAAAPuAAAAIAAAAAAAAAAFbm9uY2UAAAAAAAAMAAAAAAAAAApnYXNfYW1vdW50AAAAAAAKAAAAAAAAABBmZWVfdG9rZW5fYW1vdW50AAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAOcmVjZWl2ZV90b2tlbnMAAAAAAAgAAAAAAAAABnNlbmRlcgAAAAAAEwAAAAAAAAAGYW1vdW50AAAAAAAKAAAAAAAAAAlyZWNpcGllbnQAAAAAAAATAAAAAAAAAA9zb3VyY2VfY2hhaW5faWQAAAAABAAAAAAAAAANcmVjZWl2ZV90b2tlbgAAAAAAA+4AAAAgAAAAAAAAAAVub25jZQAAAAAAAAwAAAAAAAAAEnJlY2VpdmVfYW1vdW50X21pbgAAAAAACgAAAAAAAAAJZXh0cmFfZ2FzAAAAAAAD6AAAAAoAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAAEc3dhcAAAAAYAAAAAAAAABnNlbmRlcgAAAAAAEwAAAAAAAAAGYW1vdW50AAAAAAAKAAAAAAAAAAV0b2tlbgAAAAAAA+4AAAAgAAAAAAAAAA1yZWNlaXZlX3Rva2VuAAAAAAAD7gAAACAAAAAAAAAACXJlY2lwaWVudAAAAAAAABMAAAAAAAAAEnJlY2VpdmVfYW1vdW50X21pbgAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAJc3RvcF9zd2FwAAAAAAAAAAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAKc3RhcnRfc3dhcAAAAAAAAAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAOc2V0X2dhc19vcmFjbGUAAAAAAAEAAAAAAAAAC25ld19hZGRyZXNzAAAAABMAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAASc2V0X3N0b3BfYXV0aG9yaXR5AAAAAAABAAAAAAAAAA5zdG9wX2F1dGhvcml0eQAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAOc2V0X3JlYmFsYW5jZXIAAAAAAAEAAAAAAAAACnJlYmFsYW5jZXIAAAAAABMAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAANc2V0X21lc3NlbmdlcgAAAAAAAAEAAAAAAAAACW1lc3NlbmdlcgAAAAAAABMAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAANc2V0X2dhc191c2FnZQAAAAAAAAIAAAAAAAAACGNoYWluX2lkAAAABAAAAAAAAAAJZ2FzX3VzYWdlAAAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAPcmVnaXN0ZXJfYnJpZGdlAAAAAAIAAAAAAAAACGNoYWluX2lkAAAABAAAAAAAAAAOYnJpZGdlX2FkZHJlc3MAAAAAA+4AAAAgAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAQYWRkX2JyaWRnZV90b2tlbgAAAAIAAAAAAAAACGNoYWluX2lkAAAABAAAAAAAAAANdG9rZW5fYWRkcmVzcwAAAAAAA+4AAAAgAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAATcmVtb3ZlX2JyaWRnZV90b2tlbgAAAAACAAAAAAAAAAhjaGFpbl9pZAAAAAQAAAAAAAAADXRva2VuX2FkZHJlc3MAAAAAAAPuAAAAIAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAIYWRkX3Bvb2wAAAACAAAAAAAAAARwb29sAAAAEwAAAAAAAAAFdG9rZW4AAAAAAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAATd2l0aGRyYXdfZ2FzX3Rva2VucwAAAAACAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAABmFtb3VudAAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAfd2l0aGRyYXdfYnJpZGdpbmdfZmVlX2luX3Rva2VucwAAAAACAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAADXRva2VuX2FkZHJlc3MAAAAAAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAVaGFzX3Byb2Nlc3NlZF9tZXNzYWdlAAAAAAAAAQAAAAAAAAAHbWVzc2FnZQAAAAPuAAAAIAAAAAEAAAPpAAAAAQAAAAM=\",\n        \"AAAAAAAAAAAAAAAUaGFzX3JlY2VpdmVkX21lc3NhZ2UAAAABAAAAAAAAAAdtZXNzYWdlAAAAA+4AAAAgAAAAAQAAA+kAAAABAAAAAw==\",\n        \"AAAAAAAAAAAAAAAQZ2V0X3Bvb2xfYWRkcmVzcwAAAAEAAAAAAAAADXRva2VuX2FkZHJlc3MAAAAAAAPuAAAAIAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAAKZ2V0X2NvbmZpZwAAAAAAAAAAAAEAAAPpAAAH0AAAAAZCcmlkZ2UAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAASZ2V0X3N0b3BfYXV0aG9yaXR5AAAAAAAAAAAAAQAAA+kAAAATAAAAAw==\",\n        \"AAAAAAAAAAAAAAAUZ2V0X3RyYW5zYWN0aW9uX2Nvc3QAAAABAAAAAAAAAAhjaGFpbl9pZAAAAAQAAAABAAAD6QAAAAoAAAAD\",\n        \"AAAAAAAAAAAAAAANZ2V0X2dhc191c2FnZQAAAAAAAAEAAAAAAAAACGNoYWluX2lkAAAABAAAAAEAAAPpAAAACgAAAAM=\",\n        \"AAAAAAAAAAAAAAAJZ2V0X2FkbWluAAAAAAAAAAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAAOZ2V0X2dhc19vcmFjbGUAAAAAAAAAAAABAAAD6QAAABMAAAAD\",\n        \"AAAAAAAAAAAAAAASZ2V0X2Fub3RoZXJfYnJpZGdlAAAAAAABAAAAAAAAAAhjaGFpbl9pZAAAAAQAAAABAAAD6QAAB9AAAAANQW5vdGhlckJyaWRnZQAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAJc2V0X2FkbWluAAAAAAAAAQAAAAAAAAAJbmV3X2FkbWluAAAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAHdXBncmFkZQAAAAABAAAAAAAAAA1uZXdfd2FzbV9oYXNoAAAAAAAD7gAAACAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAQAAAAAAAAAAAAAAB1N3YXBwZWQAAAAABgAAAAAAAAAOcmVjZWl2ZV9hbW91bnQAAAAAAAoAAAAAAAAADXJlY2VpdmVfdG9rZW4AAAAAAAPuAAAAIAAAAAAAAAAJcmVjaXBpZW50AAAAAAAAEwAAAAAAAAALc2VuZF9hbW91bnQAAAAACgAAAAAAAAAKc2VuZF90b2tlbgAAAAAD7gAAACAAAAAAAAAABnNlbmRlcgAAAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAAClRva2Vuc1NlbnQAAAAAAAUAAAAAAAAABmFtb3VudAAAAAAACgAAAAAAAAAUZGVzdGluYXRpb25fY2hhaW5faWQAAAAEAAAAAAAAAAVub25jZQAAAAAAAAwAAAAAAAAADXJlY2VpdmVfdG9rZW4AAAAAAAPuAAAAIAAAAAAAAAAJcmVjaXBpZW50AAAAAAAD7gAAACA=\",\n        \"AAAAAQAAAAAAAAAAAAAADlRva2Vuc1JlY2VpdmVkAAAAAAAEAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAAB21lc3NhZ2UAAAAD7gAAACAAAAAAAAAABW5vbmNlAAAAAAAADAAAAAAAAAAJcmVjaXBpZW50AAAAAAAD7gAAACA=\",\n        \"AAAAAQAAAAAAAAAAAAAAClJlY2VpdmVGZWUAAAAAAAMAAAAAAAAAF2JyaWRnZV90cmFuc2FjdGlvbl9jb3N0AAAAAAoAAAAAAAAACWV4dHJhX2dhcwAAAAAAAAoAAAAAAAAAGG1lc3NhZ2VfdHJhbnNhY3Rpb25fY29zdAAAAAo=\",\n        \"AAAAAQAAAAAAAAAAAAAAFUJyaWRnaW5nRmVlRnJvbVRva2VucwAAAAAAAAIAAAAAAAAAEGZlZV90b2tlbl9hbW91bnQAAAAKAAAAAAAAAANnYXMAAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAADUFub3RoZXJCcmlkZ2UAAAAAAAACAAAAAAAAAAdhZGRyZXNzAAAAA+4AAAAgAAAAAAAAAAZ0b2tlbnMAAAAAA+wAAAPuAAAAIAAAAAE=\",\n        \"AAAAAQAAAAAAAAAAAAAABkJyaWRnZQAAAAAABgAAAGBwcmVjb21wdXRlZCB2YWx1ZXMgb2YgdGhlIHNjYWxpbmcgZmFjdG9yIHJlcXVpcmVkIGZvciBwYXlpbmcgdGhlIGJyaWRnaW5nIGZlZSB3aXRoIHN0YWJsZSB0b2tlbnMAAAAeYnJpZGdpbmdfZmVlX2NvbnZlcnNpb25fZmFjdG9yAAAAAAPsAAAAEwAAAAoAAAAAAAAACGNhbl9zd2FwAAAAAQAAAGxwcmVjb21wdXRlZCB2YWx1ZXMgdG8gZGl2aWRlIGJ5IHRvIGNoYW5nZSB0aGUgcHJlY2lzaW9uIGZyb20gdGhlIEdhcyBPcmFjbGUgcHJlY2lzaW9uIHRvIHRoZSB0b2tlbiBwcmVjaXNpb24AAAAWZnJvbV9nYXNfb3JhY2xlX2ZhY3RvcgAAAAAD7AAAABMAAAAKAAAAAAAAAAltZXNzZW5nZXIAAAAAAAATAAAAAAAAAAVwb29scwAAAAAAA+wAAAPuAAAAIAAAABMAAAAAAAAACnJlYmFsYW5jZXIAAAAAABM=\",\n        \"AAAAAgAAAAAAAAAAAAAAB0RhdGFLZXkAAAAAAwAAAAEAAAAAAAAAC090aGVyQnJpZGdlAAAAAAEAAAAEAAAAAQAAAAAAAAALU2VudE1lc3NhZ2UAAAAAAQAAA+4AAAAgAAAAAQAAAAAAAAAPUmVjZWl2ZWRNZXNzYWdlAAAAAAEAAAPuAAAAIA==\",\n        \"AAAAAQAAAAAAAAAAAAAABUFkbWluAAAAAAAAAQAAAAAAAAABMAAAAAAAABM=\",\n        \"AAAAAQAAAAAAAAAAAAAAEEdhc09yYWNsZUFkZHJlc3MAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAACEdhc1VzYWdlAAAAAQAAAAAAAAABMAAAAAAAA+wAAAAEAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAC05hdGl2ZVRva2VuAAAAAAEAAAAAAAAAATAAAAAAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAADVN0b3BBdXRob3JpdHkAAAAAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAABAAAAAAAAAAAAAAABUVycm9yAAAAAAAAKAAAAAAAAAANVW5pbXBsZW1lbnRlZAAAAAAAAAAAAAAAAAAAC0luaXRpYWxpemVkAAAAAAEAAAAAAAAADVVuaW5pdGlhbGl6ZWQAAAAAAAACAAAAAAAAAAxVbmF1dGhvcml6ZWQAAAADAAAAAAAAAApJbnZhbGlkQXJnAAAAAAAEAAAAAAAAAA5JbnZhbGlkQ2hhaW5JZAAAAAAABQAAAAAAAAATSW52YWxpZE90aGVyQ2hhaW5JZAAAAAAGAAAAAAAAAA5HYXNVc2FnZU5vdFNldAAAAAAABwAAAAAAAAANQnJva2VuQWRkcmVzcwAAAAAAAAgAAAAAAAAACE5vdEZvdW5kAAAACQAAAAAAAAAYVG9rZW5JbnN1ZmZpY2llbnRCYWxhbmNlAAAACgAAAAAAAAAKQ2FzdEZhaWxlZAAAAAAACwAAAAAAAAAMVTI1Nk92ZXJmbG93AAAADAAAAAAAAAAKWmVyb0Ftb3VudAAAAAAAZwAAAAAAAAAMUG9vbE92ZXJmbG93AAAAaAAAAAAAAAALWmVyb0NoYW5nZXMAAAAAaQAAAAAAAAARUmVzZXJ2ZXNFeGhhdXN0ZWQAAAAAAABqAAAAAAAAABpJbnN1ZmZpY2llbnRSZWNlaXZlZEFtb3VudAAAAAAAawAAAAAAAAAUQmFsYW5jZVJhdGlvRXhjZWVkZWQAAABsAAAAAAAAAAlGb3JiaWRkZW4AAAAAAABtAAAAAAAAABlVbmF1dGhvcml6ZWRTdG9wQXV0aG9yaXR5AAAAAAAAywAAAAAAAAAOU3dhcFByb2hpYml0ZWQAAAAAAMwAAAAAAAAAEkFtb3VudFRvb0xvd0ZvckZlZQAAAAAAzQAAAAAAAAAWQnJpZGdlVG9UaGVaZXJvQWRkcmVzcwAAAAAAzgAAAAAAAAAORW1wdHlSZWNpcGllbnQAAAAAAM8AAAAAAAAAE1NvdXJjZU5vdFJlZ2lzdGVyZWQAAAAA0AAAAAAAAAAVV3JvbmdEZXN0aW5hdGlvbkNoYWluAAAAAAAA0QAAAAAAAAATVW5rbm93bkFub3RoZXJDaGFpbgAAAADSAAAAAAAAABFUb2tlbnNBbHJlYWR5U2VudAAAAAAAANMAAAAAAAAAEE1lc3NhZ2VQcm9jZXNzZWQAAADUAAAAAAAAAAxOb3RFbm91Z2hGZWUAAADWAAAAAAAAAAlOb01lc3NhZ2UAAAAAAADXAAAAAAAAAA1Ob1JlY2VpdmVQb29sAAAAAAAA2AAAAAAAAAAGTm9Qb29sAAAAAADZAAAAAAAAABNVbmtub3duQW5vdGhlclRva2VuAAAAANoAAAAAAAAAD1dyb25nQnl0ZUxlbmd0aAAAAAEsAAAAAAAAAApIYXNNZXNzYWdlAAAAAAEtAAAAAAAAABdJbnZhbGlkUHJpbWFyeVNpZ25hdHVyZQAAAAEuAAAAAAAAABlJbnZhbGlkU2Vjb25kYXJ5U2lnbmF0dXJlAAAAAAABLwAAAAAAAAARTm9HYXNEYXRhRm9yQ2hhaW4AAAAAAAGQ\",\n      ]),\n      options\n    );\n  }\n\n  public readonly fromJSON = {\n    initialize: this.txFromJSON<Result<void>>,\n    swap_and_bridge: this.txFromJSON<Result<void>>,\n    receive_tokens: this.txFromJSON<Result<void>>,\n    swap: this.txFromJSON<Result<void>>,\n    stop_swap: this.txFromJSON<Result<void>>,\n    start_swap: this.txFromJSON<Result<void>>,\n    set_gas_oracle: this.txFromJSON<Result<void>>,\n    set_stop_authority: this.txFromJSON<Result<void>>,\n    set_rebalancer: this.txFromJSON<Result<void>>,\n    set_messenger: this.txFromJSON<Result<void>>,\n    set_gas_usage: this.txFromJSON<Result<void>>,\n    register_bridge: this.txFromJSON<Result<void>>,\n    add_bridge_token: this.txFromJSON<Result<void>>,\n    remove_bridge_token: this.txFromJSON<Result<void>>,\n    add_pool: this.txFromJSON<Result<void>>,\n    withdraw_gas_tokens: this.txFromJSON<Result<void>>,\n    withdraw_bridging_fee_in_tokens: this.txFromJSON<Result<void>>,\n    has_processed_message: this.txFromJSON<Result<boolean>>,\n    has_received_message: this.txFromJSON<Result<boolean>>,\n    get_pool_address: this.txFromJSON<Result<string>>,\n    get_config: this.txFromJSON<Result<Bridge>>,\n    get_stop_authority: this.txFromJSON<Result<string>>,\n    get_transaction_cost: this.txFromJSON<Result<u128>>,\n    get_gas_usage: this.txFromJSON<Result<u128>>,\n    get_admin: this.txFromJSON<Result<string>>,\n    get_gas_oracle: this.txFromJSON<Result<string>>,\n    get_another_bridge: this.txFromJSON<Result<AnotherBridge>>,\n    set_admin: this.txFromJSON<Result<void>>,\n    upgrade: this.txFromJSON<Result<void>>,\n  };\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// This file is generated by genversion.mjs. Do not edit it directly.\n\nexport const PACKAGE_VERSION = '1.18.0';\nexport const TARGETED_RPC_VERSION = '1.40.0';\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nconst CODE_TO_ERROR_TYPE: Record<number, string> = {\n\t'-32700': 'ParseError',\n\t'-32701': 'OversizedRequest',\n\t'-32702': 'OversizedResponse',\n\t'-32600': 'InvalidRequest',\n\t'-32601': 'MethodNotFound',\n\t'-32602': 'InvalidParams',\n\t'-32603': 'InternalError',\n\t'-32604': 'ServerBusy',\n\t'-32000': 'CallExecutionFailed',\n\t'-32001': 'UnknownError',\n\t'-32003': 'SubscriptionClosed',\n\t'-32004': 'SubscriptionClosedWithError',\n\t'-32005': 'BatchesNotSupported',\n\t'-32006': 'TooManySubscriptions',\n\t'-32050': 'TransientError',\n\t'-32002': 'TransactionExecutionClientError',\n};\n\nexport class SuiHTTPTransportError extends Error {}\n\nexport class JsonRpcError extends SuiHTTPTransportError {\n\tcode: number;\n\ttype: string;\n\n\tconstructor(message: string, code: number) {\n\t\tsuper(message);\n\t\tthis.code = code;\n\t\tthis.type = CODE_TO_ERROR_TYPE[code] ?? 'ServerError';\n\t}\n}\n\nexport class SuiHTTPStatusError extends SuiHTTPTransportError {\n\tstatus: number;\n\tstatusText: string;\n\n\tconstructor(message: string, status: number, statusText: string) {\n\t\tsuper(message);\n\t\tthis.status = status;\n\t\tthis.statusText = statusText;\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { JsonRpcError } from './errors.js';\n\nfunction getWebsocketUrl(httpUrl: string): string {\n\tconst url = new URL(httpUrl);\n\turl.protocol = url.protocol.replace('http', 'ws');\n\treturn url.toString();\n}\n\ntype JsonRpcMessage =\n\t| {\n\t\t\tid: number;\n\t\t\tresult: never;\n\t\t\terror: {\n\t\t\t\tcode: number;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t  }\n\t| {\n\t\t\tid: number;\n\t\t\tresult: unknown;\n\t\t\terror: never;\n\t  }\n\t| {\n\t\t\tmethod: string;\n\t\t\tparams: NotificationMessageParams;\n\t  };\n\ntype NotificationMessageParams = {\n\tsubscription?: number;\n\tresult: object;\n};\n\ntype SubscriptionRequest<T = any> = {\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: any[];\n\tonMessage: (event: T) => void;\n};\n\n/**\n * Configuration options for the websocket connection\n */\nexport type WebsocketClientOptions = {\n\t/**\n\t * Custom WebSocket class to use. Defaults to the global WebSocket class, if available.\n\t */\n\tWebSocketConstructor?: typeof WebSocket;\n\t/**\n\t * Milliseconds before timing out while calling an RPC method\n\t */\n\tcallTimeout?: number;\n\t/**\n\t * Milliseconds between attempts to connect\n\t */\n\treconnectTimeout?: number;\n\t/**\n\t * Maximum number of times to try connecting before giving up\n\t */\n\tmaxReconnects?: number;\n};\n\nexport const DEFAULT_CLIENT_OPTIONS = {\n\t// We fudge the typing because we also check for undefined in the constructor:\n\tWebSocketConstructor: (typeof WebSocket !== 'undefined'\n\t\t? WebSocket\n\t\t: undefined) as typeof WebSocket,\n\tcallTimeout: 30000,\n\treconnectTimeout: 3000,\n\tmaxReconnects: 5,\n} satisfies WebsocketClientOptions;\n\nexport class WebsocketClient {\n\tendpoint: string;\n\toptions: Required<WebsocketClientOptions>;\n\t#requestId = 0;\n\t#disconnects = 0;\n\t#webSocket: WebSocket | null = null;\n\t#connectionPromise: Promise<WebSocket> | null = null;\n\t#subscriptions = new Set<RpcSubscription>();\n\t#pendingRequests = new Map<\n\t\tnumber,\n\t\t{\n\t\t\tresolve: (result: Extract<JsonRpcMessage, { id: number }>) => void;\n\t\t\treject: (reason: unknown) => void;\n\t\t\ttimeout: ReturnType<typeof setTimeout>;\n\t\t}\n\t>();\n\n\tconstructor(endpoint: string, options: WebsocketClientOptions = {}) {\n\t\tthis.endpoint = endpoint;\n\t\tthis.options = { ...DEFAULT_CLIENT_OPTIONS, ...options };\n\n\t\tif (!this.options.WebSocketConstructor) {\n\t\t\tthrow new Error('Missing WebSocket constructor');\n\t\t}\n\n\t\tif (this.endpoint.startsWith('http')) {\n\t\t\tthis.endpoint = getWebsocketUrl(this.endpoint);\n\t\t}\n\t}\n\n\tasync makeRequest<T>(method: string, params: any[]): Promise<T> {\n\t\tconst webSocket = await this.#setupWebSocket();\n\n\t\treturn new Promise<Extract<JsonRpcMessage, { id: number }>>((resolve, reject) => {\n\t\t\tthis.#requestId += 1;\n\t\t\tthis.#pendingRequests.set(this.#requestId, {\n\t\t\t\tresolve: resolve,\n\t\t\t\treject,\n\t\t\t\ttimeout: setTimeout(() => {\n\t\t\t\t\tthis.#pendingRequests.delete(this.#requestId);\n\t\t\t\t\treject(new Error(`Request timeout: ${method}`));\n\t\t\t\t}, this.options.callTimeout),\n\t\t\t});\n\n\t\t\twebSocket.send(JSON.stringify({ jsonrpc: '2.0', id: this.#requestId, method, params }));\n\t\t}).then(({ error, result }) => {\n\t\t\tif (error) {\n\t\t\t\tthrow new JsonRpcError(error.message, error.code);\n\t\t\t}\n\n\t\t\treturn result as T;\n\t\t});\n\t}\n\n\t#setupWebSocket() {\n\t\tif (this.#connectionPromise) {\n\t\t\treturn this.#connectionPromise;\n\t\t}\n\n\t\tthis.#connectionPromise = new Promise<WebSocket>((resolve) => {\n\t\t\tthis.#webSocket?.close();\n\t\t\tthis.#webSocket = new this.options.WebSocketConstructor(this.endpoint);\n\n\t\t\tthis.#webSocket.addEventListener('open', () => {\n\t\t\t\tthis.#disconnects = 0;\n\t\t\t\tresolve(this.#webSocket!);\n\t\t\t});\n\n\t\t\tthis.#webSocket.addEventListener('close', () => {\n\t\t\t\tthis.#disconnects++;\n\t\t\t\tif (this.#disconnects <= this.options.maxReconnects) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.#reconnect();\n\t\t\t\t\t}, this.options.reconnectTimeout);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.#webSocket.addEventListener('message', ({ data }: { data: string }) => {\n\t\t\t\tlet json: JsonRpcMessage;\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(data) as JsonRpcMessage;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(new Error(`Failed to parse RPC message: ${data}`, { cause: error }));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ('id' in json && json.id != null && this.#pendingRequests.has(json.id)) {\n\t\t\t\t\tconst { resolve, timeout } = this.#pendingRequests.get(json.id)!;\n\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\tresolve(json);\n\t\t\t\t} else if ('params' in json) {\n\t\t\t\t\tconst { params } = json;\n\t\t\t\t\tthis.#subscriptions.forEach((subscription) => {\n\t\t\t\t\t\tif (subscription.subscriptionId === params.subscription)\n\t\t\t\t\t\t\tif (params.subscription === subscription.subscriptionId) {\n\t\t\t\t\t\t\t\tsubscription.onMessage(params.result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this.#connectionPromise;\n\t}\n\n\tasync #reconnect() {\n\t\tthis.#webSocket?.close();\n\t\tthis.#connectionPromise = null;\n\n\t\treturn Promise.allSettled(\n\t\t\t[...this.#subscriptions].map((subscription) => subscription.subscribe(this)),\n\t\t);\n\t}\n\n\tasync subscribe<T>(input: SubscriptionRequest<T>) {\n\t\tconst subscription = new RpcSubscription(input);\n\t\tthis.#subscriptions.add(subscription);\n\t\tawait subscription.subscribe(this);\n\t\treturn () => subscription.unsubscribe(this);\n\t}\n}\n\nclass RpcSubscription {\n\tsubscriptionId: number | null = null;\n\tinput: SubscriptionRequest<any>;\n\tsubscribed = false;\n\n\tconstructor(input: SubscriptionRequest) {\n\t\tthis.input = input;\n\t}\n\n\tonMessage(message: unknown) {\n\t\tif (this.subscribed) {\n\t\t\tthis.input.onMessage(message);\n\t\t}\n\t}\n\n\tasync unsubscribe(client: WebsocketClient) {\n\t\tconst { subscriptionId } = this;\n\t\tthis.subscribed = false;\n\t\tif (subscriptionId == null) return false;\n\t\tthis.subscriptionId = null;\n\n\t\treturn client.makeRequest(this.input.unsubscribe, [subscriptionId]);\n\t}\n\n\tasync subscribe(client: WebsocketClient) {\n\t\tthis.subscriptionId = null;\n\t\tthis.subscribed = true;\n\t\tconst newSubscriptionId = await client.makeRequest<number>(\n\t\t\tthis.input.method,\n\t\t\tthis.input.params,\n\t\t);\n\n\t\tif (this.subscribed) {\n\t\t\tthis.subscriptionId = newSubscriptionId;\n\t\t}\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from '../version.js';\nimport { JsonRpcError, SuiHTTPStatusError } from './errors.js';\nimport type { WebsocketClientOptions } from './rpc-websocket-client.js';\nimport { WebsocketClient } from './rpc-websocket-client.js';\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = { [header: string]: string };\n\nexport interface SuiHTTPTransportOptions {\n\tfetch?: typeof fetch;\n\tWebSocketConstructor?: typeof WebSocket;\n\turl: string;\n\trpc?: {\n\t\theaders?: HttpHeaders;\n\t\turl?: string;\n\t};\n\twebsocket?: WebsocketClientOptions & {\n\t\turl?: string;\n\t};\n}\n\nexport interface SuiTransportRequestOptions {\n\tmethod: string;\n\tparams: unknown[];\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\n\nexport interface SuiTransportSubscribeOptions<T> {\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: unknown[];\n\tonMessage: (event: T) => void;\n}\n\nexport interface SuiTransport {\n\trequest<T = unknown>(input: SuiTransportRequestOptions): Promise<T>;\n\tsubscribe<T = unknown>(input: SuiTransportSubscribeOptions<T>): Promise<() => Promise<boolean>>;\n}\n\nexport class SuiHTTPTransport implements SuiTransport {\n\t#requestId = 0;\n\t#options: SuiHTTPTransportOptions;\n\t#websocketClient?: WebsocketClient;\n\n\tconstructor(options: SuiHTTPTransportOptions) {\n\t\tthis.#options = options;\n\t}\n\n\tfetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\n\t\tconst fetchFn = this.#options.fetch ?? fetch;\n\n\t\tif (!fetchFn) {\n\t\t\tthrow new Error(\n\t\t\t\t'The current environment does not support fetch, you can provide a fetch implementation in the options for SuiHTTPTransport.',\n\t\t\t);\n\t\t}\n\n\t\treturn fetchFn(input, init);\n\t}\n\n\t#getWebsocketClient(): WebsocketClient {\n\t\tif (!this.#websocketClient) {\n\t\t\tconst WebSocketConstructor = this.#options.WebSocketConstructor ?? WebSocket;\n\t\t\tif (!WebSocketConstructor) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'The current environment does not support WebSocket, you can provide a WebSocketConstructor in the options for SuiHTTPTransport.',\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.#websocketClient = new WebsocketClient(\n\t\t\t\tthis.#options.websocket?.url ?? this.#options.url,\n\t\t\t\t{\n\t\t\t\t\tWebSocketConstructor,\n\t\t\t\t\t...this.#options.websocket,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\treturn this.#websocketClient;\n\t}\n\n\tasync request<T>(input: SuiTransportRequestOptions): Promise<T> {\n\t\tthis.#requestId += 1;\n\n\t\tconst res = await this.fetch(this.#options.rpc?.url ?? this.#options.url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Client-Sdk-Type': 'typescript',\n\t\t\t\t'Client-Sdk-Version': PACKAGE_VERSION,\n\t\t\t\t'Client-Target-Api-Version': TARGETED_RPC_VERSION,\n\t\t\t\t'Client-Request-Method': input.method,\n\t\t\t\t...this.#options.rpc?.headers,\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tjsonrpc: '2.0',\n\t\t\t\tid: this.#requestId,\n\t\t\t\tmethod: input.method,\n\t\t\t\tparams: input.params,\n\t\t\t}),\n\t\t});\n\n\t\tif (!res.ok) {\n\t\t\tthrow new SuiHTTPStatusError(\n\t\t\t\t`Unexpected status code: ${res.status}`,\n\t\t\t\tres.status,\n\t\t\t\tres.statusText,\n\t\t\t);\n\t\t}\n\n\t\tconst data = await res.json();\n\n\t\tif ('error' in data && data.error != null) {\n\t\t\tthrow new JsonRpcError(data.error.message, data.error.code);\n\t\t}\n\n\t\treturn data.result;\n\t}\n\n\tasync subscribe<T>(input: SuiTransportSubscribeOptions<T>): Promise<() => Promise<boolean>> {\n\t\tconst unsubscribe = await this.#getWebsocketClient().subscribe(input);\n\n\t\treturn async () => !!(await unsubscribe());\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { fromBase58, toBase64, toHex } from '@mysten/bcs';\n\nimport type { Signer } from '../cryptography/index.js';\nimport type { Transaction } from '../transactions/index.js';\nimport { isTransaction } from '../transactions/index.js';\nimport {\n\tisValidSuiAddress,\n\tisValidSuiObjectId,\n\tisValidTransactionDigest,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n} from '../utils/sui-types.js';\nimport { normalizeSuiNSName } from '../utils/suins.js';\nimport { SuiHTTPTransport } from './http-transport.js';\nimport type { SuiTransport } from './http-transport.js';\nimport type {\n\tAddressMetrics,\n\tAllEpochsAddressMetrics,\n\tCheckpoint,\n\tCheckpointPage,\n\tCoinBalance,\n\tCoinMetadata,\n\tCoinSupply,\n\tCommitteeInfo,\n\tDelegatedStake,\n\tDevInspectResults,\n\tDevInspectTransactionBlockParams,\n\tDryRunTransactionBlockParams,\n\tDryRunTransactionBlockResponse,\n\tDynamicFieldPage,\n\tEpochInfo,\n\tEpochMetricsPage,\n\tEpochPage,\n\tExecuteTransactionBlockParams,\n\tGetAllBalancesParams,\n\tGetAllCoinsParams,\n\tGetBalanceParams,\n\tGetCheckpointParams,\n\tGetCheckpointsParams,\n\tGetCoinMetadataParams,\n\tGetCoinsParams,\n\tGetCommitteeInfoParams,\n\tGetDynamicFieldObjectParams,\n\tGetDynamicFieldsParams,\n\tGetMoveFunctionArgTypesParams,\n\tGetNormalizedMoveFunctionParams,\n\tGetNormalizedMoveModuleParams,\n\tGetNormalizedMoveModulesByPackageParams,\n\tGetNormalizedMoveStructParams,\n\tGetObjectParams,\n\tGetOwnedObjectsParams,\n\tGetProtocolConfigParams,\n\tGetStakesByIdsParams,\n\tGetStakesParams,\n\tGetTotalSupplyParams,\n\tGetTransactionBlockParams,\n\tMoveCallMetrics,\n\tMultiGetObjectsParams,\n\tMultiGetTransactionBlocksParams,\n\tNetworkMetrics,\n\tObjectRead,\n\tOrder,\n\tPaginatedCoins,\n\tPaginatedEvents,\n\tPaginatedObjectsResponse,\n\tPaginatedTransactionResponse,\n\tProtocolConfig,\n\tQueryEventsParams,\n\tQueryTransactionBlocksParams,\n\tResolvedNameServiceNames,\n\tResolveNameServiceAddressParams,\n\tResolveNameServiceNamesParams,\n\tSubscribeEventParams,\n\tSubscribeTransactionParams,\n\tSuiEvent,\n\tSuiMoveFunctionArgType,\n\tSuiMoveNormalizedFunction,\n\tSuiMoveNormalizedModule,\n\tSuiMoveNormalizedModules,\n\tSuiMoveNormalizedStruct,\n\tSuiObjectResponse,\n\tSuiObjectResponseQuery,\n\tSuiSystemStateSummary,\n\tSuiTransactionBlockResponse,\n\tSuiTransactionBlockResponseQuery,\n\tTransactionEffects,\n\tTryGetPastObjectParams,\n\tUnsubscribe,\n\tValidatorsApy,\n} from './types/index.js';\n\nexport interface PaginationArguments<Cursor> {\n\t/** Optional paging cursor */\n\tcursor?: Cursor;\n\t/** Maximum item returned per page */\n\tlimit?: number | null;\n}\n\nexport interface OrderArguments {\n\torder?: Order | null;\n}\n\n/**\n * Configuration options for the SuiClient\n * You must provide either a `url` or a `transport`\n */\nexport type SuiClientOptions = NetworkOrTransport;\n\ntype NetworkOrTransport =\n\t| {\n\t\t\turl: string;\n\t\t\ttransport?: never;\n\t  }\n\t| {\n\t\t\ttransport: SuiTransport;\n\t\t\turl?: never;\n\t  };\n\nconst SUI_CLIENT_BRAND = Symbol.for('@mysten/SuiClient') as never;\n\nexport function isSuiClient(client: unknown): client is SuiClient {\n\treturn (\n\t\ttypeof client === 'object' && client !== null && (client as any)[SUI_CLIENT_BRAND] === true\n\t);\n}\n\nexport class SuiClient {\n\tprotected transport: SuiTransport;\n\n\tget [SUI_CLIENT_BRAND]() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Establish a connection to a Sui RPC endpoint\n\t *\n\t * @param options configuration options for the API Client\n\t */\n\tconstructor(options: SuiClientOptions) {\n\t\tthis.transport = options.transport ?? new SuiHTTPTransport({ url: options.url });\n\t}\n\n\tasync getRpcApiVersion(): Promise<string | undefined> {\n\t\tconst resp = await this.transport.request<{ info: { version: string } }>({\n\t\t\tmethod: 'rpc.discover',\n\t\t\tparams: [],\n\t\t});\n\n\t\treturn resp.info.version;\n\t}\n\n\t/**\n\t * Get all Coin<`coin_type`> objects owned by an address.\n\t */\n\tasync getCoins(input: GetCoinsParams): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCoins',\n\t\t\tparams: [input.owner, input.coinType, input.cursor, input.limit],\n\t\t});\n\t}\n\n\t/**\n\t * Get all Coin objects owned by an address.\n\t */\n\tasync getAllCoins(input: GetAllCoinsParams): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getAllCoins',\n\t\t\tparams: [input.owner, input.cursor, input.limit],\n\t\t});\n\t}\n\n\t/**\n\t * Get the total coin balance for one coin type, owned by the address owner.\n\t */\n\tasync getBalance(input: GetBalanceParams): Promise<CoinBalance> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getBalance',\n\t\t\tparams: [input.owner, input.coinType],\n\t\t});\n\t}\n\n\t/**\n\t * Get the total coin balance for all coin types, owned by the address owner.\n\t */\n\tasync getAllBalances(input: GetAllBalancesParams): Promise<CoinBalance[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({ method: 'suix_getAllBalances', params: [input.owner] });\n\t}\n\n\t/**\n\t * Fetch CoinMetadata for a given coin type\n\t */\n\tasync getCoinMetadata(input: GetCoinMetadataParams): Promise<CoinMetadata | null> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCoinMetadata',\n\t\t\tparams: [input.coinType],\n\t\t});\n\t}\n\n\t/**\n\t *  Fetch total supply for a coin\n\t */\n\tasync getTotalSupply(input: GetTotalSupplyParams): Promise<CoinSupply> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getTotalSupply',\n\t\t\tparams: [input.coinType],\n\t\t});\n\t}\n\n\t/**\n\t * Invoke any RPC method\n\t * @param method the method to be invoked\n\t * @param args the arguments to be passed to the RPC request\n\t */\n\tasync call<T = unknown>(method: string, params: unknown[]): Promise<T> {\n\t\treturn await this.transport.request({ method, params });\n\t}\n\n\t/**\n\t * Get Move function argument types like read, write and full access\n\t */\n\tasync getMoveFunctionArgTypes(\n\t\tinput: GetMoveFunctionArgTypesParams,\n\t): Promise<SuiMoveFunctionArgType[]> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getMoveFunctionArgTypes',\n\t\t\tparams: [input.package, input.module, input.function],\n\t\t});\n\t}\n\n\t/**\n\t * Get a map from module name to\n\t * structured representations of Move modules\n\t */\n\tasync getNormalizedMoveModulesByPackage(\n\t\tinput: GetNormalizedMoveModulesByPackageParams,\n\t): Promise<SuiMoveNormalizedModules> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveModulesByPackage',\n\t\t\tparams: [input.package],\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move module\n\t */\n\tasync getNormalizedMoveModule(\n\t\tinput: GetNormalizedMoveModuleParams,\n\t): Promise<SuiMoveNormalizedModule> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveModule',\n\t\t\tparams: [input.package, input.module],\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move function\n\t */\n\tasync getNormalizedMoveFunction(\n\t\tinput: GetNormalizedMoveFunctionParams,\n\t): Promise<SuiMoveNormalizedFunction> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveFunction',\n\t\t\tparams: [input.package, input.module, input.function],\n\t\t});\n\t}\n\n\t/**\n\t * Get a structured representation of Move struct\n\t */\n\tasync getNormalizedMoveStruct(\n\t\tinput: GetNormalizedMoveStructParams,\n\t): Promise<SuiMoveNormalizedStruct> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getNormalizedMoveStruct',\n\t\t\tparams: [input.package, input.module, input.struct],\n\t\t});\n\t}\n\n\t/**\n\t * Get all objects owned by an address\n\t */\n\tasync getOwnedObjects(input: GetOwnedObjectsParams): Promise<PaginatedObjectsResponse> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getOwnedObjects',\n\t\t\tparams: [\n\t\t\t\tinput.owner,\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiObjectResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Get details about an object\n\t */\n\tasync getObject(input: GetObjectParams): Promise<SuiObjectResponse> {\n\t\tif (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getObject',\n\t\t\tparams: [input.id, input.options],\n\t\t});\n\t}\n\n\tasync tryGetPastObject(input: TryGetPastObjectParams): Promise<ObjectRead> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_tryGetPastObject',\n\t\t\tparams: [input.id, input.version, input.options],\n\t\t});\n\t}\n\n\t/**\n\t * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n\t */\n\tasync multiGetObjects(input: MultiGetObjectsParams): Promise<SuiObjectResponse[]> {\n\t\tinput.ids.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Object id ${id}`);\n\t\t\t}\n\t\t});\n\t\tconst hasDuplicates = input.ids.length !== new Set(input.ids).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate object ids in batch call ${input.ids}`);\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_multiGetObjects',\n\t\t\tparams: [input.ids, input.options],\n\t\t});\n\t}\n\n\t/**\n\t * Get transaction blocks for a given query criteria\n\t */\n\tasync queryTransactionBlocks(\n\t\tinput: QueryTransactionBlocksParams,\n\t): Promise<PaginatedTransactionResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_queryTransactionBlocks',\n\t\t\tparams: [\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiTransactionBlockResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t});\n\t}\n\n\tasync getTransactionBlock(\n\t\tinput: GetTransactionBlockParams,\n\t): Promise<SuiTransactionBlockResponse> {\n\t\tif (!isValidTransactionDigest(input.digest)) {\n\t\t\tthrow new Error('Invalid Transaction digest');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getTransactionBlock',\n\t\t\tparams: [input.digest, input.options],\n\t\t});\n\t}\n\n\tasync multiGetTransactionBlocks(\n\t\tinput: MultiGetTransactionBlocksParams,\n\t): Promise<SuiTransactionBlockResponse[]> {\n\t\tinput.digests.forEach((d) => {\n\t\t\tif (!isValidTransactionDigest(d)) {\n\t\t\t\tthrow new Error(`Invalid Transaction digest ${d}`);\n\t\t\t}\n\t\t});\n\n\t\tconst hasDuplicates = input.digests.length !== new Set(input.digests).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate digests in batch call ${input.digests}`);\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_multiGetTransactionBlocks',\n\t\t\tparams: [input.digests, input.options],\n\t\t});\n\t}\n\n\tasync executeTransactionBlock({\n\t\ttransactionBlock,\n\t\tsignature,\n\t\toptions,\n\t\trequestType,\n\t}: ExecuteTransactionBlockParams): Promise<SuiTransactionBlockResponse> {\n\t\tconst result: SuiTransactionBlockResponse = await this.transport.request({\n\t\t\tmethod: 'sui_executeTransactionBlock',\n\t\t\tparams: [\n\t\t\t\ttypeof transactionBlock === 'string' ? transactionBlock : toBase64(transactionBlock),\n\t\t\t\tArray.isArray(signature) ? signature : [signature],\n\t\t\t\toptions,\n\t\t\t],\n\t\t});\n\n\t\tif (requestType === 'WaitForLocalExecution') {\n\t\t\ttry {\n\t\t\t\tawait this.waitForTransaction({\n\t\t\t\t\tdigest: result.digest,\n\t\t\t\t});\n\t\t\t} catch (_) {\n\t\t\t\t// Ignore error while waiting for transaction\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync signAndExecuteTransaction({\n\t\ttransaction,\n\t\tsigner,\n\t\t...input\n\t}: {\n\t\ttransaction: Uint8Array | Transaction;\n\t\tsigner: Signer;\n\t} & Omit<\n\t\tExecuteTransactionBlockParams,\n\t\t'transactionBlock' | 'signature'\n\t>): Promise<SuiTransactionBlockResponse> {\n\t\tlet transactionBytes;\n\n\t\tif (transaction instanceof Uint8Array) {\n\t\t\ttransactionBytes = transaction;\n\t\t} else {\n\t\t\ttransaction.setSenderIfNotSet(signer.toSuiAddress());\n\t\t\ttransactionBytes = await transaction.build({ client: this });\n\t\t}\n\n\t\tconst { signature, bytes } = await signer.signTransaction(transactionBytes);\n\n\t\treturn this.executeTransactionBlock({\n\t\t\ttransactionBlock: bytes,\n\t\t\tsignature,\n\t\t\t...input,\n\t\t});\n\t}\n\n\t/**\n\t * Get total number of transactions\n\t */\n\n\tasync getTotalTransactionBlocks(): Promise<bigint> {\n\t\tconst resp = await this.transport.request<string>({\n\t\t\tmethod: 'sui_getTotalTransactionBlocks',\n\t\t\tparams: [],\n\t\t});\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Getting the reference gas price for the network\n\t */\n\tasync getReferenceGasPrice(): Promise<bigint> {\n\t\tconst resp = await this.transport.request<string>({\n\t\t\tmethod: 'suix_getReferenceGasPrice',\n\t\t\tparams: [],\n\t\t});\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Return the delegated stakes for an address\n\t */\n\tasync getStakes(input: GetStakesParams): Promise<DelegatedStake[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.transport.request({ method: 'suix_getStakes', params: [input.owner] });\n\t}\n\n\t/**\n\t * Return the delegated stakes queried by id.\n\t */\n\tasync getStakesByIds(input: GetStakesByIdsParams): Promise<DelegatedStake[]> {\n\t\tinput.stakedSuiIds.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Stake id ${id}`);\n\t\t\t}\n\t\t});\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getStakesByIds',\n\t\t\tparams: [input.stakedSuiIds],\n\t\t});\n\t}\n\n\t/**\n\t * Return the latest system state content.\n\t */\n\tasync getLatestSuiSystemState(): Promise<SuiSystemStateSummary> {\n\t\treturn await this.transport.request({ method: 'suix_getLatestSuiSystemState', params: [] });\n\t}\n\n\t/**\n\t * Get events for a given query criteria\n\t */\n\tasync queryEvents(input: QueryEventsParams): Promise<PaginatedEvents> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_queryEvents',\n\t\t\tparams: [\n\t\t\t\tinput.query,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Subscribe to get notifications whenever an event matching the filter occurs\n\t *\n\t * @deprecated\n\t */\n\tasync subscribeEvent(\n\t\tinput: SubscribeEventParams & {\n\t\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\t\tonMessage: (event: SuiEvent) => void;\n\t\t},\n\t): Promise<Unsubscribe> {\n\t\treturn this.transport.subscribe({\n\t\t\tmethod: 'suix_subscribeEvent',\n\t\t\tunsubscribe: 'suix_unsubscribeEvent',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\t/**\n\t * @deprecated\n\t */\n\tasync subscribeTransaction(\n\t\tinput: SubscribeTransactionParams & {\n\t\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\t\tonMessage: (event: TransactionEffects) => void;\n\t\t},\n\t): Promise<Unsubscribe> {\n\t\treturn this.transport.subscribe({\n\t\t\tmethod: 'suix_subscribeTransaction',\n\t\t\tunsubscribe: 'suix_unsubscribeTransaction',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\t/**\n\t * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n\t * transaction (or Move call) with any arguments. Detailed results are\n\t * provided, including both the transaction effects and any return values.\n\t */\n\tasync devInspectTransactionBlock(\n\t\tinput: DevInspectTransactionBlockParams,\n\t): Promise<DevInspectResults> {\n\t\tlet devInspectTxBytes;\n\t\tif (isTransaction(input.transactionBlock)) {\n\t\t\tinput.transactionBlock.setSenderIfNotSet(input.sender);\n\t\t\tdevInspectTxBytes = toBase64(\n\t\t\t\tawait input.transactionBlock.build({\n\t\t\t\t\tclient: this,\n\t\t\t\t\tonlyTransactionKind: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else if (typeof input.transactionBlock === 'string') {\n\t\t\tdevInspectTxBytes = input.transactionBlock;\n\t\t} else if (input.transactionBlock instanceof Uint8Array) {\n\t\t\tdevInspectTxBytes = toBase64(input.transactionBlock);\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction block format.');\n\t\t}\n\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_devInspectTransactionBlock',\n\t\t\tparams: [input.sender, devInspectTxBytes, input.gasPrice?.toString(), input.epoch],\n\t\t});\n\t}\n\n\t/**\n\t * Dry run a transaction block and return the result.\n\t */\n\tasync dryRunTransactionBlock(\n\t\tinput: DryRunTransactionBlockParams,\n\t): Promise<DryRunTransactionBlockResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_dryRunTransactionBlock',\n\t\t\tparams: [\n\t\t\t\ttypeof input.transactionBlock === 'string'\n\t\t\t\t\t? input.transactionBlock\n\t\t\t\t\t: toBase64(input.transactionBlock),\n\t\t\t],\n\t\t});\n\t}\n\n\t/**\n\t * Return the list of dynamic field objects owned by an object\n\t */\n\tasync getDynamicFields(input: GetDynamicFieldsParams): Promise<DynamicFieldPage> {\n\t\tif (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getDynamicFields',\n\t\t\tparams: [input.parentId, input.cursor, input.limit],\n\t\t});\n\t}\n\n\t/**\n\t * Return the dynamic field object information for a specified object\n\t */\n\tasync getDynamicFieldObject(input: GetDynamicFieldObjectParams): Promise<SuiObjectResponse> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getDynamicFieldObject',\n\t\t\tparams: [input.parentId, input.name],\n\t\t});\n\t}\n\n\t/**\n\t * Get the sequence number of the latest checkpoint that has been executed\n\t */\n\tasync getLatestCheckpointSequenceNumber(): Promise<string> {\n\t\tconst resp = await this.transport.request({\n\t\t\tmethod: 'sui_getLatestCheckpointSequenceNumber',\n\t\t\tparams: [],\n\t\t});\n\t\treturn String(resp);\n\t}\n\n\t/**\n\t * Returns information about a given checkpoint\n\t */\n\tasync getCheckpoint(input: GetCheckpointParams): Promise<Checkpoint> {\n\t\treturn await this.transport.request({ method: 'sui_getCheckpoint', params: [input.id] });\n\t}\n\n\t/**\n\t * Returns historical checkpoints paginated\n\t */\n\tasync getCheckpoints(\n\t\tinput: PaginationArguments<CheckpointPage['nextCursor']> & GetCheckpointsParams,\n\t): Promise<CheckpointPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getCheckpoints',\n\t\t\tparams: [input.cursor, input?.limit, input.descendingOrder],\n\t\t});\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCommitteeInfo(input?: GetCommitteeInfoParams): Promise<CommitteeInfo> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getCommitteeInfo',\n\t\t\tparams: [input?.epoch],\n\t\t});\n\t}\n\n\tasync getNetworkMetrics(): Promise<NetworkMetrics> {\n\t\treturn await this.transport.request({ method: 'suix_getNetworkMetrics', params: [] });\n\t}\n\n\tasync getAddressMetrics(): Promise<AddressMetrics> {\n\t\treturn await this.transport.request({ method: 'suix_getLatestAddressMetrics', params: [] });\n\t}\n\n\tasync getEpochMetrics(\n\t\tinput?: { descendingOrder?: boolean } & PaginationArguments<EpochMetricsPage['nextCursor']>,\n\t): Promise<EpochMetricsPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getEpochMetrics',\n\t\t\tparams: [input?.cursor, input?.limit, input?.descendingOrder],\n\t\t});\n\t}\n\n\tasync getAllEpochAddressMetrics(input?: {\n\t\tdescendingOrder?: boolean;\n\t}): Promise<AllEpochsAddressMetrics> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getAllEpochAddressMetrics',\n\t\t\tparams: [input?.descendingOrder],\n\t\t});\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getEpochs(\n\t\tinput?: {\n\t\t\tdescendingOrder?: boolean;\n\t\t} & PaginationArguments<EpochPage['nextCursor']>,\n\t): Promise<EpochPage> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_getEpochs',\n\t\t\tparams: [input?.cursor, input?.limit, input?.descendingOrder],\n\t\t});\n\t}\n\n\t/**\n\t * Returns list of top move calls by usage\n\t */\n\tasync getMoveCallMetrics(): Promise<MoveCallMetrics> {\n\t\treturn await this.transport.request({ method: 'suix_getMoveCallMetrics', params: [] });\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCurrentEpoch(): Promise<EpochInfo> {\n\t\treturn await this.transport.request({ method: 'suix_getCurrentEpoch', params: [] });\n\t}\n\n\t/**\n\t * Return the Validators APYs\n\t */\n\tasync getValidatorsApy(): Promise<ValidatorsApy> {\n\t\treturn await this.transport.request({ method: 'suix_getValidatorsApy', params: [] });\n\t}\n\n\t// TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n\tasync getChainIdentifier(): Promise<string> {\n\t\tconst checkpoint = await this.getCheckpoint({ id: '0' });\n\t\tconst bytes = fromBase58(checkpoint.digest);\n\t\treturn toHex(bytes.slice(0, 4));\n\t}\n\n\tasync resolveNameServiceAddress(input: ResolveNameServiceAddressParams): Promise<string | null> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'suix_resolveNameServiceAddress',\n\t\t\tparams: [input.name],\n\t\t});\n\t}\n\n\tasync resolveNameServiceNames({\n\t\tformat = 'dot',\n\t\t...input\n\t}: ResolveNameServiceNamesParams & {\n\t\tformat?: 'at' | 'dot';\n\t}): Promise<ResolvedNameServiceNames> {\n\t\tconst { nextCursor, hasNextPage, data }: ResolvedNameServiceNames =\n\t\t\tawait this.transport.request({\n\t\t\t\tmethod: 'suix_resolveNameServiceNames',\n\t\t\t\tparams: [input.address, input.cursor, input.limit],\n\t\t\t});\n\n\t\treturn {\n\t\t\thasNextPage,\n\t\t\tnextCursor,\n\t\t\tdata: data.map((name) => normalizeSuiNSName(name, format)),\n\t\t};\n\t}\n\n\tasync getProtocolConfig(input?: GetProtocolConfigParams): Promise<ProtocolConfig> {\n\t\treturn await this.transport.request({\n\t\t\tmethod: 'sui_getProtocolConfig',\n\t\t\tparams: [input?.version],\n\t\t});\n\t}\n\n\t/**\n\t * Wait for a transaction block result to be available over the API.\n\t * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n\t * be available via the API.\n\t * This currently polls the `getTransactionBlock` API to check for the transaction.\n\t */\n\tasync waitForTransaction({\n\t\tsignal,\n\t\ttimeout = 60 * 1000,\n\t\tpollInterval = 2 * 1000,\n\t\t...input\n\t}: {\n\t\t/** An optional abort signal that can be used to cancel */\n\t\tsignal?: AbortSignal;\n\t\t/** The amount of time to wait for a transaction block. Defaults to one minute. */\n\t\ttimeout?: number;\n\t\t/** The amount of time to wait between checks for the transaction block. Defaults to 2 seconds. */\n\t\tpollInterval?: number;\n\t} & Parameters<SuiClient['getTransactionBlock']>[0]): Promise<SuiTransactionBlockResponse> {\n\t\tconst timeoutSignal = AbortSignal.timeout(timeout);\n\t\tconst timeoutPromise = new Promise((_, reject) => {\n\t\t\ttimeoutSignal.addEventListener('abort', () => reject(timeoutSignal.reason));\n\t\t});\n\n\t\ttimeoutPromise.catch(() => {\n\t\t\t// Swallow unhandled rejections that might be thrown after early return\n\t\t});\n\n\t\twhile (!timeoutSignal.aborted) {\n\t\t\tsignal?.throwIfAborted();\n\t\t\ttry {\n\t\t\t\treturn await this.getTransactionBlock(input);\n\t\t\t} catch (e) {\n\t\t\t\t// Wait for either the next poll interval, or the timeout.\n\t\t\t\tawait Promise.race([\n\t\t\t\t\tnew Promise((resolve) => setTimeout(resolve, pollInterval)),\n\t\t\t\t\ttimeoutPromise,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\ttimeoutSignal.throwIfAborted();\n\n\t\t// This should never happen, because the above case should always throw, but just adding it in the event that something goes horribly wrong.\n\t\tthrow new Error('Unexpected error while waiting for transaction block.');\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { BcsType } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport type { SuiMoveNormalizedType } from '../client/index.js';\nimport { MOVE_STDLIB_ADDRESS, SUI_FRAMEWORK_ADDRESS } from '../utils/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { OpenMoveTypeSignature, OpenMoveTypeSignatureBody } from './data/internal.js';\n\nconst OBJECT_MODULE_NAME = 'object';\nconst ID_STRUCT_NAME = 'ID';\n\nconst STD_ASCII_MODULE_NAME = 'ascii';\nconst STD_ASCII_STRUCT_NAME = 'String';\n\nconst STD_UTF8_MODULE_NAME = 'string';\nconst STD_UTF8_STRUCT_NAME = 'String';\n\nconst STD_OPTION_MODULE_NAME = 'option';\nconst STD_OPTION_STRUCT_NAME = 'Option';\n\nexport function isTxContext(param: OpenMoveTypeSignature): boolean {\n\tconst struct =\n\t\ttypeof param.body === 'object' && 'datatype' in param.body ? param.body.datatype : null;\n\n\treturn (\n\t\t!!struct &&\n\t\tnormalizeSuiAddress(struct.package) === normalizeSuiAddress('0x2') &&\n\t\tstruct.module === 'tx_context' &&\n\t\tstruct.type === 'TxContext'\n\t);\n}\n\nexport function getPureBcsSchema(typeSignature: OpenMoveTypeSignatureBody): BcsType<any> | null {\n\tif (typeof typeSignature === 'string') {\n\t\tswitch (typeSignature) {\n\t\t\tcase 'address':\n\t\t\t\treturn bcs.Address;\n\t\t\tcase 'bool':\n\t\t\t\treturn bcs.Bool;\n\t\t\tcase 'u8':\n\t\t\t\treturn bcs.U8;\n\t\t\tcase 'u16':\n\t\t\t\treturn bcs.U16;\n\t\t\tcase 'u32':\n\t\t\t\treturn bcs.U32;\n\t\t\tcase 'u64':\n\t\t\t\treturn bcs.U64;\n\t\t\tcase 'u128':\n\t\t\t\treturn bcs.U128;\n\t\t\tcase 'u256':\n\t\t\t\treturn bcs.U256;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown type signature ${typeSignature}`);\n\t\t}\n\t}\n\n\tif ('vector' in typeSignature) {\n\t\tif (typeSignature.vector === 'u8') {\n\t\t\treturn bcs.vector(bcs.U8).transform({\n\t\t\t\tinput: (val: string | Uint8Array) =>\n\t\t\t\t\ttypeof val === 'string' ? new TextEncoder().encode(val) : val,\n\t\t\t\toutput: (val) => val,\n\t\t\t});\n\t\t}\n\t\tconst type = getPureBcsSchema(typeSignature.vector);\n\t\treturn type ? bcs.vector(type) : null;\n\t}\n\n\tif ('datatype' in typeSignature) {\n\t\tconst pkg = normalizeSuiAddress(typeSignature.datatype.package);\n\n\t\tif (pkg === normalizeSuiAddress(MOVE_STDLIB_ADDRESS)) {\n\t\t\tif (\n\t\t\t\ttypeSignature.datatype.module === STD_ASCII_MODULE_NAME &&\n\t\t\t\ttypeSignature.datatype.type === STD_ASCII_STRUCT_NAME\n\t\t\t) {\n\t\t\t\treturn bcs.String;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeSignature.datatype.module === STD_UTF8_MODULE_NAME &&\n\t\t\t\ttypeSignature.datatype.type === STD_UTF8_STRUCT_NAME\n\t\t\t) {\n\t\t\t\treturn bcs.String;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeSignature.datatype.module === STD_OPTION_MODULE_NAME &&\n\t\t\t\ttypeSignature.datatype.type === STD_OPTION_STRUCT_NAME\n\t\t\t) {\n\t\t\t\tconst type = getPureBcsSchema(typeSignature.datatype.typeParameters[0]);\n\t\t\t\treturn type ? bcs.vector(type) : null;\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\tpkg === normalizeSuiAddress(SUI_FRAMEWORK_ADDRESS) &&\n\t\t\ttypeSignature.datatype.module === OBJECT_MODULE_NAME &&\n\t\t\ttypeSignature.datatype.type === ID_STRUCT_NAME\n\t\t) {\n\t\t\treturn bcs.Address;\n\t\t}\n\t}\n\n\treturn null;\n}\n\nexport function normalizedTypeToMoveTypeSignature(\n\ttype: SuiMoveNormalizedType,\n): OpenMoveTypeSignature {\n\tif (typeof type === 'object' && 'Reference' in type) {\n\t\treturn {\n\t\t\tref: '&',\n\t\t\tbody: normalizedTypeToMoveTypeSignatureBody(type.Reference),\n\t\t};\n\t}\n\tif (typeof type === 'object' && 'MutableReference' in type) {\n\t\treturn {\n\t\t\tref: '&mut',\n\t\t\tbody: normalizedTypeToMoveTypeSignatureBody(type.MutableReference),\n\t\t};\n\t}\n\n\treturn {\n\t\tref: null,\n\t\tbody: normalizedTypeToMoveTypeSignatureBody(type),\n\t};\n}\n\nfunction normalizedTypeToMoveTypeSignatureBody(\n\ttype: SuiMoveNormalizedType,\n): OpenMoveTypeSignatureBody {\n\tif (typeof type === 'string') {\n\t\tswitch (type) {\n\t\t\tcase 'Address':\n\t\t\t\treturn 'address';\n\t\t\tcase 'Bool':\n\t\t\t\treturn 'bool';\n\t\t\tcase 'U8':\n\t\t\t\treturn 'u8';\n\t\t\tcase 'U16':\n\t\t\t\treturn 'u16';\n\t\t\tcase 'U32':\n\t\t\t\treturn 'u32';\n\t\t\tcase 'U64':\n\t\t\t\treturn 'u64';\n\t\t\tcase 'U128':\n\t\t\t\treturn 'u128';\n\t\t\tcase 'U256':\n\t\t\t\treturn 'u256';\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unexpected type ${type}`);\n\t\t}\n\t}\n\n\tif ('Vector' in type) {\n\t\treturn { vector: normalizedTypeToMoveTypeSignatureBody(type.Vector) };\n\t}\n\n\tif ('Struct' in type) {\n\t\treturn {\n\t\t\tdatatype: {\n\t\t\t\tpackage: type.Struct.address,\n\t\t\t\tmodule: type.Struct.module,\n\t\t\t\ttype: type.Struct.name,\n\t\t\t\ttypeParameters: type.Struct.typeArguments.map(normalizedTypeToMoveTypeSignatureBody),\n\t\t\t},\n\t\t};\n\t}\n\n\tif ('TypeParameter' in type) {\n\t\treturn { typeParameter: type.TypeParameter };\n\t}\n\n\tthrow new Error(`Unexpected type ${JSON.stringify(type)}`);\n}\n\nexport function pureBcsSchemaFromOpenMoveTypeSignatureBody(\n\ttypeSignature: OpenMoveTypeSignatureBody,\n): BcsType<any> {\n\tif (typeof typeSignature === 'string') {\n\t\tswitch (typeSignature) {\n\t\t\tcase 'address':\n\t\t\t\treturn bcs.Address;\n\t\t\tcase 'bool':\n\t\t\t\treturn bcs.Bool;\n\t\t\tcase 'u8':\n\t\t\t\treturn bcs.U8;\n\t\t\tcase 'u16':\n\t\t\t\treturn bcs.U16;\n\t\t\tcase 'u32':\n\t\t\t\treturn bcs.U32;\n\t\t\tcase 'u64':\n\t\t\t\treturn bcs.U64;\n\t\t\tcase 'u128':\n\t\t\t\treturn bcs.U128;\n\t\t\tcase 'u256':\n\t\t\t\treturn bcs.U256;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Unknown type signature ${typeSignature}`);\n\t\t}\n\t}\n\n\tif ('vector' in typeSignature) {\n\t\treturn bcs.vector(pureBcsSchemaFromOpenMoveTypeSignatureBody(typeSignature.vector));\n\t}\n\n\tthrow new Error(`Expected pure typeSignature, but got ${JSON.stringify(typeSignature)}`);\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport { formatAddress, formatDigest } from './format.js';\nexport {\n\tisValidSuiAddress,\n\tisValidSuiObjectId,\n\tisValidTransactionDigest,\n\tnormalizeStructTag,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n\tparseStructTag,\n\tSUI_ADDRESS_LENGTH,\n} from './sui-types.js';\n\nexport {\n\tfromB64,\n\ttoB64,\n\tfromHEX,\n\ttoHex,\n\ttoHEX,\n\tfromHex,\n\tfromBase64,\n\ttoBase64,\n\tfromBase58,\n\ttoBase58,\n} from '@mysten/bcs';\nexport { isValidSuiNSName, normalizeSuiNSName } from './suins.js';\n\nexport {\n\tSUI_DECIMALS,\n\tMIST_PER_SUI,\n\tMOVE_STDLIB_ADDRESS,\n\tSUI_FRAMEWORK_ADDRESS,\n\tSUI_SYSTEM_ADDRESS,\n\tSUI_CLOCK_OBJECT_ID,\n\tSUI_SYSTEM_MODULE_NAME,\n\tSUI_TYPE_ARG,\n\tSUI_SYSTEM_STATE_OBJECT_ID,\n} from './constants.js';\n\nexport { isValidNamedPackage, isValidNamedType } from './move-registry.js';\n\nexport { deriveDynamicFieldID } from './dynamic-fields.js';\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nconst SUI_NS_NAME_REGEX =\n\t/^(?!.*(^(?!@)|[-.@])($|[-.@]))(?:[a-z0-9-]{0,63}(?:\\.[a-z0-9-]{0,63})*)?@[a-z0-9-]{0,63}$/i;\nconst SUI_NS_DOMAIN_REGEX = /^(?!.*(^|[-.])($|[-.]))(?:[a-z0-9-]{0,63}\\.)+sui$/i;\nconst MAX_SUI_NS_NAME_LENGTH = 235;\n\nexport function isValidSuiNSName(name: string): boolean {\n\tif (name.length > MAX_SUI_NS_NAME_LENGTH) {\n\t\treturn false;\n\t}\n\n\tif (name.includes('@')) {\n\t\treturn SUI_NS_NAME_REGEX.test(name);\n\t}\n\n\treturn SUI_NS_DOMAIN_REGEX.test(name);\n}\n\nexport function normalizeSuiNSName(name: string, format: 'at' | 'dot' = 'at'): string {\n\tconst lowerCase = name.toLowerCase();\n\tlet parts;\n\n\tif (lowerCase.includes('@')) {\n\t\tif (!SUI_NS_NAME_REGEX.test(lowerCase)) {\n\t\t\tthrow new Error(`Invalid SuiNS name ${name}`);\n\t\t}\n\t\tconst [labels, domain] = lowerCase.split('@');\n\t\tparts = [...(labels ? labels.split('.') : []), domain];\n\t} else {\n\t\tif (!SUI_NS_DOMAIN_REGEX.test(lowerCase)) {\n\t\t\tthrow new Error(`Invalid SuiNS name ${name}`);\n\t\t}\n\t\tparts = lowerCase.split('.').slice(0, -1);\n\t}\n\n\tif (format === 'dot') {\n\t\treturn `${parts.join('.')}.sui`;\n\t}\n\n\treturn `${parts.slice(0, -1).join('.')}@${parts[parts.length - 1]}`;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { normalizeSuiObjectId } from './sui-types.js';\n\nexport const SUI_DECIMALS = 9;\nexport const MIST_PER_SUI = BigInt(1000000000);\n\nexport const MOVE_STDLIB_ADDRESS = '0x1';\nexport const SUI_FRAMEWORK_ADDRESS = '0x2';\nexport const SUI_SYSTEM_ADDRESS = '0x3';\nexport const SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId('0x6');\nexport const SUI_SYSTEM_MODULE_NAME = 'sui_system';\nexport const SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nexport const SUI_SYSTEM_STATE_OBJECT_ID: string = normalizeSuiObjectId('0x5');\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toBase64 } from '@mysten/bcs';\nimport type { SerializedBcs } from '@mysten/bcs';\n\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { CallArg, ObjectRef } from './data/internal.js';\n\nfunction Pure(data: Uint8Array | SerializedBcs<any>): Extract<CallArg, { Pure: unknown }> {\n\treturn {\n\t\t$kind: 'Pure',\n\t\tPure: {\n\t\t\tbytes: data instanceof Uint8Array ? toBase64(data) : data.toBase64(),\n\t\t},\n\t};\n}\n\nexport const Inputs = {\n\tPure,\n\tObjectRef({ objectId, digest, version }: ObjectRef): Extract<CallArg, { Object: unknown }> {\n\t\treturn {\n\t\t\t$kind: 'Object',\n\t\t\tObject: {\n\t\t\t\t$kind: 'ImmOrOwnedObject',\n\t\t\t\tImmOrOwnedObject: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tSharedObjectRef({\n\t\tobjectId,\n\t\tmutable,\n\t\tinitialSharedVersion,\n\t}: {\n\t\tobjectId: string;\n\t\tmutable: boolean;\n\t\tinitialSharedVersion: number | string;\n\t}): Extract<CallArg, { Object: unknown }> {\n\t\treturn {\n\t\t\t$kind: 'Object',\n\t\t\tObject: {\n\t\t\t\t$kind: 'SharedObject',\n\t\t\t\tSharedObject: {\n\t\t\t\t\tmutable,\n\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tReceivingRef({ objectId, digest, version }: ObjectRef): Extract<CallArg, { Object: unknown }> {\n\t\treturn {\n\t\t\t$kind: 'Object',\n\t\t\tObject: {\n\t\t\t\t$kind: 'Receiving',\n\t\t\t\tReceiving: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n};\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toBase64 } from '@mysten/bcs';\nimport type { InferInput } from 'valibot';\nimport { parse } from 'valibot';\n\nimport { normalizeSuiObjectId } from '../utils/sui-types.js';\nimport { Argument } from './data/internal.js';\nimport type { CallArg, Command } from './data/internal.js';\nimport type { Transaction } from './Transaction.js';\n\nexport type TransactionArgument =\n\t| InferInput<typeof Argument>\n\t| ((tx: Transaction) => InferInput<typeof Argument>);\nexport type TransactionInput = CallArg;\n\n// Keep in sync with constants in\n// crates/sui-framework/packages/sui-framework/sources/package.move\nexport enum UpgradePolicy {\n\tCOMPATIBLE = 0,\n\tADDITIVE = 128,\n\tDEP_ONLY = 192,\n}\n\ntype TransactionShape<T extends Command['$kind']> = { $kind: T } & {\n\t[K in T]: Extract<Command, { [K in T]: any }>[T];\n};\n\n/**\n * Simple helpers used to construct transactions:\n */\nexport const Commands = {\n\tMoveCall(\n\t\tinput:\n\t\t\t| {\n\t\t\t\t\tpackage: string;\n\t\t\t\t\tmodule: string;\n\t\t\t\t\tfunction: string;\n\t\t\t\t\targuments?: Argument[];\n\t\t\t\t\ttypeArguments?: string[];\n\t\t\t  }\n\t\t\t| {\n\t\t\t\t\ttarget: string;\n\t\t\t\t\targuments?: Argument[];\n\t\t\t\t\ttypeArguments?: string[];\n\t\t\t  },\n\t): TransactionShape<'MoveCall'> {\n\t\tconst [pkg, mod = '', fn = ''] =\n\t\t\t'target' in input ? input.target.split('::') : [input.package, input.module, input.function];\n\n\t\treturn {\n\t\t\t$kind: 'MoveCall',\n\t\t\tMoveCall: {\n\t\t\t\tpackage: pkg,\n\t\t\t\tmodule: mod,\n\t\t\t\tfunction: fn,\n\t\t\t\ttypeArguments: input.typeArguments ?? [],\n\t\t\t\targuments: input.arguments ?? [],\n\t\t\t},\n\t\t};\n\t},\n\n\tTransferObjects(\n\t\tobjects: InferInput<typeof Argument>[],\n\t\taddress: InferInput<typeof Argument>,\n\t): TransactionShape<'TransferObjects'> {\n\t\treturn {\n\t\t\t$kind: 'TransferObjects',\n\t\t\tTransferObjects: {\n\t\t\t\tobjects: objects.map((o) => parse(Argument, o)),\n\t\t\t\taddress: parse(Argument, address),\n\t\t\t},\n\t\t};\n\t},\n\tSplitCoins(\n\t\tcoin: InferInput<typeof Argument>,\n\t\tamounts: InferInput<typeof Argument>[],\n\t): TransactionShape<'SplitCoins'> {\n\t\treturn {\n\t\t\t$kind: 'SplitCoins',\n\t\t\tSplitCoins: {\n\t\t\t\tcoin: parse(Argument, coin),\n\t\t\t\tamounts: amounts.map((o) => parse(Argument, o)),\n\t\t\t},\n\t\t};\n\t},\n\tMergeCoins(\n\t\tdestination: InferInput<typeof Argument>,\n\t\tsources: InferInput<typeof Argument>[],\n\t): TransactionShape<'MergeCoins'> {\n\t\treturn {\n\t\t\t$kind: 'MergeCoins',\n\t\t\tMergeCoins: {\n\t\t\t\tdestination: parse(Argument, destination),\n\t\t\t\tsources: sources.map((o) => parse(Argument, o)),\n\t\t\t},\n\t\t};\n\t},\n\tPublish({\n\t\tmodules,\n\t\tdependencies,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t}): TransactionShape<'Publish'> {\n\t\treturn {\n\t\t\t$kind: 'Publish',\n\t\t\tPublish: {\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? module : toBase64(new Uint8Array(module)),\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t},\n\t\t};\n\t},\n\tUpgrade({\n\t\tmodules,\n\t\tdependencies,\n\t\tpackage: packageId,\n\t\tticket,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t\tpackage: string;\n\t\tticket: InferInput<typeof Argument>;\n\t}): TransactionShape<'Upgrade'> {\n\t\treturn {\n\t\t\t$kind: 'Upgrade',\n\t\t\tUpgrade: {\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? module : toBase64(new Uint8Array(module)),\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t\tpackage: packageId,\n\t\t\t\tticket: parse(Argument, ticket),\n\t\t\t},\n\t\t};\n\t},\n\tMakeMoveVec({\n\t\ttype,\n\t\telements,\n\t}: {\n\t\ttype?: string;\n\t\telements: InferInput<typeof Argument>[];\n\t}): TransactionShape<'MakeMoveVec'> {\n\t\treturn {\n\t\t\t$kind: 'MakeMoveVec',\n\t\t\tMakeMoveVec: {\n\t\t\t\ttype: type ?? null,\n\t\t\t\telements: elements.map((o) => parse(Argument, o)),\n\t\t\t},\n\t\t};\n\t},\n\tIntent({\n\t\tname,\n\t\tinputs = {},\n\t\tdata = {},\n\t}: {\n\t\tname: string;\n\t\tinputs?: Record<string, InferInput<typeof Argument> | InferInput<typeof Argument>[]>;\n\t\tdata?: Record<string, unknown>;\n\t}): TransactionShape<'$Intent'> {\n\t\treturn {\n\t\t\t$kind: '$Intent',\n\t\t\t$Intent: {\n\t\t\t\tname,\n\t\t\t\tinputs: Object.fromEntries(\n\t\t\t\t\tObject.entries(inputs).map(([key, value]) => [\n\t\t\t\t\t\tkey,\n\t\t\t\t\t\tArray.isArray(value) ? value.map((o) => parse(Argument, o)) : parse(Argument, value),\n\t\t\t\t\t]),\n\t\t\t\t),\n\t\t\t\tdata,\n\t\t\t},\n\t\t};\n\t},\n};\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumInputShape, EnumOutputShape } from '@mysten/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n\tarray,\n\tboolean,\n\tcheck,\n\tinteger,\n\tlazy,\n\tliteral,\n\tnullable,\n\tnullish,\n\tnumber,\n\tobject,\n\toptional,\n\tpipe,\n\trecord,\n\tstring,\n\ttransform,\n\ttuple,\n\tunion,\n\tunknown,\n} from 'valibot';\n\nimport { isValidSuiAddress, normalizeSuiAddress } from '../../utils/sui-types.js';\n\ntype Merge<T> = T extends object ? { [K in keyof T]: T[K] } : never;\n\ntype EnumSchema<T extends Record<string, GenericSchema<any>>> = GenericSchema<\n\tEnumInputShape<\n\t\tMerge<{\n\t\t\t[K in keyof T]: InferInput<T[K]>;\n\t\t}>\n\t>,\n\tEnumOutputShape<\n\t\tMerge<{\n\t\t\t[K in keyof T]: InferOutput<T[K]>;\n\t\t}>\n\t>\n>;\n\nexport function safeEnum<T extends Record<string, GenericSchema<any>>>(options: T): EnumSchema<T> {\n\tconst unionOptions = Object.entries(options).map(([key, value]) => object({ [key]: value }));\n\n\treturn pipe(\n\t\tunion(unionOptions),\n\t\ttransform((value) => ({\n\t\t\t...value,\n\t\t\t$kind: Object.keys(value)[0] as keyof typeof value,\n\t\t})),\n\t) as EnumSchema<T>;\n}\n\nexport const SuiAddress = pipe(\n\tstring(),\n\ttransform((value) => normalizeSuiAddress(value)),\n\tcheck(isValidSuiAddress),\n);\nexport const ObjectID = SuiAddress;\nexport const BCSBytes = string();\nexport const JsonU64 = pipe(\n\tunion([string(), pipe(number(), integer())]),\n\n\tcheck((val) => {\n\t\ttry {\n\t\t\tBigInt(val);\n\t\t\treturn BigInt(val) >= 0 && BigInt(val) <= 18446744073709551615n;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}, 'Invalid u64'),\n);\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/base_types.rs#L138\n// Implemented as a tuple in rust\nexport const ObjectRef = object({\n\tobjectId: SuiAddress,\n\tversion: JsonU64,\n\tdigest: string(),\n});\nexport type ObjectRef = InferOutput<typeof ObjectRef>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L690-L702\nexport const Argument = pipe(\n\tunion([\n\t\tobject({ GasCoin: literal(true) }),\n\t\tobject({ Input: pipe(number(), integer()), type: optional(literal('pure')) }),\n\t\tobject({ Input: pipe(number(), integer()), type: optional(literal('object')) }),\n\t\tobject({ Result: pipe(number(), integer()) }),\n\t\tobject({ NestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())]) }),\n\t]),\n\ttransform((value) => ({\n\t\t...value,\n\t\t$kind: Object.keys(value)[0] as keyof typeof value,\n\t})),\n\t// Defined manually to add `type?: 'pure' | 'object'` to Input\n) as GenericSchema<\n\t// Input\n\t| { GasCoin: true }\n\t| { Input: number; type?: 'pure' | 'object' }\n\t| { Result: number }\n\t| { NestedResult: [number, number] },\n\t// Output\n\t| { $kind: 'GasCoin'; GasCoin: true }\n\t| { $kind: 'Input'; Input: number; type?: 'pure' }\n\t| { $kind: 'Input'; Input: number; type?: 'object' }\n\t| { $kind: 'Result'; Result: number }\n\t| { $kind: 'NestedResult'; NestedResult: [number, number] }\n>;\n\nexport type Argument = InferOutput<typeof Argument>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L1387-L1392\nexport const GasData = object({\n\tbudget: nullable(JsonU64),\n\tprice: nullable(JsonU64),\n\towner: nullable(SuiAddress),\n\tpayment: nullable(array(ObjectRef)),\n});\nexport type GasData = InferOutput<typeof GasData>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/external-crates/move/crates/move-core-types/src/language_storage.rs#L140-L147\nexport const StructTag = object({\n\taddress: string(),\n\tmodule: string(),\n\tname: string(),\n\t// type_params in rust, should be updated to use camelCase\n\ttypeParams: array(string()),\n});\nexport type StructTag = InferOutput<typeof StructTag>;\n\n// https://github.com/MystenLabs/sui/blob/cea8742e810142a8145fd83c4c142d61e561004a/crates/sui-graphql-rpc/schema/current_progress_schema.graphql#L1614-L1627\nexport type OpenMoveTypeSignatureBody =\n\t| 'address'\n\t| 'bool'\n\t| 'u8'\n\t| 'u16'\n\t| 'u32'\n\t| 'u64'\n\t| 'u128'\n\t| 'u256'\n\t| { vector: OpenMoveTypeSignatureBody }\n\t| {\n\t\t\tdatatype: {\n\t\t\t\tpackage: string;\n\t\t\t\tmodule: string;\n\t\t\t\ttype: string;\n\t\t\t\ttypeParameters: OpenMoveTypeSignatureBody[];\n\t\t\t};\n\t  }\n\t| { typeParameter: number };\n\nexport const OpenMoveTypeSignatureBody: GenericSchema<OpenMoveTypeSignatureBody> = union([\n\tliteral('address'),\n\tliteral('bool'),\n\tliteral('u8'),\n\tliteral('u16'),\n\tliteral('u32'),\n\tliteral('u64'),\n\tliteral('u128'),\n\tliteral('u256'),\n\tobject({ vector: lazy(() => OpenMoveTypeSignatureBody) }),\n\tobject({\n\t\tdatatype: object({\n\t\t\tpackage: string(),\n\t\t\tmodule: string(),\n\t\t\ttype: string(),\n\t\t\ttypeParameters: array(lazy(() => OpenMoveTypeSignatureBody)),\n\t\t}),\n\t}),\n\tobject({ typeParameter: pipe(number(), integer()) }),\n]);\n\n// https://github.com/MystenLabs/sui/blob/cea8742e810142a8145fd83c4c142d61e561004a/crates/sui-graphql-rpc/schema/current_progress_schema.graphql#L1609-L1612\nexport const OpenMoveTypeSignature = object({\n\tref: nullable(union([literal('&'), literal('&mut')])),\n\tbody: OpenMoveTypeSignatureBody,\n});\nexport type OpenMoveTypeSignature = InferOutput<typeof OpenMoveTypeSignature>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L707-L718\nconst ProgrammableMoveCall = object({\n\tpackage: ObjectID,\n\tmodule: string(),\n\tfunction: string(),\n\t// snake case in rust\n\ttypeArguments: array(string()),\n\targuments: array(Argument),\n\t_argumentTypes: optional(nullable(array(OpenMoveTypeSignature))),\n});\nexport type ProgrammableMoveCall = InferOutput<typeof ProgrammableMoveCall>;\n\nexport const $Intent = object({\n\tname: string(),\n\tinputs: record(string(), union([Argument, array(Argument)])),\n\tdata: record(string(), unknown()),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L657-L685\nexport const Command = safeEnum({\n\tMoveCall: ProgrammableMoveCall,\n\tTransferObjects: object({\n\t\tobjects: array(Argument),\n\t\taddress: Argument,\n\t}),\n\tSplitCoins: object({\n\t\tcoin: Argument,\n\t\tamounts: array(Argument),\n\t}),\n\tMergeCoins: object({\n\t\tdestination: Argument,\n\t\tsources: array(Argument),\n\t}),\n\tPublish: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t}),\n\tMakeMoveVec: object({\n\t\ttype: nullable(string()),\n\t\telements: array(Argument),\n\t}),\n\tUpgrade: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t\tpackage: ObjectID,\n\t\tticket: Argument,\n\t}),\n\t$Intent,\n});\n\nexport type Command<Arg = Argument> = EnumOutputShape<{\n\tMoveCall: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t\tfunction: string;\n\t\ttypeArguments: string[];\n\t\targuments: Arg[];\n\t\t_argumentTypes?: OpenMoveTypeSignature[] | null;\n\t};\n\tTransferObjects: {\n\t\tobjects: Arg[];\n\t\taddress: Arg;\n\t};\n\tSplitCoins: {\n\t\tcoin: Arg;\n\t\tamounts: Arg[];\n\t};\n\tMergeCoins: {\n\t\tdestination: Arg;\n\t\tsources: Arg[];\n\t};\n\tPublish: {\n\t\tmodules: string[];\n\t\tdependencies: string[];\n\t};\n\tMakeMoveVec: {\n\t\ttype: string | null;\n\t\telements: Arg[];\n\t};\n\tUpgrade: {\n\t\tmodules: string[];\n\t\tdependencies: string[];\n\t\tpackage: string;\n\t\tticket: Arg;\n\t};\n\t$Intent: {\n\t\tname: string;\n\t\tinputs: Record<string, Argument | Argument[]>;\n\t\tdata: Record<string, unknown>;\n\t};\n}>;\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L102-L114\nexport const ObjectArg = safeEnum({\n\tImmOrOwnedObject: ObjectRef,\n\tSharedObject: object({\n\t\tobjectId: ObjectID,\n\t\t// snake case in rust\n\t\tinitialSharedVersion: JsonU64,\n\t\tmutable: boolean(),\n\t}),\n\tReceiving: ObjectRef,\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L75-L80\nconst CallArg = safeEnum({\n\tObject: ObjectArg,\n\tPure: object({\n\t\tbytes: BCSBytes,\n\t}),\n\tUnresolvedPure: object({\n\t\tvalue: unknown(),\n\t}),\n\tUnresolvedObject: object({\n\t\tobjectId: ObjectID,\n\t\tversion: optional(nullable(JsonU64)),\n\t\tdigest: optional(nullable(string())),\n\t\tinitialSharedVersion: optional(nullable(JsonU64)),\n\t}),\n});\nexport type CallArg = InferOutput<typeof CallArg>;\n\nexport const NormalizedCallArg = safeEnum({\n\tObject: ObjectArg,\n\tPure: object({\n\t\tbytes: BCSBytes,\n\t}),\n});\n\nexport const TransactionExpiration = safeEnum({\n\tNone: literal(true),\n\tEpoch: JsonU64,\n});\n\nexport type TransactionExpiration = InferOutput<typeof TransactionExpiration>;\n\nexport const TransactionData = object({\n\tversion: literal(2),\n\tsender: nullish(SuiAddress),\n\texpiration: nullish(TransactionExpiration),\n\tgasData: GasData,\n\tinputs: array(CallArg),\n\tcommands: array(Command),\n});\nexport type TransactionData = InferOutput<typeof TransactionData>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SerializedBcs } from '@mysten/bcs';\nimport { fromBase64, isSerializedBcs } from '@mysten/bcs';\nimport type { InferInput } from 'valibot';\nimport { is, parse } from 'valibot';\n\nimport type { SuiClient } from '../client/index.js';\nimport type { SignatureWithBytes, Signer } from '../cryptography/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { TransactionArgument } from './Commands.js';\nimport { Commands } from './Commands.js';\nimport type { CallArg, Command } from './data/internal.js';\nimport { Argument, NormalizedCallArg, ObjectRef, TransactionExpiration } from './data/internal.js';\nimport { serializeV1TransactionData } from './data/v1.js';\nimport { SerializedTransactionDataV2 } from './data/v2.js';\nimport { Inputs } from './Inputs.js';\nimport type {\n\tBuildTransactionOptions,\n\tSerializeTransactionOptions,\n\tTransactionPlugin,\n} from './json-rpc-resolver.js';\nimport { resolveTransactionData } from './json-rpc-resolver.js';\nimport { createObjectMethods } from './object.js';\nimport { createPure } from './pure.js';\nimport { TransactionDataBuilder } from './TransactionData.js';\nimport { getIdFromCallArg } from './utils.js';\n\nexport type TransactionObjectArgument =\n\t| Exclude<InferInput<typeof Argument>, { Input: unknown; type?: 'pure' }>\n\t| ((tx: Transaction) => Exclude<InferInput<typeof Argument>, { Input: unknown; type?: 'pure' }>);\n\nexport type TransactionResult = Extract<Argument, { Result: unknown }> &\n\tExtract<Argument, { NestedResult: unknown }>[];\n\nfunction createTransactionResult(index: number, length = Infinity): TransactionResult {\n\tconst baseResult = { $kind: 'Result' as const, Result: index };\n\n\tconst nestedResults: {\n\t\t$kind: 'NestedResult';\n\t\tNestedResult: [number, number];\n\t}[] = [];\n\tconst nestedResultFor = (\n\t\tresultIndex: number,\n\t): {\n\t\t$kind: 'NestedResult';\n\t\tNestedResult: [number, number];\n\t} =>\n\t\t(nestedResults[resultIndex] ??= {\n\t\t\t$kind: 'NestedResult' as const,\n\t\t\tNestedResult: [index, resultIndex],\n\t\t});\n\n\treturn new Proxy(baseResult, {\n\t\tset() {\n\t\t\tthrow new Error(\n\t\t\t\t'The transaction result is a proxy, and does not support setting properties directly',\n\t\t\t);\n\t\t},\n\t\t// TODO: Instead of making this return a concrete argument, we should ideally\n\t\t// make it reference-based (so that this gets resolved at build-time), which\n\t\t// allows re-ordering transactions.\n\t\tget(target, property) {\n\t\t\t// This allows this transaction argument to be used in the singular form:\n\t\t\tif (property in target) {\n\t\t\t\treturn Reflect.get(target, property);\n\t\t\t}\n\n\t\t\t// Support destructuring:\n\t\t\tif (property === Symbol.iterator) {\n\t\t\t\treturn function* () {\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\twhile (i < length) {\n\t\t\t\t\t\tyield nestedResultFor(i);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (typeof property === 'symbol') return;\n\n\t\t\tconst resultIndex = parseInt(property, 10);\n\t\t\tif (Number.isNaN(resultIndex) || resultIndex < 0) return;\n\t\t\treturn nestedResultFor(resultIndex);\n\t\t},\n\t}) as TransactionResult;\n}\n\nconst TRANSACTION_BRAND = Symbol.for('@mysten/transaction') as never;\n\ninterface SignOptions extends BuildTransactionOptions {\n\tsigner: Signer;\n}\n\nexport function isTransaction(obj: unknown): obj is Transaction {\n\treturn !!obj && typeof obj === 'object' && (obj as any)[TRANSACTION_BRAND] === true;\n}\n\nexport type TransactionObjectInput = string | CallArg | TransactionObjectArgument;\n\ninterface TransactionPluginRegistry {\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tbuildPlugins: Map<string | Function, TransactionPlugin>;\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tserializationPlugins: Map<string | Function, TransactionPlugin>;\n}\n\nconst modulePluginRegistry: TransactionPluginRegistry = {\n\tbuildPlugins: new Map(),\n\tserializationPlugins: new Map(),\n};\n\nconst TRANSACTION_REGISTRY_KEY = Symbol.for('@mysten/transaction/registry');\nfunction getGlobalPluginRegistry() {\n\ttry {\n\t\tconst target = globalThis as {\n\t\t\t[TRANSACTION_REGISTRY_KEY]?: TransactionPluginRegistry;\n\t\t};\n\n\t\tif (!target[TRANSACTION_REGISTRY_KEY]) {\n\t\t\ttarget[TRANSACTION_REGISTRY_KEY] = modulePluginRegistry;\n\t\t}\n\n\t\treturn target[TRANSACTION_REGISTRY_KEY];\n\t} catch (e) {\n\t\treturn modulePluginRegistry;\n\t}\n}\n\n/**\n * Transaction Builder\n */\nexport class Transaction {\n\t#serializationPlugins: TransactionPlugin[];\n\t#buildPlugins: TransactionPlugin[];\n\t#intentResolvers = new Map<string, TransactionPlugin>();\n\n\t/**\n\t * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.\n\t * Supports either a byte array, or base64-encoded bytes.\n\t */\n\tstatic fromKind(serialized: string | Uint8Array) {\n\t\tconst tx = new Transaction();\n\n\t\ttx.#data = TransactionDataBuilder.fromKindBytes(\n\t\t\ttypeof serialized === 'string' ? fromBase64(serialized) : serialized,\n\t\t);\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Converts from a serialized transaction format to a `Transaction` class.\n\t * There are two supported serialized formats:\n\t * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.\n\t * - A byte array (or base64-encoded bytes) containing BCS transaction data.\n\t */\n\tstatic from(transaction: string | Uint8Array | Transaction) {\n\t\tconst newTransaction = new Transaction();\n\n\t\tif (isTransaction(transaction)) {\n\t\t\tnewTransaction.#data = new TransactionDataBuilder(transaction.getData());\n\t\t} else if (typeof transaction !== 'string' || !transaction.startsWith('{')) {\n\t\t\tnewTransaction.#data = TransactionDataBuilder.fromBytes(\n\t\t\t\ttypeof transaction === 'string' ? fromBase64(transaction) : transaction,\n\t\t\t);\n\t\t} else {\n\t\t\tnewTransaction.#data = TransactionDataBuilder.restore(JSON.parse(transaction));\n\t\t}\n\n\t\treturn newTransaction;\n\t}\n\n\t/** @deprecated global plugins should be registered with a name */\n\tstatic registerGlobalSerializationPlugin(step: TransactionPlugin): void;\n\tstatic registerGlobalSerializationPlugin(name: string, step: TransactionPlugin): void;\n\tstatic registerGlobalSerializationPlugin(\n\t\tstepOrStep: TransactionPlugin | string,\n\t\tstep?: TransactionPlugin,\n\t) {\n\t\tgetGlobalPluginRegistry().serializationPlugins.set(\n\t\t\tstepOrStep,\n\t\t\tstep ?? (stepOrStep as TransactionPlugin),\n\t\t);\n\t}\n\n\tstatic unregisterGlobalSerializationPlugin(name: string) {\n\t\tgetGlobalPluginRegistry().serializationPlugins.delete(name);\n\t}\n\n\t/** @deprecated global plugins should be registered with a name */\n\tstatic registerGlobalBuildPlugin(step: TransactionPlugin): void;\n\tstatic registerGlobalBuildPlugin(name: string, step: TransactionPlugin): void;\n\tstatic registerGlobalBuildPlugin(\n\t\tstepOrStep: TransactionPlugin | string,\n\t\tstep?: TransactionPlugin,\n\t) {\n\t\tgetGlobalPluginRegistry().buildPlugins.set(\n\t\t\tstepOrStep,\n\t\t\tstep ?? (stepOrStep as TransactionPlugin),\n\t\t);\n\t}\n\n\tstatic unregisterGlobalBuildPlugin(name: string) {\n\t\tgetGlobalPluginRegistry().buildPlugins.delete(name);\n\t}\n\n\taddSerializationPlugin(step: TransactionPlugin) {\n\t\tthis.#serializationPlugins.push(step);\n\t}\n\n\taddBuildPlugin(step: TransactionPlugin) {\n\t\tthis.#buildPlugins.push(step);\n\t}\n\n\taddIntentResolver(intent: string, resolver: TransactionPlugin) {\n\t\tif (this.#intentResolvers.has(intent) && this.#intentResolvers.get(intent) !== resolver) {\n\t\t\tthrow new Error(`Intent resolver for ${intent} already exists`);\n\t\t}\n\n\t\tthis.#intentResolvers.set(intent, resolver);\n\t}\n\n\tsetSender(sender: string) {\n\t\tthis.#data.sender = sender;\n\t}\n\t/**\n\t * Sets the sender only if it has not already been set.\n\t * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.\n\t */\n\tsetSenderIfNotSet(sender: string) {\n\t\tif (!this.#data.sender) {\n\t\t\tthis.#data.sender = sender;\n\t\t}\n\t}\n\tsetExpiration(expiration?: InferInput<typeof TransactionExpiration> | null) {\n\t\tthis.#data.expiration = expiration ? parse(TransactionExpiration, expiration) : null;\n\t}\n\tsetGasPrice(price: number | bigint) {\n\t\tthis.#data.gasConfig.price = String(price);\n\t}\n\tsetGasBudget(budget: number | bigint) {\n\t\tthis.#data.gasConfig.budget = String(budget);\n\t}\n\n\tsetGasBudgetIfNotSet(budget: number | bigint) {\n\t\tif (this.#data.gasData.budget == null) {\n\t\t\tthis.#data.gasConfig.budget = String(budget);\n\t\t}\n\t}\n\n\tsetGasOwner(owner: string) {\n\t\tthis.#data.gasConfig.owner = owner;\n\t}\n\tsetGasPayment(payments: ObjectRef[]) {\n\t\tthis.#data.gasConfig.payment = payments.map((payment) => parse(ObjectRef, payment));\n\t}\n\n\t#data: TransactionDataBuilder;\n\n\t/** @deprecated Use `getData()` instead. */\n\tget blockData() {\n\t\treturn serializeV1TransactionData(this.#data.snapshot());\n\t}\n\n\t/** Get a snapshot of the transaction data, in JSON form: */\n\tgetData() {\n\t\treturn this.#data.snapshot();\n\t}\n\n\t// Used to brand transaction classes so that they can be identified, even between multiple copies\n\t// of the builder.\n\tget [TRANSACTION_BRAND]() {\n\t\treturn true;\n\t}\n\n\t// Temporary workaround for the wallet interface accidentally serializing transactions via postMessage\n\tget pure(): ReturnType<typeof createPure<Argument>> {\n\t\tObject.defineProperty(this, 'pure', {\n\t\t\tenumerable: false,\n\t\t\tvalue: createPure<Argument>((value): Argument => {\n\t\t\t\tif (isSerializedBcs(value)) {\n\t\t\t\t\treturn this.#data.addInput('pure', {\n\t\t\t\t\t\t$kind: 'Pure',\n\t\t\t\t\t\tPure: {\n\t\t\t\t\t\t\tbytes: value.toBase64(),\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// TODO: we can also do some deduplication here\n\t\t\t\treturn this.#data.addInput(\n\t\t\t\t\t'pure',\n\t\t\t\t\tis(NormalizedCallArg, value)\n\t\t\t\t\t\t? parse(NormalizedCallArg, value)\n\t\t\t\t\t\t: value instanceof Uint8Array\n\t\t\t\t\t\t\t? Inputs.Pure(value)\n\t\t\t\t\t\t\t: { $kind: 'UnresolvedPure', UnresolvedPure: { value } },\n\t\t\t\t);\n\t\t\t}),\n\t\t});\n\n\t\treturn this.pure;\n\t}\n\n\tconstructor() {\n\t\tconst globalPlugins = getGlobalPluginRegistry();\n\t\tthis.#data = new TransactionDataBuilder();\n\t\tthis.#buildPlugins = [...globalPlugins.buildPlugins.values()];\n\t\tthis.#serializationPlugins = [...globalPlugins.serializationPlugins.values()];\n\t}\n\n\t/** Returns an argument for the gas coin, to be used in a transaction. */\n\tget gas() {\n\t\treturn { $kind: 'GasCoin' as const, GasCoin: true as const };\n\t}\n\n\t/**\n\t * Add a new object input to the transaction.\n\t */\n\tobject = createObjectMethods(\n\t\t(value: TransactionObjectInput): { $kind: 'Input'; Input: number; type?: 'object' } => {\n\t\t\tif (typeof value === 'function') {\n\t\t\t\treturn this.object(value(this));\n\t\t\t}\n\n\t\t\tif (typeof value === 'object' && is(Argument, value)) {\n\t\t\t\treturn value as { $kind: 'Input'; Input: number; type?: 'object' };\n\t\t\t}\n\n\t\t\tconst id = getIdFromCallArg(value);\n\n\t\t\tconst inserted = this.#data.inputs.find((i) => id === getIdFromCallArg(i));\n\n\t\t\t// Upgrade shared object inputs to mutable if needed:\n\t\t\tif (\n\t\t\t\tinserted?.Object?.SharedObject &&\n\t\t\t\ttypeof value === 'object' &&\n\t\t\t\tvalue.Object?.SharedObject\n\t\t\t) {\n\t\t\t\tinserted.Object.SharedObject.mutable =\n\t\t\t\t\tinserted.Object.SharedObject.mutable || value.Object.SharedObject.mutable;\n\t\t\t}\n\n\t\t\treturn inserted\n\t\t\t\t? { $kind: 'Input', Input: this.#data.inputs.indexOf(inserted), type: 'object' }\n\t\t\t\t: this.#data.addInput(\n\t\t\t\t\t\t'object',\n\t\t\t\t\t\ttypeof value === 'string'\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t$kind: 'UnresolvedObject',\n\t\t\t\t\t\t\t\t\tUnresolvedObject: { objectId: normalizeSuiAddress(value) },\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: value,\n\t\t\t\t\t);\n\t\t},\n\t);\n\n\t/**\n\t * Add a new object input to the transaction using the fully-resolved object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tobjectRef(...args: Parameters<(typeof Inputs)['ObjectRef']>) {\n\t\treturn this.object(Inputs.ObjectRef(...args));\n\t}\n\n\t/**\n\t * Add a new receiving input to the transaction using the fully-resolved object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\treceivingRef(...args: Parameters<(typeof Inputs)['ReceivingRef']>) {\n\t\treturn this.object(Inputs.ReceivingRef(...args));\n\t}\n\n\t/**\n\t * Add a new shared object input to the transaction using the fully-resolved shared object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tsharedObjectRef(...args: Parameters<(typeof Inputs)['SharedObjectRef']>) {\n\t\treturn this.object(Inputs.SharedObjectRef(...args));\n\t}\n\n\t/** Add a transaction to the transaction */\n\tadd<T = TransactionResult>(command: Command | ((tx: Transaction) => T)): T {\n\t\tif (typeof command === 'function') {\n\t\t\treturn command(this);\n\t\t}\n\n\t\tconst index = this.#data.commands.push(command);\n\n\t\treturn createTransactionResult(index - 1) as T;\n\t}\n\n\t#normalizeTransactionArgument(arg: TransactionArgument | SerializedBcs<any>) {\n\t\tif (isSerializedBcs(arg)) {\n\t\t\treturn this.pure(arg);\n\t\t}\n\n\t\treturn this.#resolveArgument(arg as TransactionArgument);\n\t}\n\n\t#resolveArgument(arg: TransactionArgument): Argument {\n\t\tif (typeof arg === 'function') {\n\t\t\treturn parse(Argument, arg(this));\n\t\t}\n\n\t\treturn parse(Argument, arg);\n\t}\n\n\t// Method shorthands:\n\n\tsplitCoins<\n\t\tconst Amounts extends (TransactionArgument | SerializedBcs<any> | number | string | bigint)[],\n\t>(coin: TransactionObjectArgument | string, amounts: Amounts) {\n\t\tconst command = Commands.SplitCoins(\n\t\t\ttypeof coin === 'string' ? this.object(coin) : this.#resolveArgument(coin),\n\t\t\tamounts.map((amount) =>\n\t\t\t\ttypeof amount === 'number' || typeof amount === 'bigint' || typeof amount === 'string'\n\t\t\t\t\t? this.pure.u64(amount)\n\t\t\t\t\t: this.#normalizeTransactionArgument(amount),\n\t\t\t),\n\t\t);\n\t\tconst index = this.#data.commands.push(command);\n\t\treturn createTransactionResult(index - 1, amounts.length) as Extract<\n\t\t\tArgument,\n\t\t\t{ Result: unknown }\n\t\t> & {\n\t\t\t[K in keyof Amounts]: Extract<Argument, { NestedResult: unknown }>;\n\t\t};\n\t}\n\tmergeCoins(\n\t\tdestination: TransactionObjectArgument | string,\n\t\tsources: (TransactionObjectArgument | string)[],\n\t) {\n\t\treturn this.add(\n\t\t\tCommands.MergeCoins(\n\t\t\t\tthis.object(destination),\n\t\t\t\tsources.map((src) => this.object(src)),\n\t\t\t),\n\t\t);\n\t}\n\tpublish({ modules, dependencies }: { modules: number[][] | string[]; dependencies: string[] }) {\n\t\treturn this.add(\n\t\t\tCommands.Publish({\n\t\t\t\tmodules,\n\t\t\t\tdependencies,\n\t\t\t}),\n\t\t);\n\t}\n\tupgrade({\n\t\tmodules,\n\t\tdependencies,\n\t\tpackage: packageId,\n\t\tticket,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: string[];\n\t\tpackage: string;\n\t\tticket: TransactionObjectArgument | string;\n\t}) {\n\t\treturn this.add(\n\t\t\tCommands.Upgrade({\n\t\t\t\tmodules,\n\t\t\t\tdependencies,\n\t\t\t\tpackage: packageId,\n\t\t\t\tticket: this.object(ticket),\n\t\t\t}),\n\t\t);\n\t}\n\tmoveCall({\n\t\targuments: args,\n\t\t...input\n\t}:\n\t\t| {\n\t\t\t\tpackage: string;\n\t\t\t\tmodule: string;\n\t\t\t\tfunction: string;\n\t\t\t\targuments?: (TransactionArgument | SerializedBcs<any>)[];\n\t\t\t\ttypeArguments?: string[];\n\t\t  }\n\t\t| {\n\t\t\t\ttarget: string;\n\t\t\t\targuments?: (TransactionArgument | SerializedBcs<any>)[];\n\t\t\t\ttypeArguments?: string[];\n\t\t  }) {\n\t\treturn this.add(\n\t\t\tCommands.MoveCall({\n\t\t\t\t...input,\n\t\t\t\targuments: args?.map((arg) => this.#normalizeTransactionArgument(arg)),\n\t\t\t} as Parameters<typeof Commands.MoveCall>[0]),\n\t\t);\n\t}\n\ttransferObjects(\n\t\tobjects: (TransactionObjectArgument | string)[],\n\t\taddress: TransactionArgument | SerializedBcs<any> | string,\n\t) {\n\t\treturn this.add(\n\t\t\tCommands.TransferObjects(\n\t\t\t\tobjects.map((obj) => this.object(obj)),\n\t\t\t\ttypeof address === 'string'\n\t\t\t\t\t? this.pure.address(address)\n\t\t\t\t\t: this.#normalizeTransactionArgument(address),\n\t\t\t),\n\t\t);\n\t}\n\tmakeMoveVec({\n\t\ttype,\n\t\telements,\n\t}: {\n\t\telements: (TransactionObjectArgument | string)[];\n\t\ttype?: string;\n\t}) {\n\t\treturn this.add(\n\t\t\tCommands.MakeMoveVec({\n\t\t\t\ttype,\n\t\t\t\telements: elements.map((obj) => this.object(obj)),\n\t\t\t}),\n\t\t);\n\t}\n\n\t/**\n\t * @deprecated Use toJSON instead.\n\t * For synchronous serialization, you can use `getData()`\n\t * */\n\tserialize() {\n\t\treturn JSON.stringify(serializeV1TransactionData(this.#data.snapshot()));\n\t}\n\n\tasync toJSON(options: SerializeTransactionOptions = {}): Promise<string> {\n\t\tawait this.prepareForSerialization(options);\n\t\treturn JSON.stringify(\n\t\t\tparse(SerializedTransactionDataV2, this.#data.snapshot()),\n\t\t\t(_key, value) => (typeof value === 'bigint' ? value.toString() : value),\n\t\t\t2,\n\t\t);\n\t}\n\n\t/** Build the transaction to BCS bytes, and sign it with the provided keypair. */\n\tasync sign(options: SignOptions): Promise<SignatureWithBytes> {\n\t\tconst { signer, ...buildOptions } = options;\n\t\tconst bytes = await this.build(buildOptions);\n\t\treturn signer.signTransaction(bytes);\n\t}\n\n\t/** Build the transaction to BCS bytes. */\n\tasync build(options: BuildTransactionOptions = {}): Promise<Uint8Array> {\n\t\tawait this.prepareForSerialization(options);\n\t\tawait this.#prepareBuild(options);\n\t\treturn this.#data.build({\n\t\t\tonlyTransactionKind: options.onlyTransactionKind,\n\t\t});\n\t}\n\n\t/** Derive transaction digest */\n\tasync getDigest(\n\t\toptions: {\n\t\t\tclient?: SuiClient;\n\t\t} = {},\n\t): Promise<string> {\n\t\tawait this.#prepareBuild(options);\n\t\treturn this.#data.getDigest();\n\t}\n\n\t/**\n\t * Prepare the transaction by validating the transaction data and resolving all inputs\n\t * so that it can be built into bytes.\n\t */\n\tasync #prepareBuild(options: BuildTransactionOptions) {\n\t\tif (!options.onlyTransactionKind && !this.#data.sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tawait this.#runPlugins([...this.#buildPlugins, resolveTransactionData], options);\n\t}\n\n\tasync #runPlugins(plugins: TransactionPlugin[], options: SerializeTransactionOptions) {\n\t\tconst createNext = (i: number) => {\n\t\t\tif (i >= plugins.length) {\n\t\t\t\treturn () => {};\n\t\t\t}\n\t\t\tconst plugin = plugins[i];\n\n\t\t\treturn async () => {\n\t\t\t\tconst next = createNext(i + 1);\n\t\t\t\tlet calledNext = false;\n\t\t\t\tlet nextResolved = false;\n\n\t\t\t\tawait plugin(this.#data, options, async () => {\n\t\t\t\t\tif (calledNext) {\n\t\t\t\t\t\tthrow new Error(`next() was call multiple times in TransactionPlugin ${i}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tcalledNext = true;\n\n\t\t\t\t\tawait next();\n\n\t\t\t\t\tnextResolved = true;\n\t\t\t\t});\n\n\t\t\t\tif (!calledNext) {\n\t\t\t\t\tthrow new Error(`next() was not called in TransactionPlugin ${i}`);\n\t\t\t\t}\n\n\t\t\t\tif (!nextResolved) {\n\t\t\t\t\tthrow new Error(`next() was not awaited in TransactionPlugin ${i}`);\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\tawait createNext(0)();\n\t}\n\n\tasync prepareForSerialization(options: SerializeTransactionOptions) {\n\t\tconst intents = new Set<string>();\n\t\tfor (const command of this.#data.commands) {\n\t\t\tif (command.$Intent) {\n\t\t\t\tintents.add(command.$Intent.name);\n\t\t\t}\n\t\t}\n\n\t\tconst steps = [...this.#serializationPlugins];\n\n\t\tfor (const intent of intents) {\n\t\t\tif (options.supportedIntents?.includes(intent)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this.#intentResolvers.has(intent)) {\n\t\t\t\tthrow new Error(`Missing intent resolver for ${intent}`);\n\t\t\t}\n\n\t\t\tsteps.push(this.#intentResolvers.get(intent)!);\n\t\t}\n\n\t\tawait this.#runPlugins(steps, options);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromBase64, toBase64 } from '@mysten/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n\tarray,\n\tbigint,\n\tboolean,\n\tcheck,\n\tinteger,\n\tis,\n\tlazy,\n\tliteral,\n\tnullable,\n\tnullish,\n\tnumber,\n\tobject,\n\toptional,\n\tparse,\n\tpipe,\n\tstring,\n\tunion,\n\tunknown,\n} from 'valibot';\n\nimport { TypeTagSerializer } from '../../bcs/index.js';\nimport type { StructTag as StructTagType, TypeTag as TypeTagType } from '../../bcs/types.js';\nimport { JsonU64, ObjectID, safeEnum, TransactionData } from './internal.js';\nimport type { Argument } from './internal.js';\n\nexport const ObjectRef = object({\n\tdigest: string(),\n\tobjectId: string(),\n\tversion: union([pipe(number(), integer()), string(), bigint()]),\n});\n\nconst ObjectArg = safeEnum({\n\tImmOrOwned: ObjectRef,\n\tShared: object({\n\t\tobjectId: ObjectID,\n\t\tinitialSharedVersion: JsonU64,\n\t\tmutable: boolean(),\n\t}),\n\tReceiving: ObjectRef,\n});\n\nexport const NormalizedCallArg = safeEnum({\n\tObject: ObjectArg,\n\tPure: array(pipe(number(), integer())),\n});\n\nconst TransactionInput = union([\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: pipe(number(), integer()),\n\t\tvalue: unknown(),\n\t\ttype: optional(literal('object')),\n\t}),\n\tobject({\n\t\tkind: literal('Input'),\n\t\tindex: pipe(number(), integer()),\n\t\tvalue: unknown(),\n\t\ttype: literal('pure'),\n\t}),\n]);\n\nconst TransactionExpiration = union([\n\tobject({ Epoch: pipe(number(), integer()) }),\n\tobject({ None: nullable(literal(true)) }),\n]);\n\nconst StringEncodedBigint = pipe(\n\tunion([number(), string(), bigint()]),\n\tcheck((val) => {\n\t\tif (!['string', 'number', 'bigint'].includes(typeof val)) return false;\n\n\t\ttry {\n\t\t\tBigInt(val as string);\n\t\t\treturn true;\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t}),\n);\n\nexport const TypeTag: GenericSchema<TypeTagType> = union([\n\tobject({ bool: nullable(literal(true)) }),\n\tobject({ u8: nullable(literal(true)) }),\n\tobject({ u64: nullable(literal(true)) }),\n\tobject({ u128: nullable(literal(true)) }),\n\tobject({ address: nullable(literal(true)) }),\n\tobject({ signer: nullable(literal(true)) }),\n\tobject({ vector: lazy(() => TypeTag) }),\n\tobject({ struct: lazy(() => StructTag) }),\n\tobject({ u16: nullable(literal(true)) }),\n\tobject({ u32: nullable(literal(true)) }),\n\tobject({ u256: nullable(literal(true)) }),\n]);\n\n// https://github.com/MystenLabs/sui/blob/cea8742e810142a8145fd83c4c142d61e561004a/external-crates/move/crates/move-core-types/src/language_storage.rs#L140-L147\nexport const StructTag: GenericSchema<StructTagType> = object({\n\taddress: string(),\n\tmodule: string(),\n\tname: string(),\n\ttypeParams: array(TypeTag),\n});\n\nconst GasConfig = object({\n\tbudget: optional(StringEncodedBigint),\n\tprice: optional(StringEncodedBigint),\n\tpayment: optional(array(ObjectRef)),\n\towner: optional(string()),\n});\n\nconst TransactionArgumentTypes = [\n\tTransactionInput,\n\tobject({ kind: literal('GasCoin') }),\n\tobject({ kind: literal('Result'), index: pipe(number(), integer()) }),\n\tobject({\n\t\tkind: literal('NestedResult'),\n\t\tindex: pipe(number(), integer()),\n\t\tresultIndex: pipe(number(), integer()),\n\t}),\n] as const;\n\n// Generic transaction argument\nexport const TransactionArgument = union([...TransactionArgumentTypes]);\n\nconst MoveCallTransaction = object({\n\tkind: literal('MoveCall'),\n\ttarget: pipe(\n\t\tstring(),\n\t\tcheck((target) => target.split('::').length === 3),\n\t) as GenericSchema<`${string}::${string}::${string}`>,\n\ttypeArguments: array(string()),\n\targuments: array(TransactionArgument),\n});\n\nconst TransferObjectsTransaction = object({\n\tkind: literal('TransferObjects'),\n\tobjects: array(TransactionArgument),\n\taddress: TransactionArgument,\n});\n\nconst SplitCoinsTransaction = object({\n\tkind: literal('SplitCoins'),\n\tcoin: TransactionArgument,\n\tamounts: array(TransactionArgument),\n});\n\nconst MergeCoinsTransaction = object({\n\tkind: literal('MergeCoins'),\n\tdestination: TransactionArgument,\n\tsources: array(TransactionArgument),\n});\n\nconst MakeMoveVecTransaction = object({\n\tkind: literal('MakeMoveVec'),\n\ttype: union([object({ Some: TypeTag }), object({ None: nullable(literal(true)) })]),\n\tobjects: array(TransactionArgument),\n});\n\nconst PublishTransaction = object({\n\tkind: literal('Publish'),\n\tmodules: array(array(pipe(number(), integer()))),\n\tdependencies: array(string()),\n});\n\nconst UpgradeTransaction = object({\n\tkind: literal('Upgrade'),\n\tmodules: array(array(pipe(number(), integer()))),\n\tdependencies: array(string()),\n\tpackageId: string(),\n\tticket: TransactionArgument,\n});\n\nconst TransactionTypes = [\n\tMoveCallTransaction,\n\tTransferObjectsTransaction,\n\tSplitCoinsTransaction,\n\tMergeCoinsTransaction,\n\tPublishTransaction,\n\tUpgradeTransaction,\n\tMakeMoveVecTransaction,\n] as const;\n\nconst TransactionType = union([...TransactionTypes]);\n\nexport const SerializedTransactionDataV1 = object({\n\tversion: literal(1),\n\tsender: optional(string()),\n\texpiration: nullish(TransactionExpiration),\n\tgasConfig: GasConfig,\n\tinputs: array(TransactionInput),\n\ttransactions: array(TransactionType),\n});\n\nexport type SerializedTransactionDataV1 = InferOutput<typeof SerializedTransactionDataV1>;\n\nexport function serializeV1TransactionData(\n\ttransactionData: TransactionData,\n): SerializedTransactionDataV1 {\n\tconst inputs: InferOutput<typeof TransactionInput>[] = transactionData.inputs.map(\n\t\t(input, index) => {\n\t\t\tif (input.Object) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tObject: input.Object.ImmOrOwnedObject\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tImmOrOwned: input.Object.ImmOrOwnedObject,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t: input.Object.Receiving\n\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\tReceiving: {\n\t\t\t\t\t\t\t\t\t\t\tdigest: input.Object.Receiving.digest,\n\t\t\t\t\t\t\t\t\t\t\tversion: input.Object.Receiving.version,\n\t\t\t\t\t\t\t\t\t\t\tobjectId: input.Object.Receiving.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\tShared: {\n\t\t\t\t\t\t\t\t\t\t\tmutable: input.Object.SharedObject.mutable,\n\t\t\t\t\t\t\t\t\t\t\tinitialSharedVersion: input.Object.SharedObject.initialSharedVersion,\n\t\t\t\t\t\t\t\t\t\t\tobjectId: input.Object.SharedObject.objectId,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'object',\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (input.Pure) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\tPure: Array.from(fromBase64(input.Pure.bytes)),\n\t\t\t\t\t},\n\t\t\t\t\ttype: 'pure',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (input.UnresolvedPure) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\ttype: 'pure',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: input.UnresolvedPure.value,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (input.UnresolvedObject) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Input',\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tindex,\n\t\t\t\t\tvalue: input.UnresolvedObject.objectId,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new Error('Invalid input');\n\t\t},\n\t);\n\n\treturn {\n\t\tversion: 1,\n\t\tsender: transactionData.sender ?? undefined,\n\t\texpiration:\n\t\t\ttransactionData.expiration?.$kind === 'Epoch'\n\t\t\t\t? { Epoch: Number(transactionData.expiration.Epoch) }\n\t\t\t\t: transactionData.expiration\n\t\t\t\t\t? { None: true }\n\t\t\t\t\t: null,\n\t\tgasConfig: {\n\t\t\towner: transactionData.gasData.owner ?? undefined,\n\t\t\tbudget: transactionData.gasData.budget ?? undefined,\n\t\t\tprice: transactionData.gasData.price ?? undefined,\n\t\t\tpayment: transactionData.gasData.payment ?? undefined,\n\t\t},\n\t\tinputs,\n\t\ttransactions: transactionData.commands.map((command): InferOutput<typeof TransactionType> => {\n\t\t\tif (command.MakeMoveVec) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'MakeMoveVec',\n\t\t\t\t\ttype:\n\t\t\t\t\t\tcommand.MakeMoveVec.type === null\n\t\t\t\t\t\t\t? { None: true }\n\t\t\t\t\t\t\t: { Some: TypeTagSerializer.parseFromStr(command.MakeMoveVec.type) },\n\t\t\t\t\tobjects: command.MakeMoveVec.elements.map((arg) =>\n\t\t\t\t\t\tconvertTransactionArgument(arg, inputs),\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.MergeCoins) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'MergeCoins',\n\t\t\t\t\tdestination: convertTransactionArgument(command.MergeCoins.destination, inputs),\n\t\t\t\t\tsources: command.MergeCoins.sources.map((arg) => convertTransactionArgument(arg, inputs)),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.MoveCall) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'MoveCall',\n\t\t\t\t\ttarget: `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`,\n\t\t\t\t\ttypeArguments: command.MoveCall.typeArguments,\n\t\t\t\t\targuments: command.MoveCall.arguments.map((arg) =>\n\t\t\t\t\t\tconvertTransactionArgument(arg, inputs),\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.Publish) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Publish',\n\t\t\t\t\tmodules: command.Publish.modules.map((mod) => Array.from(fromBase64(mod))),\n\t\t\t\t\tdependencies: command.Publish.dependencies,\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.SplitCoins) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'SplitCoins',\n\t\t\t\t\tcoin: convertTransactionArgument(command.SplitCoins.coin, inputs),\n\t\t\t\t\tamounts: command.SplitCoins.amounts.map((arg) => convertTransactionArgument(arg, inputs)),\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (command.TransferObjects) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'TransferObjects',\n\t\t\t\t\tobjects: command.TransferObjects.objects.map((arg) =>\n\t\t\t\t\t\tconvertTransactionArgument(arg, inputs),\n\t\t\t\t\t),\n\t\t\t\t\taddress: convertTransactionArgument(command.TransferObjects.address, inputs),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (command.Upgrade) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: 'Upgrade',\n\t\t\t\t\tmodules: command.Upgrade.modules.map((mod) => Array.from(fromBase64(mod))),\n\t\t\t\t\tdependencies: command.Upgrade.dependencies,\n\t\t\t\t\tpackageId: command.Upgrade.package,\n\t\t\t\t\tticket: convertTransactionArgument(command.Upgrade.ticket, inputs),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new Error(`Unknown transaction ${Object.keys(command)}`);\n\t\t}),\n\t};\n}\n\nfunction convertTransactionArgument(\n\targ: Argument,\n\tinputs: InferOutput<typeof TransactionInput>[],\n): InferOutput<typeof TransactionArgument> {\n\tif (arg.$kind === 'GasCoin') {\n\t\treturn { kind: 'GasCoin' };\n\t}\n\tif (arg.$kind === 'Result') {\n\t\treturn { kind: 'Result', index: arg.Result };\n\t}\n\tif (arg.$kind === 'NestedResult') {\n\t\treturn { kind: 'NestedResult', index: arg.NestedResult[0], resultIndex: arg.NestedResult[1] };\n\t}\n\tif (arg.$kind === 'Input') {\n\t\treturn inputs[arg.Input];\n\t}\n\n\tthrow new Error(`Invalid argument ${Object.keys(arg)}`);\n}\n\nexport function transactionDataFromV1(data: SerializedTransactionDataV1): TransactionData {\n\treturn parse(TransactionData, {\n\t\tversion: 2,\n\t\tsender: data.sender ?? null,\n\t\texpiration: data.expiration\n\t\t\t? 'Epoch' in data.expiration\n\t\t\t\t? { Epoch: data.expiration.Epoch }\n\t\t\t\t: { None: true }\n\t\t\t: null,\n\t\tgasData: {\n\t\t\towner: data.gasConfig.owner ?? null,\n\t\t\tbudget: data.gasConfig.budget?.toString() ?? null,\n\t\t\tprice: data.gasConfig.price?.toString() ?? null,\n\t\t\tpayment:\n\t\t\t\tdata.gasConfig.payment?.map((ref) => ({\n\t\t\t\t\tdigest: ref.digest,\n\t\t\t\t\tobjectId: ref.objectId,\n\t\t\t\t\tversion: ref.version.toString(),\n\t\t\t\t})) ?? null,\n\t\t},\n\t\tinputs: data.inputs.map((input) => {\n\t\t\tif (input.kind === 'Input') {\n\t\t\t\tif (is(NormalizedCallArg, input.value)) {\n\t\t\t\t\tconst value = parse(NormalizedCallArg, input.value);\n\n\t\t\t\t\tif (value.Object) {\n\t\t\t\t\t\tif (value.Object.ImmOrOwned) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tObject: {\n\t\t\t\t\t\t\t\t\tImmOrOwnedObject: {\n\t\t\t\t\t\t\t\t\t\tobjectId: value.Object.ImmOrOwned.objectId,\n\t\t\t\t\t\t\t\t\t\tversion: String(value.Object.ImmOrOwned.version),\n\t\t\t\t\t\t\t\t\t\tdigest: value.Object.ImmOrOwned.digest,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value.Object.Shared) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tObject: {\n\t\t\t\t\t\t\t\t\tSharedObject: {\n\t\t\t\t\t\t\t\t\t\tmutable: value.Object.Shared.mutable ?? null,\n\t\t\t\t\t\t\t\t\t\tinitialSharedVersion: value.Object.Shared.initialSharedVersion,\n\t\t\t\t\t\t\t\t\t\tobjectId: value.Object.Shared.objectId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (value.Object.Receiving) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tObject: {\n\t\t\t\t\t\t\t\t\tReceiving: {\n\t\t\t\t\t\t\t\t\t\tdigest: value.Object.Receiving.digest,\n\t\t\t\t\t\t\t\t\t\tversion: String(value.Object.Receiving.version),\n\t\t\t\t\t\t\t\t\t\tobjectId: value.Object.Receiving.objectId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow new Error('Invalid object input');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tPure: {\n\t\t\t\t\t\t\tbytes: toBase64(new Uint8Array(value.Pure)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tif (input.type === 'object') {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tUnresolvedObject: {\n\t\t\t\t\t\t\tobjectId: input.value as string,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tUnresolvedPure: {\n\t\t\t\t\t\tvalue: input.value,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new Error('Invalid input');\n\t\t}),\n\t\tcommands: data.transactions.map((transaction) => {\n\t\t\tswitch (transaction.kind) {\n\t\t\t\tcase 'MakeMoveVec':\n\t\t\t\t\treturn {\n\t\t\t\t\t\tMakeMoveVec: {\n\t\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\t\t'Some' in transaction.type\n\t\t\t\t\t\t\t\t\t? TypeTagSerializer.tagToString(transaction.type.Some)\n\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\telements: transaction.objects.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\tcase 'MergeCoins': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tMergeCoins: {\n\t\t\t\t\t\t\tdestination: parseV1TransactionArgument(transaction.destination),\n\t\t\t\t\t\t\tsources: transaction.sources.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'MoveCall': {\n\t\t\t\t\tconst [pkg, mod, fn] = transaction.target.split('::');\n\t\t\t\t\treturn {\n\t\t\t\t\t\tMoveCall: {\n\t\t\t\t\t\t\tpackage: pkg,\n\t\t\t\t\t\t\tmodule: mod,\n\t\t\t\t\t\t\tfunction: fn,\n\t\t\t\t\t\t\ttypeArguments: transaction.typeArguments,\n\t\t\t\t\t\t\targuments: transaction.arguments.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'Publish': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tPublish: {\n\t\t\t\t\t\t\tmodules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),\n\t\t\t\t\t\t\tdependencies: transaction.dependencies,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'SplitCoins': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tSplitCoins: {\n\t\t\t\t\t\t\tcoin: parseV1TransactionArgument(transaction.coin),\n\t\t\t\t\t\t\tamounts: transaction.amounts.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'TransferObjects': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tTransferObjects: {\n\t\t\t\t\t\t\tobjects: transaction.objects.map((arg) => parseV1TransactionArgument(arg)),\n\t\t\t\t\t\t\taddress: parseV1TransactionArgument(transaction.address),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcase 'Upgrade': {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tUpgrade: {\n\t\t\t\t\t\t\tmodules: transaction.modules.map((mod) => toBase64(Uint8Array.from(mod))),\n\t\t\t\t\t\t\tdependencies: transaction.dependencies,\n\t\t\t\t\t\t\tpackage: transaction.packageId,\n\t\t\t\t\t\t\tticket: parseV1TransactionArgument(transaction.ticket),\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new Error(`Unknown transaction ${Object.keys(transaction)}`);\n\t\t}),\n\t} satisfies InferInput<typeof TransactionData>);\n}\n\nfunction parseV1TransactionArgument(\n\targ: InferOutput<typeof TransactionArgument>,\n): InferInput<typeof Argument> {\n\tswitch (arg.kind) {\n\t\tcase 'GasCoin': {\n\t\t\treturn { GasCoin: true };\n\t\t}\n\t\tcase 'Result':\n\t\t\treturn { Result: arg.index };\n\t\tcase 'NestedResult': {\n\t\t\treturn { NestedResult: [arg.index, arg.resultIndex] };\n\t\t}\n\t\tcase 'Input': {\n\t\t\treturn { Input: arg.index };\n\t\t}\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumInputShape } from '@mysten/bcs';\nimport type { GenericSchema, InferInput, InferOutput } from 'valibot';\nimport {\n\tarray,\n\tboolean,\n\tinteger,\n\tliteral,\n\tnullable,\n\tnullish,\n\tnumber,\n\tobject,\n\toptional,\n\tpipe,\n\trecord,\n\tstring,\n\ttuple,\n\tunion,\n\tunknown,\n} from 'valibot';\n\nimport { BCSBytes, JsonU64, ObjectID, ObjectRef, SuiAddress } from './internal.js';\n\ntype Merge<T> = T extends object ? { [K in keyof T]: T[K] } : never;\n\nfunction enumUnion<T extends Record<string, GenericSchema<any>>>(options: T) {\n\treturn union(\n\t\tObject.entries(options).map(([key, value]) => object({ [key]: value })),\n\t) as GenericSchema<\n\t\tEnumInputShape<\n\t\t\tMerge<{\n\t\t\t\t[K in keyof T]: InferInput<T[K]>;\n\t\t\t}>\n\t\t>\n\t>;\n}\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L690-L702\nconst Argument = enumUnion({\n\tGasCoin: literal(true),\n\tInput: pipe(number(), integer()),\n\tResult: pipe(number(), integer()),\n\tNestedResult: tuple([pipe(number(), integer()), pipe(number(), integer())]),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L1387-L1392\nconst GasData = object({\n\tbudget: nullable(JsonU64),\n\tprice: nullable(JsonU64),\n\towner: nullable(SuiAddress),\n\tpayment: nullable(array(ObjectRef)),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L707-L718\nconst ProgrammableMoveCall = object({\n\tpackage: ObjectID,\n\tmodule: string(),\n\tfunction: string(),\n\t// snake case in rust\n\ttypeArguments: array(string()),\n\targuments: array(Argument),\n});\n\nconst $Intent = object({\n\tname: string(),\n\tinputs: record(string(), union([Argument, array(Argument)])),\n\tdata: record(string(), unknown()),\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L657-L685\nconst Command = enumUnion({\n\tMoveCall: ProgrammableMoveCall,\n\tTransferObjects: object({\n\t\tobjects: array(Argument),\n\t\taddress: Argument,\n\t}),\n\tSplitCoins: object({\n\t\tcoin: Argument,\n\t\tamounts: array(Argument),\n\t}),\n\tMergeCoins: object({\n\t\tdestination: Argument,\n\t\tsources: array(Argument),\n\t}),\n\tPublish: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t}),\n\tMakeMoveVec: object({\n\t\ttype: nullable(string()),\n\t\telements: array(Argument),\n\t}),\n\tUpgrade: object({\n\t\tmodules: array(BCSBytes),\n\t\tdependencies: array(ObjectID),\n\t\tpackage: ObjectID,\n\t\tticket: Argument,\n\t}),\n\t$Intent,\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L102-L114\nconst ObjectArg = enumUnion({\n\tImmOrOwnedObject: ObjectRef,\n\tSharedObject: object({\n\t\tobjectId: ObjectID,\n\t\t// snake case in rust\n\t\tinitialSharedVersion: JsonU64,\n\t\tmutable: boolean(),\n\t}),\n\tReceiving: ObjectRef,\n});\n\n// https://github.com/MystenLabs/sui/blob/df41d5fa8127634ff4285671a01ead00e519f806/crates/sui-types/src/transaction.rs#L75-L80\nconst CallArg = enumUnion({\n\tObject: ObjectArg,\n\tPure: object({\n\t\tbytes: BCSBytes,\n\t}),\n\tUnresolvedPure: object({\n\t\tvalue: unknown(),\n\t}),\n\tUnresolvedObject: object({\n\t\tobjectId: ObjectID,\n\t\tversion: optional(nullable(JsonU64)),\n\t\tdigest: optional(nullable(string())),\n\t\tinitialSharedVersion: optional(nullable(JsonU64)),\n\t}),\n});\n\nconst TransactionExpiration = enumUnion({\n\tNone: literal(true),\n\tEpoch: JsonU64,\n});\n\nexport const SerializedTransactionDataV2 = object({\n\tversion: literal(2),\n\tsender: nullish(SuiAddress),\n\texpiration: nullish(TransactionExpiration),\n\tgasData: GasData,\n\tinputs: array(CallArg),\n\tcommands: array(Command),\n});\n\nexport type SerializedTransactionDataV2 = InferOutput<typeof SerializedTransactionDataV2>;\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { parse } from 'valibot';\n\nimport type { BcsType } from '../bcs/index.js';\nimport { bcs } from '../bcs/index.js';\nimport type { SuiClient } from '../client/client.js';\nimport { normalizeSuiAddress, normalizeSuiObjectId, SUI_TYPE_ARG } from '../utils/index.js';\nimport { ObjectRef } from './data/internal.js';\nimport type { Argument, CallArg, Command, OpenMoveTypeSignature } from './data/internal.js';\nimport { Inputs } from './Inputs.js';\nimport { getPureBcsSchema, isTxContext, normalizedTypeToMoveTypeSignature } from './serializer.js';\nimport type { TransactionDataBuilder } from './TransactionData.js';\n\n// The maximum objects that can be fetched at once using multiGetObjects.\nconst MAX_OBJECTS_PER_FETCH = 50;\n\n// An amount of gas (in gas units) that is added to transactions as an overhead to ensure transactions do not fail.\nconst GAS_SAFE_OVERHEAD = 1000n;\nconst MAX_GAS = 50_000_000_000;\n\nexport interface BuildTransactionOptions {\n\tclient?: SuiClient;\n\tonlyTransactionKind?: boolean;\n}\n\nexport interface SerializeTransactionOptions extends BuildTransactionOptions {\n\tsupportedIntents?: string[];\n}\n\nexport type TransactionPlugin = (\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n\tnext: () => Promise<void>,\n) => Promise<void>;\n\nexport async function resolveTransactionData(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n\tnext: () => Promise<void>,\n) {\n\tawait normalizeInputs(transactionData, options);\n\tawait resolveObjectReferences(transactionData, options);\n\n\tif (!options.onlyTransactionKind) {\n\t\tawait setGasPrice(transactionData, options);\n\t\tawait setGasBudget(transactionData, options);\n\t\tawait setGasPayment(transactionData, options);\n\t}\n\tawait validate(transactionData);\n\treturn await next();\n}\n\nasync function setGasPrice(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\tif (!transactionData.gasConfig.price) {\n\t\ttransactionData.gasConfig.price = String(await getClient(options).getReferenceGasPrice());\n\t}\n}\n\nasync function setGasBudget(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\tif (transactionData.gasConfig.budget) {\n\t\treturn;\n\t}\n\n\tconst dryRunResult = await getClient(options).dryRunTransactionBlock({\n\t\ttransactionBlock: transactionData.build({\n\t\t\toverrides: {\n\t\t\t\tgasData: {\n\t\t\t\t\tbudget: String(MAX_GAS),\n\t\t\t\t\tpayment: [],\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t});\n\n\tif (dryRunResult.effects.status.status !== 'success') {\n\t\tthrow new Error(\n\t\t\t`Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,\n\t\t\t{ cause: dryRunResult },\n\t\t);\n\t}\n\n\tconst safeOverhead = GAS_SAFE_OVERHEAD * BigInt(transactionData.gasConfig.price || 1n);\n\n\tconst baseComputationCostWithOverhead =\n\t\tBigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;\n\n\tconst gasBudget =\n\t\tbaseComputationCostWithOverhead +\n\t\tBigInt(dryRunResult.effects.gasUsed.storageCost) -\n\t\tBigInt(dryRunResult.effects.gasUsed.storageRebate);\n\n\ttransactionData.gasConfig.budget = String(\n\t\tgasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead,\n\t);\n}\n\n// The current default is just picking _all_ coins we can which may not be ideal.\nasync function setGasPayment(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\tif (!transactionData.gasConfig.payment) {\n\t\tconst coins = await getClient(options).getCoins({\n\t\t\towner: transactionData.gasConfig.owner || transactionData.sender!,\n\t\t\tcoinType: SUI_TYPE_ARG,\n\t\t});\n\n\t\tconst paymentCoins = coins.data\n\t\t\t// Filter out coins that are also used as input:\n\t\t\t.filter((coin) => {\n\t\t\t\tconst matchingInput = transactionData.inputs.find((input) => {\n\t\t\t\t\tif (input.Object?.ImmOrOwnedObject) {\n\t\t\t\t\t\treturn coin.coinObjectId === input.Object.ImmOrOwnedObject.objectId;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\treturn !matchingInput;\n\t\t\t})\n\t\t\t.map((coin) => ({\n\t\t\t\tobjectId: coin.coinObjectId,\n\t\t\t\tdigest: coin.digest,\n\t\t\t\tversion: coin.version,\n\t\t\t}));\n\n\t\tif (!paymentCoins.length) {\n\t\t\tthrow new Error('No valid gas coins found for the transaction.');\n\t\t}\n\n\t\ttransactionData.gasConfig.payment = paymentCoins.map((payment) => parse(ObjectRef, payment));\n\t}\n}\n\nasync function resolveObjectReferences(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\t// Keep track of the object references that will need to be resolved at the end of the transaction.\n\t// We keep the input by-reference to avoid needing to re-resolve it:\n\tconst objectsToResolve = transactionData.inputs.filter((input) => {\n\t\treturn (\n\t\t\tinput.UnresolvedObject &&\n\t\t\t!(input.UnresolvedObject.version || input.UnresolvedObject?.initialSharedVersion)\n\t\t);\n\t}) as Extract<CallArg, { UnresolvedObject: unknown }>[];\n\n\tconst dedupedIds = [\n\t\t...new Set(\n\t\t\tobjectsToResolve.map((input) => normalizeSuiObjectId(input.UnresolvedObject.objectId)),\n\t\t),\n\t];\n\n\tconst objectChunks = dedupedIds.length ? chunk(dedupedIds, MAX_OBJECTS_PER_FETCH) : [];\n\tconst resolved = (\n\t\tawait Promise.all(\n\t\t\tobjectChunks.map((chunk) =>\n\t\t\t\tgetClient(options).multiGetObjects({\n\t\t\t\t\tids: chunk,\n\t\t\t\t\toptions: { showOwner: true },\n\t\t\t\t}),\n\t\t\t),\n\t\t)\n\t).flat();\n\n\tconst responsesById = new Map(\n\t\tdedupedIds.map((id, index) => {\n\t\t\treturn [id, resolved[index]];\n\t\t}),\n\t);\n\n\tconst invalidObjects = Array.from(responsesById)\n\t\t.filter(([_, obj]) => obj.error)\n\t\t.map(([_, obj]) => JSON.stringify(obj.error));\n\n\tif (invalidObjects.length) {\n\t\tthrow new Error(`The following input objects are invalid: ${invalidObjects.join(', ')}`);\n\t}\n\n\tconst objects = resolved.map((object) => {\n\t\tif (object.error || !object.data) {\n\t\t\tthrow new Error(`Failed to fetch object: ${object.error}`);\n\t\t}\n\t\tconst owner = object.data.owner;\n\t\tconst initialSharedVersion =\n\t\t\towner && typeof owner === 'object' && 'Shared' in owner\n\t\t\t\t? owner.Shared.initial_shared_version\n\t\t\t\t: null;\n\n\t\treturn {\n\t\t\tobjectId: object.data.objectId,\n\t\t\tdigest: object.data.digest,\n\t\t\tversion: object.data.version,\n\t\t\tinitialSharedVersion,\n\t\t};\n\t});\n\n\tconst objectsById = new Map(\n\t\tdedupedIds.map((id, index) => {\n\t\t\treturn [id, objects[index]];\n\t\t}),\n\t);\n\n\tfor (const [index, input] of transactionData.inputs.entries()) {\n\t\tif (!input.UnresolvedObject) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet updated: CallArg | undefined;\n\t\tconst id = normalizeSuiAddress(input.UnresolvedObject.objectId);\n\t\tconst object = objectsById.get(id);\n\n\t\tif (input.UnresolvedObject.initialSharedVersion ?? object?.initialSharedVersion) {\n\t\t\tupdated = Inputs.SharedObjectRef({\n\t\t\t\tobjectId: id,\n\t\t\t\tinitialSharedVersion:\n\t\t\t\t\tinput.UnresolvedObject.initialSharedVersion || object?.initialSharedVersion!,\n\t\t\t\tmutable: isUsedAsMutable(transactionData, index),\n\t\t\t});\n\t\t} else if (isUsedAsReceiving(transactionData, index)) {\n\t\t\tupdated = Inputs.ReceivingRef(\n\t\t\t\t{\n\t\t\t\t\tobjectId: id,\n\t\t\t\t\tdigest: input.UnresolvedObject.digest ?? object?.digest!,\n\t\t\t\t\tversion: input.UnresolvedObject.version ?? object?.version!,\n\t\t\t\t}!,\n\t\t\t);\n\t\t}\n\n\t\ttransactionData.inputs[transactionData.inputs.indexOf(input)] =\n\t\t\tupdated ??\n\t\t\tInputs.ObjectRef({\n\t\t\t\tobjectId: id,\n\t\t\t\tdigest: input.UnresolvedObject.digest ?? object?.digest!,\n\t\t\t\tversion: input.UnresolvedObject.version ?? object?.version!,\n\t\t\t});\n\t}\n}\n\nasync function normalizeInputs(\n\ttransactionData: TransactionDataBuilder,\n\toptions: BuildTransactionOptions,\n) {\n\tconst { inputs, commands } = transactionData;\n\tconst moveCallsToResolve: Extract<Command, { MoveCall: unknown }>['MoveCall'][] = [];\n\tconst moveFunctionsToResolve = new Set<string>();\n\n\tcommands.forEach((command) => {\n\t\t// Special case move call:\n\t\tif (command.MoveCall) {\n\t\t\t// Determine if any of the arguments require encoding.\n\t\t\t// - If they don't, then this is good to go.\n\t\t\t// - If they do, then we need to fetch the normalized move module.\n\n\t\t\t// If we already know the argument types, we don't need to resolve them again\n\t\t\tif (command.MoveCall._argumentTypes) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst inputs = command.MoveCall.arguments.map((arg) => {\n\t\t\t\tif (arg.$kind === 'Input') {\n\t\t\t\t\treturn transactionData.inputs[arg.Input];\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t});\n\t\t\tconst needsResolution = inputs.some(\n\t\t\t\t(input) => input?.UnresolvedPure || input?.UnresolvedObject,\n\t\t\t);\n\n\t\t\tif (needsResolution) {\n\t\t\t\tconst functionName = `${command.MoveCall.package}::${command.MoveCall.module}::${command.MoveCall.function}`;\n\t\t\t\tmoveFunctionsToResolve.add(functionName);\n\t\t\t\tmoveCallsToResolve.push(command.MoveCall);\n\t\t\t}\n\t\t}\n\n\t\t// Special handling for values that where previously encoded using the wellKnownEncoding pattern.\n\t\t// This should only happen when transaction data was hydrated from an old version of the SDK\n\t\tswitch (command.$kind) {\n\t\t\tcase 'SplitCoins':\n\t\t\t\tcommand.SplitCoins.amounts.forEach((amount) => {\n\t\t\t\t\tnormalizeRawArgument(amount, bcs.U64, transactionData);\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'TransferObjects':\n\t\t\t\tnormalizeRawArgument(command.TransferObjects.address, bcs.Address, transactionData);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tconst moveFunctionParameters = new Map<string, OpenMoveTypeSignature[]>();\n\tif (moveFunctionsToResolve.size > 0) {\n\t\tconst client = getClient(options);\n\t\tawait Promise.all(\n\t\t\t[...moveFunctionsToResolve].map(async (functionName) => {\n\t\t\t\tconst [packageId, moduleId, functionId] = functionName.split('::');\n\t\t\t\tconst def = await client.getNormalizedMoveFunction({\n\t\t\t\t\tpackage: packageId,\n\t\t\t\t\tmodule: moduleId,\n\t\t\t\t\tfunction: functionId,\n\t\t\t\t});\n\n\t\t\t\tmoveFunctionParameters.set(\n\t\t\t\t\tfunctionName,\n\t\t\t\t\tdef.parameters.map((param) => normalizedTypeToMoveTypeSignature(param)),\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tif (moveCallsToResolve.length) {\n\t\tawait Promise.all(\n\t\t\tmoveCallsToResolve.map(async (moveCall) => {\n\t\t\t\tconst parameters = moveFunctionParameters.get(\n\t\t\t\t\t`${moveCall.package}::${moveCall.module}::${moveCall.function}`,\n\t\t\t\t);\n\n\t\t\t\tif (!parameters) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Entry functions can have a mutable reference to an instance of the TxContext\n\t\t\t\t// struct defined in the TxContext module as the last parameter. The caller of\n\t\t\t\t// the function does not need to pass it in as an argument.\n\t\t\t\tconst hasTxContext = parameters.length > 0 && isTxContext(parameters.at(-1)!);\n\t\t\t\tconst params = hasTxContext ? parameters.slice(0, parameters.length - 1) : parameters;\n\n\t\t\t\tmoveCall._argumentTypes = params;\n\t\t\t}),\n\t\t);\n\t}\n\n\tcommands.forEach((command) => {\n\t\tif (!command.MoveCall) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst moveCall = command.MoveCall;\n\t\tconst fnName = `${moveCall.package}::${moveCall.module}::${moveCall.function}`;\n\t\tconst params = moveCall._argumentTypes;\n\n\t\tif (!params) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (params.length !== command.MoveCall.arguments.length) {\n\t\t\tthrow new Error(`Incorrect number of arguments for ${fnName}`);\n\t\t}\n\n\t\tparams.forEach((param, i) => {\n\t\t\tconst arg = moveCall.arguments[i];\n\t\t\tif (arg.$kind !== 'Input') return;\n\t\t\tconst input = inputs[arg.Input];\n\n\t\t\t// Skip if the input is already resolved\n\t\t\tif (!input.UnresolvedPure && !input.UnresolvedObject) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst inputValue = input.UnresolvedPure?.value ?? input.UnresolvedObject?.objectId!;\n\n\t\t\tconst schema = getPureBcsSchema(param.body);\n\t\t\tif (schema) {\n\t\t\t\targ.type = 'pure';\n\t\t\t\tinputs[inputs.indexOf(input)] = Inputs.Pure(schema.serialize(inputValue));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof inputValue !== 'string') {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Expect the argument to be an object id string, got ${JSON.stringify(\n\t\t\t\t\t\tinputValue,\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t2,\n\t\t\t\t\t)}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\targ.type = 'object';\n\t\t\tconst unresolvedObject: typeof input = input.UnresolvedPure\n\t\t\t\t? {\n\t\t\t\t\t\t$kind: 'UnresolvedObject',\n\t\t\t\t\t\tUnresolvedObject: {\n\t\t\t\t\t\t\tobjectId: inputValue,\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t: input;\n\n\t\t\tinputs[arg.Input] = unresolvedObject;\n\t\t});\n\t});\n}\n\nfunction validate(transactionData: TransactionDataBuilder) {\n\ttransactionData.inputs.forEach((input, index) => {\n\t\tif (input.$kind !== 'Object' && input.$kind !== 'Pure') {\n\t\t\tthrow new Error(\n\t\t\t\t`Input at index ${index} has not been resolved.  Expected a Pure or Object input, but found ${JSON.stringify(\n\t\t\t\t\tinput,\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\t});\n}\n\nfunction normalizeRawArgument(\n\targ: Argument,\n\tschema: BcsType<any>,\n\ttransactionData: TransactionDataBuilder,\n) {\n\tif (arg.$kind !== 'Input') {\n\t\treturn;\n\t}\n\tconst input = transactionData.inputs[arg.Input];\n\n\tif (input.$kind !== 'UnresolvedPure') {\n\t\treturn;\n\t}\n\n\ttransactionData.inputs[arg.Input] = Inputs.Pure(schema.serialize(input.UnresolvedPure.value));\n}\n\nfunction isUsedAsMutable(transactionData: TransactionDataBuilder, index: number) {\n\tlet usedAsMutable = false;\n\n\ttransactionData.getInputUses(index, (arg, tx) => {\n\t\tif (tx.MoveCall && tx.MoveCall._argumentTypes) {\n\t\t\tconst argIndex = tx.MoveCall.arguments.indexOf(arg);\n\t\t\tusedAsMutable = tx.MoveCall._argumentTypes[argIndex].ref !== '&' || usedAsMutable;\n\t\t}\n\n\t\tif (tx.$kind === 'MakeMoveVec' || tx.$kind === 'MergeCoins' || tx.$kind === 'SplitCoins') {\n\t\t\tusedAsMutable = true;\n\t\t}\n\t});\n\n\treturn usedAsMutable;\n}\n\nfunction isUsedAsReceiving(transactionData: TransactionDataBuilder, index: number) {\n\tlet usedAsReceiving = false;\n\n\ttransactionData.getInputUses(index, (arg, tx) => {\n\t\tif (tx.MoveCall && tx.MoveCall._argumentTypes) {\n\t\t\tconst argIndex = tx.MoveCall.arguments.indexOf(arg);\n\t\t\tusedAsReceiving = isReceivingType(tx.MoveCall._argumentTypes[argIndex]) || usedAsReceiving;\n\t\t}\n\t});\n\n\treturn usedAsReceiving;\n}\n\nfunction isReceivingType(type: OpenMoveTypeSignature): boolean {\n\tif (typeof type.body !== 'object' || !('datatype' in type.body)) {\n\t\treturn false;\n\t}\n\n\treturn (\n\t\ttype.body.datatype.package === '0x2' &&\n\t\ttype.body.datatype.module === 'transfer' &&\n\t\ttype.body.datatype.type === 'Receiving'\n\t);\n}\n\nexport function getClient(options: BuildTransactionOptions): SuiClient {\n\tif (!options.client) {\n\t\tthrow new Error(\n\t\t\t`No sui client passed to Transaction#build, but transaction data was not sufficient to build offline.`,\n\t\t);\n\t}\n\n\treturn options.client;\n}\n\nfunction chunk<T>(arr: T[], size: number): T[][] {\n\treturn Array.from({ length: Math.ceil(arr.length / size) }, (_, i) =>\n\t\tarr.slice(i * size, i * size + size),\n\t);\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Transaction, TransactionObjectInput } from './Transaction.js';\n\nexport function createObjectMethods<T>(makeObject: (value: TransactionObjectInput) => T) {\n\tfunction object(value: TransactionObjectInput) {\n\t\treturn makeObject(value);\n\t}\n\n\tobject.system = () => object('0x5');\n\tobject.clock = () => object('0x6');\n\tobject.random = () => object('0x8');\n\tobject.denyList = () => object('0x403');\n\tobject.option =\n\t\t({ type, value }: { type: string; value: TransactionObjectInput | null }) =>\n\t\t(tx: Transaction) =>\n\t\t\ttx.moveCall({\n\t\t\t\ttypeArguments: [type],\n\t\t\t\ttarget: `0x1::option::${value === null ? 'none' : 'some'}`,\n\t\t\t\targuments: value === null ? [] : [tx.object(value)],\n\t\t\t});\n\n\treturn object;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isSerializedBcs } from '@mysten/bcs';\nimport type { BcsType, SerializedBcs } from '@mysten/bcs';\n\nimport { bcs } from '../bcs/index.js';\nimport type { Argument } from './data/internal.js';\n\nexport function createPure<T>(makePure: (value: SerializedBcs<any, any> | Uint8Array) => T) {\n\tfunction pure<T extends PureTypeName>(\n\t\ttype: T extends PureTypeName ? ValidPureTypeName<T> : T,\n\t\tvalue: ShapeFromPureTypeName<T>,\n\t): T;\n\n\tfunction pure(\n\t\t/**\n\t\t * The pure value, serialized to BCS. If this is a Uint8Array, then the value\n\t\t * is assumed to be raw bytes, and will be used directly.\n\t\t */\n\t\tvalue: SerializedBcs<any, any> | Uint8Array,\n\t): T;\n\n\tfunction pure(\n\t\ttypeOrSerializedValue?: PureTypeName | SerializedBcs<any, any> | Uint8Array,\n\t\tvalue?: unknown,\n\t): T {\n\t\tif (typeof typeOrSerializedValue === 'string') {\n\t\t\treturn makePure(schemaFromName(typeOrSerializedValue).serialize(value as never));\n\t\t}\n\n\t\tif (typeOrSerializedValue instanceof Uint8Array || isSerializedBcs(typeOrSerializedValue)) {\n\t\t\treturn makePure(typeOrSerializedValue);\n\t\t}\n\n\t\tthrow new Error('tx.pure must be called either a bcs type name, or a serialized bcs value');\n\t}\n\n\tpure.u8 = (value: number) => makePure(bcs.U8.serialize(value));\n\tpure.u16 = (value: number) => makePure(bcs.U16.serialize(value));\n\tpure.u32 = (value: number) => makePure(bcs.U32.serialize(value));\n\tpure.u64 = (value: bigint | number | string) => makePure(bcs.U64.serialize(value));\n\tpure.u128 = (value: bigint | number | string) => makePure(bcs.U128.serialize(value));\n\tpure.u256 = (value: bigint | number | string) => makePure(bcs.U256.serialize(value));\n\tpure.bool = (value: boolean) => makePure(bcs.Bool.serialize(value));\n\tpure.string = (value: string) => makePure(bcs.String.serialize(value));\n\tpure.address = (value: string) => makePure(bcs.Address.serialize(value));\n\tpure.id = pure.address;\n\tpure.vector = <Type extends PureTypeName>(\n\t\ttype: T extends PureTypeName ? ValidPureTypeName<Type> : Type,\n\t\tvalue: Iterable<ShapeFromPureTypeName<Type>> & { length: number },\n\t) => {\n\t\treturn makePure(bcs.vector(schemaFromName(type as BasePureType)).serialize(value as never));\n\t};\n\tpure.option = <Type extends PureTypeName>(\n\t\ttype: T extends PureTypeName ? ValidPureTypeName<Type> : Type,\n\t\tvalue: ShapeFromPureTypeName<Type> | null | undefined,\n\t) => {\n\t\treturn makePure(bcs.option(schemaFromName(type)).serialize(value as never));\n\t};\n\n\treturn pure;\n}\n\nexport type BasePureType =\n\t| 'u8'\n\t| 'u16'\n\t| 'u32'\n\t| 'u64'\n\t| 'u128'\n\t| 'u256'\n\t| 'bool'\n\t| 'id'\n\t| 'string'\n\t| 'address';\n\nexport type PureTypeName = BasePureType | `vector<${string}>` | `option<${string}>`;\nexport type ValidPureTypeName<T extends string> = T extends BasePureType\n\t? PureTypeName\n\t: T extends `vector<${infer U}>`\n\t\t? ValidPureTypeName<U>\n\t\t: T extends `option<${infer U}>`\n\t\t\t? ValidPureTypeName<U>\n\t\t\t: PureTypeValidationError<T>;\n\ntype ShapeFromPureTypeName<T extends PureTypeName> = T extends BasePureType\n\t? Parameters<ReturnType<typeof createPure<Argument>>[T]>[0]\n\t: T extends `vector<${infer U extends PureTypeName}>`\n\t\t? ShapeFromPureTypeName<U>[]\n\t\t: T extends `option<${infer U extends PureTypeName}>`\n\t\t\t? ShapeFromPureTypeName<U> | null\n\t\t\t: never;\n\ntype PureTypeValidationError<T extends string> = T & {\n\terror: `Invalid Pure type name: ${T}`;\n};\n\nfunction schemaFromName<T extends PureTypeName>(\n\tname: T extends PureTypeName ? ValidPureTypeName<T> : T,\n): BcsType<ShapeFromPureTypeName<T>> {\n\tswitch (name) {\n\t\tcase 'u8':\n\t\t\treturn bcs.u8() as never;\n\t\tcase 'u16':\n\t\t\treturn bcs.u16() as never;\n\t\tcase 'u32':\n\t\t\treturn bcs.u32() as never;\n\t\tcase 'u64':\n\t\t\treturn bcs.u64() as never;\n\t\tcase 'u128':\n\t\t\treturn bcs.u128() as never;\n\t\tcase 'u256':\n\t\t\treturn bcs.u256() as never;\n\t\tcase 'bool':\n\t\t\treturn bcs.bool() as never;\n\t\tcase 'string':\n\t\t\treturn bcs.string() as never;\n\t\tcase 'id':\n\t\tcase 'address':\n\t\t\treturn bcs.Address as never;\n\t}\n\n\tconst generic = name.match(/^(vector|option)<(.+)>$/);\n\tif (generic) {\n\t\tconst [kind, inner] = generic.slice(1);\n\t\tif (kind === 'vector') {\n\t\t\treturn bcs.vector(schemaFromName(inner as PureTypeName)) as never;\n\t\t} else {\n\t\t\treturn bcs.option(schemaFromName(inner as PureTypeName)) as never;\n\t\t}\n\t}\n\n\tthrow new Error(`Invalid Pure type name: ${name}`);\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toBase58 } from '@mysten/bcs';\nimport type { InferInput } from 'valibot';\nimport { parse } from 'valibot';\n\nimport { bcs } from '../bcs/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type {\n\tArgument,\n\tCallArg,\n\tCommand,\n\tGasData,\n\tTransactionExpiration,\n} from './data/internal.js';\nimport { TransactionData } from './data/internal.js';\nimport { transactionDataFromV1 } from './data/v1.js';\nimport type { SerializedTransactionDataV1 } from './data/v1.js';\nimport type { SerializedTransactionDataV2 } from './data/v2.js';\nimport { hashTypedData } from './hash.js';\n\nfunction prepareSuiAddress(address: string) {\n\treturn normalizeSuiAddress(address).replace('0x', '');\n}\n\nexport class TransactionDataBuilder implements TransactionData {\n\tstatic fromKindBytes(bytes: Uint8Array) {\n\t\tconst kind = bcs.TransactionKind.parse(bytes);\n\n\t\tconst programmableTx = kind.ProgrammableTransaction;\n\t\tif (!programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\treturn TransactionDataBuilder.restore({\n\t\t\tversion: 2,\n\t\t\tsender: null,\n\t\t\texpiration: null,\n\t\t\tgasData: {\n\t\t\t\tbudget: null,\n\t\t\t\towner: null,\n\t\t\t\tpayment: null,\n\t\t\t\tprice: null,\n\t\t\t},\n\t\t\tinputs: programmableTx.inputs,\n\t\t\tcommands: programmableTx.commands,\n\t\t});\n\t}\n\n\tstatic fromBytes(bytes: Uint8Array) {\n\t\tconst rawData = bcs.TransactionData.parse(bytes);\n\t\tconst data = rawData?.V1;\n\t\tconst programmableTx = data.kind.ProgrammableTransaction;\n\n\t\tif (!data || !programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\treturn TransactionDataBuilder.restore({\n\t\t\tversion: 2,\n\t\t\tsender: data.sender,\n\t\t\texpiration: data.expiration,\n\t\t\tgasData: data.gasData,\n\t\t\tinputs: programmableTx.inputs,\n\t\t\tcommands: programmableTx.commands,\n\t\t});\n\t}\n\n\tstatic restore(\n\t\tdata:\n\t\t\t| InferInput<typeof SerializedTransactionDataV2>\n\t\t\t| InferInput<typeof SerializedTransactionDataV1>,\n\t) {\n\t\tif (data.version === 2) {\n\t\t\treturn new TransactionDataBuilder(parse(TransactionData, data));\n\t\t} else {\n\t\t\treturn new TransactionDataBuilder(parse(TransactionData, transactionDataFromV1(data)));\n\t\t}\n\t}\n\n\t/**\n\t * Generate transaction digest.\n\t *\n\t * @param bytes BCS serialized transaction data\n\t * @returns transaction digest.\n\t */\n\tstatic getDigestFromBytes(bytes: Uint8Array) {\n\t\tconst hash = hashTypedData('TransactionData', bytes);\n\t\treturn toBase58(hash);\n\t}\n\n\t// @deprecated use gasData instead\n\tget gasConfig() {\n\t\treturn this.gasData;\n\t}\n\t// @deprecated use gasData instead\n\tset gasConfig(value) {\n\t\tthis.gasData = value;\n\t}\n\n\tversion = 2 as const;\n\tsender: string | null;\n\texpiration: TransactionExpiration | null;\n\tgasData: GasData;\n\tinputs: CallArg[];\n\tcommands: Command[];\n\n\tconstructor(clone?: TransactionData) {\n\t\tthis.sender = clone?.sender ?? null;\n\t\tthis.expiration = clone?.expiration ?? null;\n\t\tthis.inputs = clone?.inputs ?? [];\n\t\tthis.commands = clone?.commands ?? [];\n\t\tthis.gasData = clone?.gasData ?? {\n\t\t\tbudget: null,\n\t\t\tprice: null,\n\t\t\towner: null,\n\t\t\tpayment: null,\n\t\t};\n\t}\n\n\tbuild({\n\t\tmaxSizeBytes = Infinity,\n\t\toverrides,\n\t\tonlyTransactionKind,\n\t}: {\n\t\tmaxSizeBytes?: number;\n\t\toverrides?: {\n\t\t\texpiration?: TransactionExpiration;\n\t\t\tsender?: string;\n\t\t\t// @deprecated use gasData instead\n\t\t\tgasConfig?: Partial<GasData>;\n\t\t\tgasData?: Partial<GasData>;\n\t\t};\n\t\tonlyTransactionKind?: boolean;\n\t} = {}) {\n\t\t// TODO validate that inputs and intents are actually resolved\n\t\tconst inputs = this.inputs as (typeof bcs.CallArg.$inferInput)[];\n\t\tconst commands = this.commands as Extract<\n\t\t\tCommand<Exclude<Argument, { IntentResult: unknown } | { NestedIntentResult: unknown }>>,\n\t\t\t{ Upgrade: unknown }\n\t\t>[];\n\n\t\tconst kind = {\n\t\t\tProgrammableTransaction: {\n\t\t\t\tinputs,\n\t\t\t\tcommands,\n\t\t\t},\n\t\t};\n\n\t\tif (onlyTransactionKind) {\n\t\t\treturn bcs.TransactionKind.serialize(kind, { maxSize: maxSizeBytes }).toBytes();\n\t\t}\n\n\t\tconst expiration = overrides?.expiration ?? this.expiration;\n\t\tconst sender = overrides?.sender ?? this.sender;\n\t\tconst gasData = { ...this.gasData, ...overrides?.gasConfig, ...overrides?.gasData };\n\n\t\tif (!sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tif (!gasData.budget) {\n\t\t\tthrow new Error('Missing gas budget');\n\t\t}\n\n\t\tif (!gasData.payment) {\n\t\t\tthrow new Error('Missing gas payment');\n\t\t}\n\n\t\tif (!gasData.price) {\n\t\t\tthrow new Error('Missing gas price');\n\t\t}\n\n\t\tconst transactionData = {\n\t\t\tsender: prepareSuiAddress(sender),\n\t\t\texpiration: expiration ? expiration : { None: true },\n\t\t\tgasData: {\n\t\t\t\tpayment: gasData.payment,\n\t\t\t\towner: prepareSuiAddress(this.gasData.owner ?? sender),\n\t\t\t\tprice: BigInt(gasData.price),\n\t\t\t\tbudget: BigInt(gasData.budget),\n\t\t\t},\n\t\t\tkind: {\n\t\t\t\tProgrammableTransaction: {\n\t\t\t\t\tinputs,\n\t\t\t\t\tcommands,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn bcs.TransactionData.serialize(\n\t\t\t{ V1: transactionData },\n\t\t\t{ maxSize: maxSizeBytes },\n\t\t).toBytes();\n\t}\n\n\taddInput<T extends 'object' | 'pure'>(type: T, arg: CallArg) {\n\t\tconst index = this.inputs.length;\n\t\tthis.inputs.push(arg);\n\t\treturn { Input: index, type, $kind: 'Input' as const };\n\t}\n\n\tgetInputUses(index: number, fn: (arg: Argument, command: Command) => void) {\n\t\tthis.mapArguments((arg, command) => {\n\t\t\tif (arg.$kind === 'Input' && arg.Input === index) {\n\t\t\t\tfn(arg, command);\n\t\t\t}\n\n\t\t\treturn arg;\n\t\t});\n\t}\n\n\tmapArguments(fn: (arg: Argument, command: Command) => Argument) {\n\t\tfor (const command of this.commands) {\n\t\t\tswitch (command.$kind) {\n\t\t\t\tcase 'MoveCall':\n\t\t\t\t\tcommand.MoveCall.arguments = command.MoveCall.arguments.map((arg) => fn(arg, command));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'TransferObjects':\n\t\t\t\t\tcommand.TransferObjects.objects = command.TransferObjects.objects.map((arg) =>\n\t\t\t\t\t\tfn(arg, command),\n\t\t\t\t\t);\n\t\t\t\t\tcommand.TransferObjects.address = fn(command.TransferObjects.address, command);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'SplitCoins':\n\t\t\t\t\tcommand.SplitCoins.coin = fn(command.SplitCoins.coin, command);\n\t\t\t\t\tcommand.SplitCoins.amounts = command.SplitCoins.amounts.map((arg) => fn(arg, command));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'MergeCoins':\n\t\t\t\t\tcommand.MergeCoins.destination = fn(command.MergeCoins.destination, command);\n\t\t\t\t\tcommand.MergeCoins.sources = command.MergeCoins.sources.map((arg) => fn(arg, command));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'MakeMoveVec':\n\t\t\t\t\tcommand.MakeMoveVec.elements = command.MakeMoveVec.elements.map((arg) =>\n\t\t\t\t\t\tfn(arg, command),\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Upgrade':\n\t\t\t\t\tcommand.Upgrade.ticket = fn(command.Upgrade.ticket, command);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '$Intent':\n\t\t\t\t\tconst inputs = command.$Intent.inputs;\n\t\t\t\t\tcommand.$Intent.inputs = {};\n\n\t\t\t\t\tfor (const [key, value] of Object.entries(inputs)) {\n\t\t\t\t\t\tcommand.$Intent.inputs[key] = Array.isArray(value)\n\t\t\t\t\t\t\t? value.map((arg) => fn(arg, command))\n\t\t\t\t\t\t\t: fn(value, command);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Publish':\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Unexpected transaction kind: ${(command as { $kind: unknown }).$kind}`);\n\t\t\t}\n\t\t}\n\t}\n\n\treplaceCommand(index: number, replacement: Command | Command[]) {\n\t\tif (!Array.isArray(replacement)) {\n\t\t\tthis.commands[index] = replacement;\n\t\t\treturn;\n\t\t}\n\n\t\tconst sizeDiff = replacement.length - 1;\n\t\tthis.commands.splice(index, 1, ...replacement);\n\n\t\tif (sizeDiff !== 0) {\n\t\t\tthis.mapArguments((arg) => {\n\t\t\t\tswitch (arg.$kind) {\n\t\t\t\t\tcase 'Result':\n\t\t\t\t\t\tif (arg.Result > index) {\n\t\t\t\t\t\t\targ.Result += sizeDiff;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'NestedResult':\n\t\t\t\t\t\tif (arg.NestedResult[0] > index) {\n\t\t\t\t\t\t\targ.NestedResult[0] += sizeDiff;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\treturn arg;\n\t\t\t});\n\t\t}\n\t}\n\n\tgetDigest() {\n\t\tconst bytes = this.build({ onlyTransactionKind: false });\n\t\treturn TransactionDataBuilder.getDigestFromBytes(bytes);\n\t}\n\n\tsnapshot(): TransactionData {\n\t\treturn parse(TransactionData, this);\n\t}\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\n\n/**\n * Generates a Blake2b hash of typed data as a base64 string.\n *\n * @param typeTag type tag (e.g. TransactionData, SenderSignedData)\n * @param data data to hash\n */\nexport function hashTypedData(typeTag: string, data: Uint8Array): Uint8Array {\n\tconst typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n\n\tconst dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n\tdataWithTag.set(typeTagBytes);\n\tdataWithTag.set(data, typeTagBytes.length);\n\n\treturn blake2b(dataWithTag, { dkLen: 32 });\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SuiMoveNormalizedType } from '../client/index.js';\nimport { normalizeSuiAddress } from '../utils/sui-types.js';\nimport type { CallArg } from './data/internal.js';\n\nexport function extractMutableReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'MutableReference' in normalizedType\n\t\t? normalizedType.MutableReference\n\t\t: undefined;\n}\n\nexport function extractReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'Reference' in normalizedType\n\t\t? normalizedType.Reference\n\t\t: undefined;\n}\n\nexport function extractStructTag(\n\tnormalizedType: SuiMoveNormalizedType,\n): Extract<SuiMoveNormalizedType, { Struct: unknown }> | undefined {\n\tif (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n\t\treturn normalizedType;\n\t}\n\n\tconst ref = extractReference(normalizedType);\n\tconst mutRef = extractMutableReference(normalizedType);\n\n\tif (typeof ref === 'object' && 'Struct' in ref) {\n\t\treturn ref;\n\t}\n\n\tif (typeof mutRef === 'object' && 'Struct' in mutRef) {\n\t\treturn mutRef;\n\t}\n\treturn undefined;\n}\n\nexport function getIdFromCallArg(arg: string | CallArg) {\n\tif (typeof arg === 'string') {\n\t\treturn normalizeSuiAddress(arg);\n\t}\n\n\tif (arg.Object) {\n\t\tif (arg.Object.ImmOrOwnedObject) {\n\t\t\treturn normalizeSuiAddress(arg.Object.ImmOrOwnedObject.objectId);\n\t\t}\n\n\t\tif (arg.Object.Receiving) {\n\t\t\treturn normalizeSuiAddress(arg.Object.Receiving.objectId);\n\t\t}\n\n\t\treturn normalizeSuiAddress(arg.Object.SharedObject.objectId);\n\t}\n\n\tif (arg.UnresolvedObject) {\n\t\treturn normalizeSuiAddress(arg.UnresolvedObject.objectId);\n\t}\n\n\treturn undefined;\n}\n", "// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { InferInput } from 'valibot';\nimport { bigint, object, parse, string } from 'valibot';\n\nimport { bcs } from '../../bcs/index.js';\nimport type { CoinStruct, SuiClient } from '../../client/index.js';\nimport { normalizeStructTag } from '../../utils/sui-types.js';\nimport { Commands } from '../Commands.js';\nimport type { Argument } from '../data/internal.js';\nimport { Inputs } from '../Inputs.js';\nimport type { BuildTransactionOptions } from '../json-rpc-resolver.js';\nimport { getClient } from '../json-rpc-resolver.js';\nimport type { Transaction } from '../Transaction.js';\nimport type { TransactionDataBuilder } from '../TransactionData.js';\n\nconst COIN_WITH_BALANCE = 'CoinWithBalance';\nconst SUI_TYPE = normalizeStructTag('0x2::sui::SUI');\n\nexport function coinWithBalance({\n\ttype = SUI_TYPE,\n\tbalance,\n\tuseGasCoin = true,\n}: {\n\tbalance: bigint | number;\n\ttype?: string;\n\tuseGasCoin?: boolean;\n}) {\n\treturn (tx: Transaction) => {\n\t\ttx.addIntentResolver(COIN_WITH_BALANCE, resolveCoinBalance);\n\t\tconst coinType = type === 'gas' ? type : normalizeStructTag(type);\n\n\t\treturn tx.add(\n\t\t\tCommands.Intent({\n\t\t\t\tname: COIN_WITH_BALANCE,\n\t\t\t\tinputs: {},\n\t\t\t\tdata: {\n\t\t\t\t\ttype: coinType === SUI_TYPE && useGasCoin ? 'gas' : coinType,\n\t\t\t\t\tbalance: BigInt(balance),\n\t\t\t\t} satisfies InferInput<typeof CoinWithBalanceData>,\n\t\t\t}),\n\t\t);\n\t};\n}\n\nconst CoinWithBalanceData = object({\n\ttype: string(),\n\tbalance: bigint(),\n});\n\nasync function resolveCoinBalance(\n\ttransactionData: TransactionDataBuilder,\n\tbuildOptions: BuildTransactionOptions,\n\tnext: () => Promise<void>,\n) {\n\tconst coinTypes = new Set<string>();\n\tconst totalByType = new Map<string, bigint>();\n\n\tif (!transactionData.sender) {\n\t\tthrow new Error('Sender must be set to resolve CoinWithBalance');\n\t}\n\n\tfor (const command of transactionData.commands) {\n\t\tif (command.$kind === '$Intent' && command.$Intent.name === COIN_WITH_BALANCE) {\n\t\t\tconst { type, balance } = parse(CoinWithBalanceData, command.$Intent.data);\n\n\t\t\tif (type !== 'gas' && balance > 0n) {\n\t\t\t\tcoinTypes.add(type);\n\t\t\t}\n\n\t\t\ttotalByType.set(type, (totalByType.get(type) ?? 0n) + balance);\n\t\t}\n\t}\n\tconst usedIds = new Set<string>();\n\n\tfor (const input of transactionData.inputs) {\n\t\tif (input.Object?.ImmOrOwnedObject) {\n\t\t\tusedIds.add(input.Object.ImmOrOwnedObject.objectId);\n\t\t}\n\t\tif (input.UnresolvedObject?.objectId) {\n\t\t\tusedIds.add(input.UnresolvedObject.objectId);\n\t\t}\n\t}\n\n\tconst coinsByType = new Map<string, CoinStruct[]>();\n\tconst client = getClient(buildOptions);\n\tawait Promise.all(\n\t\t[...coinTypes].map(async (coinType) => {\n\t\t\tcoinsByType.set(\n\t\t\t\tcoinType,\n\t\t\t\tawait getCoinsOfType({\n\t\t\t\t\tcoinType,\n\t\t\t\t\tbalance: totalByType.get(coinType)!,\n\t\t\t\t\tclient,\n\t\t\t\t\towner: transactionData.sender!,\n\t\t\t\t\tusedIds,\n\t\t\t\t}),\n\t\t\t);\n\t\t}),\n\t);\n\n\tconst mergedCoins = new Map<string, Argument>();\n\n\tmergedCoins.set('gas', { $kind: 'GasCoin', GasCoin: true });\n\n\tfor (const [index, transaction] of transactionData.commands.entries()) {\n\t\tif (transaction.$kind !== '$Intent' || transaction.$Intent.name !== COIN_WITH_BALANCE) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { type, balance } = transaction.$Intent.data as {\n\t\t\ttype: string;\n\t\t\tbalance: bigint;\n\t\t};\n\n\t\tif (balance === 0n) {\n\t\t\ttransactionData.replaceCommand(\n\t\t\t\tindex,\n\t\t\t\tCommands.MoveCall({ target: '0x2::coin::zero', typeArguments: [type] }),\n\t\t\t);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst commands = [];\n\n\t\tif (!mergedCoins.has(type)) {\n\t\t\tconst [first, ...rest] = coinsByType.get(type)!.map((coin) =>\n\t\t\t\ttransactionData.addInput(\n\t\t\t\t\t'object',\n\t\t\t\t\tInputs.ObjectRef({\n\t\t\t\t\t\tobjectId: coin.coinObjectId,\n\t\t\t\t\t\tdigest: coin.digest,\n\t\t\t\t\t\tversion: coin.version,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (rest.length > 0) {\n\t\t\t\tcommands.push(Commands.MergeCoins(first, rest));\n\t\t\t}\n\n\t\t\tmergedCoins.set(type, first);\n\t\t}\n\n\t\tcommands.push(\n\t\t\tCommands.SplitCoins(mergedCoins.get(type)!, [\n\t\t\t\ttransactionData.addInput('pure', Inputs.Pure(bcs.u64().serialize(balance))),\n\t\t\t]),\n\t\t);\n\n\t\ttransactionData.replaceCommand(index, commands);\n\n\t\ttransactionData.mapArguments((arg) => {\n\t\t\tif (arg.$kind === 'Result' && arg.Result === index) {\n\t\t\t\treturn {\n\t\t\t\t\t$kind: 'NestedResult',\n\t\t\t\t\tNestedResult: [index + commands.length - 1, 0],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn arg;\n\t\t});\n\t}\n\n\treturn next();\n}\n\nasync function getCoinsOfType({\n\tcoinType,\n\tbalance,\n\tclient,\n\towner,\n\tusedIds,\n}: {\n\tcoinType: string;\n\tbalance: bigint;\n\tclient: SuiClient;\n\towner: string;\n\tusedIds: Set<string>;\n}): Promise<CoinStruct[]> {\n\tlet remainingBalance = balance;\n\tconst coins: CoinStruct[] = [];\n\n\treturn loadMoreCoins();\n\n\tasync function loadMoreCoins(cursor: string | null = null): Promise<CoinStruct[]> {\n\t\tconst { data, hasNextPage, nextCursor } = await client.getCoins({ owner, coinType, cursor });\n\n\t\tconst sortedCoins = data.sort((a, b) => Number(BigInt(b.balance) - BigInt(a.balance)));\n\n\t\tfor (const coin of sortedCoins) {\n\t\t\tif (usedIds.has(coin.coinObjectId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst coinBalance = BigInt(coin.balance);\n\n\t\t\tcoins.push(coin);\n\t\t\tremainingBalance -= coinBalance;\n\n\t\t\tif (remainingBalance <= 0) {\n\t\t\t\treturn coins;\n\t\t\t}\n\t\t}\n\n\t\tif (hasNextPage) {\n\t\t\treturn loadMoreCoins(nextCursor);\n\t\t}\n\n\t\tthrow new Error(`Not enough coins of type ${coinType} to satisfy requested balance`);\n\t}\n}\n", "import { SuiClient } from \"@mysten/sui/client\";\nimport { CoinStruct } from \"@mysten/sui/src/client/types/generated\";\nimport { coinWithBalance, Transaction, TransactionResult } from \"@mysten/sui/transactions\";\nimport { SUI_CLOCK_OBJECT_ID } from \"@mysten/sui/utils\";\nimport { Big } from \"big.js\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport {\n  ChainSymbol,\n  ChainType,\n  FeePaymentMethod,\n  Messenger,\n  RawSuiTransaction,\n  SdkError,\n  SwapParams,\n  TransactionResponse,\n} from \"../../../models\";\nimport { SuiAddresses } from \"../../../tokens-info\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { setAddress } from \"../../models/sui/bridge\";\nimport { swap, swapAndBridge, swapAndBridgeWormhole } from \"../../models/sui/bridge/bridge-interface/functions\";\nimport { setAddress as setCctpAddress } from \"../../models/sui/cctp-bridge\";\nimport { bridge } from \"../../models/sui/cctp-bridge/cctp-bridge-interface/functions\";\nimport { setAddress as setUtilsAddress } from \"../../models/sui/utils\";\nimport { fromHex } from \"../../models/sui/utils/bytes32/functions\";\nimport { fetchAllPagesRecursive } from \"../../utils/sui/paginated\";\nimport { getCctpSolTokenRecipientAddress } from \"../get-cctp-sol-token-recipient-address\";\nimport { ChainBridgeService, SendParams, TxSendParamsSui, TxSwapParamsSui } from \"../models\";\nimport { getNonceBigInt, normalizeSuiHex, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\n\nexport class SuiBridgeService extends ChainBridgeService {\n  chainType: ChainType.SUI = ChainType.SUI;\n  chainSymbol: ChainSymbol.SUI = ChainSymbol.SUI;\n\n  private readonly client: SuiClient;\n\n  constructor(\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n    this.client = new SuiClient({\n      url: nodeRpcUrlsConfig.getNodeRpcUrl(this.chainSymbol),\n    });\n  }\n\n  send(): Promise<TransactionResponse> {\n    throw new SdkError(\"Method send not implemented.\");\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawSuiTransaction> {\n    const suiAddresses = params.sourceToken.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildRawTransactionSwapFromParams(txSwapParams, suiAddresses);\n  }\n\n  async buildRawTransactionSwapFromParams(\n    params: TxSwapParamsSui,\n    suiAddresses: SuiAddresses\n  ): Promise<RawSuiTransaction> {\n    const { amount, fromAccountAddress, fromTokenAddress, toTokenAddress, minimumReceiveAmount } = params;\n\n    const tx = new Transaction();\n    tx.setSender(fromAccountAddress);\n\n    const args = {\n      bridge: suiAddresses.bridgeObjectAddress,\n      coin: coinWithBalance({ balance: BigInt(amount), type: fromTokenAddress }),\n      receiveAmountMin: BigInt(minimumReceiveAmount),\n    };\n    const swapResult = swap(tx, [fromTokenAddress, toTokenAddress], args);\n\n    const coins: CoinStruct[] = await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getCoins({\n        owner: params.toAccountAddress,\n        coinType: toTokenAddress,\n        cursor,\n      })\n    );\n    if (coins.length === 0 || !coins[0]) {\n      tx.transferObjects([swapResult], params.toAccountAddress);\n    } else {\n      tx.mergeCoins(coins[0].coinObjectId, [swapResult]);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawSuiTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    const { messenger } = txSendParams;\n\n    const suiAddresses = params.sourceToken.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n    setUtilsAddress(suiAddresses.utilsAddress);\n\n    switch (messenger) {\n      case Messenger.ALLBRIDGE:\n        return this.buildRawTransactionAllbridgeSend(txSendParams, suiAddresses);\n      case Messenger.WORMHOLE:\n        return this.buildRawTransactionWormholeSend(txSendParams, suiAddresses);\n      case Messenger.CCTP:\n      case Messenger.CCTP_V2:\n        return this.buildRawTransactionCctpSend(params, txSendParams, suiAddresses);\n    }\n  }\n\n  private async buildRawTransactionAllbridgeSend(\n    txSendParams: TxSendParamsSui,\n    suiAddresses: SuiAddresses\n  ): Promise<RawSuiTransaction> {\n    const {\n      amount,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = txSendParams;\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n\n    const tx = new Transaction();\n    tx.setSender(fromAccountAddress);\n    if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n      const amountWithoutFee = BigInt(amount) - BigInt(totalFee);\n      const args = {\n        bridge: suiAddresses.bridgeObjectAddress,\n        messenger: suiAddresses.allbridgeMessengerObjectAddress,\n        amount: coinWithBalance({ balance: amountWithoutFee, type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        nonce: getNonceBigInt(),\n        recipient: fromHex(tx, normalizeSuiHex(toAccountAddress)),\n        receiveToken: fromHex(tx, normalizeSuiHex(toTokenAddress)),\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(totalFee), type: fromTokenAddress }),\n        feeSuiCoin: coinWithBalance({ balance: BigInt(0), useGasCoin: false }),\n      };\n      swapAndBridge(tx, fromTokenAddress, args);\n    } else {\n      const totalFeeCoin =\n        totalFee === \"0\"\n          ? coinWithBalance({ balance: BigInt(totalFee), useGasCoin: false })\n          : coinWithBalance({ balance: BigInt(totalFee) });\n      const args = {\n        bridge: suiAddresses.bridgeObjectAddress,\n        messenger: suiAddresses.allbridgeMessengerObjectAddress,\n        amount: coinWithBalance({ balance: BigInt(amount), type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        nonce: getNonceBigInt(),\n        recipient: fromHex(tx, normalizeSuiHex(toAccountAddress)),\n        receiveToken: fromHex(tx, normalizeSuiHex(toTokenAddress)),\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(0), type: fromTokenAddress }),\n        feeSuiCoin: totalFeeCoin,\n      };\n      swapAndBridge(tx, fromTokenAddress, args);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  private async buildRawTransactionWormholeSend(\n    txSendParams: TxSendParamsSui,\n    suiAddresses: SuiAddresses\n  ): Promise<RawSuiTransaction> {\n    const {\n      amount,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = txSendParams;\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n\n    const tx = new Transaction();\n    tx.setSender(fromAccountAddress);\n    if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n      const amountWithoutFee = BigInt(amount) - BigInt(totalFee);\n      const args = {\n        bridge: suiAddresses.bridgeObjectAddress,\n        messenger: suiAddresses.wormholeMessengerObjectAddress,\n        wormholeState: suiAddresses.wormholeStateObjectAddress,\n        theClock: SUI_CLOCK_OBJECT_ID,\n        amount: coinWithBalance({ balance: amountWithoutFee, type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        nonce: getNonceBigInt(),\n        recipient: fromHex(tx, normalizeSuiHex(toAccountAddress)),\n        receiveToken: fromHex(tx, normalizeSuiHex(toTokenAddress)),\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(totalFee), type: fromTokenAddress }),\n        feeSuiCoin: coinWithBalance({ balance: BigInt(0), useGasCoin: false }),\n      };\n      swapAndBridgeWormhole(tx, fromTokenAddress, args);\n    } else {\n      const totalFeeCoin =\n        totalFee === \"0\"\n          ? coinWithBalance({ balance: BigInt(totalFee), useGasCoin: false })\n          : coinWithBalance({ balance: BigInt(totalFee) });\n      const args = {\n        bridge: suiAddresses.bridgeObjectAddress,\n        messenger: suiAddresses.wormholeMessengerObjectAddress,\n        wormholeState: suiAddresses.wormholeStateObjectAddress,\n        theClock: SUI_CLOCK_OBJECT_ID,\n        amount: coinWithBalance({ balance: BigInt(amount), type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        nonce: getNonceBigInt(),\n        recipient: fromHex(tx, normalizeSuiHex(toAccountAddress)),\n        receiveToken: fromHex(tx, normalizeSuiHex(toTokenAddress)),\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(0), type: fromTokenAddress }),\n        feeSuiCoin: totalFeeCoin,\n      };\n      swapAndBridgeWormhole(tx, fromTokenAddress, args);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  private async buildRawTransactionCctpSend(\n    params: SendParams,\n    txSendParams: TxSendParamsSui,\n    suiAddresses: SuiAddresses\n  ): Promise<RawSuiTransaction> {\n    const {\n      amount,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = txSendParams;\n\n    setCctpAddress(suiAddresses.cctpAddress, suiAddresses.cctpAddressOrigin);\n\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n\n    const tx = new Transaction();\n    tx.setSender(fromAccountAddress);\n\n    const recipientWalletAddress = fromHex(tx, normalizeSuiHex(toAccountAddress));\n    let recipient: TransactionResult;\n    if (params.destinationToken.chainType === ChainType.SOLANA) {\n      const recipientStr = await getCctpSolTokenRecipientAddress(\n        this.chainType,\n        params.toAccountAddress,\n        params.destinationToken.tokenAddress,\n        this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SOL)\n      );\n      recipient = fromHex(tx, normalizeSuiHex(recipientStr));\n    } else {\n      recipient = recipientWalletAddress;\n    }\n\n    if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n      const amountWithoutFee = BigInt(amount) - BigInt(totalFee);\n      const args = {\n        cctpBridge: suiAddresses.cctpObjectAddress,\n        tokenMessengerMinterState: suiAddresses.cctpTokenMessengerMinterStateObjectAddress,\n        messageTransmitterState: suiAddresses.cctpMessageTransmitterStateObjectAddress,\n        treasury: suiAddresses.cctpTreasuryObjectAddress,\n        denyList: suiAddresses.cctpDenyListObjectAddress,\n        amount: coinWithBalance({ balance: amountWithoutFee, type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        recipient: recipient,\n        recipientWalletAddress: recipientWalletAddress,\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(totalFee), type: fromTokenAddress }),\n        feeSuiCoin: coinWithBalance({ balance: BigInt(0), useGasCoin: false }),\n      };\n      bridge(tx, fromTokenAddress, args);\n    } else {\n      const totalFeeCoin =\n        totalFee === \"0\"\n          ? coinWithBalance({ balance: BigInt(totalFee), useGasCoin: false })\n          : coinWithBalance({ balance: BigInt(totalFee) });\n      const args = {\n        cctpBridge: suiAddresses.cctpObjectAddress,\n        tokenMessengerMinterState: suiAddresses.cctpTokenMessengerMinterStateObjectAddress,\n        messageTransmitterState: suiAddresses.cctpMessageTransmitterStateObjectAddress,\n        treasury: suiAddresses.cctpTreasuryObjectAddress,\n        denyList: suiAddresses.cctpDenyListObjectAddress,\n        amount: coinWithBalance({ balance: BigInt(amount), type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        recipient: recipient,\n        recipientWalletAddress: recipientWalletAddress,\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(0), type: fromTokenAddress }),\n        feeSuiCoin: totalFeeCoin,\n      };\n      bridge(tx, fromTokenAddress, args);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n}\n", "// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function destroyEmpty(tx: Transaction, typeArg: string, userDeposit: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::destroy_empty`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, userDeposit)],\n  });\n}\n\nexport interface SwapArgs {\n  bridge: TransactionObjectInput;\n  coin: TransactionObjectInput;\n  receiveAmountMin: bigint | TransactionArgument;\n}\n\nexport function swap(tx: Transaction, typeArgs: [string, string], args: SwapArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::swap`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.bridge), obj(tx, args.coin), pure(tx, args.receiveAmountMin, `u64`)],\n  });\n}\n\nexport interface DepositArgs {\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n  coin: TransactionObjectInput;\n}\n\nexport function deposit(tx: Transaction, typeArg: string, args: DepositArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.userDeposit), obj(tx, args.coin)],\n  });\n}\n\nexport interface WithdrawArgs {\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n  amountLp: bigint | TransactionArgument;\n}\n\nexport function withdraw(tx: Transaction, typeArg: string, args: WithdrawArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.userDeposit), pure(tx, args.amountLp, `u64`)],\n  });\n}\n\nexport interface DepositFeeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  coin: TransactionObjectInput;\n}\n\nexport function depositFee(tx: Transaction, typeArg: string, args: DepositFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::deposit_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), obj(tx, args.coin)],\n  });\n}\n\nexport interface MigrateArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function migrate(tx: Transaction, args: MigrateArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::migrate`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface SetGasUsageArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  value: bigint | TransactionArgument;\n}\n\nexport function setGasUsage(tx: Transaction, args: SetGasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_gas_usage`,\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.bridge),\n      pure(tx, args.chainId, `u8`),\n      pure(tx, args.value, `u64`),\n    ],\n  });\n}\n\nexport interface WithdrawFeeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function withdrawFee(tx: Transaction, typeArg: string, args: WithdrawFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::withdraw_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport interface GasUsageArgs {\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function gasUsage(tx: Transaction, args: GasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::gas_usage`,\n    arguments: [obj(tx, args.bridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport function lpAmount(tx: Transaction, typeArg: string, userDeposit: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::lp_amount`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, userDeposit)],\n  });\n}\n\nexport function rewardDebt(tx: Transaction, typeArg: string, userDeposit: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::reward_debt`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, userDeposit)],\n  });\n}\n\nexport interface ClaimAdminFeeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function claimAdminFee(tx: Transaction, typeArg: string, args: ClaimAdminFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::claim_admin_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface ClaimRewardArgs {\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function claimReward(tx: Transaction, typeArg: string, args: ClaimRewardArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::claim_reward`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.userDeposit)],\n  });\n}\n\nexport interface SetAdminFeeShareBpArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  adminFeeShareBp: bigint | TransactionArgument;\n}\n\nexport function setAdminFeeShareBp(tx: Transaction, typeArg: string, args: SetAdminFeeShareBpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_admin_fee_share_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.adminFeeShareBp, `u64`)],\n  });\n}\n\nexport function adminFeeShareBp(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::admin_fee_share_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface SetBalanceRatioMinBpArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  balanceRatioMinBp: bigint | TransactionArgument;\n}\n\nexport function setBalanceRatioMinBp(tx: Transaction, typeArg: string, args: SetBalanceRatioMinBpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_balance_ratio_min_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.balanceRatioMinBp, `u64`)],\n  });\n}\n\nexport function pool(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface AdjustTotalLpAmountArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function adjustTotalLpAmount(tx: Transaction, typeArg: string, args: AdjustTotalLpAmountArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::adjust_total_lp_amount`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), obj(tx, args.userDeposit)],\n  });\n}\n\nexport function canDeposit(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::can_deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function canWithdraw(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::can_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function feeShare(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::fee_share`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface SetFeeShareArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  feeShareBp: bigint | TransactionArgument;\n}\n\nexport function setFeeShare(tx: Transaction, typeArg: string, args: SetFeeShareArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_fee_share`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.feeShareBp, `u64`)],\n  });\n}\n\nexport interface StartDepositArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function startDeposit(tx: Transaction, typeArg: string, args: StartDepositArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::start_deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface StartWithdrawArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function startWithdraw(tx: Transaction, typeArg: string, args: StartWithdrawArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::start_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface StopDepositArgs {\n  stopCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function stopDeposit(tx: Transaction, typeArg: string, args: StopDepositArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::stop_deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.stopCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface StopWithdrawArgs {\n  stopCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function stopWithdraw(tx: Transaction, typeArg: string, args: StopWithdrawArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::stop_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.stopCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface AddBridgeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  bridgeAddress: TransactionObjectInput;\n}\n\nexport function addBridge(tx: Transaction, args: AddBridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::add_bridge`,\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.bridge),\n      pure(tx, args.chainId, `u8`),\n      obj(tx, args.bridgeAddress),\n    ],\n  });\n}\n\nexport interface AddBridgeTokenArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  tokenAddress: TransactionObjectInput;\n}\n\nexport function addBridgeToken(tx: Transaction, args: AddBridgeTokenArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::add_bridge_token`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.chainId, `u8`), obj(tx, args.tokenAddress)],\n  });\n}\n\nexport interface AddPoolArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  pool: TransactionObjectInput;\n}\n\nexport function addPool(tx: Transaction, typeArg: string, args: AddPoolArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::add_pool`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), obj(tx, args.pool)],\n  });\n}\n\nexport function canSwap(tx: Transaction, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::can_swap`,\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function feeValue(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::fee_value`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface GetBridgeAllbridgeCostArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgeAllbridgeCost(tx: Transaction, args: GetBridgeAllbridgeCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::get_bridge_allbridge_cost`,\n    arguments: [obj(tx, args.bridge), obj(tx, args.messenger), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface GetBridgeCostArgs {\n  bridge: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgeCost(tx: Transaction, args: GetBridgeCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::get_bridge_cost`,\n    arguments: [obj(tx, args.bridge), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface GetBridgeWormholeCostArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgeWormholeCost(tx: Transaction, args: GetBridgeWormholeCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::get_bridge_wormhole_cost`,\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.gasOracle),\n      pure(tx, args.chainId, `u8`),\n    ],\n  });\n}\n\nexport interface IsProcessedMessageArgs {\n  bridge: TransactionObjectInput;\n  message: TransactionObjectInput;\n}\n\nexport function isProcessedMessage(tx: Transaction, args: IsProcessedMessageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::is_processed_message`,\n    arguments: [obj(tx, args.bridge), obj(tx, args.message)],\n  });\n}\n\nexport interface ReceiveTokensWormholeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n  recipient: TransactionObjectInput;\n  sourceChainId: number | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n  receiveAmountMin: bigint | TransactionArgument;\n  extraGasCoin: TransactionObjectInput;\n}\n\nexport function receiveTokensWormhole(tx: Transaction, typeArg: string, args: ReceiveTokensWormholeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::receive_tokens_wormhole`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      pure(tx, args.amount, `u64`),\n      obj(tx, args.recipient),\n      pure(tx, args.sourceChainId, `u8`),\n      pure(tx, args.nonce, `u256`),\n      pure(tx, args.receiveAmountMin, `u64`),\n      obj(tx, args.extraGasCoin),\n    ],\n  });\n}\n\nexport interface RemoveBridgeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function removeBridge(tx: Transaction, args: RemoveBridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::remove_bridge`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface RemoveBridgeTokenArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  tokenAddress: TransactionObjectInput;\n}\n\nexport function removeBridgeToken(tx: Transaction, args: RemoveBridgeTokenArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::remove_bridge_token`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.chainId, `u8`), obj(tx, args.tokenAddress)],\n  });\n}\n\nexport interface SetRebalancerArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  rebalancer: string | TransactionArgument;\n}\n\nexport function setRebalancer(tx: Transaction, args: SetRebalancerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_rebalancer`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.rebalancer, `address`)],\n  });\n}\n\nexport interface StartSwapArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function startSwap(tx: Transaction, args: StartSwapArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::start_swap`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface StopSwapArgs {\n  stopSwapCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function stopSwap(tx: Transaction, args: StopSwapArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::stop_swap`,\n    arguments: [obj(tx, args.stopSwapCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface SwapAndBridgeWormholeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  theClock: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  amount: TransactionObjectInput;\n  recipient: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  receiveToken: TransactionObjectInput;\n  nonce: bigint | TransactionArgument;\n  feeSuiCoin: TransactionObjectInput;\n  feeTokenCoin: TransactionObjectInput;\n}\n\nexport function swapAndBridgeWormhole(tx: Transaction, typeArg: string, args: SwapAndBridgeWormholeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::swap_and_bridge_wormhole`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.theClock),\n      obj(tx, args.gasOracle),\n      obj(tx, args.amount),\n      obj(tx, args.recipient),\n      pure(tx, args.destinationChainId, `u8`),\n      obj(tx, args.receiveToken),\n      pure(tx, args.nonce, `u256`),\n      obj(tx, args.feeSuiCoin),\n      obj(tx, args.feeTokenCoin),\n    ],\n  });\n}\n\nexport interface NewPoolArgs {\n  adminCap: TransactionObjectInput;\n  coinMetadata: TransactionObjectInput;\n  a: bigint | TransactionArgument;\n  feeShareBp: bigint | TransactionArgument;\n}\n\nexport function newPool(tx: Transaction, typeArg: string, args: NewPoolArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::new_pool`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.coinMetadata),\n      pure(tx, args.a, `u64`),\n      pure(tx, args.feeShareBp, `u64`),\n    ],\n  });\n}\n\nexport function newUserDeposit(tx: Transaction, typeArg: string) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::new_user_deposit`,\n    typeArguments: [typeArg],\n    arguments: [],\n  });\n}\n\nexport function poolA(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_a`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolBalance(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolD(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_d`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolDecimals(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_decimals`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolLpSupply(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_lp_supply`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface PoolPendingRewardsArgs {\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function poolPendingRewards(tx: Transaction, typeArg: string, args: PoolPendingRewardsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_pending_rewards`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.userDeposit)],\n  });\n}\n\nexport function poolTokenBalance(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_token_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolVusdBalance(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_vusd_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface ReceiveTokensArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n  recipient: TransactionObjectInput;\n  sourceChainId: number | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n  receiveAmountMin: bigint | TransactionArgument;\n  extraGasCoin: TransactionObjectInput;\n}\n\nexport function receiveTokens(tx: Transaction, typeArg: string, args: ReceiveTokensArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::receive_tokens`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      pure(tx, args.amount, `u64`),\n      obj(tx, args.recipient),\n      pure(tx, args.sourceChainId, `u8`),\n      pure(tx, args.nonce, `u256`),\n      pure(tx, args.receiveAmountMin, `u64`),\n      obj(tx, args.extraGasCoin),\n    ],\n  });\n}\n\nexport interface SwapAndBridgeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  amount: TransactionObjectInput;\n  recipient: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  receiveToken: TransactionObjectInput;\n  nonce: bigint | TransactionArgument;\n  feeSuiCoin: TransactionObjectInput;\n  feeTokenCoin: TransactionObjectInput;\n}\n\nexport function swapAndBridge(tx: Transaction, typeArg: string, args: SwapAndBridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::swap_and_bridge`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      obj(tx, args.gasOracle),\n      obj(tx, args.amount),\n      obj(tx, args.recipient),\n      pure(tx, args.destinationChainId, `u8`),\n      obj(tx, args.receiveToken),\n      pure(tx, args.nonce, `u256`),\n      obj(tx, args.feeSuiCoin),\n      obj(tx, args.feeTokenCoin),\n    ],\n  });\n}\n", "// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface BridgeArgs {\n  cctpBridge: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  tokenMessengerMinterState: TransactionObjectInput;\n  messageTransmitterState: TransactionObjectInput;\n  treasury: TransactionObjectInput;\n  denyList: TransactionObjectInput;\n  amount: TransactionObjectInput;\n  feeSuiCoin: TransactionObjectInput;\n  feeTokenCoin: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  recipient: TransactionObjectInput;\n  recipientWalletAddress: TransactionObjectInput;\n}\n\nexport function bridge(tx: Transaction, typeArg: string, args: BridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::bridge`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.cctpBridge),\n      obj(tx, args.gasOracle),\n      obj(tx, args.tokenMessengerMinterState),\n      obj(tx, args.messageTransmitterState),\n      obj(tx, args.treasury),\n      obj(tx, args.denyList),\n      obj(tx, args.amount),\n      obj(tx, args.feeSuiCoin),\n      obj(tx, args.feeTokenCoin),\n      pure(tx, args.destinationChainId, `u8`),\n      obj(tx, args.recipient),\n      obj(tx, args.recipientWalletAddress),\n    ],\n  });\n}\n\nexport interface MigrateArgs {\n  admin: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n}\n\nexport function migrate(tx: Transaction, args: MigrateArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::migrate`,\n    arguments: [obj(tx, args.admin), obj(tx, args.messenger)],\n  });\n}\n\nexport interface GetTransactionCostArgs {\n  cctpBridge: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getTransactionCost(tx: Transaction, args: GetTransactionCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::get_transaction_cost`,\n    arguments: [obj(tx, args.cctpBridge), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface SetGasUsageArgs {\n  adminCap: TransactionObjectInput;\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  value: bigint | TransactionArgument;\n}\n\nexport function setGasUsage(tx: Transaction, args: SetGasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::set_gas_usage`,\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.cctpBridge),\n      pure(tx, args.chainId, `u8`),\n      pure(tx, args.value, `u64`),\n    ],\n  });\n}\n\nexport interface WithdrawFeeArgs {\n  adminCap: TransactionObjectInput;\n  cctpBridge: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function withdrawFee(tx: Transaction, typeArg: string, args: WithdrawFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::withdraw_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.cctpBridge), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport interface GasUsageArgs {\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function gasUsage(tx: Transaction, args: GasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::gas_usage`,\n    arguments: [obj(tx, args.cctpBridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport function feeValue(tx: Transaction, typeArg: string, cctpBridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::fee_value`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, cctpBridge)],\n  });\n}\n\nexport interface ReceiveTokensArgs {\n  tokenMessengerMinterState: TransactionObjectInput;\n  messageTransmitterState: TransactionObjectInput;\n  denyList: TransactionObjectInput;\n  treasury: TransactionObjectInput;\n  recipient: string | TransactionArgument;\n  message: Array<number | TransactionArgument> | TransactionArgument;\n  signature: Array<number | TransactionArgument> | TransactionArgument;\n  extraGasCoin: TransactionObjectInput;\n}\n\nexport function receiveTokens(tx: Transaction, typeArg: string, args: ReceiveTokensArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::receive_tokens`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.tokenMessengerMinterState),\n      obj(tx, args.messageTransmitterState),\n      obj(tx, args.denyList),\n      obj(tx, args.treasury),\n      pure(tx, args.recipient, `address`),\n      pure(tx, args.message, `vector<u8>`),\n      pure(tx, args.signature, `vector<u8>`),\n      obj(tx, args.extraGasCoin),\n    ],\n  });\n}\n\nexport interface ChangeRecipientArgs {\n  cctpBridge: TransactionObjectInput;\n  originalMessage: Array<number | TransactionArgument> | TransactionArgument;\n  originalAttestation: Array<number | TransactionArgument> | TransactionArgument;\n  newRecipient: TransactionObjectInput;\n  tokenMessengerMinterState: TransactionObjectInput;\n  messageTransmitterState: TransactionObjectInput;\n}\n\nexport function changeRecipient(tx: Transaction, typeArg: string, args: ChangeRecipientArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::change_recipient`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.cctpBridge),\n      pure(tx, args.originalMessage, `vector<u8>`),\n      pure(tx, args.originalAttestation, `vector<u8>`),\n      obj(tx, args.newRecipient),\n      obj(tx, args.tokenMessengerMinterState),\n      obj(tx, args.messageTransmitterState),\n    ],\n  });\n}\n\nexport interface GetBridgingCostInTokensArgs {\n  cctpBridge: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgingCostInTokens(tx: Transaction, args: GetBridgingCostInTokensArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::get_bridging_cost_in_tokens`,\n    arguments: [obj(tx, args.cctpBridge), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface GetDomainByChainIdArgs {\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getDomainByChainId(tx: Transaction, args: GetDomainByChainIdArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::get_domain_by_chain_id`,\n    arguments: [obj(tx, args.cctpBridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface IsMessageProcessedArgs {\n  cctpBridge: TransactionObjectInput;\n  messageTransmitterState: TransactionObjectInput;\n  sourceChainId: number | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n}\n\nexport function isMessageProcessed(tx: Transaction, args: IsMessageProcessedArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::is_message_processed`,\n    arguments: [\n      obj(tx, args.cctpBridge),\n      obj(tx, args.messageTransmitterState),\n      pure(tx, args.sourceChainId, `u8`),\n      pure(tx, args.nonce, `u64`),\n    ],\n  });\n}\n\nexport interface RegisterBridgeDestinationArgs {\n  adminCap: TransactionObjectInput;\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  domain: number | TransactionArgument;\n}\n\nexport function registerBridgeDestination(tx: Transaction, args: RegisterBridgeDestinationArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::register_bridge_destination`,\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.cctpBridge),\n      pure(tx, args.chainId, `u8`),\n      pure(tx, args.domain, `u32`),\n    ],\n  });\n}\n\nexport interface SetAdminFeeShareArgs {\n  adminCap: TransactionObjectInput;\n  cctpBridge: TransactionObjectInput;\n  adminFeeShareBp: bigint | TransactionArgument;\n}\n\nexport function setAdminFeeShare(tx: Transaction, args: SetAdminFeeShareArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::set_admin_fee_share`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.cctpBridge), pure(tx, args.adminFeeShareBp, `u64`)],\n  });\n}\n\nexport interface UnregisterBridgeDestinationArgs {\n  adminCap: TransactionObjectInput;\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function unregisterBridgeDestination(tx: Transaction, args: UnregisterBridgeDestinationArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge_interface::unregister_bridge_destination`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.cctpBridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n", "// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { String } from \"../../_dependencies/source/0x1/ascii/structs\";\nimport { String as String1 } from \"../../_dependencies/source/0x1/string/structs\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { ID } from \"../../sui/object/structs\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function isZero(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::is_zero`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function data(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::data`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function empty(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::empty`,\n    arguments: [],\n  });\n}\n\nexport function new_(tx: Transaction, data: Array<number | TransactionArgument> | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::new`,\n    arguments: [pure(tx, data, `vector<u8>`)],\n  });\n}\n\nexport function fromAddress(tx: Transaction, a: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_address`,\n    arguments: [pure(tx, a, `address`)],\n  });\n}\n\nexport function fromAsciiHex(tx: Transaction, value: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_ascii_hex`,\n    arguments: [pure(tx, value, `${String.$typeName}`)],\n  });\n}\n\nexport function fromHex(tx: Transaction, value: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_hex`,\n    arguments: [pure(tx, value, `${String1.$typeName}`)],\n  });\n}\n\nexport function fromId(tx: Transaction, id: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_id`,\n    arguments: [pure(tx, id, `${ID.$typeName}`)],\n  });\n}\n\nexport function fromUid(tx: Transaction, id: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_uid`,\n    arguments: [obj(tx, id)],\n  });\n}\n\nexport function newFromPartial(\n  tx: Transaction,\n  partialData: Array<number | TransactionArgument> | TransactionArgument\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::new_from_partial`,\n    arguments: [pure(tx, partialData, `vector<u8>`)],\n  });\n}\n\nexport function toAddress(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::to_address`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function toAsciiHex(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::to_ascii_hex`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function toHex(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::to_hex`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function toId(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::to_id`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n", "// @ts-nocheck\n\nimport { bcs, BcsType } from \"@mysten/sui/bcs\";\nimport { fromHEX, toHEX } from \"@mysten/sui/utils\";\nimport { FieldsWithTypes, compressSuiType, parseTypeName } from \"./util\";\nimport { SuiClient, SuiParsedData, SuiObjectData } from \"@mysten/sui/client\";\n\n// for backwards compatibility\nexport { vector } from \"./vector\";\n\nexport interface StructClass {\n  readonly $typeName: string;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: string[];\n  readonly $isPhantom: readonly boolean[];\n  toJSONField(): Record<string, any>;\n  toJSON(): Record<string, any>;\n\n  __StructClass: true;\n}\n\nexport interface VectorClass {\n  readonly $typeName: \"vector\";\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [string];\n  readonly $isPhantom: readonly [false];\n  toJSONField(): any[];\n  toJSON(): Record<string, any>;\n\n  readonly elements: any;\n\n  __VectorClass: true;\n}\n\nexport type Primitive = \"bool\" | \"u8\" | \"u16\" | \"u32\" | \"u64\" | \"u128\" | \"u256\" | \"address\";\nexport type TypeArgument = StructClass | Primitive | VectorClass;\n\nexport interface StructClassReified<T extends StructClass, Fields> {\n  typeName: T[\"$typeName\"]; // e.g., '0x2::balance::Balance', without type arguments\n  fullTypeName: ToTypeStr<T>; // e.g., '0x2::balance::Balance<0x2::sui:SUI>'\n  typeArgs: T[\"$typeArgs\"]; // e.g., ['0x2::sui:SUI']\n  isPhantom: T[\"$isPhantom\"]; // e.g., [true, false]\n  reifiedTypeArgs: Array<Reified<TypeArgument, any> | PhantomReified<PhantomTypeArgument>>;\n  bcs: BcsType<any>;\n  fromFields(fields: Record<string, any>): T;\n  fromFieldsWithTypes(item: FieldsWithTypes): T;\n  fromBcs(data: Uint8Array): T;\n  fromJSONField: (field: any) => T;\n  fromJSON: (json: Record<string, any>) => T;\n  fromSuiParsedData: (content: SuiParsedData) => T;\n  fromSuiObjectData: (data: SuiObjectData) => T;\n  fetch: (client: SuiClient, id: string) => Promise<T>;\n  new: (fields: Fields) => T;\n  kind: \"StructClassReified\";\n}\n\nexport interface VectorClassReified<T extends VectorClass, Elements> {\n  typeName: T[\"$typeName\"];\n  fullTypeName: ToTypeStr<T>;\n  typeArgs: T[\"$typeArgs\"];\n  isPhantom: readonly [false];\n  reifiedTypeArgs: Array<Reified<TypeArgument, any>>;\n  bcs: BcsType<any>;\n  fromFields(fields: any[]): T;\n  fromFieldsWithTypes(item: FieldsWithTypes): T;\n  fromBcs(data: Uint8Array): T;\n  fromJSONField: (field: any) => T;\n  fromJSON: (json: Record<string, any>) => T;\n  new: (elements: Elements) => T;\n  kind: \"VectorClassReified\";\n}\n\nexport type Reified<T extends TypeArgument, Fields> = T extends Primitive\n  ? Primitive\n  : T extends StructClass\n    ? StructClassReified<T, Fields>\n    : T extends VectorClass\n      ? VectorClassReified<T, Fields>\n      : never;\n\nexport type ToTypeArgument<\n  T extends Primitive | StructClassReified<StructClass, any> | VectorClassReified<VectorClass, any>,\n> = T extends Primitive\n  ? T\n  : T extends StructClassReified<infer U, any>\n    ? U\n    : T extends VectorClassReified<infer U, any>\n      ? U\n      : never;\n\nexport type ToPhantomTypeArgument<T extends PhantomReified<PhantomTypeArgument>> =\n  T extends PhantomReified<infer U> ? U : never;\n\nexport type PhantomTypeArgument = string;\n\nexport interface PhantomReified<P> {\n  phantomType: P;\n  kind: \"PhantomReified\";\n}\n\nexport function phantom<T extends Reified<TypeArgument, any>>(reified: T): PhantomReified<ToTypeStr<ToTypeArgument<T>>>;\nexport function phantom<P extends PhantomTypeArgument>(phantomType: P): PhantomReified<P>;\nexport function phantom(type: string | Reified<TypeArgument, any>): PhantomReified<string> {\n  if (typeof type === \"string\") {\n    return {\n      phantomType: type,\n      kind: \"PhantomReified\",\n    };\n  } else {\n    return {\n      phantomType: type.fullTypeName,\n      kind: \"PhantomReified\",\n    };\n  }\n}\n\nexport type ToTypeStr<T extends TypeArgument> = T extends Primitive\n  ? T\n  : T extends StructClass\n    ? T[\"$fullTypeName\"]\n    : T extends VectorClass\n      ? T[\"$fullTypeName\"]\n      : never;\n\nexport type PhantomToTypeStr<T extends PhantomTypeArgument> = T extends PhantomTypeArgument ? T : never;\n\nexport type ToJSON<T extends TypeArgument> = T extends \"bool\"\n  ? boolean\n  : T extends \"u8\"\n    ? number\n    : T extends \"u16\"\n      ? number\n      : T extends \"u32\"\n        ? number\n        : T extends \"u64\"\n          ? string\n          : T extends \"u128\"\n            ? string\n            : T extends \"u256\"\n              ? string\n              : T extends \"address\"\n                ? string\n                : T extends { $typeName: \"0x1::string::String\" }\n                  ? string\n                  : T extends { $typeName: \"0x1::ascii::String\" }\n                    ? string\n                    : T extends { $typeName: \"0x2::object::UID\" }\n                      ? string\n                      : T extends { $typeName: \"0x2::object::ID\" }\n                        ? string\n                        : T extends { $typeName: \"0x2::url::Url\" }\n                          ? string\n                          : T extends {\n                                $typeName: \"0x1::option::Option\";\n                                __inner: infer U extends TypeArgument;\n                              }\n                            ? ToJSON<U> | null\n                            : T extends VectorClass\n                              ? ReturnType<T[\"toJSONField\"]>\n                              : T extends StructClass\n                                ? ReturnType<T[\"toJSONField\"]>\n                                : never;\n\nexport type ToField<T extends TypeArgument> = T extends \"bool\"\n  ? boolean\n  : T extends \"u8\"\n    ? number\n    : T extends \"u16\"\n      ? number\n      : T extends \"u32\"\n        ? number\n        : T extends \"u64\"\n          ? bigint\n          : T extends \"u128\"\n            ? bigint\n            : T extends \"u256\"\n              ? bigint\n              : T extends \"address\"\n                ? string\n                : T extends { $typeName: \"0x1::string::String\" }\n                  ? string\n                  : T extends { $typeName: \"0x1::ascii::String\" }\n                    ? string\n                    : T extends { $typeName: \"0x2::object::UID\" }\n                      ? string\n                      : T extends { $typeName: \"0x2::object::ID\" }\n                        ? string\n                        : T extends { $typeName: \"0x2::url::Url\" }\n                          ? string\n                          : T extends {\n                                $typeName: \"0x1::option::Option\";\n                                __inner: infer U extends TypeArgument;\n                              }\n                            ? ToField<U> | null\n                            : T extends VectorClass\n                              ? T[\"elements\"]\n                              : T extends StructClass\n                                ? T\n                                : never;\n\nconst Address = bcs.bytes(32).transform({\n  input: (val: string) => fromHEX(val),\n  output: (val) => toHEX(val),\n});\n\nexport function toBcs<T extends Reified<TypeArgument, any>>(arg: T): BcsType<any> {\n  switch (arg) {\n    case \"bool\":\n      return bcs.bool();\n    case \"u8\":\n      return bcs.u8();\n    case \"u16\":\n      return bcs.u16();\n    case \"u32\":\n      return bcs.u32();\n    case \"u64\":\n      return bcs.u64();\n    case \"u128\":\n      return bcs.u128();\n    case \"u256\":\n      return bcs.u256();\n    case \"address\":\n      return Address;\n    default:\n      return arg.bcs;\n  }\n}\n\nexport function extractType<T extends Reified<TypeArgument, any>>(reified: T): ToTypeStr<ToTypeArgument<T>>;\nexport function extractType<T extends PhantomReified<PhantomTypeArgument>>(\n  reified: T\n): PhantomToTypeStr<ToPhantomTypeArgument<T>>;\nexport function extractType<T extends Reified<TypeArgument, any> | PhantomReified<PhantomTypeArgument>>(\n  reified: T\n): string;\nexport function extractType(reified: Reified<TypeArgument, any> | PhantomReified<string>): string {\n  switch (reified) {\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n    case \"bool\":\n    case \"address\":\n      return reified;\n  }\n  switch (reified.kind) {\n    case \"PhantomReified\":\n      return reified.phantomType;\n    case \"StructClassReified\":\n      return reified.fullTypeName;\n    case \"VectorClassReified\":\n      return reified.fullTypeName;\n  }\n\n  throw new Error(\"unreachable\");\n}\n\nexport function decodeFromFields(reified: Reified<TypeArgument, any>, field: any) {\n  switch (reified) {\n    case \"bool\":\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n      return field;\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n      return BigInt(field);\n    case \"address\":\n      return `0x${field}`;\n  }\n  if (reified.kind === \"VectorClassReified\") {\n    return reified.fromFields(field).elements;\n  }\n  switch (reified.typeName) {\n    case \"0x1::string::String\":\n    case \"0x1::ascii::String\":\n      return new TextDecoder().decode(Uint8Array.from(field.bytes)).toString();\n    case \"0x2::url::Url\":\n      return new TextDecoder().decode(Uint8Array.from(field.url.bytes)).toString();\n    case \"0x2::object::ID\":\n      return `0x${field.bytes}`;\n    case \"0x2::object::UID\":\n      return `0x${field.id.bytes}`;\n    case \"0x1::option::Option\": {\n      if (field.vec.length === 0) {\n        return null;\n      }\n      return (reified.fromFields(field) as any).vec[0];\n    }\n    default:\n      return reified.fromFields(field);\n  }\n}\n\nexport function decodeFromFieldsWithTypes(reified: Reified<TypeArgument, any>, item: any) {\n  switch (reified) {\n    case \"bool\":\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n      return item;\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n      return BigInt(item);\n    case \"address\":\n      return item;\n  }\n  if (reified.kind === \"VectorClassReified\") {\n    return reified.fromFieldsWithTypes(item).elements;\n  }\n  switch (reified.typeName) {\n    case \"0x1::string::String\":\n    case \"0x1::ascii::String\":\n    case \"0x2::url::Url\":\n    case \"0x2::object::ID\":\n      return item;\n    case \"0x2::object::UID\":\n      return item.id;\n    case \"0x2::balance::Balance\":\n      return reified.fromFields({ value: BigInt(item) });\n    case \"0x1::option::Option\": {\n      if (item === null) {\n        return null;\n      }\n      return decodeFromFieldsWithTypes((reified as any).reifiedTypeArgs[0], item);\n    }\n    default:\n      return reified.fromFieldsWithTypes(item);\n  }\n}\n\nexport function assertReifiedTypeArgsMatch(\n  fullType: string,\n  typeArgs: string[],\n  reifiedTypeArgs: Array<Reified<TypeArgument, any> | PhantomReified<string>>\n) {\n  if (reifiedTypeArgs.length !== typeArgs.length) {\n    throw new Error(\n      `provided item has mismatching number of type argments ${fullType} (expected ${reifiedTypeArgs.length}, got ${typeArgs.length}))`\n    );\n  }\n  for (let i = 0; i < typeArgs.length; i++) {\n    if (compressSuiType(typeArgs[i]) !== compressSuiType(extractType(reifiedTypeArgs[i]))) {\n      throw new Error(\n        `provided item has mismatching type argments ${fullType} (expected ${extractType(reifiedTypeArgs[i])}, got ${\n          typeArgs[i]\n        }))`\n      );\n    }\n  }\n}\n\nexport function assertFieldsWithTypesArgsMatch(\n  item: FieldsWithTypes,\n  reifiedTypeArgs: Array<Reified<TypeArgument, any> | PhantomReified<string>>\n) {\n  const { typeArgs: itemTypeArgs } = parseTypeName(item.type);\n  assertReifiedTypeArgsMatch(item.type, itemTypeArgs, reifiedTypeArgs);\n}\n\nexport function fieldToJSON<T extends TypeArgument>(type: string, field: ToField<T>): ToJSON<T> {\n  const { typeName, typeArgs } = parseTypeName(type);\n  switch (typeName) {\n    case \"bool\":\n      return field as any;\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n      return field as any;\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n      return field.toString() as any;\n    case \"address\":\n    case \"signer\":\n      return field as any;\n    case \"vector\":\n      return (field as any[]).map((item: any) => fieldToJSON(typeArgs[0], item)) as any;\n    // handle special types\n    case \"0x1::string::String\":\n    case \"0x1::ascii::String\":\n    case \"0x2::url::Url\":\n    case \"0x2::object::ID\":\n    case \"0x2::object::UID\":\n      return field as any;\n    case \"0x1::option::Option\": {\n      if (field === null) {\n        return null as any;\n      }\n      return fieldToJSON(typeArgs[0], field);\n    }\n    default:\n      return (field as any).toJSONField();\n  }\n}\n\nexport function decodeFromJSONField(typeArg: Reified<TypeArgument, any>, field: any) {\n  switch (typeArg) {\n    case \"bool\":\n    case \"u8\":\n    case \"u16\":\n    case \"u32\":\n      return field;\n    case \"u64\":\n    case \"u128\":\n    case \"u256\":\n      return BigInt(field);\n    case \"address\":\n      return field;\n  }\n  if (typeArg.kind === \"VectorClassReified\") {\n    return typeArg.fromJSONField(field).elements;\n  }\n  switch (typeArg.typeName) {\n    case \"0x1::string::String\":\n    case \"0x1::ascii::String\":\n    case \"0x2::url::Url\":\n    case \"0x2::object::ID\":\n    case \"0x2::object::UID\":\n      return field;\n    case \"0x1::option::Option\": {\n      if (field === null) {\n        return null;\n      }\n      return decodeFromJSONField(typeArg.reifiedTypeArgs[0] as any, field);\n    }\n    default:\n      return typeArg.fromJSONField(field);\n  }\n}\n", "// @ts-nocheck\n\nimport { bcs } from \"@mysten/sui/bcs\";\nimport {\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  Reified,\n  toBcs,\n  ToField,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  VectorClass,\n  VectorClassReified,\n  fieldToJSON,\n} from \"./reified\";\nimport { composeSuiType, FieldsWithTypes } from \"./util\";\n\nexport type VectorElements<T extends TypeArgument> = Array<ToField<T>>;\n\nexport type VectorReified<T extends TypeArgument> = VectorClassReified<Vector<T>, VectorElements<T>>;\n\nexport class Vector<T extends TypeArgument> implements VectorClass {\n  __VectorClass = true as const;\n\n  static readonly $typeName = \"vector\";\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [false] as const;\n\n  readonly $typeName = \"vector\";\n  readonly $fullTypeName: `vector<${ToTypeStr<T>}>`;\n  readonly $typeArgs: [ToTypeStr<T>];\n  readonly $isPhantom = [false] as const;\n\n  readonly elements: Array<ToField<T>>;\n\n  constructor(typeArgs: [ToTypeStr<T>], elements: VectorElements<T>) {\n    this.$fullTypeName = composeSuiType(this.$typeName, ...typeArgs) as `vector<${ToTypeStr<T>}>`;\n    this.$typeArgs = typeArgs;\n\n    this.elements = elements;\n  }\n\n  static reified<T extends Reified<TypeArgument, any>>(T: T): VectorReified<ToTypeArgument<T>> {\n    return {\n      typeName: Vector.$typeName,\n      fullTypeName: composeSuiType(Vector.$typeName, ...[extractType(T)]) as `vector<${ToTypeStr<ToTypeArgument<T>>}>`,\n      typeArgs: [extractType(T)] as [ToTypeStr<ToTypeArgument<T>>],\n      isPhantom: Vector.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (elements: any[]) => Vector.fromFields(T, elements),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Vector.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => Vector.fromBcs(T, data),\n      bcs: Vector.bcs(toBcs(T)),\n      fromJSONField: (field: any) => Vector.fromJSONField(T, field),\n      fromJSON: (json: any) => Vector.fromJSON(T, json),\n      new: (elements: VectorElements<ToTypeArgument<T>>) => {\n        return new Vector([extractType(T)], elements);\n      },\n      kind: \"VectorClassReified\",\n    };\n  }\n\n  static get r() {\n    return Vector.reified;\n  }\n\n  static get bcs() {\n    return bcs.vector;\n  }\n\n  static fromFields<T extends Reified<TypeArgument, any>>(typeArg: T, elements: any[]): Vector<ToTypeArgument<T>> {\n    return Vector.reified(typeArg).new(elements.map((element) => decodeFromFields(typeArg, element)));\n  }\n\n  static fromFieldsWithTypes<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): Vector<ToTypeArgument<T>> {\n    return Vector.reified(typeArg).new(\n      (item as unknown as any[]).map((field: any) => decodeFromFieldsWithTypes(typeArg, field))\n    );\n  }\n\n  static fromBcs<T extends Reified<TypeArgument, any>>(typeArg: T, data: Uint8Array): Vector<ToTypeArgument<T>> {\n    return Vector.fromFields(typeArg, Vector.bcs(toBcs(typeArg)).parse(data));\n  }\n\n  toJSONField() {\n    return this.elements.map((element) => fieldToJSON(this.$typeArgs[0], element));\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      elements: this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends Reified<TypeArgument, any>>(typeArg: T, field: any[]): Vector<ToTypeArgument<T>> {\n    return Vector.reified(typeArg).new(field.map((field) => decodeFromJSONField(typeArg, field)));\n  }\n\n  static fromJSON<T extends Reified<TypeArgument, any>>(typeArg: T, json: any): Vector<ToTypeArgument<T>> {\n    if (json.$typeName !== Vector.$typeName) {\n      throw new Error(\"not a vector json object\");\n    }\n\n    return Vector.fromJSONField(typeArg, json.elements);\n  }\n}\n\nexport function vector<T extends Reified<TypeArgument, any>>(\n  T: T\n): VectorClassReified<Vector<ToTypeArgument<T>>, VectorElements<ToTypeArgument<T>>> {\n  return Vector.r(T);\n}\n", "// @ts-nocheck\nimport * as reified from \"../../../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  fieldToJSON,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { Vector } from \"../../../../_framework/vector\";\nimport { PKG_V13 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Char =============================== */\n\nexport function isChar(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V13}::ascii::Char`;\n}\n\nexport interface CharFields {\n  byte: ToField<\"u8\">;\n}\n\nexport type CharReified = Reified<Char, CharFields>;\n\nexport class Char implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V13}::ascii::Char`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Char.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Char.$isPhantom;\n\n  readonly byte: ToField<\"u8\">;\n\n  private constructor(typeArgs: [], fields: CharFields) {\n    this.$fullTypeName = composeSuiType(Char.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.byte = fields.byte;\n  }\n\n  static reified(): CharReified {\n    return {\n      typeName: Char.$typeName,\n      fullTypeName: composeSuiType(Char.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Char.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Char.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Char.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Char.fromBcs(data),\n      bcs: Char.bcs,\n      fromJSONField: (field: any) => Char.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Char.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Char.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Char.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Char.fetch(client, id),\n      new: (fields: CharFields) => {\n        return new Char([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Char.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Char>> {\n    return phantom(Char.reified());\n  }\n  static get p() {\n    return Char.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Char\", {\n      byte: bcs.u8(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Char {\n    return Char.reified().new({ byte: decodeFromFields(\"u8\", fields.byte) });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Char {\n    if (!isChar(item.type)) {\n      throw new Error(\"not a Char type\");\n    }\n\n    return Char.reified().new({\n      byte: decodeFromFieldsWithTypes(\"u8\", item.fields.byte),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Char {\n    return Char.fromFields(Char.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      byte: this.byte,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Char {\n    return Char.reified().new({ byte: decodeFromJSONField(\"u8\", field.byte) });\n  }\n\n  static fromJSON(json: Record<string, any>): Char {\n    if (json.$typeName !== Char.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Char.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Char {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isChar(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Char object`);\n    }\n    return Char.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Char {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isChar(data.bcs.type)) {\n        throw new Error(`object at is not a Char object`);\n      }\n\n      return Char.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Char.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Char> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Char object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isChar(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Char object`);\n    }\n\n    return Char.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== String =============================== */\n\nexport function isString(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V13}::ascii::String`;\n}\n\nexport interface StringFields {\n  bytes: ToField<Vector<\"u8\">>;\n}\n\nexport type StringReified = Reified<String, StringFields>;\n\nexport class String implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V13}::ascii::String`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = String.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = String.$isPhantom;\n\n  readonly bytes: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: StringFields) {\n    this.$fullTypeName = composeSuiType(String.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.bytes = fields.bytes;\n  }\n\n  static reified(): StringReified {\n    return {\n      typeName: String.$typeName,\n      fullTypeName: composeSuiType(String.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: String.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => String.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => String.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => String.fromBcs(data),\n      bcs: String.bcs,\n      fromJSONField: (field: any) => String.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => String.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => String.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => String.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => String.fetch(client, id),\n      new: (fields: StringFields) => {\n        return new String([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return String.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<String>> {\n    return phantom(String.reified());\n  }\n  static get p() {\n    return String.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"String\", {\n      bytes: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): String {\n    return String.reified().new({\n      bytes: decodeFromFields(reified.vector(\"u8\"), fields.bytes),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): String {\n    if (!isString(item.type)) {\n      throw new Error(\"not a String type\");\n    }\n\n    return String.reified().new({\n      bytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.bytes),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): String {\n    return String.fromFields(String.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      bytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.bytes),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): String {\n    return String.reified().new({\n      bytes: decodeFromJSONField(reified.vector(\"u8\"), field.bytes),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): String {\n    if (json.$typeName !== String.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return String.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): String {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isString(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a String object`);\n    }\n    return String.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): String {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isString(data.bcs.type)) {\n        throw new Error(`object at is not a String object`);\n      }\n\n      return String.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return String.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<String> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching String object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isString(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a String object`);\n    }\n\n    return String.fromSuiObjectData(res.data);\n  }\n}\n", "// @ts-nocheck\nexport const PACKAGE_ID = \"0x1\";\nexport const PUBLISHED_AT = \"0x1\";\nexport const PKG_V13 = \"0x1\";\n", "// @ts-nocheck\nimport * as reified from \"../../../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  fieldToJSON,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { Vector } from \"../../../../_framework/vector\";\nimport { PKG_V13 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== String =============================== */\n\nexport function isString(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V13}::string::String`;\n}\n\nexport interface StringFields {\n  bytes: ToField<Vector<\"u8\">>;\n}\n\nexport type StringReified = Reified<String, StringFields>;\n\nexport class String implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V13}::string::String`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = String.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = String.$isPhantom;\n\n  readonly bytes: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: StringFields) {\n    this.$fullTypeName = composeSuiType(String.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.bytes = fields.bytes;\n  }\n\n  static reified(): StringReified {\n    return {\n      typeName: String.$typeName,\n      fullTypeName: composeSuiType(String.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: String.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => String.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => String.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => String.fromBcs(data),\n      bcs: String.bcs,\n      fromJSONField: (field: any) => String.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => String.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => String.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => String.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => String.fetch(client, id),\n      new: (fields: StringFields) => {\n        return new String([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return String.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<String>> {\n    return phantom(String.reified());\n  }\n  static get p() {\n    return String.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"String\", {\n      bytes: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): String {\n    return String.reified().new({\n      bytes: decodeFromFields(reified.vector(\"u8\"), fields.bytes),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): String {\n    if (!isString(item.type)) {\n      throw new Error(\"not a String type\");\n    }\n\n    return String.reified().new({\n      bytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.bytes),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): String {\n    return String.fromFields(String.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      bytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.bytes),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): String {\n    return String.reified().new({\n      bytes: decodeFromJSONField(reified.vector(\"u8\"), field.bytes),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): String {\n    if (json.$typeName !== String.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return String.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): String {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isString(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a String object`);\n    }\n    return String.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): String {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isString(data.bcs.type)) {\n        throw new Error(`object at is not a String object`);\n      }\n\n      return String.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return String.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<String> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching String object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isString(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a String object`);\n    }\n\n    return String.fromSuiObjectData(res.data);\n  }\n}\n", "// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64, fromHEX, toHEX } from \"@mysten/sui/utils\";\n\n/* ============================== ID =============================== */\n\nexport function isID(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::object::ID`;\n}\n\nexport interface IDFields {\n  bytes: ToField<\"address\">;\n}\n\nexport type IDReified = Reified<ID, IDFields>;\n\nexport class ID implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::object::ID`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = ID.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = ID.$isPhantom;\n\n  readonly bytes: ToField<\"address\">;\n\n  private constructor(typeArgs: [], fields: IDFields) {\n    this.$fullTypeName = composeSuiType(ID.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.bytes = fields.bytes;\n  }\n\n  static reified(): IDReified {\n    return {\n      typeName: ID.$typeName,\n      fullTypeName: composeSuiType(ID.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: ID.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => ID.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => ID.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => ID.fromBcs(data),\n      bcs: ID.bcs,\n      fromJSONField: (field: any) => ID.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => ID.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => ID.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => ID.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => ID.fetch(client, id),\n      new: (fields: IDFields) => {\n        return new ID([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return ID.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<ID>> {\n    return phantom(ID.reified());\n  }\n  static get p() {\n    return ID.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"ID\", {\n      bytes: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): ID {\n    return ID.reified().new({\n      bytes: decodeFromFields(\"address\", fields.bytes),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): ID {\n    if (!isID(item.type)) {\n      throw new Error(\"not a ID type\");\n    }\n\n    return ID.reified().new({\n      bytes: decodeFromFieldsWithTypes(\"address\", item.fields.bytes),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): ID {\n    return ID.fromFields(ID.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      bytes: this.bytes,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): ID {\n    return ID.reified().new({\n      bytes: decodeFromJSONField(\"address\", field.bytes),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): ID {\n    if (json.$typeName !== ID.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return ID.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): ID {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isID(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a ID object`);\n    }\n    return ID.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): ID {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isID(data.bcs.type)) {\n        throw new Error(`object at is not a ID object`);\n      }\n\n      return ID.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return ID.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<ID> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching ID object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isID(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a ID object`);\n    }\n\n    return ID.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== UID =============================== */\n\nexport function isUID(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::object::UID`;\n}\n\nexport interface UIDFields {\n  id: ToField<ID>;\n}\n\nexport type UIDReified = Reified<UID, UIDFields>;\n\nexport class UID implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::object::UID`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = UID.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = UID.$isPhantom;\n\n  readonly id: ToField<ID>;\n\n  private constructor(typeArgs: [], fields: UIDFields) {\n    this.$fullTypeName = composeSuiType(UID.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified(): UIDReified {\n    return {\n      typeName: UID.$typeName,\n      fullTypeName: composeSuiType(UID.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: UID.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => UID.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => UID.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => UID.fromBcs(data),\n      bcs: UID.bcs,\n      fromJSONField: (field: any) => UID.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => UID.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => UID.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => UID.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => UID.fetch(client, id),\n      new: (fields: UIDFields) => {\n        return new UID([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return UID.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<UID>> {\n    return phantom(UID.reified());\n  }\n  static get p() {\n    return UID.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"UID\", {\n      id: ID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): UID {\n    return UID.reified().new({ id: decodeFromFields(ID.reified(), fields.id) });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): UID {\n    if (!isUID(item.type)) {\n      throw new Error(\"not a UID type\");\n    }\n\n    return UID.reified().new({\n      id: decodeFromFieldsWithTypes(ID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): UID {\n    return UID.fromFields(UID.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): UID {\n    return UID.reified().new({\n      id: decodeFromJSONField(ID.reified(), field.id),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): UID {\n    if (json.$typeName !== UID.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return UID.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): UID {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isUID(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a UID object`);\n    }\n    return UID.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): UID {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isUID(data.bcs.type)) {\n        throw new Error(`object at is not a UID object`);\n      }\n\n      return UID.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return UID.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<UID> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching UID object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isUID(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a UID object`);\n    }\n\n    return UID.fromSuiObjectData(res.data);\n  }\n}\n", "// @ts-nocheck\nexport const PACKAGE_ID = \"0x2\";\nexport const PUBLISHED_AT = \"0x2\";\nexport const PKG_V26 = \"0x2\";\n", "interface PaginatedResults<Data> {\n  data: Data[];\n  hasNextPage: boolean;\n  nextCursor?: string | null;\n}\n\nexport async function fetchAllPagesRecursive<Data, Result extends PaginatedResults<Data>>(\n  fetchFunction: (cursor?: string | null) => Promise<Result>,\n  cursor?: string | null,\n  accumulatedData: Data[] = []\n): Promise<Data[]> {\n  const result = await fetchFunction(cursor);\n  const newAccumulatedData = accumulatedData.concat(result.data);\n\n  if (result.hasNextPage && result.nextCursor) {\n    return fetchAllPagesRecursive(fetchFunction, result.nextCursor, newAccumulatedData);\n  } else {\n    return newAccumulatedData;\n  }\n}\n", "import { Big } from \"big.js\";\nimport { TronWeb } from \"tronweb\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { SdkError } from \"../../../exceptions\";\nimport { FeePaymentMethod, Messenger, SwapParams, TransactionResponse } from \"../../../models\";\nimport { RawTransaction, SmartContractMethodParameter } from \"../../models\";\nimport { sendRawTransaction } from \"../../utils/trx\";\nimport { SendParams, TxSendParamsTrx, TxSwapParamsTrx } from \"../models\";\nimport { ChainBridgeService } from \"../models/bridge\";\nimport { getNonceBigInt, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\n\nexport class TronBridgeService extends ChainBridgeService {\n  chainType: ChainType.TRX = ChainType.TRX;\n\n  constructor(\n    public tronWeb: TronWeb,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async send(params: SendParams): Promise<TransactionResponse> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    const rawTransaction = await this.buildRawTransactionSendFromParams(txSendParams);\n    return await sendRawTransaction(this.tronWeb, rawTransaction);\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction> {\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildRawTransactionSwapFromParams(txSwapParams);\n  }\n\n  async buildRawTransactionSwapFromParams(params: TxSwapParamsTrx): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toAccountAddress,\n      toTokenAddress,\n      minimumReceiveAmount,\n    } = params;\n\n    const parameters = [\n      { type: \"uint256\", value: amount },\n      { type: \"bytes32\", value: fromTokenAddress },\n      { type: \"bytes32\", value: toTokenAddress },\n      { type: \"address\", value: toAccountAddress },\n      { type: \"uint256\", value: minimumReceiveAmount },\n    ];\n    const methodSignature = \"swap(uint256,bytes32,bytes32,address,uint256)\";\n    return this.buildRawTransaction(contractAddress, methodSignature, parameters, \"0\", fromAccountAddress);\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    return this.buildRawTransactionSendFromParams(txSendParams);\n  }\n\n  async buildRawTransactionSendFromParams(params: TxSendParamsTrx): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      messenger,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = params;\n\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n\n    const nonce = getNonceBigInt().toString();\n    let parameters;\n    let value: string;\n    let methodSignature: string;\n    if (messenger == Messenger.CCTP || messenger == Messenger.CCTP_V2) {\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        parameters = [\n          { type: \"uint256\", value: amount },\n          { type: \"bytes32\", value: toAccountAddress },\n          { type: \"uint256\", value: toChainId },\n          { type: \"uint256\", value: totalFee },\n        ];\n        value = \"0\";\n      } else {\n        parameters = [\n          { type: \"uint256\", value: amount },\n          { type: \"bytes32\", value: toAccountAddress },\n          { type: \"uint256\", value: toChainId },\n          { type: \"uint256\", value: 0 },\n        ];\n        value = totalFee;\n      }\n      methodSignature = \"bridge(uint256,bytes32,uint256,uint256)\";\n    } else {\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        parameters = [\n          { type: \"bytes32\", value: fromTokenAddress },\n          { type: \"uint256\", value: amount },\n          { type: \"bytes32\", value: toAccountAddress },\n          { type: \"uint256\", value: toChainId },\n          { type: \"bytes32\", value: toTokenAddress },\n          { type: \"uint256\", value: nonce },\n          { type: \"uint8\", value: messenger },\n          { type: \"uint256\", value: totalFee },\n        ];\n        value = \"0\";\n      } else {\n        parameters = [\n          { type: \"bytes32\", value: fromTokenAddress },\n          { type: \"uint256\", value: amount },\n          { type: \"bytes32\", value: toAccountAddress },\n          { type: \"uint256\", value: toChainId },\n          { type: \"bytes32\", value: toTokenAddress },\n          { type: \"uint256\", value: nonce },\n          { type: \"uint8\", value: messenger },\n          { type: \"uint256\", value: 0 },\n        ];\n        value = totalFee;\n      }\n      methodSignature = \"swapAndBridge(bytes32,uint256,bytes32,uint256,bytes32,uint256,uint8,uint256)\";\n    }\n    return this.buildRawTransaction(contractAddress, methodSignature, parameters, value, fromAccountAddress);\n  }\n\n  private async buildRawTransaction(\n    contractAddress: string,\n    methodSignature: string,\n    parameters: SmartContractMethodParameter[],\n    value: string,\n    fromAddress: string\n  ): Promise<RawTransaction> {\n    const transactionObject = await this.tronWeb.transactionBuilder.triggerSmartContract(\n      contractAddress,\n      methodSignature,\n      {\n        callValue: +value,\n      },\n      parameters,\n      fromAddress\n    );\n    if (!transactionObject?.result?.result) {\n      throw new SdkError(\"Unknown error: \" + JSON.stringify(transactionObject, null, 2));\n    }\n    return transactionObject.transaction;\n  }\n}\n", "import BN from \"bn.js\";\n\nexport function amountToHex(amount: string): string {\n  return \"0x\" + new BN(amount).toString(\"hex\");\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(() => resolve(), ms));\n}\n\nexport const promisify =\n  // prettier-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n  (func: Function) =>\n    (...args: any[]) =>\n      new Promise<any>(\n        (resolve, reject) =>\n          func(...args, (err: Error, result: any) => (err ? reject(err) : resolve(result)))\n      );\n", "import { TronWeb } from \"tronweb\";\nimport { SignedTransaction } from \"tronweb/src/types/Transaction\";\nimport { InvalidTxError, VerifyTxError } from \"../../../exceptions\";\nimport { RawTransaction } from \"../../models\";\nimport { sleep } from \"../index\";\n\nexport async function sendRawTransaction(tronWeb: TronWeb, rawTransaction: RawTransaction): Promise<{ txId: string }> {\n  const signedTx = await tronWeb.trx.sign(rawTransaction as any);\n\n  if (!(signedTx as SignedTransaction).signature) {\n    throw new InvalidTxError(\"Transaction was not signed properly\");\n  }\n\n  const receipt = await tronWeb.trx.sendRawTransaction(signedTx);\n  const transactionHash = receipt.transaction.txID;\n  await verifyTx(tronWeb, transactionHash);\n  return { txId: transactionHash };\n}\n\nexport async function verifyTx(tronWeb: TronWeb, txId: string, timeout = 10000): Promise<any> {\n  const start = Date.now();\n\n  while (true) {\n    if (Date.now() - start > timeout) {\n      throw new VerifyTxError(\"Transaction not found\");\n    }\n    const result = await tronWeb.trx.getUnconfirmedTransactionInfo(txId);\n    if (!result?.receipt) {\n      await sleep(2000);\n      continue;\n    }\n    if (result.receipt.result === \"SUCCESS\") {\n      return result;\n    } else {\n      throw new VerifyTxError(`Transaction status is ${result.receipt.result}`);\n    }\n  }\n}\n", "import { Big } from \"big.js\";\nimport Cache from \"timed-cache\";\nimport { TronWeb } from \"tronweb\";\nimport { FMT_BYTES, FMT_NUMBER, Web3 } from \"web3\";\nimport { NodeRpcUrlsConfig } from \"..\";\nimport { Chains } from \"../../chains\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport { AllbridgeCoreClientFiltered } from \"../../client/core-api/core-client-filtered\";\nimport { AllbridgeCoreSdkOptions, ChainType, EssentialWeb3 } from \"../../index\";\nimport { PoolInfo, PoolKeyObject, TokenWithChainDetails } from \"../../tokens-info\";\nimport { convertIntAmountToFloat, fromSystemPrecision } from \"../../utils/calculation\";\nimport { SYSTEM_PRECISION } from \"../../utils/calculation/constants\";\nimport { validateAmountDecimals, validateAmountGtZero } from \"../../utils/utils\";\nimport { Provider, TransactionResponse } from \"../models\";\nimport { TokenService } from \"../token\";\nimport { depositAmountToVUsd, vUsdToWithdrawalAmount } from \"../utils/calculation\";\nimport { EvmPoolService } from \"./evm\";\nimport { ApproveParams, ChainPoolService, CheckAllowanceParams, GetAllowanceParams, UserBalanceInfo } from \"./models\";\nimport { DefaultRawPoolTransactionBuilder, RawPoolTransactionBuilder } from \"./raw-pool-transaction-builder\";\nimport { SolanaPoolService } from \"./sol\";\nimport { SrbPoolService } from \"./srb\";\nimport { SuiPoolService } from \"./sui\";\nimport { TronPoolService } from \"./trx\";\n\nexport interface LiquidityPoolService {\n  rawTxBuilder: RawPoolTransactionBuilder;\n\n  /**\n   * Get amount of tokens approved for poolInfo\n   * @param provider - will be used to access the network\n   * @param params See {@link GetAllowanceParams}\n   * @returns the amount of approved tokens\n   */\n  getAllowance(provider: Provider, params: GetAllowanceParams): Promise<string>;\n\n  /**\n   * Get amount of tokens approved for poolInfo\n   * @param params See {@link GetAllowanceParams}\n   * @returns the amount of approved tokens\n   */\n  getAllowance(params: GetAllowanceParams): Promise<string>;\n\n  /**\n   * Check if the amount of approved tokens is enough\n   * @param provider - will be used to access the network\n   * @param params See {@link CheckAllowanceParams}\n   * @returns true if the amount of approved tokens is enough to make a transfer\n   */\n  checkAllowance(provider: Provider, params: CheckAllowanceParams): Promise<boolean>;\n\n  /**\n   * Check if the amount of approved tokens is enough\n   * @param params See {@link CheckAllowanceParams}\n   * @returns true if the amount of approved tokens is enough to make a transfer\n   */\n  checkAllowance(params: CheckAllowanceParams): Promise<boolean>;\n\n  /**\n   * @deprecated Use {@link rawTxBuilder}.{@link RawPoolTransactionBuilder.approve}<p>\n   * Approve tokens usage by another address on chains\n   * <p>\n   * For ETH/USDT: due to specificity of the USDT contract:<br/>\n   * If the current allowance is not 0, this function will perform an additional transaction to set allowance to 0 before setting the new allowance value.\n   * @param provider - will be used to access the network\n   * @param approveData\n   */\n  approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;\n\n  /**\n   * Calculates the amount of LP tokens that will be deposited\n   * @param amount The float amount of tokens that will be sent\n   * @param token\n   * @param provider - will be used to access the network\n   * @returns amount\n   */\n  getAmountToBeDeposited(amount: string, token: TokenWithChainDetails, provider?: Provider): Promise<string>;\n\n  /**\n   * Calculates the amount of tokens will be withdrawn\n   * @param amount The float amount of tokens that will be sent\n   * @param accountAddress\n   * @param token\n   * @param provider - will be used to access the network\n   * @returns amount\n   */\n  getAmountToBeWithdrawn(\n    amount: string,\n    accountAddress: string,\n    token: TokenWithChainDetails,\n    provider?: Provider\n  ): Promise<string>;\n\n  /**\n   * Get User Balance Info on Liquidity poolInfo\n   * @param accountAddress\n   * @param token\n   * @param provider\n   * @returns UserBalanceInfo\n   */\n  getUserBalanceInfo(\n    accountAddress: string,\n    token: TokenWithChainDetails,\n    provider?: Provider\n  ): Promise<UserBalanceInfo>;\n\n  /**\n   * Gets information about the poolInfo from chain\n   * @param token\n   * @param provider - will be used to access the network\n   * @returns poolInfo\n   */\n  getPoolInfoFromChain(token: TokenWithChainDetails, provider?: Provider): Promise<Required<PoolInfo>>;\n}\n\nexport class DefaultLiquidityPoolService implements LiquidityPoolService {\n  public rawTxBuilder: RawPoolTransactionBuilder;\n  private cache: Cache<PoolInfo>;\n\n  constructor(\n    private api: AllbridgeCoreClientFiltered,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    private params: AllbridgeCoreSdkOptions,\n    private tokenService: TokenService\n  ) {\n    this.rawTxBuilder = new DefaultRawPoolTransactionBuilder(api, nodeRpcUrlsConfig, this.params, tokenService);\n    const ttl = params.cachePoolInfoChainSec > 0 ? params.cachePoolInfoChainSec * 1000 : 20 * 1000;\n    this.cache = new Cache<PoolInfo>({ defaultTtl: ttl });\n  }\n\n  async getAllowance(a: Provider | GetAllowanceParams, b?: GetAllowanceParams): Promise<string> {\n    if (b) {\n      const provider = a as Provider;\n      const params = b;\n      return await this.tokenService.getAllowance({ ...params, spender: params.token.poolAddress }, provider);\n    } else {\n      const params = a as GetAllowanceParams;\n      return await this.tokenService.getAllowance({ ...params, spender: params.token.poolAddress });\n    }\n  }\n\n  async checkAllowance(a: Provider | CheckAllowanceParams, b?: CheckAllowanceParams): Promise<boolean> {\n    if (b) {\n      const provider = a as Provider;\n      const params = b;\n      return this.tokenService.checkAllowance({ ...params, spender: params.token.poolAddress }, provider);\n    } else {\n      const params = a as CheckAllowanceParams;\n      return this.tokenService.checkAllowance({ ...params, spender: params.token.poolAddress });\n    }\n  }\n\n  async approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse> {\n    return this.tokenService.approve(provider, { ...approveData, spender: approveData.token.poolAddress });\n  }\n\n  async getAmountToBeDeposited(amount: string, token: TokenWithChainDetails, provider?: Provider): Promise<string> {\n    validateAmountGtZero(amount);\n    validateAmountDecimals(\"amount\", amount, token.decimals);\n    const pool = await this.getPoolInfoFromChain(token, provider);\n    const { vUsdBalance, tokenBalance, aValue, dValue } = pool;\n    const vUsd = depositAmountToVUsd(amount, aValue, dValue, tokenBalance, vUsdBalance);\n    return convertIntAmountToFloat(vUsd, SYSTEM_PRECISION).toFixed();\n  }\n\n  async getAmountToBeWithdrawn(\n    amount: string,\n    accountAddress: string,\n    token: TokenWithChainDetails,\n    provider?: Provider\n  ): Promise<string> {\n    validateAmountGtZero(amount);\n    validateAmountDecimals(\"amount\", amount, token.decimals);\n    const pool = await this.getPoolInfoFromChain(token, provider);\n    const tokenAmountInSP = vUsdToWithdrawalAmount(amount);\n    const tokenAmount = fromSystemPrecision(tokenAmountInSP, token.decimals);\n    const userBalanceInfo = await this.getUserBalanceInfo(accountAddress, token, provider);\n    const earned = userBalanceInfo.earned(pool) || \"0\";\n    const commonAmount = Big(tokenAmount).plus(earned).toFixed();\n    return convertIntAmountToFloat(commonAmount, token.decimals).toFixed();\n  }\n\n  async getUserBalanceInfo(\n    accountAddress: string,\n    token: TokenWithChainDetails,\n    provider?: Provider\n  ): Promise<UserBalanceInfo> {\n    return getChainPoolService(\n      token.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).getUserBalanceInfo(accountAddress, token);\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails, provider?: Provider): Promise<PoolInfo> {\n    const poolKey: PoolKeyObject = { chainSymbol: token.chainSymbol, poolAddress: token.poolAddress };\n    const fromCache = this.cache.get(poolKey);\n    if (fromCache) {\n      return fromCache;\n    } else {\n      const poolInfo = await getChainPoolService(\n        token.chainSymbol,\n        this.api,\n        this.nodeRpcUrlsConfig,\n        this.params,\n        provider\n      ).getPoolInfoFromChain(token);\n      this.cache.put(poolKey, poolInfo);\n      this.api.cachePut({ chainSymbol: token.chainSymbol, poolAddress: token.poolAddress }, poolInfo);\n      return poolInfo;\n    }\n  }\n}\n\nexport function getChainPoolService(\n  chainSymbol: string,\n  api: AllbridgeCoreClient,\n  nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n  params: AllbridgeCoreSdkOptions,\n  provider?: Provider\n): ChainPoolService {\n  switch (Chains.getChainProperty(chainSymbol).chainType) {\n    case ChainType.EVM: {\n      if (provider) {\n        return new EvmPoolService(provider as EssentialWeb3, api);\n      } else {\n        const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n        const web3 = new Web3(nodeRpcUrl);\n        web3.defaultReturnFormat = { number: FMT_NUMBER.STR, bytes: FMT_BYTES.HEX };\n        return new EvmPoolService(web3, api);\n      }\n    }\n    case ChainType.TRX: {\n      const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n      const tronJsonRpc = params.tronJsonRpc;\n      if (provider) {\n        return new TronPoolService(provider as TronWeb, api, tronJsonRpc);\n      } else {\n        const tronWeb = new TronWeb({ fullHost: nodeRpcUrl });\n        return new TronPoolService(tronWeb, api, tronJsonRpc);\n      }\n    }\n    case ChainType.SOLANA: {\n      const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n      return new SolanaPoolService(nodeRpcUrl, api);\n    }\n    case ChainType.SRB: {\n      return new SrbPoolService(nodeRpcUrlsConfig, params, api);\n    }\n    case ChainType.SUI: {\n      return new SuiPoolService(nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol), api);\n    }\n  }\n}\n", "import { Big } from \"big.js\";\nimport { convertFloatAmountToInt, getD } from \"../../../utils/calculation\";\nimport { SYSTEM_PRECISION } from \"../../../utils/calculation/constants\";\n\nexport function depositAmountToVUsd(\n  amount: string,\n  aValue: string,\n  dValue: string,\n  tokenBalance: string,\n  vUsdBalance: string\n): string {\n  const amountSP = convertFloatAmountToInt(amount, SYSTEM_PRECISION);\n  const amountSPBig = Big(amountSP);\n\n  const oldD = Big(dValue);\n  const oldBalance = Big(tokenBalance).plus(vUsdBalance);\n\n  let newTokenBalance;\n  let newVUsdBalance;\n\n  if (oldD.eq(0) || oldBalance.eq(0)) {\n    const halfAmount = amountSPBig.div(2);\n    newTokenBalance = Big(tokenBalance).plus(halfAmount);\n    newVUsdBalance = Big(vUsdBalance).plus(halfAmount);\n  } else {\n    newTokenBalance = Big(tokenBalance).plus(amountSPBig.mul(tokenBalance).div(oldBalance));\n    newVUsdBalance = Big(vUsdBalance).plus(amountSPBig.mul(vUsdBalance).div(oldBalance));\n  }\n  const newD = Big(getD(aValue, newTokenBalance.toFixed(), newVUsdBalance.toFixed()));\n  return newD.minus(oldD).toFixed();\n}\n\nexport function vUsdToWithdrawalAmount(lpAmount: string): string {\n  const lpAmountSP = convertFloatAmountToInt(lpAmount, SYSTEM_PRECISION);\n  return Big(lpAmountSP).round().toFixed();\n}\n", "import { Contract, Web3 } from \"web3\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../../tokens-info\";\nimport { calculatePoolInfoImbalance } from \"../../../utils/calculation\";\nimport { promiseWithTimeout, promiseWithTimeoutAndRetries } from \"../../../utils/utils\";\nimport { EssentialWeb3, RawTransaction } from \"../../models\";\nimport Pool from \"../../models/abi/Pool\";\nimport {\n  ChainPoolService,\n  LiquidityPoolsParams,\n  LiquidityPoolsParamsWithAmount,\n  UserBalance,\n  UserBalanceInfo,\n} from \"../models\";\n\nexport class EvmPoolService extends ChainPoolService {\n  chainType: ChainType.EVM = ChainType.EVM;\n  private P = 52;\n\n  constructor(\n    public web3: EssentialWeb3,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo> {\n    let userBalanceInfo;\n    try {\n      userBalanceInfo = await promiseWithTimeout(\n        this.getUserBalanceInfoByBatch(accountAddress, token),\n        `Cannot get UserBalanceInfo for ${token.name} on ${token.chainSymbol}`,\n        5000\n      );\n    } catch (ignoreError) {\n      userBalanceInfo = await promiseWithTimeoutAndRetries(\n        () => this.getUserBalanceInfoPerProperty(accountAddress, token),\n        `Cannot get UserBalanceInfo for ${token.name} on ${token.chainSymbol}`,\n        5,\n        2000\n      );\n    }\n    return userBalanceInfo;\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo> {\n    let poolInfo;\n    try {\n      poolInfo = await promiseWithTimeout(\n        this.getPoolInfoByBatch(token),\n        `Cannot get PoolInfo for ${token.name} on ${token.chainSymbol}`,\n        5000\n      );\n    } catch (ignoreError) {\n      poolInfo = await promiseWithTimeoutAndRetries(\n        () => this.getPoolInfoPerProperty(token),\n        `Cannot get PoolInfo for ${token.name} on ${token.chainSymbol}`,\n        5,\n        2000\n      );\n    }\n    return poolInfo;\n  }\n\n  private async getUserBalanceInfoByBatch(\n    accountAddress: string,\n    token: TokenWithChainDetails\n  ): Promise<UserBalanceInfo> {\n    const batch = new this.web3.eth.BatchRequest();\n    const poolContract = this.getPoolContract(token.poolAddress);\n\n    const userRewardDebtAbi = poolContract.methods.userRewardDebt(accountAddress).encodeABI();\n    const balanceOfAbi = poolContract.methods.balanceOf(accountAddress).encodeABI();\n\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: userRewardDebtAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: balanceOfAbi }, \"latest\"],\n    });\n\n    const [rewardDebtResult, lpAmountResult] = await batch.execute();\n\n    if (rewardDebtResult && lpAmountResult && !rewardDebtResult.error && !lpAmountResult.error) {\n      return new UserBalance({\n        lpAmount: Web3.utils.toBigInt(lpAmountResult.result).toString(),\n        rewardDebt: Web3.utils.toBigInt(rewardDebtResult.result).toString(),\n      });\n    }\n    throw new Error(\"Batched failed\");\n  }\n\n  private async getUserBalanceInfoPerProperty(\n    accountAddress: string,\n    token: TokenWithChainDetails\n  ): Promise<UserBalanceInfo> {\n    const rewardDebt = (\n      await this.getPoolContract(token.poolAddress).methods.userRewardDebt(accountAddress).call()\n    ).toString();\n    const lpAmount = (\n      await this.getPoolContract(token.poolAddress).methods.balanceOf(accountAddress).call()\n    ).toString();\n    return new UserBalance({ lpAmount, rewardDebt });\n  }\n\n  private async getPoolInfoByBatch(token: TokenWithChainDetails): Promise<PoolInfo> {\n    const batch = new this.web3.eth.BatchRequest();\n    const poolContract = this.getPoolContract(token.poolAddress);\n\n    const aAbi = poolContract.methods.a().encodeABI();\n    const dAbi = poolContract.methods.d().encodeABI();\n    const tokenBalanceAbi = poolContract.methods.tokenBalance().encodeABI();\n    const vUsdBalanceAbi = poolContract.methods.vUsdBalance().encodeABI();\n    const totalSupplyAbi = poolContract.methods.totalSupply().encodeABI();\n    const accRewardPerSharePAbi = poolContract.methods.accRewardPerShareP().encodeABI();\n\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: aAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: dAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: tokenBalanceAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: vUsdBalanceAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: totalSupplyAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: accRewardPerSharePAbi }, \"latest\"],\n    });\n\n    const [aResult, dResult, tokenBalanceResult, vUsdBalanceResult, totalSupplyResult, accRewardPerSharePResult] =\n      await batch.execute();\n\n    if (\n      aResult &&\n      dResult &&\n      tokenBalanceResult &&\n      vUsdBalanceResult &&\n      totalSupplyResult &&\n      accRewardPerSharePResult &&\n      !aResult.error &&\n      !dResult.error &&\n      !tokenBalanceResult.error &&\n      !vUsdBalanceResult.error &&\n      !totalSupplyResult.error &&\n      !accRewardPerSharePResult.error\n    ) {\n      const tokenBalanceStr = Web3.utils.toBigInt(tokenBalanceResult.result).toString();\n      const vUsdBalanceStr = Web3.utils.toBigInt(vUsdBalanceResult.result).toString();\n      const imbalance = calculatePoolInfoImbalance({ tokenBalance: tokenBalanceStr, vUsdBalance: vUsdBalanceStr });\n      return {\n        aValue: Web3.utils.toBigInt(aResult.result).toString(),\n        dValue: Web3.utils.toBigInt(dResult.result).toString(),\n        tokenBalance: tokenBalanceStr,\n        vUsdBalance: vUsdBalanceStr,\n        totalLpAmount: Web3.utils.toBigInt(totalSupplyResult.result).toString(),\n        accRewardPerShareP: Web3.utils.toBigInt(accRewardPerSharePResult.result).toString(),\n        p: this.P,\n        imbalance,\n      };\n    }\n    throw new Error(\"Batched failed\");\n  }\n\n  private async getPoolInfoPerProperty(token: TokenWithChainDetails): Promise<PoolInfo> {\n    const poolContract = this.getPoolContract(token.poolAddress);\n\n    const aValue = (await poolContract.methods.a().call()).toString();\n    const dValue = (await poolContract.methods.d().call()).toString();\n    const tokenBalance = (await poolContract.methods.tokenBalance().call()).toString();\n    const vUsdBalance = (await poolContract.methods.vUsdBalance().call()).toString();\n    const totalLpAmount = (await poolContract.methods.totalSupply().call()).toString();\n    const accRewardPerShareP = (await poolContract.methods.accRewardPerShareP().call()).toString();\n\n    const imbalance = calculatePoolInfoImbalance({ tokenBalance, vUsdBalance });\n\n    return {\n      aValue,\n      dValue,\n      tokenBalance,\n      vUsdBalance,\n      totalLpAmount,\n      accRewardPerShareP,\n      p: this.P,\n      imbalance,\n    };\n  }\n\n  async buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    return Promise.resolve({\n      ...this.buildTxParams(params),\n      data: this.getPoolContract(params.token.poolAddress).methods.deposit(params.amount).encodeABI(),\n    });\n  }\n\n  async buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    return Promise.resolve({\n      ...this.buildTxParams(params),\n      data: this.getPoolContract(params.token.poolAddress).methods.withdraw(params.amount).encodeABI(),\n    });\n  }\n\n  async buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawTransaction> {\n    return Promise.resolve({\n      ...this.buildTxParams(params),\n      data: this.getPoolContract(params.token.poolAddress).methods.claimRewards().encodeABI(),\n    });\n  }\n\n  buildTxParams(params: LiquidityPoolsParams) {\n    return {\n      from: params.accountAddress,\n      to: params.token.poolAddress,\n      value: \"0\",\n    };\n  }\n\n  private getPoolContract(contractAddress: string) {\n    return new this.web3.eth.Contract(Pool.abi, contractAddress) as Contract<typeof Pool.abi>;\n  }\n}\n", "const artifact = {\n  abi: [\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"_router\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"_a\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"contract ERC20\",\n          name: \"_token\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint16\",\n          name: \"_feeShareBP\",\n          type: \"uint16\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"_balanceRatioMinBP\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"string\",\n          name: \"lpName\",\n          type: \"string\",\n        },\n        {\n          internalType: \"string\",\n          name: \"lpSymbol\",\n          type: \"string\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"constructor\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"Approval\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"Deposit\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"previousOwner\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"newOwner\",\n          type: \"address\",\n        },\n      ],\n      name: \"OwnershipTransferred\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"RewardsClaimed\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"recipient\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"vUsdAmount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"fee\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"SwappedFromVUsd\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"sender\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"address\",\n          name: \"token\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"vUsdAmount\",\n          type: \"uint256\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"fee\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"SwappedToVUsd\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"from\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"Transfer\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"Withdraw\",\n      type: \"event\",\n    },\n    {\n      stateMutability: \"payable\",\n      type: \"fallback\",\n    },\n    {\n      inputs: [],\n      name: \"a\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"accRewardPerShareP\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"adjustTotalLpAmount\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"adminFeeAmount\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"adminFeeShareBP\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n      ],\n      name: \"allowance\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"approve\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"account\",\n          type: \"address\",\n        },\n      ],\n      name: \"balanceOf\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"balanceRatioMinBP\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"canDeposit\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"canWithdraw\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"claimAdminFee\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"claimRewards\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"d\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"decimals\",\n      outputs: [\n        {\n          internalType: \"uint8\",\n          name: \"\",\n          type: \"uint8\",\n        },\n      ],\n      stateMutability: \"pure\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"subtractedValue\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"decreaseAllowance\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"deposit\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"feeShareBP\",\n      outputs: [\n        {\n          internalType: \"uint16\",\n          name: \"\",\n          type: \"uint16\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"getPrice\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"x\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"getY\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"addedValue\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"increaseAllowance\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"name\",\n      outputs: [\n        {\n          internalType: \"string\",\n          name: \"\",\n          type: \"string\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"owner\",\n      outputs: [\n        {\n          internalType: \"address\",\n          name: \"\",\n          type: \"address\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\",\n        },\n      ],\n      name: \"pendingReward\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"renounceOwnership\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"reserves\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"router\",\n      outputs: [\n        {\n          internalType: \"address\",\n          name: \"\",\n          type: \"address\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"_adminFeeShareBP\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"setAdminFeeShare\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"_balanceRatioMinBP\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"setBalanceRatioMinBP\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint16\",\n          name: \"_feeShareBP\",\n          type: \"uint16\",\n        },\n      ],\n      name: \"setFeeShare\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"_router\",\n          type: \"address\",\n        },\n      ],\n      name: \"setRouter\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"_stopAuthority\",\n          type: \"address\",\n        },\n      ],\n      name: \"setStopAuthority\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"startDeposit\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"startWithdraw\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"stopDeposit\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"stopWithdraw\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"receiveAmountMin\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bool\",\n          name: \"zeroFee\",\n          type: \"bool\",\n        },\n      ],\n      name: \"swapFromVUsd\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n        {\n          internalType: \"bool\",\n          name: \"zeroFee\",\n          type: \"bool\",\n        },\n      ],\n      name: \"swapToVUsd\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"symbol\",\n      outputs: [\n        {\n          internalType: \"string\",\n          name: \"\",\n          type: \"string\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"token\",\n      outputs: [\n        {\n          internalType: \"contract ERC20\",\n          name: \"\",\n          type: \"address\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"tokenBalance\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"totalSupply\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"transfer\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"from\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"transferFrom\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"newOwner\",\n          type: \"address\",\n        },\n      ],\n      name: \"transferOwnership\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"user\",\n          type: \"address\",\n        },\n      ],\n      name: \"userRewardDebt\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"vUsdBalance\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"uint256\",\n          name: \"amountLp\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"withdraw\",\n      outputs: [],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      stateMutability: \"payable\",\n      type: \"receive\",\n    },\n  ],\n} as const;\nexport default artifact;\n", "import { Big } from \"big.js\";\nimport { FeePaymentMethod, TxFeeParams } from \"../../../models\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../../tokens-info\";\nimport { convertIntAmountToFloat, getEarned } from \"../../../utils/calculation\";\nimport { SYSTEM_PRECISION } from \"../../../utils/calculation/constants\";\n\nexport interface ApproveParams {\n  /**\n   * The token info\n   */\n  token: TokenWithChainDetails;\n\n  /**\n   *  The address of the token owner who is granting permission to use tokens\n   */\n  owner: string;\n\n  /**\n   * The integer amount of tokens to approve.\n   * Optional.\n   * The maximum amount by default.\n   */\n  amount?: string | number | Big;\n}\n\nexport interface GetAllowanceParams {\n  token: TokenWithChainDetails;\n  owner: string;\n  gasFeePaymentMethod?: FeePaymentMethod;\n}\n\nexport type GetAllowanceParamsDto = GetAllowanceParams;\n\nexport interface CheckAllowanceParams extends GetAllowanceParams {\n  /**\n   * The float amount of tokens to check the allowance.\n   */\n  amount: string | number | Big;\n}\n\nexport interface LiquidityPoolsParams {\n  /**\n   * The account address to operate tokens with.\n   */\n  accountAddress: string;\n  /**\n   * {@link TokenWithChainDetails |The token info object} of operation token.\n   */\n  token: TokenWithChainDetails;\n\n  txFeeParams?: TxFeeParams;\n}\n\nexport interface LiquidityPoolsParamsWithAmount extends LiquidityPoolsParams {\n  /**\n   * The float amount of tokens.\n   */\n  amount: string;\n}\n\nexport interface UserBalanceInfoDTO {\n  lpAmount: string;\n  rewardDebt: string;\n}\n\nexport interface UserBalanceInfo extends UserBalanceInfoDTO {\n  userLiquidity: string;\n\n  earned(poolInfo: PoolInfo, decimals?: number): string;\n}\n\nexport class UserBalance implements UserBalanceInfo {\n  lpAmount: string;\n  rewardDebt: string;\n\n  constructor(userInfo: UserBalanceInfoDTO) {\n    this.lpAmount = userInfo.lpAmount;\n    this.rewardDebt = userInfo.rewardDebt;\n  }\n\n  get userLiquidity(): string {\n    return convertIntAmountToFloat(this.lpAmount, SYSTEM_PRECISION).toFixed();\n  }\n\n  earned(poolInfo: PoolInfo, decimals?: number): string {\n    const earned = getEarned(this.lpAmount, this.rewardDebt, poolInfo.accRewardPerShareP, poolInfo.p);\n    if (decimals) {\n      return convertIntAmountToFloat(earned, decimals).toFixed();\n    }\n    return earned;\n  }\n}\n", "import { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../../tokens-info\";\nimport { RawTransaction } from \"../../models\";\nimport { LiquidityPoolsParams, LiquidityPoolsParamsWithAmount, UserBalanceInfo } from \"./pool.model\";\n\nexport abstract class ChainPoolService {\n  abstract chainType: ChainType;\n  abstract api: AllbridgeCoreClient;\n\n  abstract getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo>;\n\n  abstract getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo>;\n\n  abstract buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction>;\n\n  abstract buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction>;\n\n  abstract buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawTransaction>;\n}\n", "import { NodeRpcUrlsConfig } from \"..\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport { AllbridgeCoreSdkOptions } from \"../../index\";\nimport { convertFloatAmountToInt } from \"../../utils/calculation\";\nimport { SYSTEM_PRECISION } from \"../../utils/calculation/constants\";\nimport { validateAmountDecimals, validateAmountGtZero } from \"../../utils/utils\";\nimport { Provider, RawTransaction } from \"../models\";\nimport { TokenService } from \"../token\";\nimport { ApproveParams, LiquidityPoolsParams, LiquidityPoolsParamsWithAmount } from \"./models\";\nimport { getChainPoolService } from \"./index\";\n\nexport interface RawPoolTransactionBuilder {\n  /**\n   * Creates a Raw Transaction for approving tokens usage by the bridge\n   * @param provider - will be used to access the network\n   * @param approveData\n   */\n  approve(provider: Provider, approveData: ApproveParams): Promise<RawTransaction>;\n  /**\n   * Creates a Raw Transaction for approving tokens usage by the bridge\n   * @param approveData\n   */\n  approve(approveData: ApproveParams): Promise<RawTransaction>;\n\n  /**\n   * Creates a Raw Transaction for depositing tokens to Liquidity pools\n   * @param params\n   * @param provider - will be used to access the network\n   */\n  deposit(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction>;\n\n  /**\n   * Creates a Raw Transaction for withdrawing tokens from Liquidity pools\n   * @param params\n   * @param provider - will be used to access the network\n   */\n  withdraw(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction>;\n\n  /**\n   * Creates a Raw Transaction for claiming rewards from Liquidity pools\n   * @param params\n   * @param provider - will be used to access the network\n   */\n  claimRewards(params: LiquidityPoolsParams, provider?: Provider): Promise<RawTransaction>;\n}\n\nexport class DefaultRawPoolTransactionBuilder implements RawPoolTransactionBuilder {\n  constructor(\n    private api: AllbridgeCoreClient,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    private params: AllbridgeCoreSdkOptions,\n    private tokenService: TokenService\n  ) {}\n\n  async approve(a: Provider | ApproveParams, b?: ApproveParams): Promise<RawTransaction> {\n    if (b) {\n      const provider = a as Provider;\n      const approveData: ApproveParams = b;\n      return this.tokenService.buildRawTransactionApprove(\n        {\n          ...approveData,\n          spender: approveData.token.poolAddress,\n        },\n        provider\n      );\n    } else {\n      const approveData: ApproveParams = a as ApproveParams;\n      return this.tokenService.buildRawTransactionApprove({\n        ...approveData,\n        spender: approveData.token.poolAddress,\n      });\n    }\n  }\n\n  async deposit(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction> {\n    validateAmountGtZero(params.amount);\n    validateAmountDecimals(\"amount\", params.amount, params.token.decimals);\n    params.amount = convertFloatAmountToInt(params.amount, params.token.decimals).toFixed();\n    return getChainPoolService(\n      params.token.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).buildRawTransactionDeposit(params);\n  }\n\n  async withdraw(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction> {\n    validateAmountGtZero(params.amount);\n    validateAmountDecimals(\"amount\", params.amount, params.token.decimals);\n    params.amount = convertFloatAmountToInt(params.amount, SYSTEM_PRECISION).toFixed();\n    return getChainPoolService(\n      params.token.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).buildRawTransactionWithdraw(params);\n  }\n\n  async claimRewards(params: LiquidityPoolsParams, provider?: Provider): Promise<RawTransaction> {\n    return getChainPoolService(\n      params.token.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).buildRawTransactionClaimRewards(params);\n  }\n}\n", "import { AnchorProvider, BN, Program, Provider, Spl, web3 } from \"@project-serum/anchor\";\nimport { Connection, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../../tokens-info\";\nimport { calculatePoolInfoImbalance } from \"../../../utils/calculation\";\nimport { RawTransaction } from \"../../models\";\nimport { Bridge as BridgeType, IDL as bridgeIdl } from \"../../models/sol/types/bridge\";\nimport { getTokenAccountData } from \"../../utils/sol\";\nimport {\n  getAssociatedAccount,\n  getAuthorityAccount,\n  getBridgeTokenAccount,\n  getConfigAccount,\n  getUserDepositAccount,\n} from \"../../utils/sol/accounts\";\nimport { addUnitLimitAndUnitPriceToTx } from \"../../utils/sol/compute-budget\";\nimport { LiquidityPoolsParams, LiquidityPoolsParamsWithAmount, UserBalance, UserBalanceInfo } from \"../models\";\nimport { ChainPoolService } from \"../models/pool\";\n\ninterface LPAccounts {\n  mint: PublicKey;\n  user: PublicKey;\n  config: PublicKey;\n  pool: PublicKey;\n  bridgeAuthority: PublicKey;\n  userDeposit: PublicKey;\n  userToken: PublicKey;\n  bridgeToken: PublicKey;\n}\n\ninterface LPTransactionData {\n  accounts: LPAccounts;\n  preInstructions: TransactionInstruction[];\n}\n\nexport class SolanaPoolService extends ChainPoolService {\n  chainType: ChainType.SOLANA = ChainType.SOLANA;\n  private P = 48;\n\n  constructor(\n    public solanaRpcUrl: string,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo> {\n    const provider = this.buildAnchorProvider(accountAddress);\n    const bridge = this.getBridge(token.bridgeAddress, provider);\n    const poolAccount = new PublicKey(token.poolAddress);\n    const poolAccountInfo = await bridge.account.pool.fetch(poolAccount);\n    try {\n      const userDepositAccount = await getUserDepositAccount(\n        new PublicKey(accountAddress),\n        poolAccountInfo.mint,\n        bridge.programId\n      );\n      const { lpAmount, rewardDebt } = await bridge.account.userDeposit.fetch(userDepositAccount);\n      return new UserBalance({\n        lpAmount: lpAmount.toString(),\n        rewardDebt: rewardDebt.toString(),\n      });\n    } catch (ignoreError) {\n      return new UserBalance({ lpAmount: \"0\", rewardDebt: \"0\" });\n    }\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo> {\n    const provider = this.buildAnchorProvider(token.bridgeAddress);\n    const pool = await this.getBridge(token.bridgeAddress, provider).account.pool.fetch(token.poolAddress);\n    const vUsdBalance = pool.vUsdBalance.toString();\n    const tokenBalance = pool.tokenBalance.toString();\n    const imbalance = calculatePoolInfoImbalance({ tokenBalance, vUsdBalance });\n    return {\n      dValue: pool.d.toString(),\n      aValue: pool.a.toString(),\n      totalLpAmount: pool.totalLpAmount.toString(),\n      vUsdBalance,\n      tokenBalance,\n      accRewardPerShareP: pool.accRewardPerShareP.toString(),\n      p: this.P,\n      imbalance,\n    };\n  }\n\n  async buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const { bridge, accounts, preInstructions } = await this.prepareDataForTransaction(params);\n\n    const tx = await bridge.methods\n      .deposit(new BN(params.amount))\n      .accounts(accounts)\n      .preInstructions(preInstructions)\n      .transaction();\n    tx.recentBlockhash = (\n      await this.buildAnchorProvider(params.accountAddress).connection.getLatestBlockhash()\n    ).blockhash;\n    tx.feePayer = new PublicKey(params.accountAddress);\n    await addUnitLimitAndUnitPriceToTx(tx, params.txFeeParams, this.solanaRpcUrl);\n    return tx;\n  }\n\n  async buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const { bridge, accounts, preInstructions } = await this.prepareDataForTransaction(params);\n\n    const tx = await bridge.methods\n      .withdraw(new BN(params.amount))\n      .accounts(accounts)\n      .preInstructions(preInstructions)\n      .transaction();\n    tx.recentBlockhash = (\n      await this.buildAnchorProvider(params.accountAddress).connection.getLatestBlockhash()\n    ).blockhash;\n    tx.feePayer = new PublicKey(params.accountAddress);\n    await addUnitLimitAndUnitPriceToTx(tx, params.txFeeParams, this.solanaRpcUrl);\n    return tx;\n  }\n\n  async buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawTransaction> {\n    const { bridge, accounts, preInstructions } = await this.prepareDataForTransaction(params);\n\n    const tx = await bridge.methods.claimRewards().accounts(accounts).preInstructions(preInstructions).transaction();\n    tx.recentBlockhash = (\n      await this.buildAnchorProvider(params.accountAddress).connection.getLatestBlockhash()\n    ).blockhash;\n    tx.feePayer = new PublicKey(params.accountAddress);\n    await addUnitLimitAndUnitPriceToTx(tx, params.txFeeParams, this.solanaRpcUrl);\n    return tx;\n  }\n\n  private async prepareDataForTransaction(params: LiquidityPoolsParams) {\n    const provider = this.buildAnchorProvider(params.accountAddress);\n    const bridge = this.getBridge(params.token.bridgeAddress, provider);\n\n    const { accounts, preInstructions } = await this._getLPTransactionData(\n      bridge,\n      params.token.poolAddress,\n      params.accountAddress,\n      provider\n    );\n    return { bridge, accounts, preInstructions };\n  }\n\n  private getBridge(bridgeAddress: string, provider: Provider): Program<BridgeType> {\n    return new Program<BridgeType>(bridgeIdl, bridgeAddress, provider);\n  }\n\n  private buildAnchorProvider(accountAddress: string): Provider {\n    const connection = new Connection(this.solanaRpcUrl, \"confirmed\");\n\n    const publicKey = new PublicKey(accountAddress);\n\n    return new AnchorProvider(\n      connection,\n      // @ts-expect-error enough wallet for fetch actions\n      { publicKey: publicKey },\n      {\n        preflightCommitment: \"confirmed\",\n        commitment: \"confirmed\",\n      }\n    );\n  }\n\n  private async _getLPTransactionData(\n    bridge: Program<BridgeType>,\n    poolAddress: string,\n    account: string,\n    provider: Provider\n  ): Promise<LPTransactionData> {\n    const user = new PublicKey(account);\n    const configAccount = await getConfigAccount(bridge.programId);\n    const bridgeAuthority = await getAuthorityAccount(bridge.programId);\n    const poolAccount = new PublicKey(poolAddress);\n    const poolAccountInfo = await bridge.account.pool.fetch(poolAccount);\n    const tokenMintAccount = poolAccountInfo.mint;\n    const userToken = await getAssociatedAccount(user, tokenMintAccount);\n    const bridgeTokenAccount = await getBridgeTokenAccount(tokenMintAccount, bridge.programId);\n    const userDepositAccount = await getUserDepositAccount(user, tokenMintAccount, bridge.programId);\n\n    const preInstructions: TransactionInstruction[] = [\n      web3.ComputeBudgetProgram.setComputeUnitLimit({\n        units: 1000000,\n      }),\n    ];\n\n    try {\n      await getTokenAccountData(userToken, provider);\n    } catch (ignoreError) {\n      const associatedProgram = Spl.associatedToken(provider);\n      const createUserTokenInstruction: TransactionInstruction = await associatedProgram.methods\n        .create()\n        .accounts({\n          mint: tokenMintAccount,\n          owner: user,\n          associatedAccount: userToken,\n        })\n        .instruction();\n      preInstructions.push(createUserTokenInstruction);\n    }\n\n    try {\n      await bridge.account.userDeposit.fetch(userDepositAccount);\n    } catch (ignoreError) {\n      const instruction: TransactionInstruction = await bridge.methods\n        .initDepositAccount()\n        .accounts({\n          mint: tokenMintAccount,\n          user,\n          userDeposit: userDepositAccount,\n        })\n        .instruction();\n      preInstructions.push(instruction);\n    }\n\n    const accounts: LPAccounts = {\n      mint: tokenMintAccount,\n      user,\n      config: configAccount,\n      pool: poolAccount,\n      bridgeAuthority: bridgeAuthority,\n      userDeposit: userDepositAccount,\n      userToken,\n      bridgeToken: bridgeTokenAccount,\n    };\n\n    return { accounts, preInstructions };\n  }\n}\n", "import { contract } from \"@stellar/stellar-sdk\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { AllbridgeCoreSdkOptions, ChainSymbol, ChainType } from \"../../../index\";\nimport {\n  LiquidityPoolsParams,\n  LiquidityPoolsParamsWithAmount,\n  PoolInfo,\n  SdkError,\n  TokenWithChainDetails,\n  UserBalanceInfo,\n} from \"../../../models\";\nimport { calculatePoolInfoImbalance } from \"../../../utils/calculation\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { RawTransaction } from \"../../models\";\nimport { PoolContract } from \"../../models/srb/pool-contract\";\nimport { getViewResultSoroban, isErrorSorobanResult } from \"../../models/srb/utils\";\nimport { ChainPoolService, UserBalance } from \"../models\";\nimport ContractClientOptions = contract.ClientOptions;\n\nexport class SrbPoolService extends ChainPoolService {\n  chainType: ChainType.SRB = ChainType.SRB;\n  private P = 48;\n\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions,\n    readonly api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo> {\n    const poolContract = this.getContract(token.poolAddress);\n    const result = await poolContract.get_user_deposit({ user: accountAddress });\n    if (isErrorSorobanResult(result)) {\n      throw new SdkError();\n    }\n    const viewResultSoroban = getViewResultSoroban(result);\n    if (!viewResultSoroban) {\n      throw new SdkError();\n    }\n\n    const userDeposit = viewResultSoroban.unwrap();\n    return new UserBalance({\n      lpAmount: userDeposit.lp_amount.toString(),\n      rewardDebt: userDeposit.reward_debt.toString(),\n    });\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo> {\n    const poolContract = this.getContract(token.poolAddress);\n    const result = await poolContract.get_pool();\n    if (isErrorSorobanResult(result)) {\n      throw new SdkError();\n    }\n    const viewResultSoroban = getViewResultSoroban(result);\n    if (!viewResultSoroban) {\n      throw new SdkError();\n    }\n\n    const pool = viewResultSoroban.unwrap();\n    return {\n      aValue: pool.a.toString(),\n      accRewardPerShareP: pool.acc_reward_per_share_p.toString(),\n      dValue: pool.d.toString(),\n      tokenBalance: pool.token_balance.toString(),\n      p: this.P,\n      totalLpAmount: pool.total_lp_amount.toString(),\n      vUsdBalance: pool.v_usd_balance.toString(),\n      imbalance: calculatePoolInfoImbalance({\n        tokenBalance: pool.token_balance.toString(),\n        vUsdBalance: pool.v_usd_balance.toString(),\n      }),\n    };\n  }\n\n  async buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const poolContract = this.getContract(params.token.poolAddress, params.accountAddress);\n    return (\n      await poolContract.deposit({\n        sender: params.accountAddress,\n        amount: BigInt(params.amount),\n      })\n    ).toXDR();\n  }\n\n  async buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const poolContract = this.getContract(params.token.poolAddress, params.accountAddress);\n    return (\n      await poolContract.withdraw({\n        sender: params.accountAddress,\n        amount_lp: BigInt(params.amount),\n      })\n    ).toXDR();\n  }\n\n  async buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawTransaction> {\n    const poolContract = this.getContract(params.token.poolAddress, params.accountAddress);\n    return (\n      await poolContract.claim_rewards({\n        sender: params.accountAddress,\n      })\n    ).toXDR();\n  }\n\n  private getContract(address: string, sender?: string): PoolContract {\n    const config: ContractClientOptions = {\n      publicKey: sender,\n      contractId: address,\n      networkPassphrase: this.params.sorobanNetworkPassphrase,\n      rpcUrl: this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB),\n    };\n    return new PoolContract(config);\n  }\n}\n", "import { contract } from \"@stellar/stellar-sdk\";\nimport u128 = contract.u128;\nimport u32 = contract.u32;\nimport AssembledTransaction = contract.AssembledTransaction;\nimport Result = contract.Result;\nimport ContractSpec = contract.Spec;\nimport ContractClient = contract.Client;\nimport ContractClientOptions = contract.ClientOptions;\n\nexport interface SwappedFromVUsd {\n  amount: u128;\n  fee: u128;\n  recipient: string;\n  token: string;\n  vusd_amount: u128;\n}\n\nexport interface SwappedToVUsd {\n  amount: u128;\n  fee: u128;\n  sender: string;\n  token: string;\n  vusd_amount: u128;\n}\n\nexport interface Deposit {\n  amount: u128;\n  user: string;\n}\n\nexport interface Withdraw {\n  amount: u128;\n  user: string;\n}\n\nexport interface RewardsClaimed {\n  amount: u128;\n  user: string;\n}\n\nexport type Bridge = readonly [string];\nexport interface DataKey {\n  tag: \"UserDeposit\";\n  values: readonly [string];\n}\n\nexport interface Pool {\n  a: u128;\n  acc_reward_per_share_p: u128;\n  admin_fee_amount: u128;\n  admin_fee_share_bp: u128;\n  balance_ratio_min_bp: u128;\n  can_deposit: boolean;\n  can_withdraw: boolean;\n  d: u128;\n  decimals: u32;\n  fee_share_bp: u128;\n  reserves: u128;\n  token: string;\n  token_balance: u128;\n  total_lp_amount: u128;\n  v_usd_balance: u128;\n}\n\nexport interface UserDeposit {\n  lp_amount: u128;\n  reward_debt: u128;\n}\n\nexport type Admin = readonly [string];\nexport type GasOracleAddress = readonly [string];\nexport type GasUsage = readonly [Map<u32, u128>];\nexport type NativeToken = readonly [string];\nexport type StopAuthority = readonly [string];\nexport const Errors = {\n  0: { message: \"\" },\n  1: { message: \"\" },\n  2: { message: \"\" },\n  3: { message: \"\" },\n  4: { message: \"\" },\n  5: { message: \"\" },\n  6: { message: \"\" },\n  7: { message: \"\" },\n  8: { message: \"\" },\n  9: { message: \"\" },\n  10: { message: \"\" },\n  11: { message: \"\" },\n  12: { message: \"\" },\n  103: { message: \"\" },\n  104: { message: \"\" },\n  105: { message: \"\" },\n  106: { message: \"\" },\n  107: { message: \"\" },\n  108: { message: \"\" },\n  109: { message: \"\" },\n  203: { message: \"\" },\n  204: { message: \"\" },\n  205: { message: \"\" },\n  206: { message: \"\" },\n  207: { message: \"\" },\n  208: { message: \"\" },\n  209: { message: \"\" },\n  210: { message: \"\" },\n  211: { message: \"\" },\n  212: { message: \"\" },\n  214: { message: \"\" },\n  215: { message: \"\" },\n  216: { message: \"\" },\n  217: { message: \"\" },\n  218: { message: \"\" },\n  300: { message: \"\" },\n  301: { message: \"\" },\n  302: { message: \"\" },\n  303: { message: \"\" },\n  400: { message: \"\" },\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport interface PoolContract {\n  /**\n   * Construct and simulate a initialize transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  initialize: (\n    {\n      admin,\n      bridge,\n      a,\n      token,\n      fee_share_bp,\n      balance_ratio_min_bp,\n      admin_fee_share_bp,\n    }: {\n      admin: string;\n      bridge: string;\n      a: u128;\n      token: string;\n      fee_share_bp: u128;\n      balance_ratio_min_bp: u128;\n      admin_fee_share_bp: u128;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a deposit transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  deposit: (\n    { sender, amount }: { sender: string; amount: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a withdraw transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  withdraw: (\n    { sender, amount_lp }: { sender: string; amount_lp: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a swap_to_v_usd transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  swap_to_v_usd: (\n    { user, amount, zero_fee }: { user: string; amount: u128; zero_fee: boolean },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a swap_from_v_usd transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  swap_from_v_usd: (\n    {\n      user,\n      vusd_amount,\n      receive_amount_min,\n      zero_fee,\n    }: {\n      user: string;\n      vusd_amount: u128;\n      receive_amount_min: u128;\n      zero_fee: boolean;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a claim_rewards transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  claim_rewards: (\n    { sender }: { sender: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_fee_share transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * `admin`\n   */\n  set_fee_share: (\n    { fee_share_bp }: { fee_share_bp: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a adjust_total_lp_amount transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  adjust_total_lp_amount: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_balance_ratio_min_bp transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_balance_ratio_min_bp: (\n    { balance_ratio_min_bp }: { balance_ratio_min_bp: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a stop_deposit transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  stop_deposit: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a start_deposit transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  start_deposit: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a stop_withdraw transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  stop_withdraw: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a start_withdraw transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  start_withdraw: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_stop_authority transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_stop_authority: (\n    { stop_authority }: { stop_authority: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_bridge transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_bridge: (\n    { bridge }: { bridge: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_admin: (\n    { new_admin }: { new_admin: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_admin_fee_share transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_admin_fee_share: (\n    { admin_fee_share_bp }: { admin_fee_share_bp: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a claim_admin_fee transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  claim_admin_fee: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a pending_reward transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * `view`\n   */\n  pending_reward: (\n    { user }: { user: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_pool transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_pool: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<Pool>>>;\n\n  /**\n   * Construct and simulate a get_admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_admin: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_stop_authority transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_stop_authority: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_bridge transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_bridge: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_user_deposit transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_user_deposit: (\n    { user }: { user: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<UserDeposit>>>;\n\n  /**\n   * Construct and simulate a upgrade transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  upgrade: (\n    { new_wasm_hash }: { new_wasm_hash: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class PoolContract extends ContractClient {\n  constructor(public readonly options: ContractClientOptions) {\n    super(\n      new ContractSpec([\n        \"AAAAAAAAAAAAAAAKaW5pdGlhbGl6ZQAAAAAABwAAAAAAAAAFYWRtaW4AAAAAAAATAAAAAAAAAAZicmlkZ2UAAAAAABMAAAAAAAAAAWEAAAAAAAAKAAAAAAAAAAV0b2tlbgAAAAAAABMAAAAAAAAADGZlZV9zaGFyZV9icAAAAAoAAAAAAAAAFGJhbGFuY2VfcmF0aW9fbWluX2JwAAAACgAAAAAAAAASYWRtaW5fZmVlX3NoYXJlX2JwAAAAAAAKAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAHZGVwb3NpdAAAAAACAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAABmFtb3VudAAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAId2l0aGRyYXcAAAACAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAACWFtb3VudF9scAAAAAAAAAoAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAANc3dhcF90b192X3VzZAAAAAAAAAMAAAAAAAAABHVzZXIAAAATAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAACHplcm9fZmVlAAAAAQAAAAEAAAPpAAAACgAAAAM=\",\n        \"AAAAAAAAAAAAAAAPc3dhcF9mcm9tX3ZfdXNkAAAAAAQAAAAAAAAABHVzZXIAAAATAAAAAAAAAAt2dXNkX2Ftb3VudAAAAAAKAAAAAAAAABJyZWNlaXZlX2Ftb3VudF9taW4AAAAAAAoAAAAAAAAACHplcm9fZmVlAAAAAQAAAAEAAAPpAAAACgAAAAM=\",\n        \"AAAAAAAAAAAAAAANY2xhaW1fcmV3YXJkcwAAAAAAAAEAAAAAAAAABnNlbmRlcgAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAdgYWRtaW5gAAAAAA1zZXRfZmVlX3NoYXJlAAAAAAAAAQAAAAAAAAAMZmVlX3NoYXJlX2JwAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAWYWRqdXN0X3RvdGFsX2xwX2Ftb3VudAAAAAAAAAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAYc2V0X2JhbGFuY2VfcmF0aW9fbWluX2JwAAAAAQAAAAAAAAAUYmFsYW5jZV9yYXRpb19taW5fYnAAAAAKAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAMc3RvcF9kZXBvc2l0AAAAAAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAANc3RhcnRfZGVwb3NpdAAAAAAAAAAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAANc3RvcF93aXRoZHJhdwAAAAAAAAAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAAOc3RhcnRfd2l0aGRyYXcAAAAAAAAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAASc2V0X3N0b3BfYXV0aG9yaXR5AAAAAAABAAAAAAAAAA5zdG9wX2F1dGhvcml0eQAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAKc2V0X2JyaWRnZQAAAAAAAQAAAAAAAAAGYnJpZGdlAAAAAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAJc2V0X2FkbWluAAAAAAAAAQAAAAAAAAAJbmV3X2FkbWluAAAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAATc2V0X2FkbWluX2ZlZV9zaGFyZQAAAAABAAAAAAAAABJhZG1pbl9mZWVfc2hhcmVfYnAAAAAAAAoAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAAPY2xhaW1fYWRtaW5fZmVlAAAAAAAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAZgdmlld2AAAAAAAA5wZW5kaW5nX3Jld2FyZAAAAAAAAQAAAAAAAAAEdXNlcgAAABMAAAABAAAD6QAAAAoAAAAD\",\n        \"AAAAAAAAAAAAAAAIZ2V0X3Bvb2wAAAAAAAAAAQAAA+kAAAfQAAAABFBvb2wAAAAD\",\n        \"AAAAAAAAAAAAAAAJZ2V0X2FkbWluAAAAAAAAAAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAASZ2V0X3N0b3BfYXV0aG9yaXR5AAAAAAAAAAAAAQAAA+kAAAATAAAAAw==\",\n        \"AAAAAAAAAAAAAAAKZ2V0X2JyaWRnZQAAAAAAAAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAAQZ2V0X3VzZXJfZGVwb3NpdAAAAAEAAAAAAAAABHVzZXIAAAATAAAAAQAAA+kAAAfQAAAAC1VzZXJEZXBvc2l0AAAAAAM=\",\n        \"AAAAAAAAAAAAAAAHdXBncmFkZQAAAAABAAAAAAAAAA1uZXdfd2FzbV9oYXNoAAAAAAAD7gAAACAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAQAAAAAAAAAAAAAAD1N3YXBwZWRGcm9tVlVzZAAAAAAFAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAAA2ZlZQAAAAAKAAAAAAAAAAlyZWNpcGllbnQAAAAAAAATAAAAAAAAAAV0b2tlbgAAAAAAABMAAAAAAAAAC3Z1c2RfYW1vdW50AAAAAAo=\",\n        \"AAAAAQAAAAAAAAAAAAAADVN3YXBwZWRUb1ZVc2QAAAAAAAAFAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAAA2ZlZQAAAAAKAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAABXRva2VuAAAAAAAAEwAAAAAAAAALdnVzZF9hbW91bnQAAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAB0RlcG9zaXQAAAAAAgAAAAAAAAAGYW1vdW50AAAAAAAKAAAAAAAAAAR1c2VyAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAACFdpdGhkcmF3AAAAAgAAAAAAAAAGYW1vdW50AAAAAAAKAAAAAAAAAAR1c2VyAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAADlJld2FyZHNDbGFpbWVkAAAAAAACAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAABHVzZXIAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAABkJyaWRnZQAAAAAAAQAAAAAAAAABMAAAAAAAABM=\",\n        \"AAAAAgAAAAAAAAAAAAAAB0RhdGFLZXkAAAAAAQAAAAEAAAAAAAAAC1VzZXJEZXBvc2l0AAAAAAEAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAABFBvb2wAAAAPAAAAAAAAAAFhAAAAAAAACgAAAAAAAAAWYWNjX3Jld2FyZF9wZXJfc2hhcmVfcAAAAAAACgAAAAAAAAAQYWRtaW5fZmVlX2Ftb3VudAAAAAoAAAAAAAAAEmFkbWluX2ZlZV9zaGFyZV9icAAAAAAACgAAAAAAAAAUYmFsYW5jZV9yYXRpb19taW5fYnAAAAAKAAAAAAAAAAtjYW5fZGVwb3NpdAAAAAABAAAAAAAAAAxjYW5fd2l0aGRyYXcAAAABAAAAAAAAAAFkAAAAAAAACgAAAAAAAAAIZGVjaW1hbHMAAAAEAAAAAAAAAAxmZWVfc2hhcmVfYnAAAAAKAAAAAAAAAAhyZXNlcnZlcwAAAAoAAAAAAAAABXRva2VuAAAAAAAAEwAAAAAAAAANdG9rZW5fYmFsYW5jZQAAAAAAAAoAAAAAAAAAD3RvdGFsX2xwX2Ftb3VudAAAAAAKAAAAAAAAAA12X3VzZF9iYWxhbmNlAAAAAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAC1VzZXJEZXBvc2l0AAAAAAIAAAAAAAAACWxwX2Ftb3VudAAAAAAAAAoAAAAAAAAAC3Jld2FyZF9kZWJ0AAAAAAo=\",\n        \"AAAAAQAAAAAAAAAAAAAABUFkbWluAAAAAAAAAQAAAAAAAAABMAAAAAAAABM=\",\n        \"AAAAAQAAAAAAAAAAAAAAEEdhc09yYWNsZUFkZHJlc3MAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAACEdhc1VzYWdlAAAAAQAAAAAAAAABMAAAAAAAA+wAAAAEAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAC05hdGl2ZVRva2VuAAAAAAEAAAAAAAAAATAAAAAAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAADVN0b3BBdXRob3JpdHkAAAAAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAABAAAAAAAAAAAAAAABUVycm9yAAAAAAAAKAAAAAAAAAANVW5pbXBsZW1lbnRlZAAAAAAAAAAAAAAAAAAAC0luaXRpYWxpemVkAAAAAAEAAAAAAAAADVVuaW5pdGlhbGl6ZWQAAAAAAAACAAAAAAAAAAxVbmF1dGhvcml6ZWQAAAADAAAAAAAAAApJbnZhbGlkQXJnAAAAAAAEAAAAAAAAAA5JbnZhbGlkQ2hhaW5JZAAAAAAABQAAAAAAAAATSW52YWxpZE90aGVyQ2hhaW5JZAAAAAAGAAAAAAAAAA5HYXNVc2FnZU5vdFNldAAAAAAABwAAAAAAAAANQnJva2VuQWRkcmVzcwAAAAAAAAgAAAAAAAAACE5vdEZvdW5kAAAACQAAAAAAAAAYVG9rZW5JbnN1ZmZpY2llbnRCYWxhbmNlAAAACgAAAAAAAAAKQ2FzdEZhaWxlZAAAAAAACwAAAAAAAAAMVTI1Nk92ZXJmbG93AAAADAAAAAAAAAAKWmVyb0Ftb3VudAAAAAAAZwAAAAAAAAAMUG9vbE92ZXJmbG93AAAAaAAAAAAAAAALWmVyb0NoYW5nZXMAAAAAaQAAAAAAAAARUmVzZXJ2ZXNFeGhhdXN0ZWQAAAAAAABqAAAAAAAAABpJbnN1ZmZpY2llbnRSZWNlaXZlZEFtb3VudAAAAAAAawAAAAAAAAAUQmFsYW5jZVJhdGlvRXhjZWVkZWQAAABsAAAAAAAAAAlGb3JiaWRkZW4AAAAAAABtAAAAAAAAABlVbmF1dGhvcml6ZWRTdG9wQXV0aG9yaXR5AAAAAAAAywAAAAAAAAAOU3dhcFByb2hpYml0ZWQAAAAAAMwAAAAAAAAAEkFtb3VudFRvb0xvd0ZvckZlZQAAAAAAzQAAAAAAAAAWQnJpZGdlVG9UaGVaZXJvQWRkcmVzcwAAAAAAzgAAAAAAAAAORW1wdHlSZWNpcGllbnQAAAAAAM8AAAAAAAAAE1NvdXJjZU5vdFJlZ2lzdGVyZWQAAAAA0AAAAAAAAAAVV3JvbmdEZXN0aW5hdGlvbkNoYWluAAAAAAAA0QAAAAAAAAATVW5rbm93bkFub3RoZXJDaGFpbgAAAADSAAAAAAAAABFUb2tlbnNBbHJlYWR5U2VudAAAAAAAANMAAAAAAAAAEE1lc3NhZ2VQcm9jZXNzZWQAAADUAAAAAAAAAAxOb3RFbm91Z2hGZWUAAADWAAAAAAAAAAlOb01lc3NhZ2UAAAAAAADXAAAAAAAAAA1Ob1JlY2VpdmVQb29sAAAAAAAA2AAAAAAAAAAGTm9Qb29sAAAAAADZAAAAAAAAABNVbmtub3duQW5vdGhlclRva2VuAAAAANoAAAAAAAAAD1dyb25nQnl0ZUxlbmd0aAAAAAEsAAAAAAAAAApIYXNNZXNzYWdlAAAAAAEtAAAAAAAAABdJbnZhbGlkUHJpbWFyeVNpZ25hdHVyZQAAAAEuAAAAAAAAABlJbnZhbGlkU2Vjb25kYXJ5U2lnbmF0dXJlAAAAAAABLwAAAAAAAAARTm9HYXNEYXRhRm9yQ2hhaW4AAAAAAAGQ\",\n      ]),\n      options\n    );\n  }\n  public readonly fromJSON = {\n    initialize: this.txFromJSON<Result<void>>,\n    deposit: this.txFromJSON<Result<void>>,\n    withdraw: this.txFromJSON<Result<void>>,\n    swap_to_v_usd: this.txFromJSON<Result<u128>>,\n    swap_from_v_usd: this.txFromJSON<Result<u128>>,\n    claim_rewards: this.txFromJSON<Result<void>>,\n    set_fee_share: this.txFromJSON<Result<void>>,\n    adjust_total_lp_amount: this.txFromJSON<Result<void>>,\n    set_balance_ratio_min_bp: this.txFromJSON<Result<void>>,\n    stop_deposit: this.txFromJSON<Result<void>>,\n    start_deposit: this.txFromJSON<Result<void>>,\n    stop_withdraw: this.txFromJSON<Result<void>>,\n    start_withdraw: this.txFromJSON<Result<void>>,\n    set_stop_authority: this.txFromJSON<Result<void>>,\n    set_bridge: this.txFromJSON<Result<void>>,\n    set_admin: this.txFromJSON<Result<void>>,\n    set_admin_fee_share: this.txFromJSON<Result<void>>,\n    claim_admin_fee: this.txFromJSON<Result<void>>,\n    pending_reward: this.txFromJSON<Result<u128>>,\n    get_pool: this.txFromJSON<Result<Pool>>,\n    get_admin: this.txFromJSON<Result<string>>,\n    get_stop_authority: this.txFromJSON<Result<string>>,\n    get_bridge: this.txFromJSON<Result<string>>,\n    get_user_deposit: this.txFromJSON<Result<UserDeposit>>,\n    upgrade: this.txFromJSON<Result<void>>,\n  };\n}\n", "import { contract, rpc } from \"@stellar/stellar-sdk\";\nimport Api = rpc.Api;\nimport AssembledTransaction = contract.AssembledTransaction;\nimport SentTransaction = contract.SentTransaction;\n\nexport function getViewResultSoroban<T>(assembledTx: AssembledTransaction<T>): T | undefined {\n  const { simulation, options } = assembledTx;\n  if (!simulation) {\n    throw new Error(\"Soroban assembled transaction does not have simulation\");\n  }\n\n  if (Api.isSimulationSuccess(simulation)) {\n    if (simulation.result == null) {\n      return;\n    }\n    return options.parseResultXdr(simulation.result.retval);\n  } else {\n    throw new Error(simulation.error);\n  }\n}\n\nexport function isErrorSorobanResult<T>(assembledTx: AssembledTransaction<T>): boolean {\n  const { simulation } = assembledTx;\n  if (!simulation) {\n    throw new Error(\"Soroban assembled transaction does not have simulation\");\n  }\n  return Api.isSimulationError(simulation);\n}\n\nexport async function signAndSendSoroban<T>(assembledTx: AssembledTransaction<T>): Promise<SentTransaction<T>> {\n  await assembledTx.simulate({ restore: true });\n  return assembledTx.signAndSend();\n}\n", "import { SuiClient } from \"@mysten/sui/client\";\nimport { CoinStruct, SuiObjectResponse } from \"@mysten/sui/src/client/types/generated\";\nimport { Transaction, TransactionResult } from \"@mysten/sui/transactions\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { InvalidAmountError, SdkError } from \"../../../exceptions\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../../tokens-info\";\nimport { calculatePoolInfoImbalance } from \"../../../utils/calculation\";\nimport { RawSuiTransaction } from \"../../models\";\nimport { phantom } from \"../../models/sui/_framework/reified\";\nimport { setAddress } from \"../../models/sui/bridge\";\nimport {\n  claimReward,\n  deposit,\n  newUserDeposit,\n  pool,\n  withdraw,\n} from \"../../models/sui/bridge/bridge-interface/functions\";\nimport { Pool } from \"../../models/sui/bridge/pool/structs\";\nimport { UserDeposit } from \"../../models/sui/bridge/user-deposit/structs\";\nimport { getCoinsWithAmounts } from \"../../utils/sui/coins\";\nimport { fetchAllPagesRecursive } from \"../../utils/sui/paginated\";\nimport { suiView } from \"../../utils/sui/view\";\nimport {\n  ChainPoolService,\n  LiquidityPoolsParams,\n  LiquidityPoolsParamsWithAmount,\n  UserBalance,\n  UserBalanceInfo,\n} from \"../models\";\n\nexport class SuiPoolService extends ChainPoolService {\n  chainType: ChainType.SUI = ChainType.SUI;\n\n  private readonly client: SuiClient;\n\n  constructor(\n    public suiRpcUrl: string,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n    this.client = new SuiClient({\n      url: suiRpcUrl,\n    });\n  }\n\n  async getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo> {\n    if (!token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const suiAddresses = token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    const deposits = await this.fetchDeposits(accountAddress, token.originTokenAddress);\n    const total = deposits.reduce(\n      (total, element) => {\n        if (element.data) {\n          total.lpAmount += BigInt((element.data.content as any).fields.lp_amount);\n          total.rewardDebt += BigInt((element.data.content as any).fields.reward_debt);\n          return total;\n        } else {\n          throw new SdkError(\"Deposits fetch failed\");\n        }\n      },\n      { lpAmount: BigInt(0), rewardDebt: BigInt(0) }\n    );\n    return new UserBalance({ lpAmount: total.lpAmount.toString(), rewardDebt: total.rewardDebt.toString() });\n  }\n\n  private async fetchDeposits(accountAddress: string, tokenAddress: string): Promise<SuiObjectResponse[]> {\n    return await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getOwnedObjects({\n        owner: accountAddress,\n        filter: { StructType: UserDeposit.phantom(phantom(tokenAddress)).phantomType },\n        options: { showContent: true },\n        cursor,\n      })\n    );\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo> {\n    const suiAddresses = token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    if (!token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n\n    const P = 48;\n    const tx = new Transaction();\n    pool(tx, token.originTokenAddress, suiAddresses.bridgeObjectAddress);\n    const res = await suiView(this.client, tx, Pool.reified(phantom(token.originTokenAddress)));\n\n    const tokenBalance = res.state.tokenBalance;\n    const vUsdBalance = res.state.vusdBalance;\n    const imbalance = calculatePoolInfoImbalance({ tokenBalance, vUsdBalance });\n\n    return {\n      dValue: res.state.d,\n      aValue: res.state.a,\n      totalLpAmount: res.rewards.lpSupply,\n      vUsdBalance: vUsdBalance,\n      tokenBalance: tokenBalance,\n      accRewardPerShareP: res.rewards.accRewardPerShareP,\n      p: P,\n      imbalance,\n    };\n  }\n\n  async buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawSuiTransaction> {\n    const suiAddresses = params.token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const coins: CoinStruct[] = await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getCoins({\n        owner: params.accountAddress,\n        coinType: params.token.originTokenAddress,\n        cursor,\n      })\n    );\n    if (coins.length === 0 || !coins[0]) {\n      throw new InvalidAmountError(\"No coins to deposit\");\n    }\n    const firstCoin = coins[0];\n\n    const tx = new Transaction();\n    tx.setSender(params.accountAddress);\n    const { depositObj, isNewDeposit } = await this.getDepositObject(\n      params.accountAddress,\n      params.token.originTokenAddress,\n      tx\n    );\n    const [amountCoin] = getCoinsWithAmounts([params.amount], coins, tx);\n    if (!amountCoin) {\n      throw new InvalidAmountError(\"No coins to deposit\");\n    }\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const rewards = deposit(tx, params.token.originTokenAddress, {\n      bridge: suiAddresses.bridgeObjectAddress,\n      userDeposit: depositObj,\n      coin: amountCoin,\n    });\n    tx.mergeCoins(firstCoin.coinObjectId, [rewards]);\n    if (isNewDeposit) {\n      tx.transferObjects([depositObj], params.accountAddress);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  private async getDepositObject(\n    accountAddress: string,\n    tokenAddress: string,\n    tx: Transaction\n  ): Promise<{\n    depositObj: string | TransactionResult;\n    isNewDeposit: boolean;\n  }> {\n    const deposits = await this.fetchDeposits(accountAddress, tokenAddress);\n    if (deposits.length === 0 || !deposits[0]) {\n      const tokenType = phantom(tokenAddress).phantomType;\n      const depositObj = newUserDeposit(tx, tokenType);\n      return { depositObj, isNewDeposit: true };\n    } else {\n      if (deposits[0].data?.objectId) {\n        return { depositObj: deposits[0].data.objectId, isNewDeposit: false };\n      } else {\n        throw new SdkError(\"Something went wrong while deposit\");\n      }\n    }\n  }\n\n  async buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawSuiTransaction> {\n    const suiAddresses = params.token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const tokenType = phantom(params.token.originTokenAddress).phantomType;\n\n    const tx = new Transaction();\n    tx.setSender(params.accountAddress);\n\n    const { depositObj, isNewDeposit } = await this.getDepositObject(\n      params.accountAddress,\n      params.token.originTokenAddress,\n      tx\n    );\n    if (isNewDeposit) {\n      throw new InvalidAmountError(\"No deposit found\");\n    }\n\n    const rewards = withdraw(tx, tokenType, {\n      bridge: suiAddresses.bridgeObjectAddress,\n      userDeposit: depositObj,\n      amountLp: BigInt(params.amount),\n    });\n\n    const coins: CoinStruct[] = await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getCoins({\n        owner: params.accountAddress,\n        coinType: params.token.originTokenAddress,\n        cursor,\n      })\n    );\n\n    if (!rewards[0] || !rewards[1]) {\n      throw new SdkError(\"No rewards found\");\n    }\n\n    if (coins[0]) {\n      tx.mergeCoins(coins[0].coinObjectId, [rewards[0], rewards[1]]);\n    } else {\n      tx.mergeCoins(rewards[0], [rewards[1]]);\n      tx.transferObjects([rewards[0]], params.accountAddress);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  async buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawSuiTransaction> {\n    const suiAddresses = params.token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const tokenType = phantom(params.token.originTokenAddress).phantomType;\n\n    const tx = new Transaction();\n    tx.setSender(params.accountAddress);\n\n    const { depositObj, isNewDeposit } = await this.getDepositObject(\n      params.accountAddress,\n      params.token.originTokenAddress,\n      tx\n    );\n    if (isNewDeposit) {\n      throw new InvalidAmountError(\"No deposit found\");\n    }\n\n    const reward = claimReward(tx, tokenType, {\n      bridge: suiAddresses.bridgeObjectAddress,\n      userDeposit: depositObj,\n    });\n\n    const coins: CoinStruct[] = await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getCoins({\n        owner: params.accountAddress,\n        coinType: params.token.originTokenAddress,\n        cursor,\n      })\n    );\n\n    if (coins[0]) {\n      tx.mergeCoins(coins[0].coinObjectId, [reward]);\n    } else {\n      tx.transferObjects([reward], params.accountAddress);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n}\n", "// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { Balance } from \"../../sui/balance/structs\";\nimport { UID } from \"../../sui/object/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { PoolRewards } from \"../pool-rewards/structs\";\nimport { PoolState } from \"../pool-state/structs\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== AdminCap =============================== */\n\nexport function isAdminCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::pool::AdminCap`;\n}\n\nexport interface AdminCapFields {\n  id: ToField<UID>;\n}\n\nexport type AdminCapReified = Reified<AdminCap, AdminCapFields>;\n\nexport class AdminCap implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::pool::AdminCap`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = AdminCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = AdminCap.$isPhantom;\n\n  readonly id: ToField<UID>;\n\n  private constructor(typeArgs: [], fields: AdminCapFields) {\n    this.$fullTypeName = composeSuiType(AdminCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified(): AdminCapReified {\n    return {\n      typeName: AdminCap.$typeName,\n      fullTypeName: composeSuiType(AdminCap.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: AdminCap.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => AdminCap.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => AdminCap.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => AdminCap.fromBcs(data),\n      bcs: AdminCap.bcs,\n      fromJSONField: (field: any) => AdminCap.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => AdminCap.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => AdminCap.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => AdminCap.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => AdminCap.fetch(client, id),\n      new: (fields: AdminCapFields) => {\n        return new AdminCap([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return AdminCap.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<AdminCap>> {\n    return phantom(AdminCap.reified());\n  }\n  static get p() {\n    return AdminCap.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"AdminCap\", {\n      id: UID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): AdminCap {\n    return AdminCap.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): AdminCap {\n    if (!isAdminCap(item.type)) {\n      throw new Error(\"not a AdminCap type\");\n    }\n\n    return AdminCap.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): AdminCap {\n    return AdminCap.fromFields(AdminCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): AdminCap {\n    return AdminCap.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): AdminCap {\n    if (json.$typeName !== AdminCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return AdminCap.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): AdminCap {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isAdminCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a AdminCap object`);\n    }\n    return AdminCap.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): AdminCap {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isAdminCap(data.bcs.type)) {\n        throw new Error(`object at is not a AdminCap object`);\n      }\n\n      return AdminCap.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return AdminCap.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<AdminCap> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching AdminCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isAdminCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a AdminCap object`);\n    }\n\n    return AdminCap.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== Pool =============================== */\n\nexport function isPool(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::pool::Pool` + \"<\");\n}\n\nexport interface PoolFields<T extends PhantomTypeArgument> {\n  id: ToField<UID>;\n  state: ToField<PoolState<T>>;\n  rewards: ToField<PoolRewards<T>>;\n  feeShareBp: ToField<\"u64\">;\n  canDeposit: ToField<\"bool\">;\n  canWithdraw: ToField<\"bool\">;\n  decimals: ToField<\"u8\">;\n  balance: ToField<Balance<T>>;\n}\n\nexport type PoolReified<T extends PhantomTypeArgument> = Reified<Pool<T>, PoolFields<T>>;\n\nexport class Pool<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::pool::Pool`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = Pool.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = Pool.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly state: ToField<PoolState<T>>;\n  readonly rewards: ToField<PoolRewards<T>>;\n  readonly feeShareBp: ToField<\"u64\">;\n  readonly canDeposit: ToField<\"bool\">;\n  readonly canWithdraw: ToField<\"bool\">;\n  readonly decimals: ToField<\"u8\">;\n  readonly balance: ToField<Balance<T>>;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: PoolFields<T>) {\n    this.$fullTypeName = composeSuiType(Pool.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.state = fields.state;\n    this.rewards = fields.rewards;\n    this.feeShareBp = fields.feeShareBp;\n    this.canDeposit = fields.canDeposit;\n    this.canWithdraw = fields.canWithdraw;\n    this.decimals = fields.decimals;\n    this.balance = fields.balance;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): PoolReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: Pool.$typeName,\n      fullTypeName: composeSuiType(Pool.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: Pool.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => Pool.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Pool.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => Pool.fromBcs(T, data),\n      bcs: Pool.bcs,\n      fromJSONField: (field: any) => Pool.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => Pool.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => Pool.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => Pool.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => Pool.fetch(client, T, id),\n      new: (fields: PoolFields<ToPhantomTypeArgument<T>>) => {\n        return new Pool([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Pool.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<Pool<ToPhantomTypeArgument<T>>>> {\n    return phantom(Pool.reified(T));\n  }\n  static get p() {\n    return Pool.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Pool\", {\n      id: UID.bcs,\n      state: PoolState.bcs,\n      rewards: PoolRewards.bcs,\n      fee_share_bp: bcs.u64(),\n      can_deposit: bcs.bool(),\n      can_withdraw: bcs.bool(),\n      decimals: bcs.u8(),\n      balance: Balance.bcs,\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): Pool<ToPhantomTypeArgument<T>> {\n    return Pool.reified(typeArg).new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      state: decodeFromFields(PoolState.reified(typeArg), fields.state),\n      rewards: decodeFromFields(PoolRewards.reified(typeArg), fields.rewards),\n      feeShareBp: decodeFromFields(\"u64\", fields.fee_share_bp),\n      canDeposit: decodeFromFields(\"bool\", fields.can_deposit),\n      canWithdraw: decodeFromFields(\"bool\", fields.can_withdraw),\n      decimals: decodeFromFields(\"u8\", fields.decimals),\n      balance: decodeFromFields(Balance.reified(typeArg), fields.balance),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): Pool<ToPhantomTypeArgument<T>> {\n    if (!isPool(item.type)) {\n      throw new Error(\"not a Pool type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Pool.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      state: decodeFromFieldsWithTypes(PoolState.reified(typeArg), item.fields.state),\n      rewards: decodeFromFieldsWithTypes(PoolRewards.reified(typeArg), item.fields.rewards),\n      feeShareBp: decodeFromFieldsWithTypes(\"u64\", item.fields.fee_share_bp),\n      canDeposit: decodeFromFieldsWithTypes(\"bool\", item.fields.can_deposit),\n      canWithdraw: decodeFromFieldsWithTypes(\"bool\", item.fields.can_withdraw),\n      decimals: decodeFromFieldsWithTypes(\"u8\", item.fields.decimals),\n      balance: decodeFromFieldsWithTypes(Balance.reified(typeArg), item.fields.balance),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): Pool<ToPhantomTypeArgument<T>> {\n    return Pool.fromFields(typeArg, Pool.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      state: this.state.toJSONField(),\n      rewards: this.rewards.toJSONField(),\n      feeShareBp: this.feeShareBp.toString(),\n      canDeposit: this.canDeposit,\n      canWithdraw: this.canWithdraw,\n      decimals: this.decimals,\n      balance: this.balance.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): Pool<ToPhantomTypeArgument<T>> {\n    return Pool.reified(typeArg).new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      state: decodeFromJSONField(PoolState.reified(typeArg), field.state),\n      rewards: decodeFromJSONField(PoolRewards.reified(typeArg), field.rewards),\n      feeShareBp: decodeFromJSONField(\"u64\", field.feeShareBp),\n      canDeposit: decodeFromJSONField(\"bool\", field.canDeposit),\n      canWithdraw: decodeFromJSONField(\"bool\", field.canWithdraw),\n      decimals: decodeFromJSONField(\"u8\", field.decimals),\n      balance: decodeFromJSONField(Balance.reified(typeArg), field.balance),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): Pool<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== Pool.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Pool.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Pool.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): Pool<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isPool(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Pool object`);\n    }\n    return Pool.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): Pool<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isPool(data.bcs.type)) {\n        throw new Error(`object at is not a Pool object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Pool.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Pool.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<Pool<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Pool object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isPool(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Pool object`);\n    }\n\n    return Pool.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== StopCap =============================== */\n\nexport function isStopCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::pool::StopCap`;\n}\n\nexport interface StopCapFields {\n  id: ToField<UID>;\n}\n\nexport type StopCapReified = Reified<StopCap, StopCapFields>;\n\nexport class StopCap implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::pool::StopCap`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = StopCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = StopCap.$isPhantom;\n\n  readonly id: ToField<UID>;\n\n  private constructor(typeArgs: [], fields: StopCapFields) {\n    this.$fullTypeName = composeSuiType(StopCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified(): StopCapReified {\n    return {\n      typeName: StopCap.$typeName,\n      fullTypeName: composeSuiType(StopCap.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: StopCap.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => StopCap.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => StopCap.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => StopCap.fromBcs(data),\n      bcs: StopCap.bcs,\n      fromJSONField: (field: any) => StopCap.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => StopCap.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => StopCap.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => StopCap.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => StopCap.fetch(client, id),\n      new: (fields: StopCapFields) => {\n        return new StopCap([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return StopCap.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<StopCap>> {\n    return phantom(StopCap.reified());\n  }\n  static get p() {\n    return StopCap.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"StopCap\", {\n      id: UID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): StopCap {\n    return StopCap.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): StopCap {\n    if (!isStopCap(item.type)) {\n      throw new Error(\"not a StopCap type\");\n    }\n\n    return StopCap.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): StopCap {\n    return StopCap.fromFields(StopCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): StopCap {\n    return StopCap.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): StopCap {\n    if (json.$typeName !== StopCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return StopCap.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): StopCap {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isStopCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a StopCap object`);\n    }\n    return StopCap.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): StopCap {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isStopCap(data.bcs.type)) {\n        throw new Error(`object at is not a StopCap object`);\n      }\n\n      return StopCap.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return StopCap.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<StopCap> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching StopCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isStopCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a StopCap object`);\n    }\n\n    return StopCap.fromSuiObjectData(res.data);\n  }\n}\n", "// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Balance =============================== */\n\nexport function isBalance(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::balance::Balance` + \"<\");\n}\n\nexport interface BalanceFields<T extends PhantomTypeArgument> {\n  value: ToField<\"u64\">;\n}\n\nexport type BalanceReified<T extends PhantomTypeArgument> = Reified<Balance<T>, BalanceFields<T>>;\n\nexport class Balance<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::balance::Balance`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = Balance.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = Balance.$isPhantom;\n\n  readonly value: ToField<\"u64\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: BalanceFields<T>) {\n    this.$fullTypeName = composeSuiType(Balance.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.value = fields.value;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): BalanceReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: Balance.$typeName,\n      fullTypeName: composeSuiType(Balance.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: Balance.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => Balance.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Balance.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => Balance.fromBcs(T, data),\n      bcs: Balance.bcs,\n      fromJSONField: (field: any) => Balance.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => Balance.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => Balance.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => Balance.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => Balance.fetch(client, T, id),\n      new: (fields: BalanceFields<ToPhantomTypeArgument<T>>) => {\n        return new Balance([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Balance.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<Balance<ToPhantomTypeArgument<T>>>> {\n    return phantom(Balance.reified(T));\n  }\n  static get p() {\n    return Balance.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Balance\", {\n      value: bcs.u64(),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): Balance<ToPhantomTypeArgument<T>> {\n    return Balance.reified(typeArg).new({\n      value: decodeFromFields(\"u64\", fields.value),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): Balance<ToPhantomTypeArgument<T>> {\n    if (!isBalance(item.type)) {\n      throw new Error(\"not a Balance type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Balance.reified(typeArg).new({\n      value: decodeFromFieldsWithTypes(\"u64\", item.fields.value),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): Balance<ToPhantomTypeArgument<T>> {\n    return Balance.fromFields(typeArg, Balance.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      value: this.value.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): Balance<ToPhantomTypeArgument<T>> {\n    return Balance.reified(typeArg).new({\n      value: decodeFromJSONField(\"u64\", field.value),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): Balance<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== Balance.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Balance.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Balance.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): Balance<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isBalance(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Balance object`);\n    }\n    return Balance.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): Balance<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isBalance(data.bcs.type)) {\n        throw new Error(`object at is not a Balance object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Balance.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Balance.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<Balance<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Balance object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isBalance(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Balance object`);\n    }\n\n    return Balance.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== Supply =============================== */\n\nexport function isSupply(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::balance::Supply` + \"<\");\n}\n\nexport interface SupplyFields<T extends PhantomTypeArgument> {\n  value: ToField<\"u64\">;\n}\n\nexport type SupplyReified<T extends PhantomTypeArgument> = Reified<Supply<T>, SupplyFields<T>>;\n\nexport class Supply<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::balance::Supply`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = Supply.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = Supply.$isPhantom;\n\n  readonly value: ToField<\"u64\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: SupplyFields<T>) {\n    this.$fullTypeName = composeSuiType(Supply.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.value = fields.value;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): SupplyReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: Supply.$typeName,\n      fullTypeName: composeSuiType(Supply.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: Supply.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => Supply.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Supply.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => Supply.fromBcs(T, data),\n      bcs: Supply.bcs,\n      fromJSONField: (field: any) => Supply.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => Supply.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => Supply.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => Supply.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => Supply.fetch(client, T, id),\n      new: (fields: SupplyFields<ToPhantomTypeArgument<T>>) => {\n        return new Supply([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Supply.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<Supply<ToPhantomTypeArgument<T>>>> {\n    return phantom(Supply.reified(T));\n  }\n  static get p() {\n    return Supply.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Supply\", {\n      value: bcs.u64(),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): Supply<ToPhantomTypeArgument<T>> {\n    return Supply.reified(typeArg).new({\n      value: decodeFromFields(\"u64\", fields.value),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): Supply<ToPhantomTypeArgument<T>> {\n    if (!isSupply(item.type)) {\n      throw new Error(\"not a Supply type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Supply.reified(typeArg).new({\n      value: decodeFromFieldsWithTypes(\"u64\", item.fields.value),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): Supply<ToPhantomTypeArgument<T>> {\n    return Supply.fromFields(typeArg, Supply.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      value: this.value.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): Supply<ToPhantomTypeArgument<T>> {\n    return Supply.reified(typeArg).new({\n      value: decodeFromJSONField(\"u64\", field.value),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): Supply<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== Supply.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Supply.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Supply.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): Supply<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isSupply(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Supply object`);\n    }\n    return Supply.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): Supply<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isSupply(data.bcs.type)) {\n        throw new Error(`object at is not a Supply object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Supply.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Supply.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<Supply<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Supply object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isSupply(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Supply object`);\n    }\n\n    return Supply.fromSuiObjectData(typeArg, res.data);\n  }\n}\n", "// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { Balance } from \"../../sui/balance/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== PoolRewards =============================== */\n\nexport function isPoolRewards(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::pool_rewards::PoolRewards` + \"<\");\n}\n\nexport interface PoolRewardsFields<T extends PhantomTypeArgument> {\n  accRewardPerShareP: ToField<\"u128\">;\n  adminFeeShareBp: ToField<\"u64\">;\n  adminFee: ToField<Balance<T>>;\n  rewards: ToField<Balance<T>>;\n  lpSupply: ToField<\"u64\">;\n}\n\nexport type PoolRewardsReified<T extends PhantomTypeArgument> = Reified<PoolRewards<T>, PoolRewardsFields<T>>;\n\nexport class PoolRewards<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::pool_rewards::PoolRewards`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = PoolRewards.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = PoolRewards.$isPhantom;\n\n  readonly accRewardPerShareP: ToField<\"u128\">;\n  readonly adminFeeShareBp: ToField<\"u64\">;\n  readonly adminFee: ToField<Balance<T>>;\n  readonly rewards: ToField<Balance<T>>;\n  readonly lpSupply: ToField<\"u64\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: PoolRewardsFields<T>) {\n    this.$fullTypeName = composeSuiType(PoolRewards.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.accRewardPerShareP = fields.accRewardPerShareP;\n    this.adminFeeShareBp = fields.adminFeeShareBp;\n    this.adminFee = fields.adminFee;\n    this.rewards = fields.rewards;\n    this.lpSupply = fields.lpSupply;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): PoolRewardsReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: PoolRewards.$typeName,\n      fullTypeName: composeSuiType(PoolRewards.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: PoolRewards.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => PoolRewards.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => PoolRewards.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => PoolRewards.fromBcs(T, data),\n      bcs: PoolRewards.bcs,\n      fromJSONField: (field: any) => PoolRewards.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => PoolRewards.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => PoolRewards.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => PoolRewards.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => PoolRewards.fetch(client, T, id),\n      new: (fields: PoolRewardsFields<ToPhantomTypeArgument<T>>) => {\n        return new PoolRewards([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return PoolRewards.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<PoolRewards<ToPhantomTypeArgument<T>>>> {\n    return phantom(PoolRewards.reified(T));\n  }\n  static get p() {\n    return PoolRewards.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"PoolRewards\", {\n      acc_reward_per_share_p: bcs.u128(),\n      admin_fee_share_bp: bcs.u64(),\n      admin_fee: Balance.bcs,\n      rewards: Balance.bcs,\n      lp_supply: bcs.u64(),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): PoolRewards<ToPhantomTypeArgument<T>> {\n    return PoolRewards.reified(typeArg).new({\n      accRewardPerShareP: decodeFromFields(\"u128\", fields.acc_reward_per_share_p),\n      adminFeeShareBp: decodeFromFields(\"u64\", fields.admin_fee_share_bp),\n      adminFee: decodeFromFields(Balance.reified(typeArg), fields.admin_fee),\n      rewards: decodeFromFields(Balance.reified(typeArg), fields.rewards),\n      lpSupply: decodeFromFields(\"u64\", fields.lp_supply),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): PoolRewards<ToPhantomTypeArgument<T>> {\n    if (!isPoolRewards(item.type)) {\n      throw new Error(\"not a PoolRewards type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return PoolRewards.reified(typeArg).new({\n      accRewardPerShareP: decodeFromFieldsWithTypes(\"u128\", item.fields.acc_reward_per_share_p),\n      adminFeeShareBp: decodeFromFieldsWithTypes(\"u64\", item.fields.admin_fee_share_bp),\n      adminFee: decodeFromFieldsWithTypes(Balance.reified(typeArg), item.fields.admin_fee),\n      rewards: decodeFromFieldsWithTypes(Balance.reified(typeArg), item.fields.rewards),\n      lpSupply: decodeFromFieldsWithTypes(\"u64\", item.fields.lp_supply),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): PoolRewards<ToPhantomTypeArgument<T>> {\n    return PoolRewards.fromFields(typeArg, PoolRewards.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      accRewardPerShareP: this.accRewardPerShareP.toString(),\n      adminFeeShareBp: this.adminFeeShareBp.toString(),\n      adminFee: this.adminFee.toJSONField(),\n      rewards: this.rewards.toJSONField(),\n      lpSupply: this.lpSupply.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): PoolRewards<ToPhantomTypeArgument<T>> {\n    return PoolRewards.reified(typeArg).new({\n      accRewardPerShareP: decodeFromJSONField(\"u128\", field.accRewardPerShareP),\n      adminFeeShareBp: decodeFromJSONField(\"u64\", field.adminFeeShareBp),\n      adminFee: decodeFromJSONField(Balance.reified(typeArg), field.adminFee),\n      rewards: decodeFromJSONField(Balance.reified(typeArg), field.rewards),\n      lpSupply: decodeFromJSONField(\"u64\", field.lpSupply),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): PoolRewards<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== PoolRewards.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(PoolRewards.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return PoolRewards.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): PoolRewards<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isPoolRewards(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a PoolRewards object`);\n    }\n    return PoolRewards.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): PoolRewards<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isPoolRewards(data.bcs.type)) {\n        throw new Error(`object at is not a PoolRewards object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return PoolRewards.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return PoolRewards.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<PoolRewards<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching PoolRewards object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isPoolRewards(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a PoolRewards object`);\n    }\n\n    return PoolRewards.fromSuiObjectData(typeArg, res.data);\n  }\n}\n", "// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== PoolState =============================== */\n\nexport function isPoolState(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::pool_state::PoolState` + \"<\");\n}\n\nexport interface PoolStateFields<T extends PhantomTypeArgument> {\n  tokenBalance: ToField<\"u64\">;\n  vusdBalance: ToField<\"u64\">;\n  d: ToField<\"u64\">;\n  a: ToField<\"u64\">;\n  balanceRatioMinBp: ToField<\"u64\">;\n}\n\nexport type PoolStateReified<T extends PhantomTypeArgument> = Reified<PoolState<T>, PoolStateFields<T>>;\n\nexport class PoolState<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::pool_state::PoolState`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = PoolState.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = PoolState.$isPhantom;\n\n  readonly tokenBalance: ToField<\"u64\">;\n  readonly vusdBalance: ToField<\"u64\">;\n  readonly d: ToField<\"u64\">;\n  readonly a: ToField<\"u64\">;\n  readonly balanceRatioMinBp: ToField<\"u64\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: PoolStateFields<T>) {\n    this.$fullTypeName = composeSuiType(PoolState.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.tokenBalance = fields.tokenBalance;\n    this.vusdBalance = fields.vusdBalance;\n    this.d = fields.d;\n    this.a = fields.a;\n    this.balanceRatioMinBp = fields.balanceRatioMinBp;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): PoolStateReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: PoolState.$typeName,\n      fullTypeName: composeSuiType(PoolState.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: PoolState.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => PoolState.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => PoolState.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => PoolState.fromBcs(T, data),\n      bcs: PoolState.bcs,\n      fromJSONField: (field: any) => PoolState.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => PoolState.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => PoolState.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => PoolState.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => PoolState.fetch(client, T, id),\n      new: (fields: PoolStateFields<ToPhantomTypeArgument<T>>) => {\n        return new PoolState([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return PoolState.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<PoolState<ToPhantomTypeArgument<T>>>> {\n    return phantom(PoolState.reified(T));\n  }\n  static get p() {\n    return PoolState.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"PoolState\", {\n      token_balance: bcs.u64(),\n      vusd_balance: bcs.u64(),\n      d: bcs.u64(),\n      a: bcs.u64(),\n      balance_ratio_min_bp: bcs.u64(),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    return PoolState.reified(typeArg).new({\n      tokenBalance: decodeFromFields(\"u64\", fields.token_balance),\n      vusdBalance: decodeFromFields(\"u64\", fields.vusd_balance),\n      d: decodeFromFields(\"u64\", fields.d),\n      a: decodeFromFields(\"u64\", fields.a),\n      balanceRatioMinBp: decodeFromFields(\"u64\", fields.balance_ratio_min_bp),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    if (!isPoolState(item.type)) {\n      throw new Error(\"not a PoolState type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return PoolState.reified(typeArg).new({\n      tokenBalance: decodeFromFieldsWithTypes(\"u64\", item.fields.token_balance),\n      vusdBalance: decodeFromFieldsWithTypes(\"u64\", item.fields.vusd_balance),\n      d: decodeFromFieldsWithTypes(\"u64\", item.fields.d),\n      a: decodeFromFieldsWithTypes(\"u64\", item.fields.a),\n      balanceRatioMinBp: decodeFromFieldsWithTypes(\"u64\", item.fields.balance_ratio_min_bp),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    return PoolState.fromFields(typeArg, PoolState.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      tokenBalance: this.tokenBalance.toString(),\n      vusdBalance: this.vusdBalance.toString(),\n      d: this.d.toString(),\n      a: this.a.toString(),\n      balanceRatioMinBp: this.balanceRatioMinBp.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    return PoolState.reified(typeArg).new({\n      tokenBalance: decodeFromJSONField(\"u64\", field.tokenBalance),\n      vusdBalance: decodeFromJSONField(\"u64\", field.vusdBalance),\n      d: decodeFromJSONField(\"u64\", field.d),\n      a: decodeFromJSONField(\"u64\", field.a),\n      balanceRatioMinBp: decodeFromJSONField(\"u64\", field.balanceRatioMinBp),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== PoolState.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(PoolState.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return PoolState.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isPoolState(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a PoolState object`);\n    }\n    return PoolState.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isPoolState(data.bcs.type)) {\n        throw new Error(`object at is not a PoolState object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return PoolState.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return PoolState.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<PoolState<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching PoolState object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isPoolState(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a PoolState object`);\n    }\n\n    return PoolState.fromSuiObjectData(typeArg, res.data);\n  }\n}\n", "// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { UID } from \"../../sui/object/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== UserDeposit =============================== */\n\nexport function isUserDeposit(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::user_deposit::UserDeposit` + \"<\");\n}\n\nexport interface UserDepositFields<T extends PhantomTypeArgument> {\n  id: ToField<UID>;\n  lpAmount: ToField<\"u64\">;\n  rewardDebt: ToField<\"u64\">;\n}\n\nexport type UserDepositReified<T extends PhantomTypeArgument> = Reified<UserDeposit<T>, UserDepositFields<T>>;\n\nexport class UserDeposit<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::user_deposit::UserDeposit`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = UserDeposit.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = UserDeposit.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly lpAmount: ToField<\"u64\">;\n  readonly rewardDebt: ToField<\"u64\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: UserDepositFields<T>) {\n    this.$fullTypeName = composeSuiType(UserDeposit.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.lpAmount = fields.lpAmount;\n    this.rewardDebt = fields.rewardDebt;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): UserDepositReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: UserDeposit.$typeName,\n      fullTypeName: composeSuiType(UserDeposit.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: UserDeposit.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => UserDeposit.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => UserDeposit.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => UserDeposit.fromBcs(T, data),\n      bcs: UserDeposit.bcs,\n      fromJSONField: (field: any) => UserDeposit.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => UserDeposit.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => UserDeposit.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => UserDeposit.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => UserDeposit.fetch(client, T, id),\n      new: (fields: UserDepositFields<ToPhantomTypeArgument<T>>) => {\n        return new UserDeposit([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return UserDeposit.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<UserDeposit<ToPhantomTypeArgument<T>>>> {\n    return phantom(UserDeposit.reified(T));\n  }\n  static get p() {\n    return UserDeposit.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"UserDeposit\", {\n      id: UID.bcs,\n      lp_amount: bcs.u64(),\n      reward_debt: bcs.u64(),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    return UserDeposit.reified(typeArg).new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      lpAmount: decodeFromFields(\"u64\", fields.lp_amount),\n      rewardDebt: decodeFromFields(\"u64\", fields.reward_debt),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    if (!isUserDeposit(item.type)) {\n      throw new Error(\"not a UserDeposit type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return UserDeposit.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      lpAmount: decodeFromFieldsWithTypes(\"u64\", item.fields.lp_amount),\n      rewardDebt: decodeFromFieldsWithTypes(\"u64\", item.fields.reward_debt),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    return UserDeposit.fromFields(typeArg, UserDeposit.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      lpAmount: this.lpAmount.toString(),\n      rewardDebt: this.rewardDebt.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    return UserDeposit.reified(typeArg).new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      lpAmount: decodeFromJSONField(\"u64\", field.lpAmount),\n      rewardDebt: decodeFromJSONField(\"u64\", field.rewardDebt),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== UserDeposit.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(UserDeposit.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return UserDeposit.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isUserDeposit(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a UserDeposit object`);\n    }\n    return UserDeposit.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isUserDeposit(data.bcs.type)) {\n        throw new Error(`object at is not a UserDeposit object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return UserDeposit.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return UserDeposit.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<UserDeposit<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching UserDeposit object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isUserDeposit(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a UserDeposit object`);\n    }\n\n    return UserDeposit.fromSuiObjectData(typeArg, res.data);\n  }\n}\n", "import { CoinStruct } from \"@mysten/sui/client\";\nimport { Transaction } from \"@mysten/sui/transactions\";\n\nexport function getCoinsWithAmounts(amounts: string[], coins: CoinStruct[], tx: Transaction) {\n  if (coins.length === 0 || !coins[0]) {\n    return [];\n  }\n  const firstCoin = coins[0];\n  const requiredAmount = amounts.reduce((total, amount) => total + BigInt(amount), BigInt(0));\n\n  let currentBalance = BigInt(firstCoin.balance);\n  const accumulatedCoins: CoinStruct[] = [];\n\n  for (const coin of coins.slice(1)) {\n    if (currentBalance > requiredAmount) {\n      return splitAndMergeCoins(tx, firstCoin, accumulatedCoins, amounts);\n    } else {\n      currentBalance += BigInt(coin.balance);\n      accumulatedCoins.push(coin);\n    }\n  }\n\n  if (currentBalance >= requiredAmount) {\n    return splitAndMergeCoins(tx, firstCoin, accumulatedCoins, amounts);\n  } else {\n    return [];\n  }\n}\n\nfunction splitAndMergeCoins(tx: Transaction, firstCoin: CoinStruct, accumulatedCoins: CoinStruct[], amounts: string[]) {\n  const pureAmounts = amounts.map((amount) => {\n    return tx.pure.u64(amount);\n  });\n  if (accumulatedCoins.length > 0) {\n    tx.mergeCoins(\n      firstCoin.coinObjectId,\n      accumulatedCoins.map((c) => c.coinObjectId)\n    );\n    return tx.splitCoins(firstCoin.coinObjectId, pureAmounts);\n  }\n\n  return tx.splitCoins(firstCoin.coinObjectId, pureAmounts);\n}\n", "import { SuiClient } from \"@mysten/sui/client\";\nimport { Transaction } from \"@mysten/sui/transactions\";\nimport { Reified, toBcs, ToJSON, TypeArgument } from \"../../models/sui/_framework/reified\";\n\nconst mockSender = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\nexport async function suiView<T extends TypeArgument>(\n  client: SuiClient,\n  tx: Transaction,\n  reified: Reified<T, any>\n): Promise<ToJSON<T>> {\n  const inspectionResult = await client.devInspectTransactionBlock({\n    sender: mockSender,\n    transactionBlock: tx,\n  });\n  if (inspectionResult.effects.status.status !== \"success\") {\n    throw new Error(`inspectionResult failed. ${JSON.stringify(inspectionResult, null, 2)}`);\n  }\n\n  const returnValue = inspectionResult.results?.pop()?.returnValues?.pop();\n\n  if (!returnValue) {\n    throw new Error(`Something with inspectionResult went wrong. ${JSON.stringify(inspectionResult, null, 2)}`);\n  }\n\n  const [data, _type] = returnValue;\n\n  if (typeof reified === \"object\") {\n    return reified.fromBcs(Uint8Array.from(data)).toJSONField() as ToJSON<T>;\n  } else {\n    return toBcs(reified).parse(Uint8Array.from(data));\n  }\n}\n", "import { TronWeb } from \"tronweb\";\nimport { Web3 } from \"web3\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { SdkError } from \"../../../exceptions\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../../tokens-info\";\nimport { calculatePoolInfoImbalance } from \"../../../utils/calculation\";\nimport { tronAddressToEthAddress } from \"../../bridge/utils\";\nimport { RawTransaction, SmartContractMethodParameter } from \"../../models\";\nimport Pool from \"../../models/abi/Pool\";\nimport {\n  LiquidityPoolsParams,\n  LiquidityPoolsParamsWithAmount,\n  UserBalance,\n  UserBalanceInfo,\n  ChainPoolService,\n} from \"../models\";\n\nexport class TronPoolService extends ChainPoolService {\n  chainType: ChainType.TRX = ChainType.TRX;\n  private P = 52;\n  private web3: Web3 | undefined;\n\n  constructor(\n    public tronWeb: TronWeb,\n    public api: AllbridgeCoreClient,\n    tronJsonRpc: string | undefined\n  ) {\n    super();\n    if (tronJsonRpc) {\n      this.web3 = new Web3(tronJsonRpc);\n    }\n  }\n\n  async getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo> {\n    let userBalanceInfo;\n    if (this.web3) {\n      try {\n        userBalanceInfo = await this.getUserBalanceInfoByBatch(this.web3, accountAddress, token);\n      } catch (ignoreError) {\n        userBalanceInfo = await this.getUserBalanceInfoPerProperty(accountAddress, token);\n      }\n    } else {\n      userBalanceInfo = await this.getUserBalanceInfoPerProperty(accountAddress, token);\n    }\n    return userBalanceInfo;\n  }\n\n  private async getUserBalanceInfoByBatch(\n    web3: Web3,\n    accountAddress: string,\n    token: TokenWithChainDetails\n  ): Promise<UserBalanceInfo> {\n    const batch = new web3.BatchRequest();\n    const contract = new web3.eth.Contract(Pool.abi, tronAddressToEthAddress(token.poolAddress));\n\n    const userRewardDebtAbi = contract.methods.userRewardDebt(accountAddress).encodeABI();\n    const balanceOfAbi = contract.methods.balanceOf(accountAddress).encodeABI();\n\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: userRewardDebtAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: balanceOfAbi }, \"latest\"],\n    });\n\n    const [rewardDebtResult, lpAmountResult] = await batch.execute();\n\n    if (rewardDebtResult && lpAmountResult && !rewardDebtResult.error && !lpAmountResult.error) {\n      return new UserBalance({\n        lpAmount: Web3.utils.toBigInt(lpAmountResult.result).toString(),\n        rewardDebt: Web3.utils.toBigInt(rewardDebtResult.result).toString(),\n      });\n    }\n    throw new Error(\"Batched failed\");\n  }\n\n  private async getUserBalanceInfoPerProperty(\n    accountAddress: string,\n    token: TokenWithChainDetails\n  ): Promise<UserBalanceInfo> {\n    if (!this.tronWeb.defaultAddress.base58) {\n      this.tronWeb.setAddress(accountAddress);\n    }\n    const contract = this.getContract(token.poolAddress);\n    const rewardDebt = (await contract.methods.userRewardDebt(accountAddress).call()).toString();\n    const lpAmount = (await contract.methods.balanceOf(accountAddress).call()).toString();\n    return new UserBalance({ lpAmount, rewardDebt });\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo> {\n    let poolInfo;\n    if (this.web3) {\n      try {\n        poolInfo = await this.getPoolInfoByBatch(this.web3, token);\n      } catch (ignoreError) {\n        poolInfo = await this.getPoolInfoPerProperty(token);\n      }\n    } else {\n      poolInfo = await this.getPoolInfoPerProperty(token);\n    }\n    return poolInfo;\n  }\n\n  private async getPoolInfoByBatch(web3: Web3, token: TokenWithChainDetails): Promise<PoolInfo> {\n    const batch = new web3.BatchRequest();\n    const contract = new web3.eth.Contract(Pool.abi, tronAddressToEthAddress(token.poolAddress), this.web3);\n\n    const aAbi = contract.methods.a().encodeABI();\n    const dAbi = contract.methods.d().encodeABI();\n    const tokenBalanceAbi = contract.methods.tokenBalance().encodeABI();\n    const vUsdBalanceAbi = contract.methods.vUsdBalance().encodeABI();\n    const totalSupplyAbi = contract.methods.totalSupply().encodeABI();\n    const accRewardPerSharePAbi = contract.methods.accRewardPerShareP().encodeABI();\n\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: aAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: dAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: tokenBalanceAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: vUsdBalanceAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: totalSupplyAbi }, \"latest\"],\n    });\n    batch.add({\n      method: \"eth_call\",\n      params: [{ to: token.poolAddress, data: accRewardPerSharePAbi }, \"latest\"],\n    });\n\n    const [aResult, dResult, tokenBalanceResult, vUsdBalanceResult, totalSupplyResult, accRewardPerSharePResult] =\n      await batch.execute();\n\n    if (\n      aResult &&\n      dResult &&\n      tokenBalanceResult &&\n      vUsdBalanceResult &&\n      totalSupplyResult &&\n      accRewardPerSharePResult &&\n      !aResult.error &&\n      !dResult.error &&\n      !tokenBalanceResult.error &&\n      !vUsdBalanceResult.error &&\n      !totalSupplyResult.error &&\n      !accRewardPerSharePResult.error\n    ) {\n      const tokenBalanceStr = Web3.utils.toBigInt(tokenBalanceResult.result).toString();\n      const vUsdBalanceStr = Web3.utils.toBigInt(vUsdBalanceResult.result).toString();\n      const imbalance = calculatePoolInfoImbalance({ tokenBalance: tokenBalanceStr, vUsdBalance: vUsdBalanceStr });\n      return {\n        aValue: Web3.utils.toBigInt(aResult.result).toString(),\n        dValue: Web3.utils.toBigInt(dResult.result).toString(),\n        tokenBalance: tokenBalanceStr,\n        vUsdBalance: vUsdBalanceStr,\n        totalLpAmount: Web3.utils.toBigInt(totalSupplyResult.result).toString(),\n        accRewardPerShareP: Web3.utils.toBigInt(accRewardPerSharePResult.result).toString(),\n        p: this.P,\n        imbalance,\n      };\n    }\n    throw new Error(\"Batched failed\");\n  }\n\n  private async getPoolInfoPerProperty(token: TokenWithChainDetails): Promise<PoolInfo> {\n    if (!this.tronWeb.defaultAddress.base58) {\n      this.tronWeb.setAddress(token.poolAddress);\n    }\n    const poolContract = this.getContract(token.poolAddress);\n    const [aValue, dValue, tokenBalance, vUsdBalance, totalLpAmount, accRewardPerShareP] = await Promise.all([\n      poolContract.methods.a().call(),\n      poolContract.methods.d().call(),\n      poolContract.methods.tokenBalance().call(),\n      poolContract.methods.vUsdBalance().call(),\n      poolContract.methods.totalSupply().call(),\n      poolContract.methods.accRewardPerShareP().call(),\n    ]);\n    const tokenBalanceStr = tokenBalance.toString();\n    const vUsdBalanceStr = vUsdBalance.toString();\n    const imbalance = calculatePoolInfoImbalance({ tokenBalance: tokenBalanceStr, vUsdBalance: vUsdBalanceStr });\n    return {\n      aValue: aValue.toString(),\n      dValue: dValue.toString(),\n      tokenBalance: tokenBalanceStr,\n      vUsdBalance: vUsdBalanceStr,\n      totalLpAmount: totalLpAmount.toString(),\n      accRewardPerShareP: accRewardPerShareP.toString(),\n      p: this.P,\n      imbalance,\n    };\n  }\n\n  buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const { amount, accountAddress } = params;\n\n    const parameter = [{ type: \"uint256\", value: amount }];\n    const methodSignature = \"deposit(uint256)\";\n\n    return this.buildRawTransaction(params.token.poolAddress, methodSignature, parameter, \"0\", accountAddress);\n  }\n\n  buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const { amount, accountAddress } = params;\n\n    const parameter = [{ type: \"uint256\", value: amount }];\n    const methodSignature = \"withdraw(uint256)\";\n\n    return this.buildRawTransaction(params.token.poolAddress, methodSignature, parameter, \"0\", accountAddress);\n  }\n\n  buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawTransaction> {\n    const { accountAddress } = params;\n\n    const parameter: SmartContractMethodParameter[] = [];\n    const methodSignature = \"claimRewards()\";\n\n    return this.buildRawTransaction(params.token.poolAddress, methodSignature, parameter, \"0\", accountAddress);\n  }\n\n  private async buildRawTransaction(\n    contractAddress: string,\n    methodSignature: string,\n    parameter: SmartContractMethodParameter[],\n    value: string,\n    fromAddress: string\n  ): Promise<RawTransaction> {\n    const transactionObject = await this.tronWeb.transactionBuilder.triggerSmartContract(\n      contractAddress,\n      methodSignature,\n      {\n        callValue: +value,\n      },\n      parameter,\n      fromAddress\n    );\n    if (!transactionObject?.result?.result) {\n      throw new SdkError(\"Unknown error: \" + JSON.stringify(transactionObject, null, 2));\n    }\n    return transactionObject.transaction;\n  }\n\n  private getContract(contractAddress: string): any {\n    return this.tronWeb.contract(Pool.abi, contractAddress);\n  }\n}\n", "import { Big, BigSource } from \"big.js\";\nimport { PoolInfo, Token } from \"../../tokens-info\";\nimport { fromSystemPrecision, getY, toSystemPrecision } from \"./index\";\n\nexport interface SwapPoolInfo {\n  decimals: number;\n  feeShare: string;\n  poolInfo: PoolInfo;\n}\n\nexport interface SwapAndBridgeCalculationData {\n  swapToVUsdCalcResult: SwapToVUsdCalcResult;\n  swapFromVUsdCalcResult: SwapFromVUsdCalcResult;\n}\n\nexport interface SwapToVUsdCalcResult {\n  bridgeFeeInTokenPrecision: string;\n  amountIncludingCommissionInSystemPrecision: string;\n  amountExcludingCommissionInSystemPrecision: string;\n}\nexport interface SwapFromVUsdCalcResult {\n  bridgeFeeInTokenPrecision: string;\n  amountIncludingCommissionInTokenPrecision: string;\n  amountExcludingCommissionInTokenPrecision: string;\n}\n\nexport function swapAndBridgeFeeCalculation(\n  amountInTokenPrecision: string,\n  sourcePoolInfo: SwapPoolInfo,\n  destinationPoolInfo: SwapPoolInfo\n): SwapAndBridgeCalculationData {\n  const swapToVUsdCalcResult = swapToVUsd(\n    amountInTokenPrecision,\n    { decimals: sourcePoolInfo.decimals, feeShare: sourcePoolInfo.feeShare },\n    sourcePoolInfo.poolInfo\n  );\n  const swapFromVUsdCalcResult = swapFromVUsd(\n    swapToVUsdCalcResult.amountIncludingCommissionInSystemPrecision,\n    { decimals: destinationPoolInfo.decimals, feeShare: destinationPoolInfo.feeShare },\n    destinationPoolInfo.poolInfo\n  );\n  return { swapToVUsdCalcResult, swapFromVUsdCalcResult };\n}\n\nexport function swapAndBridgeFeeCalculationReverse(\n  amountInTokenPrecision: string,\n  sourcePoolInfo: SwapPoolInfo,\n  destinationPoolInfo: SwapPoolInfo\n): SwapAndBridgeCalculationData {\n  const swapToVUsdCalcResult = swapToVUsdReverse(\n    amountInTokenPrecision,\n    { decimals: destinationPoolInfo.decimals, feeShare: destinationPoolInfo.feeShare },\n    destinationPoolInfo.poolInfo\n  );\n  const swapFromVUsdCalcResult = swapFromVUsdReverse(\n    swapToVUsdCalcResult.amountIncludingCommissionInSystemPrecision,\n    { decimals: sourcePoolInfo.decimals, feeShare: sourcePoolInfo.feeShare },\n    sourcePoolInfo.poolInfo\n  );\n  return {\n    swapToVUsdCalcResult,\n    swapFromVUsdCalcResult,\n  };\n}\n\nfunction swapToVUsd(\n  amount: BigSource,\n  { feeShare, decimals }: Pick<Token, \"feeShare\" | \"decimals\">,\n  poolInfo: Omit<PoolInfo, \"p\" | \"imbalance\">\n): SwapToVUsdCalcResult {\n  const amountValue = Big(amount);\n  const fee = amountValue.times(feeShare);\n  const amountWithoutFee = amountValue.minus(fee);\n  return {\n    bridgeFeeInTokenPrecision: fee.round().toFixed(),\n    amountIncludingCommissionInSystemPrecision: calcSwapToVUsd(toSystemPrecision(amountWithoutFee, decimals), poolInfo),\n    amountExcludingCommissionInSystemPrecision: calcSwapToVUsd(toSystemPrecision(amountValue, decimals), poolInfo),\n  };\n}\n\nfunction calcSwapToVUsd(amountInSystemPrecision: Big, poolInfo: Omit<PoolInfo, \"p\" | \"imbalance\">): string {\n  if (amountInSystemPrecision.eq(0)) {\n    return \"0\";\n  }\n  const tokenBalance = Big(poolInfo.tokenBalance).plus(amountInSystemPrecision);\n  const vUsdNewAmount = getY(tokenBalance.toFixed(), poolInfo.aValue, poolInfo.dValue);\n  return Big(poolInfo.vUsdBalance).minus(vUsdNewAmount).round().toFixed();\n}\n\nfunction swapFromVUsd(\n  amount: BigSource,\n  { feeShare, decimals }: Pick<Token, \"feeShare\" | \"decimals\">,\n  poolInfo: Omit<PoolInfo, \"imbalance\">\n): SwapFromVUsdCalcResult {\n  if (Big(amount).eq(0)) {\n    return {\n      bridgeFeeInTokenPrecision: \"0\",\n      amountIncludingCommissionInTokenPrecision: \"0\",\n      amountExcludingCommissionInTokenPrecision: \"0\",\n    };\n  }\n  const amountValue = Big(amount);\n  const vUsdBalance = amountValue.plus(poolInfo.vUsdBalance);\n  const newAmount = getY(vUsdBalance, poolInfo.aValue, poolInfo.dValue);\n  const result = fromSystemPrecision(Big(poolInfo.tokenBalance).minus(newAmount), decimals);\n  const fee = Big(result).times(feeShare);\n  const resultWithoutFee = Big(result).minus(fee).round();\n  return {\n    bridgeFeeInTokenPrecision: fee.round().toFixed(),\n    amountIncludingCommissionInTokenPrecision: resultWithoutFee.toFixed(),\n    amountExcludingCommissionInTokenPrecision: result.toFixed(),\n  };\n}\n\nfunction swapToVUsdReverse(\n  amountInTokenPrecision: BigSource,\n  { feeShare, decimals }: Pick<Token, \"feeShare\" | \"decimals\">,\n  poolInfo: PoolInfo\n): SwapToVUsdCalcResult {\n  const reversedFeeShare = Big(feeShare).div(Big(1).minus(feeShare));\n  const fee = Big(amountInTokenPrecision).times(reversedFeeShare);\n  const amountWithFee = Big(amountInTokenPrecision).plus(fee);\n  return {\n    bridgeFeeInTokenPrecision: fee.round().toFixed(),\n    amountIncludingCommissionInSystemPrecision: calcSwapToVUsdReverse(\n      toSystemPrecision(amountWithFee, decimals),\n      poolInfo\n    ),\n    amountExcludingCommissionInSystemPrecision: calcSwapToVUsdReverse(\n      toSystemPrecision(amountInTokenPrecision, decimals),\n      poolInfo\n    ),\n  };\n}\n\nfunction calcSwapToVUsdReverse(amountInSystemPrecision: Big, poolInfo: PoolInfo): string {\n  const tokenBalance = Big(poolInfo.tokenBalance).minus(amountInSystemPrecision);\n  const vUsdNewAmount = getY(tokenBalance.toFixed(), poolInfo.aValue, poolInfo.dValue);\n  return Big(vUsdNewAmount).minus(poolInfo.vUsdBalance).round().toFixed();\n}\n\nfunction swapFromVUsdReverse(\n  amountInSystemPrecision: BigSource,\n  { feeShare, decimals }: Pick<Token, \"feeShare\" | \"decimals\">,\n  poolInfo: PoolInfo\n): SwapFromVUsdCalcResult {\n  if (Big(amountInSystemPrecision).eq(0)) {\n    return {\n      bridgeFeeInTokenPrecision: \"0\",\n      amountIncludingCommissionInTokenPrecision: \"0\",\n      amountExcludingCommissionInTokenPrecision: \"0\",\n    };\n  }\n  const vUsdNewAmount = Big(poolInfo.vUsdBalance).minus(amountInSystemPrecision);\n  const tokenBalance = getY(vUsdNewAmount.toFixed(), poolInfo.aValue, poolInfo.dValue);\n  const inSystemPrecision = Big(tokenBalance).minus(poolInfo.tokenBalance);\n  const amountWithoutFee = fromSystemPrecision(inSystemPrecision.toFixed(), decimals);\n  const reversedFeeShare = Big(feeShare).div(Big(1).minus(feeShare));\n  const fee = Big(amountWithoutFee).times(reversedFeeShare);\n  const amount = Big(amountWithoutFee).plus(fee);\n  return {\n    bridgeFeeInTokenPrecision: fee.round().toFixed(),\n    amountIncludingCommissionInTokenPrecision: amount.round().toFixed(),\n    amountExcludingCommissionInTokenPrecision: amountWithoutFee.toFixed(),\n  };\n}\n", "import { Big } from \"big.js\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../tokens-info\";\nimport { convertIntAmountToFloat, fromSystemPrecision, swapFromVUsd, swapToVUsd } from \"./index\";\n\nexport interface SendAmountDetails {\n  sourceLPSwap: AmountImpact;\n  destLPSwap: AmountImpact;\n}\n\nexport interface AmountImpact {\n  fee: string;\n  swap: string;\n}\n\nexport function getSendAmountDetails(\n  amountInTokenPrecision: string,\n  sourceToken: TokenWithChainDetails,\n  sourcePool: PoolInfo,\n  destToken: TokenWithChainDetails,\n  destPool: PoolInfo\n): SendAmountDetails {\n  const vUsd = swapToVUsd(amountInTokenPrecision, sourceToken, sourcePool);\n  const vUsdInTokenPrecision = fromSystemPrecision(vUsd, sourceToken.decimals);\n  const result = swapFromVUsd(vUsd, destToken, destPool);\n\n  const swapToFeeInt = Big(amountInTokenPrecision).times(sourceToken.feeShare);\n  const swapFromFeeInt = Big(result).div(Big(1).minus(destToken.feeShare)).minus(result);\n  return {\n    sourceLPSwap: {\n      fee: convertIntAmountToFloat(swapToFeeInt, sourceToken.decimals)\n        .neg()\n        .round(sourceToken.decimals, Big.roundUp)\n        .toFixed(),\n      swap: convertIntAmountToFloat(\n        Big(amountInTokenPrecision).minus(vUsdInTokenPrecision).minus(swapToFeeInt),\n        sourceToken.decimals\n      )\n        .neg()\n        .round(sourceToken.decimals, Big.roundUp)\n        .toFixed(),\n    },\n    destLPSwap: {\n      fee: convertIntAmountToFloat(swapFromFeeInt, destToken.decimals)\n        .neg()\n        .round(destToken.decimals, Big.roundUp)\n        .toFixed(),\n      swap: convertIntAmountToFloat(\n        fromSystemPrecision(vUsd, destToken.decimals).minus(result).minus(swapFromFeeInt),\n        destToken.decimals\n      )\n        .neg()\n        .round(destToken.decimals, Big.roundUp)\n        .toFixed(),\n    },\n  };\n}\n", "import { Connection, PublicKey, TransactionMessage, VersionedTransaction } from \"@solana/web3.js\";\nimport { ChainSymbol } from \"../../chains/chain.enums\";\nimport { AllbridgeCoreSdkOptions, SdkError } from \"../../index\";\nimport { NodeRpcUrlsConfig } from \"../../services\";\nimport { fetchAddressLookupTableAccountsFromTx } from \"./utils\";\n\n/**\n * Contains usefully Solana methods\n */\nexport interface SolUtils {\n  /**\n   * Add memo to solana's transaction\n   * @param transaction transaction to add memo\n   * @param memo memo to add (28 char max)\n   */\n  addMemoToTx(transaction: VersionedTransaction, memo: string): Promise<void>;\n}\n\nexport class DefaultSolUtils implements SolUtils {\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions\n  ) {}\n\n  async addMemoToTx(transaction: VersionedTransaction, memo: string): Promise<void> {\n    if (memo.length > 28) {\n      throw new SdkError(\"InvalidArgumentException memo cannot be more than 28 characters\");\n    }\n    const connection = new Connection(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SOL), \"confirmed\");\n    const addressLookupTableAccounts = await fetchAddressLookupTableAccountsFromTx(transaction, connection);\n    const message = TransactionMessage.decompile(transaction.message, {\n      addressLookupTableAccounts: addressLookupTableAccounts,\n    });\n    const lastInstruction = message.instructions[message.instructions.length - 1];\n    if (!lastInstruction?.keys) {\n      throw new SdkError(\"Last instruction or its keys are invalid.\");\n    }\n\n    lastInstruction.keys.push({\n      pubkey: new PublicKey(Buffer.from(memo)),\n      isSigner: false,\n      isWritable: false,\n    });\n    transaction.message = message.compileToV0Message(addressLookupTableAccounts);\n  }\n}\n", "import {\n  Asset as StellarAsset,\n  BASE_FEE,\n  contract,\n  Horizon,\n  Operation,\n  Operation as StellarOperation,\n  rpc as SorobanRpc,\n  TimeoutInfinite,\n  Transaction,\n  TransactionBuilder,\n  TransactionBuilder as StellarTransactionBuilder,\n} from \"@stellar/stellar-sdk\";\nimport { ChainSymbol } from \"../../chains/chain.enums\";\nimport { AllbridgeCoreSdkOptions, SdkError } from \"../../index\";\nimport { NodeRpcUrlsConfig } from \"../../services\";\nimport { TokenContract } from \"../../services/models/srb/token-contract\";\nimport { getViewResultSoroban, isErrorSorobanResult } from \"../../services/models/srb/utils\";\nimport { withExponentialBackoff } from \"../utils\";\nimport ContractClientOptions = contract.ClientOptions;\nimport BalanceLineAsset = Horizon.HorizonApi.BalanceLineAsset;\n\n/**\n * Contains usefully Soroban methods\n */\nexport interface SrbUtils {\n  /**\n   * Build change Trust line Tx\n   * @param params see {@link TrustLineParams}\n   * @returns xdr Tx\n   */\n  buildChangeTrustLineXdrTx(params: TrustLineParams): Promise<string>;\n\n  /**\n   * Get Balance Line information if exists\n   * @param sender\n   * @param tokenAddress\n   */\n  getBalanceLine(sender: string, tokenAddress: string): Promise<Horizon.HorizonApi.BalanceLineAsset | undefined>;\n\n  /**\n   * Submit tx\n   * @param xdrTx\n   */\n  submitTransactionStellar(xdrTx: string): Promise<Horizon.HorizonApi.SubmitTransactionResponse>;\n\n  /**\n   * Simulate and check if Restore needed\n   * @param xdrTx - restore\n   * @param sourceAccount\n   * @returns xdrTx restore transaction if it required after check\n   */\n  simulateAndCheckRestoreTxRequiredSoroban(xdrTx: string, sourceAccount: string): Promise<string | undefined>;\n\n  /**\n   * Submit tx\n   * @param xdrTx\n   */\n  sendTransactionSoroban(xdrTx: string): Promise<SorobanRpc.Api.SendTransactionResponse>;\n\n  /**\n   * Confirm tx\n   */\n  confirmTx(hash: string, secondsToWait?: number): Promise<SorobanRpc.Api.GetTransactionResponse>;\n}\n\nexport interface TrustLineParams {\n  /**\n   * Float amount of tokens, default is Number.MAX_SAFE_INTEGER\n   */\n  limit?: string;\n  sender: string;\n  tokenAddress: string;\n}\n\nconst FEE = 100;\nconst SEND_TRANSACTION_TIMEOUT = 180;\n\nexport class DefaultSrbUtils implements SrbUtils {\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions\n  ) {}\n\n  async buildChangeTrustLineXdrTx(params: TrustLineParams): Promise<string> {\n    const stellar = new Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR));\n    const stellarAccount = await stellar.loadAccount(params.sender);\n    const tokenContract = this.getContract(TokenContract, params.tokenAddress);\n    const result = await tokenContract.name();\n    if (isErrorSorobanResult(result)) {\n      throw new SdkError();\n    }\n    const tokenName = getViewResultSoroban(result);\n    if (!tokenName) {\n      throw new SdkError();\n    }\n\n    const [symbol, srbTokenAddress] = tokenName.split(\":\");\n    if (symbol === undefined || srbTokenAddress === undefined) {\n      throw new SdkError(`Invalid token name format. Expected format 'symbol:srbTokenAddress'`);\n    }\n    const asset = new StellarAsset(symbol, srbTokenAddress);\n    const changeTrust = StellarOperation.changeTrust({\n      asset: asset,\n      limit: params.limit,\n    });\n\n    return new StellarTransactionBuilder(stellarAccount, {\n      fee: FEE.toString(10),\n      networkPassphrase: this.params.sorobanNetworkPassphrase,\n    })\n      .addOperation(changeTrust)\n      .setTimeout(SEND_TRANSACTION_TIMEOUT)\n      .build()\n      .toXDR();\n  }\n\n  async getBalanceLine(sender: string, tokenAddress: string): Promise<Horizon.HorizonApi.BalanceLineAsset | undefined> {\n    const tokenContract = this.getContract(TokenContract, tokenAddress);\n    const result = await tokenContract.name();\n    if (isErrorSorobanResult(result)) {\n      throw new SdkError();\n    }\n    const tokenName = getViewResultSoroban(result);\n    if (!tokenName) {\n      throw new SdkError();\n    }\n\n    const [symbol, srbTokenAddress] = tokenName.split(\":\");\n    const nodeRpcUrl = this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR);\n    const stellar = new Horizon.Server(nodeRpcUrl);\n    const stellarAccount = await stellar.loadAccount(sender);\n    const balanceInfo = stellarAccount.balances;\n\n    return balanceInfo.find(\n      (balance): balance is BalanceLineAsset =>\n        (balance.asset_type === \"credit_alphanum4\" || balance.asset_type === \"credit_alphanum12\") &&\n        balance.asset_code == symbol &&\n        balance.asset_issuer == srbTokenAddress\n    );\n  }\n\n  async submitTransactionStellar(xdrTx: string): Promise<Horizon.HorizonApi.SubmitTransactionResponse> {\n    const stellar = new Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR));\n    const transaction = StellarTransactionBuilder.fromXDR(\n      xdrTx,\n      this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR)\n    );\n    return await stellar.submitTransaction(transaction);\n  }\n\n  async simulateAndCheckRestoreTxRequiredSoroban(xdrTx: string, sourceAccount: string): Promise<string | undefined> {\n    const server = new SorobanRpc.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB));\n    const account = await server.getAccount(sourceAccount);\n    const transaction = TransactionBuilder.fromXDR(xdrTx, this.params.sorobanNetworkPassphrase) as Transaction;\n    const simulation = await server.simulateTransaction(transaction);\n    if (SorobanRpc.Api.isSimulationRestore(simulation)) {\n      return new TransactionBuilder(account, {\n        fee: (+BASE_FEE + +simulation.restorePreamble.minResourceFee).toString(),\n        networkPassphrase: this.params.sorobanNetworkPassphrase,\n      })\n        .setSorobanData(simulation.restorePreamble.transactionData.build())\n        .addOperation(Operation.restoreFootprint({}))\n        .setTimeout(TimeoutInfinite)\n        .build()\n        .toXDR();\n    }\n    return undefined;\n  }\n\n  async sendTransactionSoroban(xdrTx: string): Promise<SorobanRpc.Api.SendTransactionResponse> {\n    const server = new SorobanRpc.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB));\n    const transaction = TransactionBuilder.fromXDR(xdrTx, this.params.sorobanNetworkPassphrase) as Transaction;\n    return server.sendTransaction(transaction);\n  }\n\n  async confirmTx(hash: string, secondsToWait = 15): Promise<SorobanRpc.Api.GetTransactionResponse> {\n    const server = new SorobanRpc.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB));\n    const getTransactionResponseAll = await withExponentialBackoff(\n      () => server.getTransaction(hash),\n      (resp) => resp.status === SorobanRpc.Api.GetTransactionStatus.NOT_FOUND,\n      secondsToWait\n    );\n\n    if (getTransactionResponseAll.length === 0) {\n      throw new SdkError(\"No transaction responses found.\");\n    }\n\n    const lastResponse = getTransactionResponseAll[getTransactionResponseAll.length - 1];\n    if (!lastResponse) {\n      throw new SdkError(\"Unexpected error: last response is undefined.\");\n    }\n\n    return lastResponse;\n  }\n\n  private getContract<T>(contract: new (args: ContractClientOptions) => T, address: string): T {\n    const config: ContractClientOptions = {\n      contractId: address,\n      networkPassphrase: this.params.sorobanNetworkPassphrase,\n      rpcUrl: this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB),\n    };\n    return new contract(config);\n  }\n}\n", "import { contract } from \"@stellar/stellar-sdk\";\nimport u32 = contract.u32;\nimport i128 = contract.i128;\nimport AssembledTransaction = contract.AssembledTransaction;\nimport ContractSpec = contract.Spec;\nimport ContractClient = contract.Client;\nimport ContractClientOptions = contract.ClientOptions;\nexport const Errors = {};\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport interface TokenContract {\n  /**\n   * Construct and simulate a allowance transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Returns the allowance for `spender` to transfer from `from`.\n   *\n   * The amount returned is the amount that spender is allowed to transfer\n   * out of from's balance. When the spender transfers amounts, the allowance\n   * will be reduced by the amount transfered.\n   *\n   * # Arguments\n   *\n   * * `from` - The address holding the balance of tokens to be drawn from.\n   * * `spender` - The address spending the tokens held by `from`.\n   */\n  allowance: (\n    { from, spender }: { from: string; spender: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<i128>>;\n\n  /**\n   * Construct and simulate a authorized transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Returns true if `id` is authorized to use its balance.\n   *\n   * # Arguments\n   *\n   * * `id` - The address for which token authorization is being checked.\n   */\n  authorized: (\n    { id }: { id: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<boolean>>;\n\n  /**\n   * Construct and simulate a approve transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Set the allowance by `amount` for `spender` to transfer/burn from\n   * `from`.\n   *\n   * The amount set is the amount that spender is approved to transfer out of\n   * from's balance. The spender will be allowed to transfer amounts, and\n   * when an amount is transferred the allowance will be reduced by the\n   * amount transfered.\n   *\n   * # Arguments\n   *\n   * * `from` - The address holding the balance of tokens to be drawn from.\n   * * `spender` - The address being authorized to spend the tokens held by\n   * `from`.\n   * * `amount` - The tokens to be made available to `spender`.\n   * * `expiration_ledger` - The ledger number where this allowance expires. Cannot\n   * be less than the current ledger number unless the amount is being set to 0.\n   * An expired entry (where expiration_ledger < the current ledger number)\n   * should be treated as a 0 amount allowance.\n   *\n   * # Events\n   *\n   * Emits an event with topics `[\"approve\", from: Address,\n   * spender: Address], data = [amount: i128, expiration_ledger: u32]`\n   */\n  approve: (\n    {\n      from,\n      spender,\n      amount,\n      expiration_ledger,\n    }: {\n      from: string;\n      spender: string;\n      amount: i128;\n      expiration_ledger: u32;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<null>>;\n\n  /**\n   * Construct and simulate a balance transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Returns the balance of `id`.\n   *\n   * # Arguments\n   *\n   * * `id` - The address for which a balance is being queried. If the\n   * address has no existing balance, returns 0.\n   */\n  balance: (\n    { id }: { id: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<i128>>;\n\n  /**\n   * Construct and simulate a burn transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Burn `amount` from `from`.\n   *\n   * Reduces from's balance by the amount, without transferring the balance\n   * to another holder's balance.\n   *\n   * # Arguments\n   *\n   * * `from` - The address holding the balance of tokens which will be\n   * burned from.\n   * * `amount` - The amount of tokens to be burned.\n   *\n   * # Events\n   *\n   * Emits an event with topics `[\"burn\", from: Address], data = [amount:\n   * i128]`\n   */\n  burn: (\n    { from, amount }: { from: string; amount: i128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<null>>;\n\n  /**\n   * Construct and simulate a burn_from transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Burn `amount` from `from`, consuming the allowance of `spender`.\n   *\n   * Reduces from's balance by the amount, without transferring the balance\n   * to another holder's balance.\n   *\n   * The spender will be allowed to burn the amount from from's balance, if\n   * the amount is less than or equal to the allowance that the spender has\n   * on the from's balance. The spender's allowance on from's balance will be\n   * reduced by the amount.\n   *\n   * # Arguments\n   *\n   * * `spender` - The address authorizing the burn, and having its allowance\n   * consumed during the burn.\n   * * `from` - The address holding the balance of tokens which will be\n   * burned from.\n   * * `amount` - The amount of tokens to be burned.\n   *\n   * # Events\n   *\n   * Emits an event with topics `[\"burn\", from: Address], data = [amount:\n   * i128]`\n   */\n  burn_from: (\n    { spender, from, amount }: { spender: string; from: string; amount: i128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<null>>;\n\n  /**\n   * Construct and simulate a clawback transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Clawback `amount` from `from` account. `amount` is burned in the\n   * clawback process.\n   *\n   * # Arguments\n   *\n   * * `from` - The address holding the balance from which the clawback will\n   * take tokens.\n   * * `amount` - The amount of tokens to be clawed back.\n   *\n   * # Events\n   *\n   * Emits an event with topics `[\"clawback\", admin: Address, to: Address],\n   * data = [amount: i128]`\n   */\n  clawback: (\n    { from, amount }: { from: string; amount: i128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<null>>;\n\n  /**\n   * Construct and simulate a decimals transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Returns the number of decimals used to represent amounts of this token.\n   *\n   * # Panics\n   *\n   * If the contract has not yet been initialized.\n   */\n  decimals: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<u32>>;\n\n  /**\n   * Construct and simulate a mint transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Mints `amount` to `to`.\n   *\n   * # Arguments\n   *\n   * * `to` - The address which will receive the minted tokens.\n   * * `amount` - The amount of tokens to be minted.\n   *\n   * # Events\n   *\n   * Emits an event with topics `[\"mint\", admin: Address, to: Address], data\n   * = [amount: i128]`\n   */\n  mint: (\n    { to, amount }: { to: string; amount: i128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<null>>;\n\n  /**\n   * Construct and simulate a name transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Returns the name for this token.\n   *\n   * # Panics\n   *\n   * If the contract has not yet been initialized.\n   */\n  name: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<string>>;\n\n  /**\n   * Construct and simulate a set_admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Sets the administrator to the specified address `new_admin`.\n   *\n   * # Arguments\n   *\n   * * `new_admin` - The address which will henceforth be the administrator\n   * of this token contract.\n   *\n   * # Events\n   *\n   * Emits an event with topics `[\"set_admin\", admin: Address], data =\n   * [new_admin: Address]`\n   */\n  set_admin: (\n    { new_admin }: { new_admin: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<null>>;\n\n  /**\n   * Construct and simulate a admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Returns the admin of the contract.\n   *\n   * # Panics\n   *\n   * If the admin is not set.\n   */\n  admin: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<string>>;\n\n  /**\n   * Construct and simulate a set_authorized transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Sets whether the account is authorized to use its balance. If\n   * `authorized` is true, `id` should be able to use its balance.\n   *\n   * # Arguments\n   *\n   * * `id` - The address being (de-)authorized.\n   * * `authorize` - Whether or not `id` can use its balance.\n   *\n   * # Events\n   *\n   * Emits an event with topics `[\"set_authorized\", id: Address], data =\n   * [authorize: bool]`\n   */\n  set_authorized: (\n    { id, authorize }: { id: string; authorize: boolean },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<null>>;\n\n  /**\n   * Construct and simulate a symbol transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Returns the symbol for this token.\n   *\n   * # Panics\n   *\n   * If the contract has not yet been initialized.\n   */\n  symbol: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<string>>;\n\n  /**\n   * Construct and simulate a transfer transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Transfer `amount` from `from` to `to`.\n   *\n   * # Arguments\n   *\n   * * `from` - The address holding the balance of tokens which will be\n   * withdrawn from.\n   * * `to` - The address which will receive the transferred tokens.\n   * * `amount` - The amount of tokens to be transferred.\n   *\n   * # Events\n   *\n   * Emits an event with topics `[\"transfer\", from: Address, to: Address],\n   * data = [amount: i128]`\n   */\n  transfer: (\n    { from, to, amount }: { from: string; to: string; amount: i128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<null>>;\n\n  /**\n   * Construct and simulate a transfer_from transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * Transfer `amount` from `from` to `to`, consuming the allowance that\n   * `spender` has on `from`'s balance. Authorized by spender\n   * (`spender.require_auth()`).\n   *\n   * The spender will be allowed to transfer the amount from from's balance\n   * if the amount is less than or equal to the allowance that the spender\n   * has on the from's balance. The spender's allowance on from's balance\n   * will be reduced by the amount.\n   *\n   * # Arguments\n   *\n   * * `spender` - The address authorizing the transfer, and having its\n   * allowance consumed during the transfer.\n   * * `from` - The address holding the balance of tokens which will be\n   * withdrawn from.\n   * * `to` - The address which will receive the transferred tokens.\n   * * `amount` - The amount of tokens to be transferred.\n   *\n   * # Events\n   *\n   * Emits an event with topics `[\"transfer\", from: Address, to: Address],\n   * data = [amount: i128]`\n   */\n  transfer_from: (\n    { spender, from, to, amount }: { spender: string; from: string; to: string; amount: i128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<null>>;\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class TokenContract extends ContractClient {\n  constructor(public readonly options: ContractClientOptions) {\n    super(\n      new ContractSpec([\n        \"AAAAAAAAAYlSZXR1cm5zIHRoZSBhbGxvd2FuY2UgZm9yIGBzcGVuZGVyYCB0byB0cmFuc2ZlciBmcm9tIGBmcm9tYC4KClRoZSBhbW91bnQgcmV0dXJuZWQgaXMgdGhlIGFtb3VudCB0aGF0IHNwZW5kZXIgaXMgYWxsb3dlZCB0byB0cmFuc2ZlcgpvdXQgb2YgZnJvbSdzIGJhbGFuY2UuIFdoZW4gdGhlIHNwZW5kZXIgdHJhbnNmZXJzIGFtb3VudHMsIHRoZSBhbGxvd2FuY2UKd2lsbCBiZSByZWR1Y2VkIGJ5IHRoZSBhbW91bnQgdHJhbnNmZXJlZC4KCiMgQXJndW1lbnRzCgoqIGBmcm9tYCAtIFRoZSBhZGRyZXNzIGhvbGRpbmcgdGhlIGJhbGFuY2Ugb2YgdG9rZW5zIHRvIGJlIGRyYXduIGZyb20uCiogYHNwZW5kZXJgIC0gVGhlIGFkZHJlc3Mgc3BlbmRpbmcgdGhlIHRva2VucyBoZWxkIGJ5IGBmcm9tYC4AAAAAAAAJYWxsb3dhbmNlAAAAAAAAAgAAAAAAAAAEZnJvbQAAABMAAAAAAAAAB3NwZW5kZXIAAAAAEwAAAAEAAAAL\",\n        \"AAAAAAAAAIlSZXR1cm5zIHRydWUgaWYgYGlkYCBpcyBhdXRob3JpemVkIHRvIHVzZSBpdHMgYmFsYW5jZS4KCiMgQXJndW1lbnRzCgoqIGBpZGAgLSBUaGUgYWRkcmVzcyBmb3Igd2hpY2ggdG9rZW4gYXV0aG9yaXphdGlvbiBpcyBiZWluZyBjaGVja2VkLgAAAAAAAAphdXRob3JpemVkAAAAAAABAAAAAAAAAAJpZAAAAAAAEwAAAAEAAAAB\",\n        \"AAAAAAAAA55TZXQgdGhlIGFsbG93YW5jZSBieSBgYW1vdW50YCBmb3IgYHNwZW5kZXJgIHRvIHRyYW5zZmVyL2J1cm4gZnJvbQpgZnJvbWAuCgpUaGUgYW1vdW50IHNldCBpcyB0aGUgYW1vdW50IHRoYXQgc3BlbmRlciBpcyBhcHByb3ZlZCB0byB0cmFuc2ZlciBvdXQgb2YKZnJvbSdzIGJhbGFuY2UuIFRoZSBzcGVuZGVyIHdpbGwgYmUgYWxsb3dlZCB0byB0cmFuc2ZlciBhbW91bnRzLCBhbmQKd2hlbiBhbiBhbW91bnQgaXMgdHJhbnNmZXJyZWQgdGhlIGFsbG93YW5jZSB3aWxsIGJlIHJlZHVjZWQgYnkgdGhlCmFtb3VudCB0cmFuc2ZlcmVkLgoKIyBBcmd1bWVudHMKCiogYGZyb21gIC0gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgYmFsYW5jZSBvZiB0b2tlbnMgdG8gYmUgZHJhd24gZnJvbS4KKiBgc3BlbmRlcmAgLSBUaGUgYWRkcmVzcyBiZWluZyBhdXRob3JpemVkIHRvIHNwZW5kIHRoZSB0b2tlbnMgaGVsZCBieQpgZnJvbWAuCiogYGFtb3VudGAgLSBUaGUgdG9rZW5zIHRvIGJlIG1hZGUgYXZhaWxhYmxlIHRvIGBzcGVuZGVyYC4KKiBgZXhwaXJhdGlvbl9sZWRnZXJgIC0gVGhlIGxlZGdlciBudW1iZXIgd2hlcmUgdGhpcyBhbGxvd2FuY2UgZXhwaXJlcy4gQ2Fubm90CmJlIGxlc3MgdGhhbiB0aGUgY3VycmVudCBsZWRnZXIgbnVtYmVyIHVubGVzcyB0aGUgYW1vdW50IGlzIGJlaW5nIHNldCB0byAwLgpBbiBleHBpcmVkIGVudHJ5ICh3aGVyZSBleHBpcmF0aW9uX2xlZGdlciA8IHRoZSBjdXJyZW50IGxlZGdlciBudW1iZXIpCnNob3VsZCBiZSB0cmVhdGVkIGFzIGEgMCBhbW91bnQgYWxsb3dhbmNlLgoKIyBFdmVudHMKCkVtaXRzIGFuIGV2ZW50IHdpdGggdG9waWNzIGBbImFwcHJvdmUiLCBmcm9tOiBBZGRyZXNzLApzcGVuZGVyOiBBZGRyZXNzXSwgZGF0YSA9IFthbW91bnQ6IGkxMjgsIGV4cGlyYXRpb25fbGVkZ2VyOiB1MzJdYAAAAAAAB2FwcHJvdmUAAAAABAAAAAAAAAAEZnJvbQAAABMAAAAAAAAAB3NwZW5kZXIAAAAAEwAAAAAAAAAGYW1vdW50AAAAAAALAAAAAAAAABFleHBpcmF0aW9uX2xlZGdlcgAAAAAAAAQAAAAA\",\n        \"AAAAAAAAAJhSZXR1cm5zIHRoZSBiYWxhbmNlIG9mIGBpZGAuCgojIEFyZ3VtZW50cwoKKiBgaWRgIC0gVGhlIGFkZHJlc3MgZm9yIHdoaWNoIGEgYmFsYW5jZSBpcyBiZWluZyBxdWVyaWVkLiBJZiB0aGUKYWRkcmVzcyBoYXMgbm8gZXhpc3RpbmcgYmFsYW5jZSwgcmV0dXJucyAwLgAAAAdiYWxhbmNlAAAAAAEAAAAAAAAAAmlkAAAAAAATAAAAAQAAAAs=\",\n        \"AAAAAAAAAWRCdXJuIGBhbW91bnRgIGZyb20gYGZyb21gLgoKUmVkdWNlcyBmcm9tJ3MgYmFsYW5jZSBieSB0aGUgYW1vdW50LCB3aXRob3V0IHRyYW5zZmVycmluZyB0aGUgYmFsYW5jZQp0byBhbm90aGVyIGhvbGRlcidzIGJhbGFuY2UuCgojIEFyZ3VtZW50cwoKKiBgZnJvbWAgLSBUaGUgYWRkcmVzcyBob2xkaW5nIHRoZSBiYWxhbmNlIG9mIHRva2VucyB3aGljaCB3aWxsIGJlCmJ1cm5lZCBmcm9tLgoqIGBhbW91bnRgIC0gVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgYnVybmVkLgoKIyBFdmVudHMKCkVtaXRzIGFuIGV2ZW50IHdpdGggdG9waWNzIGBbImJ1cm4iLCBmcm9tOiBBZGRyZXNzXSwgZGF0YSA9IFthbW91bnQ6CmkxMjhdYAAAAARidXJuAAAAAgAAAAAAAAAEZnJvbQAAABMAAAAAAAAABmFtb3VudAAAAAAACwAAAAA=\",\n        \"AAAAAAAAAtxCdXJuIGBhbW91bnRgIGZyb20gYGZyb21gLCBjb25zdW1pbmcgdGhlIGFsbG93YW5jZSBvZiBgc3BlbmRlcmAuCgpSZWR1Y2VzIGZyb20ncyBiYWxhbmNlIGJ5IHRoZSBhbW91bnQsIHdpdGhvdXQgdHJhbnNmZXJyaW5nIHRoZSBiYWxhbmNlCnRvIGFub3RoZXIgaG9sZGVyJ3MgYmFsYW5jZS4KClRoZSBzcGVuZGVyIHdpbGwgYmUgYWxsb3dlZCB0byBidXJuIHRoZSBhbW91bnQgZnJvbSBmcm9tJ3MgYmFsYW5jZSwgaWYKdGhlIGFtb3VudCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gdGhlIGFsbG93YW5jZSB0aGF0IHRoZSBzcGVuZGVyIGhhcwpvbiB0aGUgZnJvbSdzIGJhbGFuY2UuIFRoZSBzcGVuZGVyJ3MgYWxsb3dhbmNlIG9uIGZyb20ncyBiYWxhbmNlIHdpbGwgYmUKcmVkdWNlZCBieSB0aGUgYW1vdW50LgoKIyBBcmd1bWVudHMKCiogYHNwZW5kZXJgIC0gVGhlIGFkZHJlc3MgYXV0aG9yaXppbmcgdGhlIGJ1cm4sIGFuZCBoYXZpbmcgaXRzIGFsbG93YW5jZQpjb25zdW1lZCBkdXJpbmcgdGhlIGJ1cm4uCiogYGZyb21gIC0gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgYmFsYW5jZSBvZiB0b2tlbnMgd2hpY2ggd2lsbCBiZQpidXJuZWQgZnJvbS4KKiBgYW1vdW50YCAtIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIGJ1cm5lZC4KCiMgRXZlbnRzCgpFbWl0cyBhbiBldmVudCB3aXRoIHRvcGljcyBgWyJidXJuIiwgZnJvbTogQWRkcmVzc10sIGRhdGEgPSBbYW1vdW50OgppMTI4XWAAAAAJYnVybl9mcm9tAAAAAAAAAwAAAAAAAAAHc3BlbmRlcgAAAAATAAAAAAAAAARmcm9tAAAAEwAAAAAAAAAGYW1vdW50AAAAAAALAAAAAA==\",\n        \"AAAAAAAAAVNDbGF3YmFjayBgYW1vdW50YCBmcm9tIGBmcm9tYCBhY2NvdW50LiBgYW1vdW50YCBpcyBidXJuZWQgaW4gdGhlCmNsYXdiYWNrIHByb2Nlc3MuCgojIEFyZ3VtZW50cwoKKiBgZnJvbWAgLSBUaGUgYWRkcmVzcyBob2xkaW5nIHRoZSBiYWxhbmNlIGZyb20gd2hpY2ggdGhlIGNsYXdiYWNrIHdpbGwKdGFrZSB0b2tlbnMuCiogYGFtb3VudGAgLSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSBjbGF3ZWQgYmFjay4KCiMgRXZlbnRzCgpFbWl0cyBhbiBldmVudCB3aXRoIHRvcGljcyBgWyJjbGF3YmFjayIsIGFkbWluOiBBZGRyZXNzLCB0bzogQWRkcmVzc10sCmRhdGEgPSBbYW1vdW50OiBpMTI4XWAAAAAACGNsYXdiYWNrAAAAAgAAAAAAAAAEZnJvbQAAABMAAAAAAAAABmFtb3VudAAAAAAACwAAAAA=\",\n        \"AAAAAAAAAIBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGVjaW1hbHMgdXNlZCB0byByZXByZXNlbnQgYW1vdW50cyBvZiB0aGlzIHRva2VuLgoKIyBQYW5pY3MKCklmIHRoZSBjb250cmFjdCBoYXMgbm90IHlldCBiZWVuIGluaXRpYWxpemVkLgAAAAhkZWNpbWFscwAAAAAAAAABAAAABA==\",\n        \"AAAAAAAAAPVNaW50cyBgYW1vdW50YCB0byBgdG9gLgoKIyBBcmd1bWVudHMKCiogYHRvYCAtIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgcmVjZWl2ZSB0aGUgbWludGVkIHRva2Vucy4KKiBgYW1vdW50YCAtIFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJlIG1pbnRlZC4KCiMgRXZlbnRzCgpFbWl0cyBhbiBldmVudCB3aXRoIHRvcGljcyBgWyJtaW50IiwgYWRtaW46IEFkZHJlc3MsIHRvOiBBZGRyZXNzXSwgZGF0YQo9IFthbW91bnQ6IGkxMjhdYAAAAAAAAARtaW50AAAAAgAAAAAAAAACdG8AAAAAABMAAAAAAAAABmFtb3VudAAAAAAACwAAAAA=\",\n        \"AAAAAAAAAFlSZXR1cm5zIHRoZSBuYW1lIGZvciB0aGlzIHRva2VuLgoKIyBQYW5pY3MKCklmIHRoZSBjb250cmFjdCBoYXMgbm90IHlldCBiZWVuIGluaXRpYWxpemVkLgAAAAAAAARuYW1lAAAAAAAAAAEAAAAQ\",\n        \"AAAAAAAAAQxTZXRzIHRoZSBhZG1pbmlzdHJhdG9yIHRvIHRoZSBzcGVjaWZpZWQgYWRkcmVzcyBgbmV3X2FkbWluYC4KCiMgQXJndW1lbnRzCgoqIGBuZXdfYWRtaW5gIC0gVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCBoZW5jZWZvcnRoIGJlIHRoZSBhZG1pbmlzdHJhdG9yCm9mIHRoaXMgdG9rZW4gY29udHJhY3QuCgojIEV2ZW50cwoKRW1pdHMgYW4gZXZlbnQgd2l0aCB0b3BpY3MgYFsic2V0X2FkbWluIiwgYWRtaW46IEFkZHJlc3NdLCBkYXRhID0KW25ld19hZG1pbjogQWRkcmVzc11gAAAACXNldF9hZG1pbgAAAAAAAAEAAAAAAAAACW5ld19hZG1pbgAAAAAAABMAAAAA\",\n        \"AAAAAAAAAEZSZXR1cm5zIHRoZSBhZG1pbiBvZiB0aGUgY29udHJhY3QuCgojIFBhbmljcwoKSWYgdGhlIGFkbWluIGlzIG5vdCBzZXQuAAAAAAAFYWRtaW4AAAAAAAAAAAAAAQAAABM=\",\n        \"AAAAAAAAAVBTZXRzIHdoZXRoZXIgdGhlIGFjY291bnQgaXMgYXV0aG9yaXplZCB0byB1c2UgaXRzIGJhbGFuY2UuIElmCmBhdXRob3JpemVkYCBpcyB0cnVlLCBgaWRgIHNob3VsZCBiZSBhYmxlIHRvIHVzZSBpdHMgYmFsYW5jZS4KCiMgQXJndW1lbnRzCgoqIGBpZGAgLSBUaGUgYWRkcmVzcyBiZWluZyAoZGUtKWF1dGhvcml6ZWQuCiogYGF1dGhvcml6ZWAgLSBXaGV0aGVyIG9yIG5vdCBgaWRgIGNhbiB1c2UgaXRzIGJhbGFuY2UuCgojIEV2ZW50cwoKRW1pdHMgYW4gZXZlbnQgd2l0aCB0b3BpY3MgYFsic2V0X2F1dGhvcml6ZWQiLCBpZDogQWRkcmVzc10sIGRhdGEgPQpbYXV0aG9yaXplOiBib29sXWAAAAAOc2V0X2F1dGhvcml6ZWQAAAAAAAIAAAAAAAAAAmlkAAAAAAATAAAAAAAAAAlhdXRob3JpemUAAAAAAAABAAAAAA==\",\n        \"AAAAAAAAAFtSZXR1cm5zIHRoZSBzeW1ib2wgZm9yIHRoaXMgdG9rZW4uCgojIFBhbmljcwoKSWYgdGhlIGNvbnRyYWN0IGhhcyBub3QgeWV0IGJlZW4gaW5pdGlhbGl6ZWQuAAAAAAZzeW1ib2wAAAAAAAAAAAABAAAAEA==\",\n        \"AAAAAAAAAWRUcmFuc2ZlciBgYW1vdW50YCBmcm9tIGBmcm9tYCB0byBgdG9gLgoKIyBBcmd1bWVudHMKCiogYGZyb21gIC0gVGhlIGFkZHJlc3MgaG9sZGluZyB0aGUgYmFsYW5jZSBvZiB0b2tlbnMgd2hpY2ggd2lsbCBiZQp3aXRoZHJhd24gZnJvbS4KKiBgdG9gIC0gVGhlIGFkZHJlc3Mgd2hpY2ggd2lsbCByZWNlaXZlIHRoZSB0cmFuc2ZlcnJlZCB0b2tlbnMuCiogYGFtb3VudGAgLSBUaGUgYW1vdW50IG9mIHRva2VucyB0byBiZSB0cmFuc2ZlcnJlZC4KCiMgRXZlbnRzCgpFbWl0cyBhbiBldmVudCB3aXRoIHRvcGljcyBgWyJ0cmFuc2ZlciIsIGZyb206IEFkZHJlc3MsIHRvOiBBZGRyZXNzXSwKZGF0YSA9IFthbW91bnQ6IGkxMjhdYAAAAAh0cmFuc2ZlcgAAAAMAAAAAAAAABGZyb20AAAATAAAAAAAAAAJ0bwAAAAAAEwAAAAAAAAAGYW1vdW50AAAAAAALAAAAAA==\",\n        \"AAAAAAAAAzNUcmFuc2ZlciBgYW1vdW50YCBmcm9tIGBmcm9tYCB0byBgdG9gLCBjb25zdW1pbmcgdGhlIGFsbG93YW5jZSB0aGF0CmBzcGVuZGVyYCBoYXMgb24gYGZyb21gJ3MgYmFsYW5jZS4gQXV0aG9yaXplZCBieSBzcGVuZGVyCihgc3BlbmRlci5yZXF1aXJlX2F1dGgoKWApLgoKVGhlIHNwZW5kZXIgd2lsbCBiZSBhbGxvd2VkIHRvIHRyYW5zZmVyIHRoZSBhbW91bnQgZnJvbSBmcm9tJ3MgYmFsYW5jZQppZiB0aGUgYW1vdW50IGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgYWxsb3dhbmNlIHRoYXQgdGhlIHNwZW5kZXIKaGFzIG9uIHRoZSBmcm9tJ3MgYmFsYW5jZS4gVGhlIHNwZW5kZXIncyBhbGxvd2FuY2Ugb24gZnJvbSdzIGJhbGFuY2UKd2lsbCBiZSByZWR1Y2VkIGJ5IHRoZSBhbW91bnQuCgojIEFyZ3VtZW50cwoKKiBgc3BlbmRlcmAgLSBUaGUgYWRkcmVzcyBhdXRob3JpemluZyB0aGUgdHJhbnNmZXIsIGFuZCBoYXZpbmcgaXRzCmFsbG93YW5jZSBjb25zdW1lZCBkdXJpbmcgdGhlIHRyYW5zZmVyLgoqIGBmcm9tYCAtIFRoZSBhZGRyZXNzIGhvbGRpbmcgdGhlIGJhbGFuY2Ugb2YgdG9rZW5zIHdoaWNoIHdpbGwgYmUKd2l0aGRyYXduIGZyb20uCiogYHRvYCAtIFRoZSBhZGRyZXNzIHdoaWNoIHdpbGwgcmVjZWl2ZSB0aGUgdHJhbnNmZXJyZWQgdG9rZW5zLgoqIGBhbW91bnRgIC0gVGhlIGFtb3VudCBvZiB0b2tlbnMgdG8gYmUgdHJhbnNmZXJyZWQuCgojIEV2ZW50cwoKRW1pdHMgYW4gZXZlbnQgd2l0aCB0b3BpY3MgYFsidHJhbnNmZXIiLCBmcm9tOiBBZGRyZXNzLCB0bzogQWRkcmVzc10sCmRhdGEgPSBbYW1vdW50OiBpMTI4XWAAAAAADXRyYW5zZmVyX2Zyb20AAAAAAAAEAAAAAAAAAAdzcGVuZGVyAAAAABMAAAAAAAAABGZyb20AAAATAAAAAAAAAAJ0bwAAAAAAEwAAAAAAAAAGYW1vdW50AAAAAAALAAAAAA==\",\n      ]),\n      options\n    );\n  }\n  public readonly fromJSON = {\n    allowance: this.txFromJSON<i128>,\n    authorized: this.txFromJSON<boolean>,\n    approve: this.txFromJSON<null>,\n    balance: this.txFromJSON<i128>,\n    burn: this.txFromJSON<null>,\n    burn_from: this.txFromJSON<null>,\n    clawback: this.txFromJSON<null>,\n    decimals: this.txFromJSON<u32>,\n    mint: this.txFromJSON<null>,\n    name: this.txFromJSON<string>,\n    set_admin: this.txFromJSON<null>,\n    admin: this.txFromJSON<string>,\n    set_authorized: this.txFromJSON<null>,\n    symbol: this.txFromJSON<string>,\n    transfer: this.txFromJSON<null>,\n    transfer_from: this.txFromJSON<null>,\n  };\n}\n", "import { AllbridgeCoreSdkOptions } from \"../index\";\nimport { NodeRpcUrlsConfig } from \"../services\";\nimport { DefaultSolUtils, SolUtils } from \"./sol\";\nimport { DefaultSrbUtils, SrbUtils } from \"./srb\";\n\n/**\n * Contains usefully methods\n */\nexport interface Utils {\n  srb: SrbUtils;\n  sol: SolUtils;\n}\n\nexport class DefaultUtils implements Utils {\n  srb: SrbUtils;\n  sol: SolUtils;\n\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    params: AllbridgeCoreSdkOptions\n  ) {\n    this.srb = new DefaultSrbUtils(nodeRpcUrlsConfig, params);\n    this.sol = new DefaultSolUtils(nodeRpcUrlsConfig, params);\n  }\n}\n", "export {\n  ApproveParams as BridgeApproveParams,\n  BaseSendParams,\n  CheckAllowanceParams,\n  GetAllowanceParams,\n  GetTokenBalanceParams,\n  SendParams,\n  SwapParams,\n  GetNativeTokenBalanceParams,\n} from \"../services/bridge/models/bridge.model\";\nexport { BridgeService } from \"../services/bridge/index\";\nexport { CctpParams, CctpDomains } from \"../services/bridge/sol\";\nexport { LiquidityPoolService } from \"../services/liquidity-pool/index\";\nexport {\n  Messenger,\n  TransferStatusResponse,\n  BridgeTransaction,\n  GasBalanceResponse,\n  CheckAddressResponse,\n  AddressStatus,\n} from \"../client/core-api/core-api.model\";\nexport { RawBridgeTransactionBuilder } from \"../services/bridge/raw-bridge-transaction-builder\";\nexport { RawPoolTransactionBuilder } from \"../services/liquidity-pool/raw-pool-transaction-builder\";\nexport {\n  PoolInfo,\n  TokenWithChainDetails,\n  TransferTime,\n  TxCostAmount,\n  SuiAddresses,\n  MessengerTransferTime,\n} from \"../tokens-info/tokens-info.model\";\nexport {\n  UserBalanceInfo,\n  UserBalanceInfoDTO,\n  LiquidityPoolsParams,\n  LiquidityPoolsParamsWithAmount,\n  ApproveParams as LiquidityPoolsApproveParams,\n  CheckAllowanceParams as LiquidityPoolsCheckAllowanceParams,\n  GetAllowanceParams as LiquidityPoolsGetAllowanceParams,\n} from \"../services/liquidity-pool/models/pool.model\";\nexport * from \"../services/models/index\";\nexport {\n  SwapAndBridgeCalculationData,\n  SwapFromVUsdCalcResult,\n  SwapToVUsdCalcResult,\n} from \"../utils/calculation/swap-and-bridge-fee-calc\";\nexport { SendAmountDetails, AmountImpact } from \"../utils/calculation/swap-and-bridge-details\";\nexport { ChainDetailsMap, ChainDetailsWithTokens } from \"../tokens-info\";\nexport { Utils } from \"../utils\";\nexport { SrbUtils, TrustLineParams } from \"../utils/srb\";\nexport { SolUtils } from \"../utils/sol\";\nexport * from \"../exceptions\";\nexport { ChainSymbol, ChainType } from \"../chains/chain.enums\";\nexport { AdditionalBasicChainProperties, BasicChainProperties } from \"../chains/models\";\n\nexport enum FeePaymentMethod {\n  /**\n   * The fee is paid in the native currency of the source chain.\n   */\n  WITH_NATIVE_CURRENCY = \"native\",\n\n  /**\n   * The fee is paid with the stablecoin token.\n   */\n  WITH_STABLECOIN = \"stablecoin\",\n}\n\nexport interface AmountsAndGasFeeOptions {\n  /**\n   * The floating point amount of tokens to be sent (not including gas fee).\n   */\n  amountToSendFloat: string;\n\n  /**\n   * The floating point amount of tokens to be received.\n   */\n  amountToBeReceivedFloat: string;\n\n  /**\n   * Available ways to pay the transfer gas fee and gas fee amount.\n   */\n  gasFeeOptions: GasFeeOptions;\n}\n\ntype GasFeeOptionsType = {\n  [key in FeePaymentMethod]?: AmountFormatted;\n};\n\n/**\n * Describes available options of paying the gas fee and the amount to pay when using the corresponding method.\n *\n * For {@link FeePaymentMethod.WITH_NATIVE_CURRENCY} value contains the amount in the smallest denomination of the source chain currency\n *\n * For {@link FeePaymentMethod.WITH_STABLECOIN} value contains the amount in the smallest denomination of the source token\n */\nexport interface GasFeeOptions extends GasFeeOptionsType {\n  [FeePaymentMethod.WITH_NATIVE_CURRENCY]: AmountFormatted;\n  [FeePaymentMethod.WITH_STABLECOIN]?: AmountFormatted;\n}\n\n/**\n * Define the type of amount data<p/>\n * Example:<p/>\n *  \"1500000\" USDC {@link AmountFormat.INT} = \"1.5\" USDC {@link AmountFormat.FLOAT}, if USDC.decimals = 6\n */\nexport enum AmountFormat {\n  /**\n   * denominated in the smallest unit of the source token\n   */\n  INT = \"int\",\n  /**\n   * denominated in the unit of the source token\n   */\n  FLOAT = \"float\",\n}\n\n/**\n * Describes the same amount in two variation formats.\n *\n * For {@link AmountFormat.INT} value contains the amount in the smallest denomination\n *\n * For {@link AmountFormat.FLOAT} value contains the amount in tokens denomination\n */\nexport type AmountFormatted = {\n  [key in AmountFormat]: string;\n};\n\n/**\n * Describes MAX extra gas value can to be passed when using the corresponding method.\n *\n * For {@link FeePaymentMethod.WITH_NATIVE_CURRENCY} value contains {@link ExtraGasMaxLimit} the amount of the source chain currency\n *\n * For {@link FeePaymentMethod.WITH_STABLECOIN} value contains {@link ExtraGasMaxLimit} the amount of the source token\n */\nexport type ExtraGasMaxLimits = {\n  [key in FeePaymentMethod]?: ExtraGasMaxLimit;\n};\n\n/**\n * Describes the same MAX extra gas amount.\n */\nexport type ExtraGasMaxLimit = AmountFormatted;\n\n/**\n * Provide extra gas information\n */\nexport interface ExtraGasMaxLimitResponse {\n  /**\n   * See {@link ExtraGasMaxLimits}\n   */\n  extraGasMax: ExtraGasMaxLimits;\n  /**\n   * Information due to destination chain\n   */\n  destinationChain: {\n    /**\n     *  gasAmountMax maximum amount you can receive as extra gas on dest chain\n     */\n    gasAmountMax: ExtraGasMaxLimit;\n    /**\n     * cost of swap tx on chain\n     */\n    swap: AmountFormatted;\n    /**\n     * cost of send tx on chain\n     */\n    transfer: AmountFormatted;\n  };\n  /**\n   * Exchange rate\n   */\n  exchangeRate: string;\n  /**\n   * Source native token price\n   */\n  sourceNativeTokenPrice: string;\n}\n\n/**\n * Provide pending status information\n */\nexport interface PendingStatusInfoResponse {\n  /**\n   * Number of pending transactions\n   */\n  pendingTxs: number;\n  /**\n   * Total amount of pending transactions\n   */\n  pendingAmount: AmountFormatted;\n  /**\n   * The amount of tokens can be received as a result of transfer considering pending transactions\n   */\n  estimatedAmount: { min: AmountFormatted; max: AmountFormatted };\n}\n", "import { Big } from \"big.js\";\nimport { TronWeb } from \"tronweb\";\nimport { Web3 } from \"web3\";\nimport { Chains } from \"../../chains\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport { AllbridgeCoreSdkOptions, ChainType, EssentialWeb3 } from \"../../index\";\nimport { AmountFormat, AmountFormatted } from \"../../models\";\nimport { convertFloatAmountToInt, convertIntAmountToFloat } from \"../../utils/calculation\";\nimport { validateAmountDecimals, validateAmountGtZero } from \"../../utils/utils\";\nimport { GetNativeTokenBalanceParams } from \"../bridge/models\";\nimport { NodeRpcUrlsConfig } from \"../index\";\nimport { Provider, RawTransaction, TransactionResponse } from \"../models\";\nimport { EvmTokenService } from \"./evm\";\nimport {\n  ApproveParams,\n  ApproveParamsDto,\n  CheckAllowanceParams,\n  CheckAllowanceParamsDto,\n  GetAllowanceParams,\n  GetTokenBalanceParams,\n  ChainTokenService,\n} from \"./models\";\nimport { SolanaTokenService } from \"./sol\";\nimport { SrbTokenService } from \"./srb\";\nimport { SuiTokenService } from \"./sui\";\nimport { TronTokenService } from \"./trx\";\n\nexport interface TokenService {\n  getAllowance(params: GetAllowanceParams, provider?: Provider): Promise<string>;\n\n  checkAllowance(params: CheckAllowanceParams, provider?: Provider): Promise<boolean>;\n\n  approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;\n\n  buildRawTransactionApprove(approveData: ApproveParams, provider?: Provider): Promise<RawTransaction>;\n\n  getTokenBalance(params: GetTokenBalanceParams, provider?: Provider): Promise<string>;\n\n  getNativeTokenBalance(params: GetNativeTokenBalanceParams, provider?: Provider): Promise<AmountFormatted>;\n}\n\nexport class DefaultTokenService implements TokenService {\n  constructor(\n    readonly api: AllbridgeCoreClient,\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions\n  ) {}\n\n  async getAllowance(params: GetAllowanceParams, provider?: Provider): Promise<string> {\n    const allowanceInt = await this.getChainTokenService(params.token.chainSymbol, params.owner, provider).getAllowance(\n      params\n    );\n    return convertIntAmountToFloat(allowanceInt, params.token.decimals).toFixed();\n  }\n\n  async checkAllowance(params: CheckAllowanceParams, provider?: Provider): Promise<boolean> {\n    validateAmountGtZero(params.amount);\n    validateAmountDecimals(\"amount\", params.amount, params.token.decimals);\n    return this.getChainTokenService(params.token.chainSymbol, params.owner, provider).checkAllowance(\n      this.prepareCheckAllowanceParams(params)\n    );\n  }\n\n  async approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse> {\n    if (approveData.amount) {\n      validateAmountGtZero(approveData.amount);\n      validateAmountDecimals(\"amount\", approveData.amount, approveData.token.decimals);\n    }\n    return this.getChainTokenService(approveData.token.chainSymbol, approveData.owner, provider).approve(\n      this.prepareApproveParams(approveData)\n    );\n  }\n\n  async buildRawTransactionApprove(approveData: ApproveParams, provider?: Provider): Promise<RawTransaction> {\n    if (approveData.amount) {\n      validateAmountGtZero(approveData.amount);\n      validateAmountDecimals(\"amount\", approveData.amount, approveData.token.decimals);\n    }\n    return this.getChainTokenService(\n      approveData.token.chainSymbol,\n      approveData.owner,\n      provider\n    ).buildRawTransactionApprove(this.prepareApproveParams(approveData));\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams, provider?: Provider): Promise<string> {\n    const tokenBalance = await this.getChainTokenService(\n      params.token.chainSymbol,\n      params.account,\n      provider\n    ).getTokenBalance(params);\n    if (params.token.decimals) {\n      return convertIntAmountToFloat(tokenBalance, params.token.decimals).toFixed();\n    }\n    return tokenBalance;\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams, provider?: Provider): Promise<AmountFormatted> {\n    const tokenBalance = await this.getChainTokenService(\n      params.chainSymbol,\n      params.account,\n      provider\n    ).getNativeTokenBalance(params);\n    return {\n      [AmountFormat.INT]: tokenBalance,\n      [AmountFormat.FLOAT]: convertIntAmountToFloat(\n        tokenBalance,\n        Chains.getChainDecimalsByType(Chains.getChainProperty(params.chainSymbol).chainType)\n      ).toFixed(),\n    };\n  }\n\n  private getChainTokenService(chainSymbol: string, ownerAddress: string, provider?: Provider): ChainTokenService {\n    switch (Chains.getChainProperty(chainSymbol).chainType) {\n      case ChainType.EVM: {\n        if (provider) {\n          return new EvmTokenService(provider as EssentialWeb3, this.api);\n        } else {\n          const nodeRpcUrl = this.nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n          return new EvmTokenService(new Web3(nodeRpcUrl), this.api);\n        }\n      }\n      case ChainType.TRX: {\n        if (provider) {\n          return new TronTokenService(provider as TronWeb, this.api);\n        } else {\n          const nodeRpcUrl = this.nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n          const tronWeb = new TronWeb({ fullHost: nodeRpcUrl });\n          tronWeb.setAddress(ownerAddress);\n          return new TronTokenService(tronWeb, this.api);\n        }\n      }\n      case ChainType.SOLANA: {\n        const nodeRpcUrl = this.nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n        return new SolanaTokenService(nodeRpcUrl, this.api);\n      }\n      case ChainType.SRB: {\n        return new SrbTokenService(this.nodeRpcUrlsConfig, this.params, this.api);\n      }\n      case ChainType.SUI: {\n        return new SuiTokenService(this.nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol), this.api);\n      }\n    }\n  }\n\n  prepareCheckAllowanceParams(params: CheckAllowanceParams): CheckAllowanceParamsDto {\n    return {\n      ...params,\n      amount: convertFloatAmountToInt(params.amount, params.token.decimals),\n    };\n  }\n\n  private prepareApproveParams(approveData: ApproveParams): ApproveParamsDto {\n    return {\n      tokenAddress: approveData.token.tokenAddress,\n      owner: approveData.owner,\n      spender: approveData.spender,\n      chainSymbol: approveData.token.chainSymbol,\n      amount: approveData.amount == undefined ? undefined : Big(approveData.amount).toFixed(),\n    };\n  }\n}\n", "const artifact = {\n  abi: [\n    {\n      inputs: [\n        {\n          internalType: \"string\",\n          name: \"name_\",\n          type: \"string\",\n        },\n        {\n          internalType: \"string\",\n          name: \"symbol_\",\n          type: \"string\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"constructor\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"Approval\",\n      type: \"event\",\n    },\n    {\n      anonymous: false,\n      inputs: [\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"from\",\n          type: \"address\",\n        },\n        {\n          indexed: true,\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          indexed: false,\n          internalType: \"uint256\",\n          name: \"value\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"Transfer\",\n      type: \"event\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"owner\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n      ],\n      name: \"allowance\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"approve\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"account\",\n          type: \"address\",\n        },\n      ],\n      name: \"balanceOf\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"decimals\",\n      outputs: [\n        {\n          internalType: \"uint8\",\n          name: \"\",\n          type: \"uint8\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"subtractedValue\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"decreaseAllowance\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"spender\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"addedValue\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"increaseAllowance\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"name\",\n      outputs: [\n        {\n          internalType: \"string\",\n          name: \"\",\n          type: \"string\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"symbol\",\n      outputs: [\n        {\n          internalType: \"string\",\n          name: \"\",\n          type: \"string\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [],\n      name: \"totalSupply\",\n      outputs: [\n        {\n          internalType: \"uint256\",\n          name: \"\",\n          type: \"uint256\",\n        },\n      ],\n      stateMutability: \"view\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"transfer\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n    {\n      inputs: [\n        {\n          internalType: \"address\",\n          name: \"from\",\n          type: \"address\",\n        },\n        {\n          internalType: \"address\",\n          name: \"to\",\n          type: \"address\",\n        },\n        {\n          internalType: \"uint256\",\n          name: \"amount\",\n          type: \"uint256\",\n        },\n      ],\n      name: \"transferFrom\",\n      outputs: [\n        {\n          internalType: \"bool\",\n          name: \"\",\n          type: \"bool\",\n        },\n      ],\n      stateMutability: \"nonpayable\",\n      type: \"function\",\n    },\n  ],\n} as const;\nexport default artifact;\n", "import { Big } from \"big.js\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { GetNativeTokenBalanceParams } from \"../../bridge/models\";\nimport { RawTransaction, TransactionResponse } from \"../../models\";\nimport { ApproveParamsDto, CheckAllowanceParamsDto, GetAllowanceParamsDto, GetTokenBalanceParams } from \"./token.model\";\n\nexport abstract class ChainTokenService {\n  abstract chainType: ChainType;\n  abstract api: AllbridgeCoreClient;\n\n  abstract getTokenBalance(params: GetTokenBalanceParams): Promise<string>;\n\n  abstract getNativeTokenBalance(params: GetNativeTokenBalanceParams): Promise<string>;\n\n  abstract getAllowance(params: GetAllowanceParamsDto): Promise<string>;\n\n  async checkAllowance(params: CheckAllowanceParamsDto): Promise<boolean> {\n    const allowance = await this.getAllowance(params);\n    return Big(allowance).gte(Big(params.amount));\n  }\n\n  abstract approve(params: ApproveParamsDto): Promise<TransactionResponse>;\n\n  abstract buildRawTransactionApprove(params: ApproveParamsDto): Promise<RawTransaction>;\n}\n", "import BN from \"bn.js\";\nimport { Contract, Transaction as Web3Transaction } from \"web3\";\nimport { ChainSymbol, ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { GetTokenBalanceParams, EssentialWeb3, TransactionResponse } from \"../../../models\";\nimport { GetNativeTokenBalanceParams } from \"../../bridge/models\";\nimport { RawTransaction } from \"../../models\";\nimport ERC20 from \"../../models/abi/ERC20\";\nimport { amountToHex } from \"../../utils\";\nimport { ApproveParamsDto, GetAllowanceParamsDto, ChainTokenService } from \"../models\";\n\nexport const MAX_AMOUNT = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\nconst USDT_TOKEN_ADDRESS = \"0xdac17f958d2ee523a2206206994597c13d831ec7\";\nconst POLYGON_GAS_LIMIT = 100_000;\n\nexport class EvmTokenService extends ChainTokenService {\n  chainType: ChainType.EVM = ChainType.EVM;\n\n  constructor(\n    public web3: EssentialWeb3,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  getAllowance(params: GetAllowanceParamsDto): Promise<string> {\n    const tokenAddress = params.token.tokenAddress;\n    const owner = params.owner;\n    const spender = params.spender;\n    return this.getAllowanceByTokenAddress(tokenAddress, owner, spender);\n  }\n\n  getAllowanceByTokenAddress(tokenAddress: string, owner: string, spender: string): Promise<string> {\n    const tokenContract = this.getERC20Contract(tokenAddress);\n    return tokenContract.methods.allowance(owner, spender).call();\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams): Promise<string> {\n    return await this.getERC20Contract(params.token.tokenAddress).methods.balanceOf(params.account).call();\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams): Promise<string> {\n    return (await this.web3.eth.getBalance(params.account)).toString();\n  }\n\n  async approve(params: ApproveParamsDto): Promise<TransactionResponse> {\n    if (this.isUsdt(params.tokenAddress)) {\n      const allowance = await this.getAllowanceByTokenAddress(params.tokenAddress, params.owner, params.spender);\n      if (allowance !== \"0\") {\n        const rawTransaction = await this.buildRawTransactionApprove({\n          ...params,\n          amount: \"0\",\n        });\n        await this.sendRawTransaction(rawTransaction, params.chainSymbol);\n      }\n    }\n    const rawTransaction = await this.buildRawTransactionApprove(params);\n    return await this.sendRawTransaction(rawTransaction, params.chainSymbol);\n  }\n\n  isUsdt(tokenAddress: string): boolean {\n    return tokenAddress.toLowerCase() === USDT_TOKEN_ADDRESS;\n  }\n\n  buildRawTransactionApprove(params: ApproveParamsDto): Promise<RawTransaction> {\n    const { tokenAddress, spender, owner, amount } = params;\n    const tokenContract = this.getERC20Contract(tokenAddress);\n\n    const approveMethod = tokenContract.methods.approve(\n      spender,\n      amount == undefined ? MAX_AMOUNT : amountToHex(amount)\n    );\n\n    return Promise.resolve({\n      from: owner,\n      to: tokenAddress,\n      value: \"0\",\n      data: approveMethod.encodeABI(),\n    });\n  }\n\n  private async sendRawTransaction(rawTransaction: RawTransaction, chainSymbol: string) {\n    const transactionConfig: Web3Transaction = rawTransaction as Web3Transaction;\n    // prettier-ignore\n    const feeOptions: {\n      maxPriorityFeePerGas?: number | string | BN;\n      maxFeePerGas?: number | string | BN\n    } = {maxPriorityFeePerGas: undefined, maxFeePerGas: undefined};\n    if ((chainSymbol as ChainSymbol) === ChainSymbol.POL) {\n      transactionConfig.gas = POLYGON_GAS_LIMIT;\n    } else {\n      transactionConfig.gas = await this.web3.eth.estimateGas(rawTransaction as Web3Transaction);\n    }\n    const { transactionHash } = await this.web3.eth.sendTransaction({\n      ...transactionConfig,\n      ...feeOptions,\n    } as Web3Transaction);\n    return { txId: transactionHash.toString() };\n  }\n\n  private getERC20Contract(contractAddress: string) {\n    return new this.web3.eth.Contract(ERC20.abi, contractAddress) as Contract<typeof ERC20.abi>;\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { AnchorProvider, Provider } from \"@project-serum/anchor\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { MethodNotSupportedError } from \"../../../exceptions\";\nimport { GetNativeTokenBalanceParams } from \"../../bridge/models\";\nimport { RawTransaction, TransactionResponse } from \"../../models\";\nimport { getTokenAccountData } from \"../../utils/sol\";\nimport { getAssociatedAccount } from \"../../utils/sol/accounts\";\nimport { ApproveParamsDto, GetAllowanceParamsDto, GetTokenBalanceParams } from \"../models\";\nimport { ChainTokenService } from \"../models/token\";\n\nexport class SolanaTokenService extends ChainTokenService {\n  chainType: ChainType.SOLANA = ChainType.SOLANA;\n\n  constructor(\n    public solanaRpcUrl: string,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  approve(params: ApproveParamsDto): Promise<TransactionResponse> {\n    throw new MethodNotSupportedError();\n  }\n\n  buildRawTransactionApprove(params: ApproveParamsDto): Promise<RawTransaction> {\n    throw new MethodNotSupportedError();\n  }\n\n  private buildAnchorProvider(accountAddress: string): Provider {\n    const connection = new Connection(this.solanaRpcUrl, \"confirmed\");\n\n    const publicKey = new PublicKey(accountAddress);\n\n    return new AnchorProvider(\n      connection,\n      // @ts-expect-error enough wallet for fetch actions\n      { publicKey: publicKey },\n      {\n        preflightCommitment: \"confirmed\",\n        commitment: \"confirmed\",\n      }\n    );\n  }\n\n  getAllowance(params: GetAllowanceParamsDto): Promise<string> {\n    throw new MethodNotSupportedError();\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams): Promise<string> {\n    const { account, token } = params;\n    try {\n      const associatedAccount = await getAssociatedAccount(new PublicKey(account), new PublicKey(token.tokenAddress));\n      const accountData = await getTokenAccountData(associatedAccount, this.buildAnchorProvider(account));\n      return accountData.amount.toString();\n    } catch (e) {\n      if (e instanceof Error) {\n        e.message.startsWith(\"Account does not exist\");\n        return \"0\";\n      }\n      throw e;\n    }\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams): Promise<string> {\n    return (\n      await this.buildAnchorProvider(params.account).connection.getBalance(new PublicKey(params.account))\n    ).toString();\n  }\n}\n", "import { Horizon, NotFoundError } from \"@stellar/stellar-sdk\";\nimport { Chains } from \"../../../chains\";\nimport { ChainSymbol } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { AllbridgeCoreSdkOptions, ChainType, SdkError } from \"../../../index\";\nimport { GetTokenBalanceParams, MethodNotSupportedError, TransactionResponse } from \"../../../models\";\nimport { convertFloatAmountToInt } from \"../../../utils/calculation\";\nimport { GetNativeTokenBalanceParams } from \"../../bridge/models\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { RawTransaction } from \"../../models\";\nimport { ChainTokenService } from \"../models\";\n\nimport BalanceLineAsset = Horizon.HorizonApi.BalanceLineAsset;\nimport BalanceLineNative = Horizon.HorizonApi.BalanceLineNative;\n\nexport class SrbTokenService extends ChainTokenService {\n  chainType: ChainType.SRB = ChainType.SRB;\n\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions,\n    readonly api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  getAllowance(): Promise<string> {\n    throw new MethodNotSupportedError();\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams): Promise<string> {\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"OriginTokenAddress missing\");\n    }\n    const [symbol, srbTokenAddress] = params.token.originTokenAddress.split(\":\");\n\n    const stellar = new Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR));\n    let stellarAccount;\n    try {\n      stellarAccount = await stellar.loadAccount(params.account);\n    } catch (err) {\n      if (err instanceof NotFoundError) {\n        return \"0\";\n      }\n      throw err;\n    }\n    const balances = stellarAccount.balances;\n\n    const balanceInfo = balances.find(\n      (balance): balance is BalanceLineAsset =>\n        (balance.asset_type === \"credit_alphanum4\" || balance.asset_type === \"credit_alphanum12\") &&\n        balance.asset_code == symbol &&\n        balance.asset_issuer == srbTokenAddress\n    );\n    if (balanceInfo?.balance) {\n      return convertFloatAmountToInt(\n        balanceInfo.balance,\n        Chains.getChainDecimalsByType(Chains.getChainProperty(params.token.chainSymbol).chainType)\n      ).toFixed();\n    }\n    return \"0\";\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams): Promise<string> {\n    const stellar = new Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR));\n    const stellarAccount = await stellar.loadAccount(params.account);\n    const balances = stellarAccount.balances;\n\n    const nativeBalance = balances.find((balance): balance is BalanceLineNative => balance.asset_type === \"native\");\n    if (nativeBalance?.balance) {\n      return convertFloatAmountToInt(\n        nativeBalance.balance,\n        Chains.getChainDecimalsByType(Chains.getChainProperty(params.chainSymbol).chainType)\n      ).toFixed();\n    }\n    return \"0\";\n  }\n\n  approve(): Promise<TransactionResponse> {\n    throw new MethodNotSupportedError();\n  }\n\n  buildRawTransactionApprove(): Promise<RawTransaction> {\n    throw new MethodNotSupportedError();\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { SuiClient } from \"@mysten/sui/client\";\nimport { CoinStruct } from \"@mysten/sui/src/client/types/generated\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { MethodNotSupportedError, SdkError } from \"../../../exceptions\";\nimport { GetNativeTokenBalanceParams } from \"../../bridge/models\";\nimport { RawTransaction, TransactionResponse } from \"../../models\";\nimport { fetchAllPagesRecursive } from \"../../utils/sui/paginated\";\nimport { ApproveParamsDto, ChainTokenService, GetAllowanceParamsDto, GetTokenBalanceParams } from \"../models\";\n\nexport class SuiTokenService extends ChainTokenService {\n  chainType: ChainType.SUI = ChainType.SUI;\n  private suiClient: SuiClient;\n\n  constructor(\n    public suiRpcUrl: string,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n    this.suiClient = new SuiClient({\n      url: this.suiRpcUrl,\n    });\n  }\n\n  approve(params: ApproveParamsDto): Promise<TransactionResponse> {\n    throw new MethodNotSupportedError();\n  }\n\n  buildRawTransactionApprove(params: ApproveParamsDto): Promise<RawTransaction> {\n    throw new MethodNotSupportedError();\n  }\n\n  getAllowance(params: GetAllowanceParamsDto): Promise<string> {\n    throw new MethodNotSupportedError();\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams): Promise<string> {\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const balance = await this.suiClient.getBalance({\n      owner: params.account,\n      coinType: params.token.originTokenAddress,\n    });\n    return balance.totalBalance;\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams): Promise<string> {\n    const coinsData: CoinStruct[] = await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.suiClient.getCoins({\n        owner: params.account,\n        cursor,\n      })\n    );\n    if (coinsData.length === 0) {\n      return \"0\";\n    }\n    return coinsData.reduce((total, element) => total + BigInt(element.balance), BigInt(0)).toString();\n  }\n}\n", "import { TronWeb } from \"tronweb\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { SdkError } from \"../../../exceptions\";\nimport { ChainType, GetTokenBalanceParams, TransactionResponse } from \"../../../models\";\nimport { GetNativeTokenBalanceParams } from \"../../bridge/models\";\nimport { RawTransaction, SmartContractMethodParameter } from \"../../models\";\nimport ERC20 from \"../../models/abi/ERC20\";\nimport { amountToHex } from \"../../utils\";\nimport { sendRawTransaction } from \"../../utils/trx\";\nimport { ApproveParamsDto, GetAllowanceParamsDto } from \"../models\";\nimport { ChainTokenService } from \"../models/token\";\n\nexport const MAX_AMOUNT = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\nexport class TronTokenService extends ChainTokenService {\n  chainType: ChainType.TRX = ChainType.TRX;\n\n  constructor(\n    public tronWeb: TronWeb,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async getAllowance(params: GetAllowanceParamsDto): Promise<string> {\n    const {\n      token: { tokenAddress },\n      owner,\n    } = params;\n    const tokenContract = await this.getContract(tokenAddress);\n    const allowance = await tokenContract.methods.allowance(owner, params.spender).call();\n    return allowance.toString();\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams): Promise<string> {\n    const contract = await this.getContract(params.token.tokenAddress);\n    const balance = await contract.balanceOf(params.account).call();\n    return balance.toString();\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams): Promise<string> {\n    return (await this.tronWeb.trx.getBalance(params.account)).toString();\n  }\n\n  async approve(params: ApproveParamsDto): Promise<TransactionResponse> {\n    const rawTransaction = await this.buildRawTransactionApprove(params);\n    return await sendRawTransaction(this.tronWeb, rawTransaction);\n  }\n\n  async buildRawTransactionApprove(params: ApproveParamsDto): Promise<RawTransaction> {\n    const { tokenAddress, spender, owner, amount } = params;\n    const amountHex = amount == undefined ? MAX_AMOUNT : amountToHex(amount);\n\n    const parameter = [\n      { type: \"address\", value: spender },\n      { type: \"uint256\", value: amountHex },\n    ];\n    const value = \"0\";\n    const methodSignature = \"approve(address,uint256)\";\n    return this.buildRawTransaction(tokenAddress, methodSignature, parameter, value, owner);\n  }\n\n  private getContract(contractAddress: string): any {\n    return this.tronWeb.contract(ERC20.abi, contractAddress);\n  }\n\n  private async buildRawTransaction(\n    contractAddress: string,\n    methodSignature: string,\n    parameters: SmartContractMethodParameter[],\n    value: string,\n    fromAddress: string\n  ): Promise<RawTransaction> {\n    const transactionObject = await this.tronWeb.transactionBuilder.triggerSmartContract(\n      contractAddress,\n      methodSignature,\n      {\n        callValue: +value,\n      },\n      parameters,\n      fromAddress\n    );\n    if (!transactionObject?.result?.result) {\n      throw new SdkError(\"Unknown error: \" + JSON.stringify(transactionObject, null, 2));\n    }\n    return transactionObject.transaction;\n  }\n}\n"],
  "mappings": "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AAgBD,EAAWC,EAE3B,IAAMG,EAAc,MAAMb,EAAGW,CAAW,EACxCN,EAAS,KAAKQ,CAAW,EACrBT,GAAWH,EAAcY,CAAW,GACtC,QAAQ,KACN,GAAGP,CAAK,YAAYN,EAAG,IAAI,KAAKK,EAAS,MAAM,gCAAgC,KAAK,UAClFA,EAASA,EAAS,OAAS,CAAC,EAC5B,KACA,CACF,CAAC,EACH,CAEJ,CAEA,OAAOA,CACT,CCtHA,IAAAS,GAAoB,kBCApB,IAAMC,GAAW,CACf,IAAK,CACH,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,kBACN,KAAM,SACR,EACA,CACE,aAAc,qBACd,KAAM,sBACN,KAAM,SACR,EACA,CACE,aAAc,6BACd,KAAM,qBACN,KAAM,SACR,EACA,CACE,aAAc,sBACd,KAAM,aACN,KAAM,SACR,CACF,EACA,gBAAiB,aACjB,KAAM,aACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,MACN,KAAM,SACR,CACF,EACA,KAAM,wBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,uBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,wBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,yBACN,KAAM,SACR,CACF,EACA,KAAM,aACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,WACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,aACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,SACR,CACF,EACA,KAAM,UACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,yBACd,KAAM,YACN,KAAM,OACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,iBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,qBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,yBACd,KAAM,YACN,KAAM,OACR,CACF,EACA,KAAM,aACN,KAAM,OACR,EACA,CACE,gBAAiB,UACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,CACF,EACA,KAAM,iBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,gBACd,KAAM,OACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,CACF,EACA,KAAM,UACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,UACN,QAAS,CACP,CACE,aAAc,QACd,KAAM,GACN,KAAM,OACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,UACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,WACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,qBACN,KAAM,SACR,EACA,CACE,aAAc,yBACd,KAAM,YACN,KAAM,OACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,CACF,EACA,KAAM,0BACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,yBACd,KAAM,WACN,KAAM,OACR,CACF,EACA,KAAM,iBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,yBACd,KAAM,WACN,KAAM,OACR,CACF,EACA,KAAM,qBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,qBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,yBACd,KAAM,WACN,KAAM,OACR,CACF,EACA,KAAM,qBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,iBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,qBACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,aAAc,yBACd,KAAM,YACN,KAAM,OACR,CACF,EACA,KAAM,cACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,cACN,KAAM,MACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,eACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,gBACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,QACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,QACN,QAAS,CACP,CACE,aAAc,gBACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,cACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,cACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,aAAc,yBACd,KAAM,YACN,KAAM,OACR,EACA,CACE,aAAc,UACd,KAAM,mBACN,KAAM,SACR,CACF,EACA,KAAM,gBACN,QAAS,CAAC,EACV,gBAAiB,UACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,gBACN,KAAM,SACR,CACF,EACA,KAAM,iBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,cACN,KAAM,SACR,CACF,EACA,KAAM,eACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,qBACd,KAAM,sBACN,KAAM,SACR,CACF,EACA,KAAM,wBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,sBACd,KAAM,aACN,KAAM,SACR,CACF,EACA,KAAM,eACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,CACF,EACA,KAAM,cACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,cACN,KAAM,SACR,CACF,EACA,KAAM,gBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,iBACN,KAAM,SACR,CACF,EACA,KAAM,mBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,6BACd,KAAM,qBACN,KAAM,SACR,CACF,EACA,KAAM,uBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,YACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,mBACN,KAAM,SACR,CACF,EACA,KAAM,OACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,qBACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,aAAc,yBACd,KAAM,YACN,KAAM,OACR,EACA,CACE,aAAc,UACd,KAAM,iBACN,KAAM,SACR,CACF,EACA,KAAM,gBACN,QAAS,CAAC,EACV,gBAAiB,UACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,kBACd,KAAM,QACN,KAAM,SACR,CACF,EACA,KAAM,8BACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,gBAAiB,UACjB,KAAM,SACR,CACF,CACF,EACOC,GAAQD,GCz5Bf,IAAME,GAAW,CACf,IAAK,CACH,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,kBACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,iBACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,mBACN,KAAM,SACR,EACA,CACE,aAAc,sBACd,KAAM,aACN,KAAM,SACR,CACF,EACA,gBAAiB,aACjB,KAAM,aACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,uBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,mBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,cACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,eACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,yBACN,KAAM,SACR,CACF,EACA,KAAM,mBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,qBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,4BACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,+BACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,aACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,gCACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,sBACN,KAAM,SACR,CACF,EACA,KAAM,aACN,KAAM,OACR,EACA,CACE,gBAAiB,UACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,kBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,qBACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,wBACN,KAAM,SACR,CACF,EACA,KAAM,SACN,QAAS,CAAC,EACV,gBAAiB,UACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,yBACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,qBACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,wBACN,KAAM,SACR,CACF,EACA,KAAM,0BACN,QAAS,CAAC,EACV,gBAAiB,UACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,UACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,QACd,KAAM,kBACN,KAAM,OACR,EACA,CACE,aAAc,QACd,KAAM,sBACN,KAAM,OACR,EACA,CACE,aAAc,UACd,KAAM,eACN,KAAM,SACR,CACF,EACA,KAAM,kBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,WACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,qBACN,KAAM,SACR,CACF,EACA,KAAM,0BACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,qBACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,qBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,aAAc,SACd,KAAM,QACN,KAAM,QACR,CACF,EACA,KAAM,qBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,QACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,aAAc,QACd,KAAM,UACN,KAAM,OACR,EACA,CACE,aAAc,QACd,KAAM,YACN,KAAM,OACR,CACF,EACA,KAAM,gBACN,QAAS,CAAC,EACV,gBAAiB,UACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,EACA,CACE,aAAc,SACd,KAAM,SACN,KAAM,QACR,CACF,EACA,KAAM,4BACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,m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SACN,aAAc,CACZ,CACE,KAAM,aACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,gBACX,CACF,CACF,CACF,EACA,CACE,KAAM,iBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,oBACX,CACF,CACF,CACF,EACA,CACE,KAAM,qBACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CAAC,CACT,EACA,CACE,KAAM,UACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,SACN,KAAM,KACR,CACF,CACF,EACA,CACE,KAAM,WACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,WACN,KAAM,KACR,CACF,CACF,EACA,CACE,KAAM,gBACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,mBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,qBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,oBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,WACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,YACX,CACF,CACF,CACF,EACA,CACE,KAAM,wBACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,mBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,WACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,oBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,0BACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,UACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,WACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,oBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,YACX,CACF,CACF,CACF,EACA,CACE,KAAM,OACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,WACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,WACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,qBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,mBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,SACN,KAAM,KACR,EACA,CACE,KAAM,mBACN,KAAM,KACR,CACF,CACF,EACA,CACE,KAAM,sBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,yBACX,CACF,CACF,CACF,EACA,CACE,KAAM,oBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,uBACX,CACF,CACF,CACF,EACA,CACE,KAAM,iBACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,yBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,mBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,YACX,CACF,CACF,CACF,EACA,CACE,KAAM,yBACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,yBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,mBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,YACX,CACF,CACF,CACF,EACA,CACE,KAAM,mBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,SACN,KAAM,KACR,CACF,CACF,EACA,CACE,KAAM,eACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CAAC,CACT,EACA,CACE,KAAM,WACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,WACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CAAC,CACT,EACA,CACE,KAAM,cACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,aACN,KAAM,CACJ,QAAS,YACX,CACF,CACF,CACF,EACA,CACE,KAAM,aACN,SAAU,CACR,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,aACN,KAAM,CACJ,QAAS,YACX,CACF,CACF,CACF,EACA,CACE,KAAM,gBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CAAC,CACT,EACA,CACE,KAAM,mBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CAAC,CACT,EACA,CACE,KAAM,iCACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,eACN,KAAM,WACR,CACF,CACF,EACA,CACE,KAAM,gCACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,eACN,KAAM,WACR,CACF,CACF,EACA,CACE,KAAM,wBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,eACN,KAAM,WACR,CACF,CACF,EACA,CACE,KAAM,kBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,aACN,KAAM,KACR,CACF,CACF,EACA,CACE,KAAM,qBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,oBACN,KAAM,KACR,CACF,CACF,EACA,CACE,KAAM,uBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,aACN,KAAM,KACR,CACF,CACF,EACA,CACE,KAAM,sBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,mBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,UACN,KAAM,IACR,EACA,CACE,KAAM,eACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,CACF,CACF,EACA,CACE,KAAM,yBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,mBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,UACN,KAAM,IACR,EACA,CACE,KAAM,eACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,CACF,CACF,EACA,CACE,KAAM,mBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CAAC,CACT,EACA,CACE,KAAM,sBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,SACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CAAC,CACT,CACF,EACA,SAAU,CACR,CACE,KAAM,cACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,UACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,UACN,KAAM,IACR,EACA,CACE,KAAM,WACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,SACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,QACN,KAAM,WACR,EACA,CACE,KAAM,8BACN,KAAM,WACR,EACA,CACE,KAAM,6BACN,KAAM,WACR,EACA,CACE,KAAM,qBACN,KAAM,WACR,EACA,CACE,KAAM,aACN,KAAM,WACR,EACA,CACE,KAAM,gBACN,KAAM,WACR,EACA,CACE,KAAM,oBACN,KAAM,IACR,EACA,CACE,KAAM,UACN,KAAM,MACR,EACA,CACE,KAAM,aACN,KAAM,MACR,EACA,CACE,KAAM,cACN,KAAM,MACR,CACF,CACF,CACF,EACA,CACE,KAAM,OACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,SACN,KAAM,WACR,EACA,CACE,KAAM,mBACN,KAAM,WACR,EACA,CACE,KAAM,SACN,KAAM,KACR,EACA,CACE,KAAM,aACN,KAAM,KACR,EACA,CACE,KAAM,YACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,qBACN,KAAM,IACR,EACA,CACE,KAAM,eACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,QACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,YACN,KAAM,CACJ,QAAS,WACX,CACF,EACA,CACE,KAAM,OACN,KAAM,KACR,EACA,CACE,KAAM,MACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,mBACN,KAAM,CACJ,KAAM,SACN,OAAQ,CAAC,CACX,CACF,EACA,CACE,KAAM,OACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,OACN,KAAM,WACR,EACA,CACE,KAAM,IACN,KAAM,KACR,EACA,CACE,KAAM,IACN,KAAM,KACR,EACA,CACE,KAAM,eACN,KAAM,KACR,EACA,CACE,KAAM,cACN,KAAM,KACR,EACA,CACE,KAAM,WACN,KAAM,KACR,EACA,CACE,KAAM,WACN,KAAM,IACR,EACA,CACE,KAAM,gBACN,KAAM,KACR,EACA,CACE,KAAM,aACN,KAAM,KACR,EACA,CACE,KAAM,kBACN,KAAM,KACR,EACA,CACE,KAAM,qBACN,KAAM,MACR,EACA,CACE,KAAM,iBACN,KAAM,KACR,EACA,CACE,KAAM,oBACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,SACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,OACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,SACN,KAAM,KACR,EACA,CACE,KAAM,MACN,KAAM,KACR,EACA,CACE,KAAM,aACN,KAAM,KACR,EACA,CACE,KAAM,OACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,cACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,cACN,KAAM,WACR,EACA,CACE,KAAM,OACN,KAAM,WACR,EACA,CACE,KAAM,WACN,KAAM,KACR,EACA,CACE,KAAM,aACN,KAAM,KACR,CACF,CACF,CACF,CACF,EACA,MAAO,CACL,CACE,KAAM,0BACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,qBACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,UACN,KAAM,IACR,EACA,CACE,KAAM,WACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,wBACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,qBACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,UACN,KAAM,IACR,EACA,CACE,KAAM,WACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,iBACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,8BACN,KAAM,WACR,EACA,CACE,KAAM,6BACN,KAAM,WACR,EACA,CACE,KAAM,qBACN,KAAM,WACR,CACF,CACF,CACF,EACA,CACE,KAAM,qBACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,IACN,KAAM,KACR,EACA,CACE,KAAM,aACN,KAAM,KACR,EACA,CACE,KAAM,kBACN,KAAM,KACR,EACA,CACE,KAAM,oBACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,aACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,QACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,YACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,qBACN,KAAM,IACR,EACA,CACE,KAAM,eACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,aACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,aACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,QACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,SACN,KAAM,KACR,EACA,CACE,KAAM,YACN,KAAM,WACR,EACA,CACE,KAAM,gBACN,KAAM,IACR,EACA,CACE,KAAM,eACN,KAAM,WACR,EACA,CACE,KAAM,YACN,KAAM,CACJ,QAAS,WACX,CACF,EACA,CACE,KAAM,OACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,mBACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,cACN,KAAM,CACJ,KAAM,OACN,SAAU,CACR,CACE,KAAM,YACR,CACF,CACF,CACF,EACA,CACE,KAAM,YACN,KAAM,CACJ,KAAM,OACN,SAAU,CACR,CACE,KAAM,MACR,EACA,CACE,KAAM,WACR,EACA,CACE,KAAM,UACR,CACF,CACF,CACF,EACA,CACE,KAAM,aACN,KAAM,CACJ,KAAM,OACN,SAAU,CACR,CACE,KAAM,SACR,EACA,CACE,KAAM,UACR,EACA,CACE,KAAM,MACR,CACF,CACF,CACF,CACF,EACA,OAAQ,CACN,CACE,KAAM,IACN,KAAM,4BACN,IAAK,2CACP,EACA,CACE,KAAM,KACN,KAAM,wBACN,IAAK,2CACP,EACA,CACE,KAAM,KACN,KAAM,mBACN,IAAK,gDACP,EACA,CACE,KAAM,KACN,KAAM,cACN,IAAK,2BACP,EACA,CACE,KAAM,KACN,KAAM,eACN,IAAK,mBACP,EACA,CACE,KAAM,KACN,KAAM,oBACN,IAAK,oBACP,EACA,CACE,KAAM,KACN,KAAM,aACN,IAAK,aACP,EACA,CACE,KAAM,KACN,KAAM,cACN,IAAK,cACP,EACA,CACE,KAAM,KACN,KAAM,iBACN,IAAK,yBACP,EACA,CACE,KAAM,KACN,KAAM,uBACN,IAAK,wBACP,EACA,CACE,KAAM,KACN,KAAM,6BACN,IAAK,8BACP,EACA,CACE,KAAM,KACN,KAAM,kBACN,IAAK,iBACP,EACA,CACE,KAAM,KACN,KAAM,eACN,IAAK,mBACP,CACF,CACF,ECviGO,IAAMC,GAAkB,CAC7B,QAAS,QACT,KAAM,cACN,aAAc,CACZ,CACE,KAAM,aACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,gBACX,CACF,CACF,CACF,EACA,CACE,KAAM,SACN,SAAU,CACR,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,uBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,4BACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,4BACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,iBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,0BACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,iBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,WACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,YACX,CACF,CACF,CACF,EACA,CACE,KAAM,sBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,yBACX,CACF,CACF,CACF,EACA,CACE,KAAM,oBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,OACN,KAAM,CACJ,QAAS,uBACX,CACF,CACF,CACF,EACA,CACE,KAAM,mBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,aACN,KAAM,KACR,CACF,CACF,EACA,CACE,KAAM,wBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,eACN,KAAM,WACR,CACF,CACF,EACA,CACE,KAAM,mBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,YACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,SACN,KAAM,KACR,CACF,CACF,EACA,CACE,KAAM,mBACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,cACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,kBACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,eACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,gBACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CAAC,CACT,EACA,CACE,KAAM,8BACN,SAAU,CACR,CACE,KAAM,QACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,OACN,MAAO,GACP,SAAU,EACZ,EACA,CACE,KAAM,aACN,MAAO,GACP,SAAU,EACZ,CACF,EACA,KAAM,CACJ,CACE,KAAM,eACN,KAAM,WACR,CACF,CACF,CACF,EACA,SAAU,CACR,CACE,KAAM,aACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,OACN,KAAM,WACR,EACA,CACE,KAAM,QACN,KAAM,WACR,EACA,CACE,KAAM,2BACN,KAAM,WACR,EACA,CACE,KAAM,qBACN,KAAM,WACR,EACA,CACE,KAAM,oBACN,KAAM,IACR,EACA,CACE,KAAM,kBACN,KAAM,KACR,EACA,CACE,KAAM,iBACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,cACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,UACN,KAAM,IACR,EACA,CACE,KAAM,WACN,KAAM,KACR,EACA,CACE,KAAM,SACN,KAAM,KACR,CACF,CACF,CACF,EACA,CACE,KAAM,OACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,SACN,KAAM,WACR,EACA,CACE,KAAM,SACN,KAAM,KACR,EACA,CACE,KAAM,WACN,KAAM,KACR,EACA,CACE,KAAM,aACN,KAAM,KACR,EACA,CACE,KAAM,YACN,KAAM,CACJ,MAAO,CAAC,KAAM,EAAE,CAClB,CACF,EACA,CACE,KAAM,qBACN,KAAM,IACR,EACA,CACE,KAAM,OACN,KAAM,KACR,CACF,CACF,CACF,CACF,EACA,MAAO,CACL,CACE,KAAM,0BACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,UACN,KAAM,IACR,EACA,CACE,KAAM,WACN,KAAM,KACR,EACA,CACE,KAAM,SACN,KAAM,KACR,EACA,CACE,KAAM,OACN,KAAM,WACR,CACF,CACF,CACF,EACA,CACE,KAAM,wBACN,KAAM,CACJ,KAAM,SACN,OAAQ,CACN,CACE,KAAM,UACN,KAAM,IACR,EACA,CACE,KAAM,WACN,KAAM,KACR,EACA,CACE,KAAM,SACN,KAAM,KACR,EACA,CACE,KAAM,OACN,KAAM,WACR,CACF,CACF,CACF,EACA,CACE,KAAM,aACN,KAAM,CACJ,KAAM,SACN,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OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,gBACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,uBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,iBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,YACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,aACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,MACN,KAAM,SACR,CACF,EACA,KAAM,kBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,aACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,MACN,KAAM,SACR,CACF,EACA,KAAM,gBACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,QACN,KAAM,SACR,CACF,EACA,KAAM,WACN,KAAM,OACR,EACA,CACE,UAAW,GACX,OAAQ,CACN,CACE,QAAS,GACT,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,QAAS,GACT,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,WACN,KAAM,OACR,EACA,CACE,gBAAiB,UACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,IACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,qBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,sBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,iBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,kBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,QACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,YACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,UACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,YACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,oBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,aACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,cACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,gBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,eACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,IACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CACP,CACE,aAAc,QACd,KAAM,GACN,KAAM,OACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,kBACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,UACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,aACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,IACN,KAAM,SACR,CACF,EACA,KAAM,OACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,aACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,OACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,QACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,SACR,CACF,EACA,KAAM,gBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,SACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,mBACN,KAAM,SACR,CACF,EACA,KAAM,mBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,qBACN,KAAM,SACR,CACF,EACA,KAAM,uBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,SACd,KAAM,cACN,KAAM,QACR,CACF,EACA,KAAM,cACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,YACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,iBACN,KAAM,SACR,CACF,EACA,KAAM,mBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,eACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,gBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,cACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,eACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,mBACN,KAAM,SACR,EACA,CACE,aAAc,OACd,KAAM,UACN,KAAM,MACR,CACF,EACA,KAAM,eACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,EACA,CACE,aAAc,OACd,KAAM,UACN,KAAM,MACR,CACF,EACA,KAAM,aACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,SACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,QACN,QAAS,CACP,CACE,aAAc,iBACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,eACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,cACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,WACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,KACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,eACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,WACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CAAC,EACV,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,OACN,KAAM,SACR,CACF,EACA,KAAM,iBACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CA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B,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,SACN,KAAM,SACR,CACF,EACA,KAAM,UACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,CACF,EACA,KAAM,YACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,WACN,QAAS,CACP,CACE,aAAc,QACd,KAAM,GACN,KAAM,OACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,kBACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CACN,CACE,aAAc,UACd,KAAM,UACN,KAAM,SACR,EACA,CACE,aAAc,UACd,KAAM,aACN,KAAM,SACR,CACF,EACA,KAAM,oBACN,QAAS,CACP,CACE,aAAc,OACd,KAAM,GACN,KAAM,MACR,CACF,EACA,gBAAiB,aACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,OACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,SACN,QAAS,CACP,CACE,aAAc,SACd,KAAM,GACN,KAAM,QACR,CACF,EACA,gBAAiB,OACjB,KAAM,UACR,EACA,CACE,OAAQ,CAAC,EACT,KAAM,cACN,QAAS,CACP,CACE,aAAc,UACd,KAAM,GACN,KAAM,SACR,CACF,EACA,gBAAiB,OACjB,KAAM,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",
  "names": ["isValidTransactionDigest", "value", "TX_DIGEST_LENGTH", "isValidSuiAddress", "isHex", "getHexByteLength", "SUI_ADDRESS_LENGTH", "isValidSuiObjectId", "parseTypeTag", "type", "parseStructTag", "address", "module", "rest", "name", "typeParams", "typeParam", "normalizeSuiAddress", "normalizeStructTag", "formattedTypeParams", "forceAdd0x", "normalizeSuiObjectId", "import_bcs", "init_sui_types", "__esmMin", "import_bcs", "VECTOR_REGEX", "STRUCT_REGEX", "TypeTagSerializer", "init_type_tag_serializer", "__esmMin", "init_sui_types", "_TypeTagSerializer", "str", "normalizeAddress", "vectorMatch", "structMatch", "normalizeSuiAddress", "tok", "tag", "struct", "typeParams", "unsafe_u64", "options", "val", "optionEnum", "type", "IntentMessage", "T", "Intent", "import_bcs", "Address", "ObjectDigest", "SuiObjectRef", "SharedObjectRef", "ObjectArg", "CallArg", "InnerTypeTag", "TypeTag", "Argument", "ProgrammableMoveCall", "Command", "ProgrammableTransaction", "TransactionKind", "TransactionExpiration", "StructTag", "GasData", "TransactionDataV1", "TransactionData", "IntentScope", "IntentVersion", "AppId", "CompressedSignature", "PublicKey", "MultiSigPkMap", "MultiSigPublicKey", "MultiSig", "base64String", "SenderSignedTransaction", "SenderSignedData", "PasskeyAuthenticator", "init_bcs", "__esmMin", "init_sui_types", "init_type_tag_serializer", "SUI_ADDRESS_LENGTH", "address", "isValidSuiAddress", "normalizeSuiAddress", "value", "typeTag", "TypeTagSerializer", "import_bcs", "PackageUpgradeError", "ModuleId", "MoveLocation", "CommandArgumentError", "TypeArgumentError", "ExecutionFailureStatus", "ExecutionStatus", "GasCostSummary", "Owner", "TransactionEffectsV1", "VersionDigest", "ObjectIn", "ObjectOut", "IDOperation", "EffectsObjectChange", "UnchangedSharedKind", "TransactionEffectsV2", "TransactionEffects", "init_effects", "__esmMin", "init_bcs", "Address", "SuiObjectRef", "ObjectDigest", "import_bcs", "suiBcs", "init_bcs", "__esmMin", "init_effects", "init_type_tag_serializer", "Address", "AppId", "Argument", "CallArg", "CompressedSignature", "GasData", "Intent", "IntentMessage", "IntentScope", "IntentVersion", "MultiSig", "MultiSigPkMap", "MultiSigPublicKey", "ObjectArg", "ObjectDigest", "ProgrammableMoveCall", "ProgrammableTransaction", "PublicKey", "SenderSignedData", "SenderSignedTransaction", "SharedObjectRef", "StructTag", "SuiObjectRef", "Command", "TransactionData", "TransactionDataV1", "TransactionExpiration", "TransactionKind", "TypeTag", "TransactionEffects", "PasskeyAuthenticator", "splitGenericParameters", "str", "genericSeparators", "left", "right", "tok", "word", "nestedAngleBrackets", "i", "char", "parseTypeName", "name", "l_bound", "r_bound", "typeName", "typeArgs", "isTransactionArgument", "arg", "obj", "tx", "pure", "type", "getBcsForType", "suiBcs", "hasUndefinedOrNull", "items", "item", "consistsOnlyOfPrimitiveValues", "hasPrimitiveValues", "compressSuiAddress", "addr", "stripped", "compressSuiType", "compressedName", "typeArg", "composeSuiType", "init_util", "__esmMin", "init_bcs", "require_bridge", "__commonJSMin", "exports", "module", "init_util", "PackageAddress", "_PackageAddress", "compressSuiType", "address", "v", "pkgV1", "packageAddress", "require_cctp_bridge", "__commonJSMin", "exports", "module", "init_util", "PackageAddress", "_PackageAddress", "compressSuiType", "address", "v", "pkgV1", "packageAddress", "require_utils", "__commonJSMin", "exports", "module", "init_util", "PackageAddress", "_PackageAddress", "compressSuiType", "address", "v", "pkgV1", "packageAddress", "index_exports", "__export", "AddressStatus", "AllbridgeCoreSdk", "AmountFormat", "AmountNotEnoughError", "ArgumentInvalidDecimalsError", "CCTPDoesNotSupportedError", "ChainSymbol", "ChainType", "ErrorCode", "ExtraGasMaxLimitExceededError", "FeePaymentMethod", "InsufficientPoolLiquidityError", "InvalidAmountError", "InvalidGasFeePaymentOptionError", "InvalidMessengerOptionError", "InvalidTxError", "JupiterError", "Messenger", "MethodNotSupportedError", "NodeRpcUrlNotInitializedError", "SdkError", "SdkRootError", "SolanaAutoTxFee", "TimeoutError", "TxTooLargeError", "VerifyTxError", "mainnet", "nodeRpcUrlsDefault", "nodeUrlsDefault", "__toCommonJS", "mainnet", "nodeUrlsDefault", "nodeRpcUrlsDefault", "import_big", "SdkRootError", "code", "message", "SdkError", "InvalidAmountError", "AmountNotEnoughError", "InsufficientPoolLiquidityError", "JupiterError", "InvalidGasFeePaymentOptionError", "InvalidMessengerOptionError", "MethodNotSupportedError", "VerifyTxError", "InvalidTxError", "ExtraGasMaxLimitExceededError", "ArgumentInvalidDecimalsError", "argName", "decimalsIs", "decimalsRequired", "TimeoutError", "NodeRpcUrlNotInitializedError", "chainSymbol", "CCTPDoesNotSupportedError", "TxTooLargeError", "ErrorCode", "ChainSymbol", "ChainType", "chainDecimalsByType", "defaultProperties", "Chains", "chainProperties", "additionalProperties", "chainSymbol", "property", "SdkError", "chainType", "import_axios", "VERSION", "import_big", "import_bn", "getFeePercent", "input", "output", "toSystemPrecision", "amount", "decimals", "convertAmountPrecision", "fromSystemPrecision", "decimalsFrom", "decimalsTo", "dif", "toPowBase10", "convertFloatAmountToInt", "amountFloat", "convertIntAmountToFloat", "amountInt", "amountValue", "calculatePoolInfoImbalance", "poolInfo", "swapToVUsd", "feeShare", "fee", "amountWithoutFee", "inSystemPrecision", "tokenBalance", "vUsdNewAmount", "getY", "swapFromVUsd", "vUsdBalance", "newAmount", "result", "getSwapFromVUsdPoolInfo", "vUsdAmount", "swapToVUsdReverse", "InsufficientPoolLiquidityError", "reversedFeeShare", "swapFromVUsdReverse", "amountWithFee", "x", "a", "d", "commonPartBig", "dCubed", "commonPartSquared", "sqrtBig", "dividerBig", "getEarned", "userLpAmount", "userRewardDebt", "accRewardPerShareP", "p", "userLpAmountBN", "BN", "accRewardPerSharePBN", "userRewardDebtBN", "aprInPercents", "apr", "getD", "aValue", "y", "xy", "xPlusY", "b", "aSquared", "bCubed", "a2b3", "c", "cbrtAPlusC", "cbrtAMinusC", "AddressStatus", "Messenger", "mapChainDetailsResponseToChainDetailsMap", "response", "map", "entry", "chainSymbol", "chainDetailsDTO", "chainDetails", "mapChainDetailsFromDto", "mapChainDetailsResponseToPoolInfoMap", "poolInfoMap", "chainSymbolValue", "token", "poolKey", "mapPoolKeyObjectToPoolKey", "imbalance", "calculatePoolInfoImbalance", "mapTokenWithChainDetailsFromDto", "dto", "chainName", "chainDetailsWithoutName", "_poolInfo", "dtoWithoutPoolInfo", "mapMessengerKeyDtoToMessenger", "mapTransferTimeFromDto", "result", "key", "value", "mapMessengerTransferTimeFromDto", "messengerTransferTime", "messenger", "basicChainProperties", "Chains", "tokenDto", "mapPoolKeyObjectToPoolKey", "poolKeyObject", "mapChainDetailsMapToPoolKeyObjects", "chainDetailsMap", "result", "chainSymbolValue", "chainDetails", "chainSymbol", "token", "mapPoolInfoResponseToPoolInfoMap", "responseBody", "poolInfoMap", "poolInfoByAddress", "poolAddress", "poolInfo", "calculatePoolInfoImbalance", "ApiClientImpl", "params", "axios", "VERSION", "data", "mapChainDetailsResponseToChainDetailsMap", "mapChainDetailsResponseToPoolInfoMap", "chainSymbol", "address", "txId", "args", "pools", "poolKeys", "mapPoolInfoResponseToPoolInfoMap", "has", "obj", "key", "prefix", "serialize", "Cache", "options", "value", "ttl", "callback", "key_", "v", "handle", "entry", "cache_default", "_20_SECONDS_TTL", "_55_SECONDS_TTL", "ApiClientCaching", "apiClient", "cache_default", "TOKEN_INFO_CACHE_KEY", "tokenInfo", "tokenInfoPromise", "chainSymbol", "address", "GAS_BALANCE_CACHE_KEY", "gasBalance", "gasBalancePromise", "PENDING_INFO_CACHE_KEY", "pendingInfo", "pendingInfoPromise", "args", "RECEIVE_TX_COST_KEY", "transactionCost", "fetchedTransactionCost", "txId", "pools", "AllbridgeCoreClientImpl", "apiClient", "map", "chainDetails", "chainSymbol", "address", "txId", "args", "pools", "AllbridgeCoreClientFilteredImpl", "client", "params", "type", "chainDetailsMapWithFlags", "result", "key", "chainDetailsWithTokensWithFlag", "filterAndConvertToTokenWithChainDetails", "chainSymbol", "address", "txId", "args", "poolKeyObject", "poolInfo", "poolKeyObjects", "tokens", "isStaging", "token", "convertToTokenWithChainDetails", "flags", "rest", "_55_SECONDS_TTL", "AllbridgeCoreClientPoolInfoCaching", "client", "PoolInfoCache", "chainSymbol", "txId", "args", "address", "poolKeyObject", "poolInfo", "poolInfoMap", "result", "mapPoolKeyObjectToPoolKey", "SdkError", "poolKeyObjects", "mapChainDetailsMapToPoolKeyObjects", "cache_default", "key", "value", "import_tronweb", "import_web3", "import_big", "getPoolInfoByToken", "api", "sourceChainToken", "validateAmountGtZero", "amount", "InvalidAmountError", "validateAmountDecimals", "argName", "amountFloat", "decimalRequired", "integerPart", "fractionalPart", "ArgumentInvalidDecimalsError", "promiseWithTimeout", "promise", "msg", "timeoutMs", "resolve", "reject", "TimeoutError", "promiseWithTimeoutAndRetries", "toTry", "maxRetries", "attemptCount", "withExponentialBackoff", "fn", "keepWaitingIf", "secondsToWait", "exponentialFactor", "verbose", "attempts", "count", "initialAttempt", "waitUntil", "waitTime", "totalWaitTime", "lastAttempt", "res", "nextAttempt", "import_big", "artifact", "Bridge_default", "artifact", "CctpBridge_default", "anchor", "import_web3", "anchor", "import_web3", "getAssociatedAccount", "publicKey", "mintAccount", "getConfigAccount", "programId", "configPda", "getLockAccount", "nonce", "bridgeProgramId", "lockPda", "getPriceAccount", "chainId", "gasOracleProgramId", "pricePda", "getAuthorityAccount", "configAccount", "poolAuthority", "getCctpAuthorityAccount", "cctpBridgeAccount", "cctpBridgeProgramId", "getBridgeTokenAccount", "poolPda", "getOtherChainTokenAccount", "token", "otherChainTokenPda", "getChainBridgeAccount", "chainBridgePda", "getGasUsageAccount", "messengerProgramId", "getSendMessageAccount", "messageWithSigner", "sentMessagePda", "getUserDepositAccount", "userPublicKey", "tokenMintAccount", "userDepositPda", "getCctpBridgeAccount", "getCctpBridgeTokenAccount", "getCctpLockAccount", "messageSentEventDataAccount", "tokenMessengerEventAuthority", "getCctpAccounts", "domain", "cctpTransmitterProgramId", "cctpTokenMessengerMinter", "messageTransmitterAccount", "findProgramAddress", "tokenMessenger", "tokenMinter", "localToken", "remoteTokenMessengerKey", "authorityPda", "label", "extraSeeds", "seeds", "extraSeed", "import_anchor", "import_web3", "buildAnchorProvider", "solanaRpcUrl", "accountAddress", "connection", "publicKey", "import_web3", "import_stellar_sdk", "import_big", "import_randombytes", "import_tronweb", "formatAddress", "address", "from", "to", "buffer", "evmAddressToBuffer32", "tronAddressToBuffer32", "normalizeSuiHex", "hex", "hexToBuffer", "buff", "ethAddress", "tronAddressToEthAddress", "bufferToSize", "bytes", "TronWebUtils", "size", "result", "getNonce", "randomBytes", "getNonceBigInt", "bigint", "prepareTxSwapParams", "bridgeChainType", "params", "txSwapParams", "sourceToken", "convertFloatAmountToInt", "SdkError", "formatAddress", "prepareTxSendParams", "api", "txSendParams", "toChainType", "Chains", "CCTPDoesNotSupportedError", "fee", "feeFormat", "gasFeeOption", "getGasFeeOptions", "InvalidGasFeePaymentOptionError", "extraGas", "extraGasFormat", "validateExtraGasNotExceeded", "validateAmountEnough", "amountInt", "decimals", "feeInt", "extraGasInt", "amountTotal", "AmountNotEnoughError", "convertIntAmountToFloat", "sourceAllbridgeChainId", "sourceChainType", "destinationAllbridgeChainId", "sourceChainTokenDecimals", "messenger", "transactionCostResponse", "gasFeeOptions", "gasFeeIntWithStables", "convertAmountPrecision", "gasFeePaymentMethod", "destinationToken", "extraGasMaxLimit", "getExtraGasMaxLimits", "extraGasMaxIntLimit", "ExtraGasMaxLimitExceededError", "sourceChainToken", "destinationChainToken", "extraGasMaxLimits", "maxAmount", "maxAmountFloat", "maxAmountFloatInSourceNative", "maxAmountInSourceNative", "maxAmountFloatInStable", "isSendParams", "getCctpSolTokenRecipientAddress", "chainType", "toAccountAddress", "destinationTokenAddress", "solRpcUrl", "recipientWalletAddress", "receiverAccount", "receiveMint", "receiveUserToken", "getAssociatedAccount", "provider", "buildAnchorProvider", "accountData", "formatAddress", "tokenAccounts", "firstTokenAccount", "SdkError", "ChainBridgeService", "EvmBridgeService", "ChainBridgeService", "web3", "api", "nodeRpcUrlsConfig", "params", "rawTransaction", "txSwapParams", "prepareTxSwapParams", "amount", "contractAddress", "fromAccountAddress", "fromTokenAddress", "toAccountAddress", "toTokenAddress", "minimumReceiveAmount", "swapMethod", "txSendParams", "prepareTxSendParams", "toChainId", "messenger", "fee", "gasFeePaymentMethod", "extraGas", "nonce", "getNonce", "sendMethod", "value", "totalFee", "cctp", "bridgeContract", "cctpBridgeContract", "recipient", "getCctpSolTokenRecipientAddress", "estimateGas", "feeOptions", "transactionHash", "Bridge_default", "CctpBridge_default", "DefaultRawBridgeTransactionBuilder", "api", "nodeRpcUrlsConfig", "params", "tokenService", "a", "b", "provider", "approveData", "spender", "getSpender", "validateAmountGtZero", "validateAmountDecimals", "isSendParams", "getChainBridgeService", "import_anchor", "import_web3", "import_big", "IDL", "IDL", "import_anchor", "import_big", "import_web3", "getTokenAccountData", "account", "provider", "getVUsdAmount", "amount", "bridge", "poolAccount", "poolAccountInfo", "decimals", "feeShare", "Big", "poolInfo", "swapToVUsd", "getMessage", "args", "recipient", "sourceChainId", "destinationsChainId", "receiveToken", "nonce", "messenger", "chainBridge", "message", "SdkError", "hash", "hashBuffer", "messageWithSigner", "InvalidTxError", "hashWithSigner", "hashWithSignerBuffer", "import_web3", "import_big", "import_web3", "fetchAddressLookupTableAccountsFromTx", "transaction", "connection", "lookup", "res", "SdkError", "SolanaAutoTxFee", "addUnitLimitAndUnitPriceToTx", "transaction", "txFeeParams", "solanaRpcUrl", "connection", "simUnitsConsumed", "addUnitLimitAndUnitPriceToInstructions", "addUnitLimitAndUnitPriceToVersionedTx", "addressLookupTableAccounts", "fetchAddressLookupTableAccountsFromTx", "message", "TxTooLargeError", "instructions", "units", "updateUnitLimit", "solanaTxFee", "SolanaAutoTxFee", "updateUnitPrice", "pricePerUnitInMicroLamports", "toPowBase10", "computeUnitLimitIndex", "instruction", "computeUnitLimitInstruction", "computeUnitPriceIndex", "unitPrice", "getAveragePrioritizationFee", "computeUnitPriceInstruction", "prioritizationFees", "sum", "prioritizationFee", "import_spl_token", "import_web3", "import_axios", "JupiterService", "solanaRpcUrl", "jupiterParams", "userAddress", "stableTokenAddress", "amount", "exactOut", "quoteResponse", "swapMode", "url", "axios", "err", "JupiterError", "inAmount", "transactionResponse", "swapTransaction", "swapTransactionBuf", "tx", "transaction", "sdkTx", "addressLookupTableAccounts", "fetchAddressLookupTableAccountsFromTx", "sdkAddressLookupTableAccounts", "message", "sdkMessage", "signature", "SdkError", "e", "COMPUTE_UNIT_LIMIT", "JUP_ADD_INDEX", "SolanaBridgeService", "ChainBridgeService", "solanaRpcUrl", "params", "api", "JupiterService", "txSwapParams", "prepareTxSwapParams", "poolAddress", "toPoolAddress", "txFeeParams", "fromAccountAddress", "amount", "contractAddress", "fromTokenAddress", "toTokenAddress", "toAccountAddress", "minimumReceiveAmount", "account", "bridgeAddress", "tokenAddress", "receiveTokenAddress", "receivePoolAddress", "receiverOriginal", "userAccount", "provider", "buildAnchorProvider", "bridge", "IDL", "bridgeAuthority", "getAuthorityAccount", "configAccount", "getConfigAccount", "sendMint", "sendBridgeToken", "getBridgeTokenAccount", "sendPool", "sendUserToken", "getAssociatedAccount", "receiverAccount", "receiveMint", "receiveBridgeToken", "receivePool", "receiveUserToken", "preInstructions", "getTokenAccountData", "createReceiveUserTokenInstruction", "transaction", "connection", "addUnitLimitAndUnitPriceToTx", "txSendParams", "prepareTxSendParams", "solTxSendParams", "isJupiterForStableCoin", "jupTx", "tx", "solTxSendUpdatedParams", "e", "SdkRootError", "JupiterError", "swapAndBridgeTx", "requiredMessageSigner", "swapAndBridgeSolData", "messageAccount", "messageSentEventDataKeypair", "addUnitLimitAndUnitPriceToVersionedTx", "exactOut", "fee", "extraGas", "gasFeePaymentMethod", "amountToProcess", "amountIn", "newAmount", "AmountNotEnoughError", "convertIntAmountToFloat", "tokenDecimals", "sourceNativeTokenPrice", "Chains", "fromChainId", "toChainId", "destinationChainId", "receiverInBuffer32", "sourceChainId", "nonce", "getNonce", "poolAccount", "vUsdAmount", "getVUsdAmount", "lockAccount", "getLockAccount", "userToken", "bridgeTokenAccount", "chainBridgeAccount", "getChainBridgeAccount", "otherBridgeTokenAccount", "getOtherChainTokenAccount", "configAccountInfo", "priceAccount", "getPriceAccount", "thisGasPriceAccount", "message", "getMessage", "swapAndBridgeData", "vusdAmount", "recipient", "receiveToken", "mint", "config", "gasPrice", "thisGasPrice", "extraGasInstruction", "allbridgeMessengerProgramId", "messengerGasUsageAccount", "getGasUsageAccount", "messengerConfig", "sentMessageAccount", "getSendMessageAccount", "instructions", "allbridgeTableAccount", "res", "SdkError", "messageV0", "wormholeProgramId", "whBridgeAccount", "whFeeCollectorAccount", "whSequenceAccount", "wormholeMessengerConfigAccount", "bridgeAccountInfo", "feeLamports", "feeInstruction", "accounts", "cctpAddress", "CCTPDoesNotSupportedError", "CHAIN_ID", "cctpBridge", "cctpBridgeAccount", "getCctpBridgeAccount", "getCctpAuthorityAccount", "getCctpBridgeTokenAccount", "destinationChainSymbol", "domain", "cctpTransmitterProgramIdAddress", "cctpTokenMessengerMinterAddress", "cctpTransmitterProgramId", "cctpTokenMessengerMinter", "messageTransmitterAccount", "tokenMessenger", "tokenMessengerEventAuthority", "tokenMinter", "localToken", "remoteTokenMessengerKey", "authorityPda", "getCctpAccounts", "getCctpLockAccount", "MethodNotSupportedError", "import_stellar_sdk", "import_big", "import_stellar_sdk", "ContractSpec", "ContractClient", "BridgeContract", "ContractClient", "options", "ContractSpec", "SrbBridgeService", "ChainBridgeService", "nodeRpcUrlsConfig", "params", "api", "txSendParams", "prepareTxSendParams", "amount", "contractAddress", "fromAccountAddress", "fromTokenAddress", "toChainId", "toAccountAddress", "toTokenAddress", "fee", "gasFeePaymentMethod", "extraGas", "totalFee", "contract", "BridgeContract", "tx", "getNonceBigInt", "txSwapParams", "prepareTxSwapParams", "minimumReceiveAmount", "MethodNotSupportedError", "address", "sender", "config", "PACKAGE_VERSION", "TARGETED_RPC_VERSION", "CODE_TO_ERROR_TYPE", "SuiHTTPTransportError", "JsonRpcError", "message", "code", "SuiHTTPStatusError", "status", "statusText", "_requestId", "_disconnects", "_webSocket", "_connectionPromise", "_subscriptions", "_pendingRequests", "_WebsocketClient_instances", "setupWebSocket_fn", "reconnect_fn", "getWebsocketUrl", "httpUrl", "url", "DEFAULT_CLIENT_OPTIONS", "WebsocketClient", "endpoint", "options", "__privateAdd", "method", "params", "webSocket", "__privateMethod", "resolve", "reject", "__privateSet", "__privateGet", "error", "result", "JsonRpcError", "input", "subscription", "RpcSubscription", "__privateWrapper", "data", "json", "timeout", "message", "client", "subscriptionId", "newSubscriptionId", "_requestId", "_options", "_websocketClient", "_SuiHTTPTransport_instances", "getWebsocketClient_fn", "SuiHTTPTransport", "options", "__privateAdd", "__privateSet", "input", "init", "fetchFn", "__privateGet", "res", "PACKAGE_VERSION", "TARGETED_RPC_VERSION", "SuiHTTPStatusError", "data", "JsonRpcError", "unsubscribe", "__privateMethod", "WebSocketConstructor", "WebsocketClient", "import_bcs", "init_bcs", "init_sui_types", "import_bcs", "SUI_NS_NAME_REGEX", "SUI_NS_DOMAIN_REGEX", "normalizeSuiNSName", "name", "format", "lowerCase", "parts", "SUI_NS_NAME_REGEX", "labels", "domain", "SUI_NS_DOMAIN_REGEX", "init_sui_types", "MIST_PER_SUI", "MOVE_STDLIB_ADDRESS", "SUI_FRAMEWORK_ADDRESS", "SUI_CLOCK_OBJECT_ID", "normalizeSuiObjectId", "SUI_TYPE_ARG", "SUI_FRAMEWORK_ADDRESS", "SUI_SYSTEM_STATE_OBJECT_ID", "normalizeSuiObjectId", "init_sui_types", "OBJECT_MODULE_NAME", "ID_STRUCT_NAME", "STD_ASCII_MODULE_NAME", "STD_ASCII_STRUCT_NAME", "STD_UTF8_MODULE_NAME", "STD_UTF8_STRUCT_NAME", "STD_OPTION_MODULE_NAME", "STD_OPTION_STRUCT_NAME", "isTxContext", "param", "struct", "normalizeSuiAddress", "getPureBcsSchema", "typeSignature", "suiBcs", "val", "type", "pkg", "MOVE_STDLIB_ADDRESS", "SUI_FRAMEWORK_ADDRESS", "normalizedTypeToMoveTypeSignature", "normalizedTypeToMoveTypeSignatureBody", "import_bcs", "init_sui_types", "Pure", "data", "Inputs", "objectId", "digest", "version", "normalizeSuiAddress", "mutable", "initialSharedVersion", "import_bcs", "import_valibot", "init_sui_types", "import_valibot", "init_sui_types", "safeEnum", "options", "unionOptions", "key", "value", "SuiAddress", "normalizeSuiAddress", "isValidSuiAddress", "ObjectID", "BCSBytes", "JsonU64", "val", "ObjectRef", "Argument", "GasData", "StructTag", "OpenMoveTypeSignatureBody", "OpenMoveTypeSignature", "ProgrammableMoveCall", "$Intent", "Command", "ObjectArg", "CallArg", "NormalizedCallArg", "TransactionExpiration", "TransactionData", "Commands", "input", "pkg", "mod", "fn", "objects", "address", "o", "Argument", "coin", "amounts", "destination", "sources", "modules", "dependencies", "module", "dep", "normalizeSuiObjectId", "packageId", "ticket", "type", "elements", "name", "inputs", "data", "key", "value", "import_bcs", "import_valibot", "init_sui_types", "import_bcs", "import_valibot", "init_bcs", "ObjectRef", "ObjectArg", "safeEnum", "ObjectID", "JsonU64", "NormalizedCallArg", "TransactionInput", "TransactionExpiration", "StringEncodedBigint", "val", "TypeTag", "StructTag", "GasConfig", "TransactionArgumentTypes", "TransactionArgument", "MoveCallTransaction", "target", "TransferObjectsTransaction", "SplitCoinsTransaction", "MergeCoinsTransaction", "MakeMoveVecTransaction", "PublishTransaction", "UpgradeTransaction", "TransactionTypes", "TransactionType", "SerializedTransactionDataV1", "serializeV1TransactionData", "transactionData", "inputs", "input", "index", "command", "TypeTagSerializer", "arg", "convertTransactionArgument", "mod", "transactionDataFromV1", "data", "TransactionData", "ref", "value", "transaction", "parseV1TransactionArgument", "pkg", "fn", "import_valibot", "enumUnion", "options", "key", "value", "Argument", "GasData", "JsonU64", "SuiAddress", "ObjectRef", "ProgrammableMoveCall", "ObjectID", "$Intent", "Command", "BCSBytes", "ObjectArg", "CallArg", "TransactionExpiration", "SerializedTransactionDataV2", "import_valibot", "init_bcs", "MAX_OBJECTS_PER_FETCH", "GAS_SAFE_OVERHEAD", "MAX_GAS", "resolveTransactionData", "transactionData", "options", "next", "normalizeInputs", "resolveObjectReferences", "setGasPrice", "setGasBudget", "setGasPayment", "validate", "getClient", "dryRunResult", "safeOverhead", "baseComputationCostWithOverhead", "gasBudget", "paymentCoins", "SUI_TYPE_ARG", "coin", "input", "payment", "ObjectRef", "objectsToResolve", "dedupedIds", "normalizeSuiObjectId", "objectChunks", "chunk", "resolved", "responsesById", "id", "index", "invalidObjects", "_", "obj", "objects", "object", "owner", "initialSharedVersion", "objectsById", "updated", "normalizeSuiAddress", "Inputs", "isUsedAsMutable", "isUsedAsReceiving", "inputs", "commands", "moveCallsToResolve", "moveFunctionsToResolve", "command", "arg", "functionName", "amount", "normalizeRawArgument", "suiBcs", "moveFunctionParameters", "client", "packageId", "moduleId", "functionId", "def", "param", "normalizedTypeToMoveTypeSignature", "moveCall", "parameters", "params", "isTxContext", "fnName", "i", "inputValue", "schema", "getPureBcsSchema", "unresolvedObject", "usedAsMutable", "tx", "argIndex", "usedAsReceiving", "isReceivingType", "type", "arr", "size", "createObjectMethods", "makeObject", "object", "value", "type", "tx", "import_bcs", "init_bcs", "createPure", "makePure", "pure", "typeOrSerializedValue", "value", "schemaFromName", "suiBcs", "type", "name", "generic", "kind", "inner", "import_bcs", "import_valibot", "init_bcs", "init_sui_types", "import_blake2b", "hashTypedData", "typeTag", "data", "typeTagBytes", "e", "dataWithTag", "prepareSuiAddress", "address", "normalizeSuiAddress", "TransactionDataBuilder", "_TransactionDataBuilder", "clone", "bytes", "programmableTx", "suiBcs", "data", "TransactionData", "transactionDataFromV1", "hash", "hashTypedData", "value", "maxSizeBytes", "overrides", "onlyTransactionKind", "inputs", "commands", "kind", "expiration", "sender", "gasData", "transactionData", "type", "arg", "index", "fn", "command", "key", "replacement", "sizeDiff", "init_sui_types", "getIdFromCallArg", "arg", "normalizeSuiAddress", "_serializationPlugins", "_buildPlugins", "_intentResolvers", "_data", "_Transaction_instances", "normalizeTransactionArgument_fn", "resolveArgument_fn", "prepareBuild_fn", "runPlugins_fn", "createTransactionResult", "index", "length", "baseResult", "nestedResults", "nestedResultFor", "resultIndex", "target", "property", "i", "TRANSACTION_BRAND", "isTransaction", "obj", "modulePluginRegistry", "TRANSACTION_REGISTRY_KEY", "getGlobalPluginRegistry", "_Transaction", "__privateAdd", "createObjectMethods", "value", "Argument", "id", "getIdFromCallArg", "inserted", "__privateGet", "normalizeSuiAddress", "globalPlugins", "__privateSet", "TransactionDataBuilder", "serialized", "tx", "transaction", "newTransaction", "stepOrStep", "step", "name", "intent", "resolver", "sender", "expiration", "TransactionExpiration", "price", "budget", "owner", "payments", "payment", "ObjectRef", "serializeV1TransactionData", "createPure", "NormalizedCallArg", "Inputs", "args", "command", "coin", "amounts", "Commands", "__privateMethod", "amount", "destination", "sources", "src", "modules", "dependencies", "packageId", "ticket", "input", "arg", "objects", "address", "type", "elements", "options", "SerializedTransactionDataV2", "_key", "signer", "buildOptions", "bytes", "intents", "steps", "resolveTransactionData", "plugins", "createNext", "plugin", "next", "calledNext", "nextResolved", "Transaction", "import_valibot", "init_bcs", "init_sui_types", "COIN_WITH_BALANCE", "SUI_TYPE", "normalizeStructTag", "coinWithBalance", "type", "balance", "useGasCoin", "tx", "resolveCoinBalance", "coinType", "Commands", "CoinWithBalanceData", "transactionData", "buildOptions", "next", "coinTypes", "totalByType", "command", "usedIds", "input", "coinsByType", "client", "getClient", "getCoinsOfType", "mergedCoins", "index", "transaction", "commands", "first", "rest", "coin", "Inputs", "suiBcs", "arg", "owner", "remainingBalance", "coins", "loadMoreCoins", "cursor", "data", "hasNextPage", "nextCursor", "sortedCoins", "a", "b", "coinBalance", "init_sui_types", "SUI_CLIENT_BRAND", "SuiClient", "SUI_CLIENT_BRAND", "options", "SuiHTTPTransport", "input", "isValidSuiAddress", "normalizeSuiAddress", "method", "params", "isValidSuiObjectId", "normalizeSuiObjectId", "id", "isValidTransactionDigest", "d", "transactionBlock", "signature", "requestType", "result", "transaction", "signer", "transactionBytes", "bytes", "resp", "devInspectTxBytes", "isTransaction", "checkpoint", "format", "nextCursor", "hasNextPage", "data", "name", "normalizeSuiNSName", "signal", "timeout", "pollInterval", "timeoutSignal", "timeoutPromise", "_", "reject", "resolve", "import_big", "import_bridge", "import__", "init_util", "swap", "tx", "typeArgs", "args", "obj", "pure", "deposit", "typeArg", "withdraw", "claimReward", "tx", "typeArg", "args", "obj", "pool", "tx", "typeArg", "bridge", "obj", "swapAndBridgeWormhole", "tx", "typeArg", "args", "obj", "pure", "newUserDeposit", "tx", "typeArg", "swapAndBridge", "tx", "typeArg", "args", "obj", "pure", "import_cctp_bridge", "import__", "init_util", "bridge", "tx", "typeArg", "args", "obj", "pure", "import_utils", "import__", "init_bcs", "init_util", "init_bcs", "init_util", "Vector", "_Vector", "typeArgs", "elements", "composeSuiType", "T", "extractType", "item", "data", "toBcs", "field", "json", "suiBcs", "typeArg", "element", "decodeFromFields", "decodeFromFieldsWithTypes", "fieldToJSON", "decodeFromJSONField", "vector", "phantom", "type", "Address", "suiBcs", "val", "toBcs", "arg", "extractType", "reified", "decodeFromFields", "field", "decodeFromFieldsWithTypes", "item", "assertReifiedTypeArgsMatch", "fullType", "typeArgs", "reifiedTypeArgs", "i", "compressSuiType", "assertFieldsWithTypesArgsMatch", "itemTypeArgs", "parseTypeName", "fieldToJSON", "typeName", "decodeFromJSONField", "typeArg", "init_util", "PKG_V13", "init_util", "init_bcs", "isString", "type", "compressSuiType", "PKG_V13", "String", "_String", "typeArgs", "fields", "composeSuiType", "item", "data", "field", "json", "content", "client", "id", "phantom", "suiBcs", "decodeFromFields", "vector", "decodeFromFieldsWithTypes", "fieldToJSON", "decodeFromJSONField", "res", "init_util", "init_util", "PKG_V26", "init_bcs", "isID", "type", "compressSuiType", "PKG_V26", "ID", "_ID", "typeArgs", "fields", "composeSuiType", "item", "data", "field", "json", "content", "client", "id", "phantom", "suiBcs", "val", "decodeFromFields", "decodeFromFieldsWithTypes", "decodeFromJSONField", "res", "isUID", "UID", "_UID", "fromHex", "tx", "value", "pure", "String", "fetchAllPagesRecursive", "fetchFunction", "cursor", "accumulatedData", "result", "newAccumulatedData", "SuiBridgeService", "ChainBridgeService", "nodeRpcUrlsConfig", "api", "SuiClient", "SdkError", "params", "suiAddresses", "txSwapParams", "prepareTxSwapParams", "amount", "fromAccountAddress", "fromTokenAddress", "toTokenAddress", "minimumReceiveAmount", "tx", "Transaction", "args", "coinWithBalance", "swapResult", "swap", "coins", "fetchAllPagesRecursive", "cursor", "txSendParams", "prepareTxSendParams", "messenger", "setUtilsAddress", "toChainId", "toAccountAddress", "fee", "gasFeePaymentMethod", "extraGas", "totalFee", "amountWithoutFee", "getNonceBigInt", "fromHex", "normalizeSuiHex", "swapAndBridge", "totalFeeCoin", "SUI_CLOCK_OBJECT_ID", "swapAndBridgeWormhole", "setCctpAddress", "recipientWalletAddress", "recipient", "recipientStr", "getCctpSolTokenRecipientAddress", "bridge", "import_big", "import_bn", "amountToHex", "amount", "BN", "sleep", "ms", "resolve", "sendRawTransaction", "tronWeb", "rawTransaction", "signedTx", "InvalidTxError", "transactionHash", "verifyTx", "txId", "timeout", "start", "VerifyTxError", "result", "sleep", "TronBridgeService", "ChainBridgeService", "tronWeb", "api", "params", "txSendParams", "prepareTxSendParams", "rawTransaction", "sendRawTransaction", "txSwapParams", "prepareTxSwapParams", "amount", "contractAddress", "fromAccountAddress", "fromTokenAddress", "toAccountAddress", "toTokenAddress", "minimumReceiveAmount", "parameters", "toChainId", "messenger", "fee", "gasFeePaymentMethod", "extraGas", "totalFee", "nonce", "getNonceBigInt", "value", "methodSignature", "fromAddress", "transactionObject", "SdkError", "DefaultBridgeService", "api", "nodeRpcUrlsConfig", "params", "tokenService", "DefaultRawBridgeTransactionBuilder", "a", "b", "provider", "spender", "getSpender", "approveData", "validateAmountGtZero", "validateAmountDecimals", "getChainBridgeService", "token", "messenger", "CCTPDoesNotSupportedError", "chainSymbol", "Chains", "EvmBridgeService", "nodeRpcUrl", "TronBridgeService", "SolanaBridgeService", "SrbBridgeService", "SuiBridgeService", "import_big", "import_tronweb", "import_web3", "import_big", "depositAmountToVUsd", "amount", "aValue", "dValue", "tokenBalance", "vUsdBalance", "amountSP", "convertFloatAmountToInt", "amountSPBig", "oldD", "oldBalance", "newTokenBalance", "newVUsdBalance", "halfAmount", "getD", "vUsdToWithdrawalAmount", "lpAmount", "lpAmountSP", "import_web3", "artifact", "Pool_default", "UserBalance", "userInfo", "convertIntAmountToFloat", "poolInfo", "decimals", "earned", "getEarned", "ChainPoolService", "EvmPoolService", "ChainPoolService", "web3", "api", "accountAddress", "token", "userBalanceInfo", "promiseWithTimeout", "promiseWithTimeoutAndRetries", "poolInfo", "batch", "poolContract", "userRewardDebtAbi", "balanceOfAbi", "rewardDebtResult", "lpAmountResult", "UserBalance", "rewardDebt", "lpAmount", "aAbi", "dAbi", "tokenBalanceAbi", "vUsdBalanceAbi", "totalSupplyAbi", "accRewardPerSharePAbi", "aResult", "dResult", "tokenBalanceResult", "vUsdBalanceResult", "totalSupplyResult", "accRewardPerSharePResult", "tokenBalanceStr", "vUsdBalanceStr", "imbalance", "calculatePoolInfoImbalance", "aValue", "dValue", "tokenBalance", "vUsdBalance", "totalLpAmount", "accRewardPerShareP", "params", "contractAddress", "Pool_default", "DefaultRawPoolTransactionBuilder", "api", "nodeRpcUrlsConfig", "params", "tokenService", "a", "b", "provider", "approveData", "validateAmountGtZero", "validateAmountDecimals", "convertFloatAmountToInt", "getChainPoolService", "import_anchor", "import_web3", "SolanaPoolService", "ChainPoolService", "solanaRpcUrl", "api", "accountAddress", "token", "provider", "bridge", "poolAccount", "poolAccountInfo", "userDepositAccount", "getUserDepositAccount", "lpAmount", "rewardDebt", "UserBalance", "pool", "vUsdBalance", "tokenBalance", "imbalance", "calculatePoolInfoImbalance", "params", "accounts", "preInstructions", "tx", "addUnitLimitAndUnitPriceToTx", "bridgeAddress", "IDL", "connection", "publicKey", "poolAddress", "account", "user", "configAccount", "getConfigAccount", "bridgeAuthority", "getAuthorityAccount", "tokenMintAccount", "userToken", "getAssociatedAccount", "bridgeTokenAccount", "getBridgeTokenAccount", "getTokenAccountData", "createUserTokenInstruction", "instruction", "import_stellar_sdk", "import_stellar_sdk", "ContractSpec", "ContractClient", "PoolContract", "ContractClient", "options", "ContractSpec", "import_stellar_sdk", "Api", "getViewResultSoroban", "assembledTx", "simulation", "options", "isErrorSorobanResult", "SrbPoolService", "ChainPoolService", "nodeRpcUrlsConfig", "params", "api", "accountAddress", "token", "result", "isErrorSorobanResult", "SdkError", "viewResultSoroban", "getViewResultSoroban", "userDeposit", "UserBalance", "pool", "calculatePoolInfoImbalance", "address", "sender", "config", "PoolContract", "import_bridge", "init_util", "init_util", "init_bcs", "isBalance", "type", "compressSuiType", "PKG_V26", "Balance", "_Balance", "typeArgs", "fields", "composeSuiType", "T", "extractType", "item", "data", "field", "json", "content", "client", "id", "phantom", "suiBcs", "typeArg", "decodeFromFields", "assertFieldsWithTypesArgsMatch", "decodeFromFieldsWithTypes", "decodeFromJSONField", "assertReifiedTypeArgsMatch", "gotTypeArgs", "parseTypeName", "gotTypeArg", "expectedTypeArg", "res", "import__", "init_util", "import__", "init_bcs", "isPoolRewards", "type", "compressSuiType", "PoolRewards", "_PoolRewards", "typeArgs", "fields", "composeSuiType", "T", "extractType", "item", "data", "field", "json", "content", "client", "id", "phantom", "suiBcs", "Balance", "typeArg", "decodeFromFields", "assertFieldsWithTypesArgsMatch", "decodeFromFieldsWithTypes", "decodeFromJSONField", "assertReifiedTypeArgsMatch", "gotTypeArgs", "parseTypeName", "gotTypeArg", "expectedTypeArg", "res", "init_util", "import__", "init_bcs", "isPoolState", "type", "compressSuiType", "PoolState", "_PoolState", "typeArgs", "fields", "composeSuiType", "T", "extractType", "item", "data", "field", "json", "content", "client", "id", "phantom", "suiBcs", "typeArg", "decodeFromFields", "assertFieldsWithTypesArgsMatch", "decodeFromFieldsWithTypes", "decodeFromJSONField", "assertReifiedTypeArgsMatch", "gotTypeArgs", "parseTypeName", "gotTypeArg", "expectedTypeArg", "res", "init_bcs", "isPool", "type", "compressSuiType", "Pool", "_Pool", "typeArgs", "fields", "composeSuiType", "T", "extractType", "item", "data", "field", "json", "content", "client", "id", "phantom", "suiBcs", "UID", "PoolState", "PoolRewards", "Balance", "typeArg", "decodeFromFields", "assertFieldsWithTypesArgsMatch", "decodeFromFieldsWithTypes", "decodeFromJSONField", "assertReifiedTypeArgsMatch", "gotTypeArgs", "parseTypeName", "gotTypeArg", "expectedTypeArg", "res", "init_util", "import__", "init_bcs", "isUserDeposit", "type", "compressSuiType", "UserDeposit", "_UserDeposit", "typeArgs", "fields", "composeSuiType", "T", "extractType", "item", "data", "field", "json", "content", "client", "id", "phantom", "suiBcs", "UID", "typeArg", "decodeFromFields", "assertFieldsWithTypesArgsMatch", "decodeFromFieldsWithTypes", "decodeFromJSONField", "assertReifiedTypeArgsMatch", "gotTypeArgs", "parseTypeName", "gotTypeArg", "expectedTypeArg", "res", "getCoinsWithAmounts", "amounts", "coins", "tx", "firstCoin", "requiredAmount", "total", "amount", "currentBalance", "accumulatedCoins", "coin", "splitAndMergeCoins", "pureAmounts", "c", "mockSender", "suiView", "client", "tx", "reified", "inspectionResult", "returnValue", "data", "_type", "toBcs", "SuiPoolService", "ChainPoolService", "suiRpcUrl", "api", "SuiClient", "accountAddress", "token", "SdkError", "suiAddresses", "total", "element", "UserBalance", "tokenAddress", "fetchAllPagesRecursive", "cursor", "UserDeposit", "phantom", "P", "tx", "Transaction", "pool", "res", "suiView", "Pool", "tokenBalance", "vUsdBalance", "imbalance", "calculatePoolInfoImbalance", "params", "coins", "InvalidAmountError", "firstCoin", "depositObj", "isNewDeposit", "amountCoin", "getCoinsWithAmounts", "rewards", "deposit", "deposits", "tokenType", "newUserDeposit", "withdraw", "reward", "claimReward", "import_web3", "TronPoolService", "ChainPoolService", "tronWeb", "api", "tronJsonRpc", "accountAddress", "token", "userBalanceInfo", "web3", "batch", "contract", "Pool_default", "tronAddressToEthAddress", "userRewardDebtAbi", "balanceOfAbi", "rewardDebtResult", "lpAmountResult", "UserBalance", "rewardDebt", "lpAmount", "poolInfo", "aAbi", "dAbi", "tokenBalanceAbi", "vUsdBalanceAbi", "totalSupplyAbi", "accRewardPerSharePAbi", "aResult", "dResult", "tokenBalanceResult", "vUsdBalanceResult", "totalSupplyResult", "accRewardPerSharePResult", "tokenBalanceStr", "vUsdBalanceStr", "imbalance", "calculatePoolInfoImbalance", "poolContract", "aValue", "dValue", "tokenBalance", "vUsdBalance", "totalLpAmount", "accRewardPerShareP", "params", "amount", "parameter", "contractAddress", "methodSignature", "value", "fromAddress", "transactionObject", "SdkError", "DefaultLiquidityPoolService", "api", "nodeRpcUrlsConfig", "params", "tokenService", "DefaultRawPoolTransactionBuilder", "ttl", "cache_default", "a", "b", "provider", "approveData", "amount", "token", "validateAmountGtZero", "validateAmountDecimals", "pool", "vUsdBalance", "tokenBalance", "aValue", "dValue", "vUsd", "depositAmountToVUsd", "convertIntAmountToFloat", "accountAddress", "tokenAmountInSP", "vUsdToWithdrawalAmount", "tokenAmount", "fromSystemPrecision", "earned", "commonAmount", "getChainPoolService", "poolKey", "fromCache", "poolInfo", "chainSymbol", "Chains", "EvmPoolService", "nodeRpcUrl", "web3", "tronJsonRpc", "TronPoolService", "tronWeb", "SolanaPoolService", "SrbPoolService", "SuiPoolService", "import_big", "swapAndBridgeFeeCalculation", "amountInTokenPrecision", "sourcePoolInfo", "destinationPoolInfo", "swapToVUsdCalcResult", "swapToVUsd", "swapFromVUsdCalcResult", "swapFromVUsd", "swapAndBridgeFeeCalculationReverse", "swapToVUsdReverse", "swapFromVUsdReverse", "amount", "feeShare", "decimals", "poolInfo", "amountValue", "fee", "amountWithoutFee", "calcSwapToVUsd", "toSystemPrecision", "amountInSystemPrecision", "tokenBalance", "vUsdNewAmount", "getY", "vUsdBalance", "newAmount", "result", "fromSystemPrecision", "resultWithoutFee", "reversedFeeShare", "amountWithFee", "calcSwapToVUsdReverse", "inSystemPrecision", "import_big", "getSendAmountDetails", "amountInTokenPrecision", "sourceToken", "sourcePool", "destToken", "destPool", "vUsd", "swapToVUsd", "vUsdInTokenPrecision", "fromSystemPrecision", "result", "swapFromVUsd", "swapToFeeInt", "swapFromFeeInt", "convertIntAmountToFloat", "import_web3", "DefaultSolUtils", "nodeRpcUrlsConfig", "params", "transaction", "memo", "SdkError", "connection", "addressLookupTableAccounts", "fetchAddressLookupTableAccountsFromTx", "message", "lastInstruction", "import_stellar_sdk", "import_stellar_sdk", "ContractSpec", "ContractClient", "TokenContract", "ContractClient", "options", "ContractSpec", "FEE", "SEND_TRANSACTION_TIMEOUT", "DefaultSrbUtils", "nodeRpcUrlsConfig", "params", "stellarAccount", "result", "TokenContract", "isErrorSorobanResult", "SdkError", "tokenName", "getViewResultSoroban", "symbol", "srbTokenAddress", "asset", "StellarAsset", "changeTrust", "StellarOperation", "StellarTransactionBuilder", "sender", "tokenAddress", "nodeRpcUrl", "balance", "xdrTx", "stellar", "transaction", "sourceAccount", "server", "SorobanRpc", "account", "simulation", "hash", "secondsToWait", "getTransactionResponseAll", "withExponentialBackoff", "resp", "lastResponse", "contract", "address", "config", "DefaultUtils", "nodeRpcUrlsConfig", "params", "DefaultSrbUtils", "DefaultSolUtils", "FeePaymentMethod", "AmountFormat", "import_big", "import_tronweb", "import_web3", "artifact", "ERC20_default", "import_big", "ChainTokenService", "params", "allowance", "MAX_AMOUNT", "USDT_TOKEN_ADDRESS", "POLYGON_GAS_LIMIT", "EvmTokenService", "ChainTokenService", "web3", "api", "params", "tokenAddress", "owner", "spender", "rawTransaction", "amount", "approveMethod", "amountToHex", "chainSymbol", "transactionConfig", "feeOptions", "transactionHash", "contractAddress", "ERC20_default", "import_anchor", "import_web3", "SolanaTokenService", "ChainTokenService", "solanaRpcUrl", "api", "params", "MethodNotSupportedError", "accountAddress", "connection", "publicKey", "account", "token", "associatedAccount", "getAssociatedAccount", "getTokenAccountData", "e", "import_stellar_sdk", "SrbTokenService", "ChainTokenService", "nodeRpcUrlsConfig", "params", "api", "MethodNotSupportedError", "SdkError", "symbol", "srbTokenAddress", "stellar", "stellarAccount", "err", "balanceInfo", "balance", "convertFloatAmountToInt", "Chains", "nativeBalance", "SuiTokenService", "ChainTokenService", "suiRpcUrl", "api", "SuiClient", "params", "MethodNotSupportedError", "SdkError", "coinsData", "fetchAllPagesRecursive", "cursor", "total", "element", "MAX_AMOUNT", "TronTokenService", "ChainTokenService", "tronWeb", "api", "params", "tokenAddress", "owner", "rawTransaction", "sendRawTransaction", "spender", "amount", "amountHex", "amountToHex", "parameter", "contractAddress", "ERC20_default", "methodSignature", "parameters", "value", "fromAddress", "transactionObject", "SdkError", "DefaultTokenService", "api", "nodeRpcUrlsConfig", "params", "provider", "allowanceInt", "convertIntAmountToFloat", "validateAmountGtZero", "validateAmountDecimals", "approveData", "tokenBalance", "Chains", "chainSymbol", "ownerAddress", "EvmTokenService", "nodeRpcUrl", "TronTokenService", "tronWeb", "SolanaTokenService", "SrbTokenService", "SuiTokenService", "convertFloatAmountToInt", "NodeRpcUrlsConfig", "nodeRpcUrls", "chainSymbol", "nodeRpcUrl", "NodeRpcUrlNotInitializedError", "AllbridgeCoreSdkService", "nodeRpcUrlsConfig", "params", "mainnet", "Chains", "apiClient", "ApiClientImpl", "apiClientCaching", "ApiClientCaching", "coreClient", "AllbridgeCoreClientImpl", "coreClientPoolInfoCaching", "AllbridgeCoreClientPoolInfoCaching", "AllbridgeCoreClientFilteredImpl", "DefaultTokenService", "DefaultBridgeService", "DefaultLiquidityPoolService", "type", "chainDetails", "txId", "address", "resolve", "amount", "amountFormat", "sourceToken", "destToken", "validateAmountGtZero", "amountInTokenPrecision", "validateAmountDecimals", "convertFloatAmountToInt", "vUsdAmountInt", "swapToVUsd", "getPoolInfoByToken", "destPoolInfo", "amountResultIntFormatted", "pendingInfoDTO", "pendingInfo", "tokenAddress", "info", "SdkError", "destPoolAfterPending", "getSwapFromVUsdPoolInfo", "amountResultIntAfterPendingFormatted", "estimatedAmount", "convertAmountPrecision", "convertIntAmountToFloat", "provider", "amountFloat", "sourceChainToken", "amountInt", "vUsdInSystemPrecision", "vUsdInSourcePrecision", "fromSystemPrecision", "getFeePercent", "destinationChainToken", "usd", "swapFromVUsd", "vUsdInDestinationPrecision", "amountToSendFloat", "messenger", "amountToBeReceivedFloat", "sourcePool", "destPool", "sourceProvider", "destinationProvider", "destinationPool", "amountToSend", "CCTPDoesNotSupportedError", "result", "resultInDestPrecision", "vUsd", "amountToBeReceived", "resultInSourcePrecision", "swapFromVUsdReverse", "resultInt", "swapToVUsdReverse", "InsufficientPoolLiquidityError", "getGasFeeOptions", "token", "tokens", "poolKeys", "t", "apr", "aprInPercents", "getExtraGasMaxLimits", "vUsdAmount", "amountResultInt", "swapAndBridgeFeeCalculation", "swapAndBridgeFeeCalculationReverse", "newAmount", "getSendAmountDetails", "isNodeUrlsConfig", "nodeUrls", "AllbridgeCoreSdk", "params", "mainnet", "nodeRpcUrlsConfig", "NodeRpcUrlsConfig", "AllbridgeCoreSdkService", "DefaultUtils", "type", "chainSymbol", "txId", "address", "recipientAddress", "tokenAddress", "amount", "amountFormat", "sourceToken", "destToken", "provider", "amountFloat", "sourceChainToken", "destinationChainToken", "amountToSendFloat", "messenger", "amountToBeReceivedFloat", "sourceProvider", "destinationProvider", "sourcePool", "destinationPool", "token", "tokens", "apr", "vUsdAmount", "amountInTokenPrecision"]
}
