{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { BigSource } from \"big.js\";\nimport { AdditionalBasicChainProperties } from \"./chains/models\";\nimport { mainnet } from \"./configs\";\nimport {\n  AmountFormat,\n  AmountFormatted,\n  AmountsAndGasFeeOptions,\n  BridgeService,\n  ChainDetailsMap,\n  CheckAddressResponse,\n  ExtraGasMaxLimitResponse,\n  GasBalanceResponse,\n  GasFeeOptions,\n  GetNativeTokenBalanceParams,\n  GetTokenBalanceParams,\n  LiquidityPoolService,\n  Messenger,\n  PendingStatusInfoResponse,\n  PoolInfo,\n  Provider,\n  SendAmountDetails,\n  SwapAndBridgeCalculationData,\n  TokenWithChainDetails,\n  TransferStatusResponse,\n} from \"./models\";\nimport { AllbridgeCoreSdkService, NodeRpcUrlsConfig } from \"./services\";\nimport { CctpParams } from \"./services/bridge/sol\";\nimport { DefaultUtils, Utils } from \"./utils\";\n\nexport * from \"./configs\";\nexport * from \"./models\";\n\nexport interface AllbridgeCoreSdkOptions {\n  coreApiUrl: string;\n  /**\n   * A set of query parameters to be added to all requests to the Core API.\n   */\n  coreApiQueryParams?: Record<string, string>;\n  /**\n   * A set of headers to be added to all requests to the Core API.\n   */\n  coreApiHeaders?: Record<string, string>;\n  /**\n   * Jupiter Swap Api</br>\n   * Default: https://lite-api.jup.ag/swap/v1</br>\n   * {@link https://dev.jup.ag/docs/swap-api/}\n   */\n  jupiterUrl: string;\n  /**\n   * Jupiter Api Key Header</br>\n   * {@link https://dev.jup.ag/docs/api-setup}\n   */\n  jupiterApiKeyHeader?: string;\n  /**\n   * Jupiter v6 'maxAccounts' parameter</br>\n   * Rough estimate of the max accounts to be used for the quote, so that you can compose with your own accounts</br>\n   * {@link https://station.jup.ag/docs/apis/swap-api#using-maxaccounts}\n   */\n  jupiterMaxAccounts?: number;\n  wormholeMessengerProgramId: string;\n  solanaLookUpTable: string;\n  sorobanNetworkPassphrase: string;\n  /**\n   * Optional. Will be used in methods</br>\n   * {@link LiquidityPoolService.getPoolInfoFromChain} and {@link LiquidityPoolService.getAmountToBeWithdrawn}</br>\n   * to fetch information from the blockchain with fewer HTTP requests using JSON-RPC API\n   */\n  tronJsonRpc?: string;\n  cctpParams: CctpParams;\n  /**\n   * The number of seconds that pool information taken from the chain will be cached.\n   *\n   * @type {number}\n   */\n  cachePoolInfoChainSec: number;\n\n  /**\n   * @internal\n   * Optional additional properties to merge with the default properties.\n   */\n  additionalChainsProperties?: Record<string, AdditionalBasicChainProperties>;\n}\n\n/**\n * Type representing RPC node URLs for different blockchain chains.</br>\n * Provide node RPC URL for chain connection you intend to communicate with</br>\n * - required for SOL, TRX chains</br>\n * - optional for EVM chains -- you can interact by passing a {@link Provider} that will be used to communicate with the chain</br>\n * @typedef {Record<string, string>} NodeRpcUrls\n * @property {string} chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n * @property {string} rpcUrl - The RPC node URL for the specified chain.\n */\nexport type NodeRpcUrls = Record<string, string>;\n\n/**\n * @deprecated Use {@link NodeRpcUrls}\n */\nexport interface NodeUrlsConfig {\n  solanaRpcUrl: string;\n  tronRpcUrl: string;\n}\n\n/**\n * @deprecated Use {@link NodeRpcUrls}\n */\nfunction isNodeUrlsConfig(nodeUrls: NodeUrlsConfig | NodeRpcUrls): nodeUrls is NodeUrlsConfig {\n  return \"solanaRpcUrl\" in nodeUrls;\n}\n\nexport class AllbridgeCoreSdk {\n  readonly params: AllbridgeCoreSdkOptions;\n\n  bridge: BridgeService;\n  pool: LiquidityPoolService;\n  utils: Utils;\n\n  private service: AllbridgeCoreSdkService;\n\n  /**\n   * Initializes the SDK object.\n   * @param nodeUrls node rpc urls for full functionality\n   * @param params\n   * Optional.\n   * If not defined, the default {@link mainnet} parameters are used.\n   */\n  constructor(nodeUrls: NodeUrlsConfig | NodeRpcUrls, params: AllbridgeCoreSdkOptions = mainnet) {\n    let nodeRpcUrlsConfig: NodeRpcUrlsConfig;\n    if (isNodeUrlsConfig(nodeUrls)) {\n      nodeRpcUrlsConfig = new NodeRpcUrlsConfig({ SOL: nodeUrls.solanaRpcUrl, TRX: nodeUrls.tronRpcUrl });\n    } else {\n      nodeRpcUrlsConfig = new NodeRpcUrlsConfig(nodeUrls);\n    }\n    this.service = new AllbridgeCoreSdkService(nodeRpcUrlsConfig, params);\n    this.bridge = this.service.bridge;\n    this.pool = this.service.pool;\n    this.utils = new DefaultUtils(nodeRpcUrlsConfig, params);\n    this.params = params;\n  }\n\n  /**\n   * Returns {@link ChainDetailsMap} containing a list of supported tokens groped by chain.\n   *\n   * @param type - A string value which specifies ChainDetailsMap to retrieve.\n   *               Can be either 'swap' for send or 'pool' for liquidity pools setup.\n   *               Defaults to 'swap'.\n   */\n  async chainDetailsMap(type: \"swap\" | \"pool\" = \"swap\"): Promise<ChainDetailsMap> {\n    return this.service.chainDetailsMap(type);\n  }\n\n  /**\n   * Returns a list of supported {@link TokenWithChainDetails | tokens}.\n   *\n   * @param type - A string value which specifies a set of tokens to retrieve.\n   *               Can be either 'swap' for tokens to send or 'pool' for liquidity pools operations.\n   *               Defaults to 'swap'.\n   * @returns A promise that resolves to an array of {@link TokenWithChainDetails}.\n   */\n  async tokens(type: \"swap\" | \"pool\" = \"swap\"): Promise<TokenWithChainDetails[]> {\n    return this.service.tokens(type);\n  }\n\n  /**\n   * Returns a list of supported {@link TokenWithChainDetails | tokens} on the selected chain.\n   * @param chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n   * @param type - A string value which specifies a set of tokens to retrieve.\n   *               Can be either 'swap' for tokens to send or 'pool' for liquidity pools operations.\n   *               Defaults to 'swap'.\n   */\n  async tokensByChain(chainSymbol: string, type: \"swap\" | \"pool\" = \"swap\"): Promise<TokenWithChainDetails[]> {\n    return this.service.tokensByChain(chainSymbol, type);\n  }\n\n  /**\n   * Fetches information about tokens transfer by chosen chainSymbol and transaction Id from the Allbridge Core API.\n   * @param chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n   * @param txId\n   */\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return this.service.getTransferStatus(chainSymbol, txId);\n  }\n\n  /**\n   * Get gas balance\n   * @param chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n   * @param address\n   */\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.service.getGasBalance(chainSymbol, address);\n  }\n\n  /**\n   * Check address and show gas balance\n   * @deprecated\n   * @param chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n   * @param recipientAddress\n   * @param tokenAddress\n   */\n  async checkAddress(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    chainSymbol: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    recipientAddress: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    tokenAddress?: string\n  ): Promise<CheckAddressResponse> {\n    return await this.service.checkAddress();\n  }\n\n  /**\n   * Returns information about pending transactions for the same destination chain and the amount of tokens can be received as a result of transfer considering pending transactions.\n   * @param amount the amount of tokens that will be sent\n   * @param amountFormat amount format\n   * @param sourceToken selected token transfer from\n   * @param destToken selected token transfer to\n   * @returns range of possible amount based on already pending transactions\n   */\n  async getPendingStatusInfo(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<PendingStatusInfoResponse> {\n    return this.service.getPendingStatusInfo(amount, amountFormat, sourceToken, destToken);\n  }\n\n  /**\n   * Get token balance\n   * @param params\n   * @param provider\n   * @returns Token balance\n   */\n  async getTokenBalance(params: GetTokenBalanceParams, provider?: Provider): Promise<string> {\n    return this.service.getTokenBalance(params, provider);\n  }\n\n  /**\n   * Get native (gas) token balance\n   * @param params\n   * @param provider\n   * @returns Token balance\n   */\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams, provider?: Provider): Promise<AmountFormatted> {\n    return this.service.getNativeTokenBalance(params, provider);\n  }\n\n  /**\n   * @deprecated\n   * Calculates the percentage of fee from the initial amount that is charged when swapping from the selected source chain.\n   * (Does not include fee related to the destination chain. Does not include gas fee)\n   * @param amountFloat initial amount of tokens to swap\n   * @param sourceChainToken selected token on the source chain\n   * @returns fee percent\n   */\n  async calculateFeePercentOnSourceChain(\n    amountFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails\n  ): Promise<number> {\n    return this.service.calculateFeePercentOnSourceChain(amountFloat, sourceChainToken);\n  }\n\n  /**\n   * @deprecated\n   * Calculates the percentage of fee that is charged when swapping to the selected destination chain. The destination chain fee percent applies to the amount after the source chain fee.\n   * (Does not include fee related to the source chain. Does not include gas fee)\n   * @see {@link calculateFeePercentOnSourceChain}\n   * @param amountFloat initial amount of tokens to swap\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @returns fee percent\n   */\n  async calculateFeePercentOnDestinationChain(\n    amountFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails\n  ): Promise<number> {\n    return this.service.calculateFeePercentOnDestinationChain(amountFloat, sourceChainToken, destinationChainToken);\n  }\n\n  /**\n   * Calculates the amount of tokens to be received as a result of transfer\n   * and fetches {@link GasFeeOptions} which contains available ways to pay the gas fee.\n   * @param amountToSendFloat the amount of tokens that will be sent\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger\n   */\n  async getAmountToBeReceivedAndGasFeeOptions(\n    amountToSendFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<AmountsAndGasFeeOptions> {\n    return this.service.getAmountToBeReceivedAndGasFeeOptions(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      messenger\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to send based on requested tokens amount be received as a result of transfer.\n   * and fetches {@link GasFeeOptions} which contains available ways to pay the gas fee.\n   * @param amountToBeReceivedFloat the amount of tokens that should be received\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger\n   */\n  async getAmountToSendAndGasFeeOptions(\n    amountToBeReceivedFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<AmountsAndGasFeeOptions> {\n    return this.service.getAmountToSendAndGasFeeOptions(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      messenger\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to be received as a result of transfer.\n   * @param amountToSendFloat the amount of tokens that will be sent\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger Optional. selected messenger\n   */\n  async getAmountToBeReceived(\n    amountToSendFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    /**\n     * The Messengers for different routes.\n     * Optional.\n     * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n     */\n    messenger?: Messenger\n  ): Promise<string> {\n    return this.service.getAmountToBeReceived(amountToSendFloat, sourceChainToken, destinationChainToken, messenger);\n  }\n\n  /**\n   * Calculates the amount of tokens to be received as a result of transfer based on actual blockchain pool state.\n   * @param amountToSendFloat the amount of tokens that will be sent\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger Optional. selected messenger\n   * @param sourceProvider Optional. source chain Provider\n   * @param destinationProvider Optional. destination chain Provider\n   */\n  async getAmountToBeReceivedFromChain(\n    amountToSendFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    /**\n     * The Messengers for different routes.\n     * Optional.\n     * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n     */\n    messenger?: Messenger,\n    sourceProvider?: Provider,\n    destinationProvider?: Provider\n  ): Promise<string> {\n    return this.service.getAmountToBeReceivedFromChain(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      messenger,\n      sourceProvider,\n      destinationProvider\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to be received as a result of transfer based on passed pool state.\n   * @param amountToSendFloat the amount of tokens that will be sent\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param sourcePool source token pool state\n   * @param destinationPool destination token pool state\n   * @param messenger Optional. selected messenger\n   */\n  getAmountToBeReceivedFromPools(\n    amountToSendFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    sourcePool: PoolInfo,\n    destinationPool: PoolInfo,\n    messenger?: Messenger\n  ): string {\n    return this.service.getAmountToBeReceivedFromPools(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destinationPool,\n      messenger\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to send based on requested tokens amount be received as a result of transfer.\n   * @param amountToBeReceivedFloat the amount of tokens that should be received\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger Optional. selected messenger\n   */\n  async getAmountToSend(\n    amountToBeReceivedFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    /**\n     * The Messengers for different routes.\n     * Optional.\n     * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n     */\n    messenger?: Messenger\n  ): Promise<string> {\n    return this.service.getAmountToSend(amountToBeReceivedFloat, sourceChainToken, destinationChainToken, messenger);\n  }\n\n  /**\n   * Calculates the amount of tokens to send based on requested tokens amount be received as a result of transfer based on actual blockchain pool state.\n   * @param amountToBeReceivedFloat the amount of tokens that should be received\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger Optional. selected messenger\n   * @param sourceProvider Optional. source chain Provider\n   * @param destinationProvider Optional. destination chain Provider\n   */\n  async getAmountToSendFromChain(\n    amountToBeReceivedFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    /**\n     * The Messengers for different routes.\n     * Optional.\n     * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n     */\n    messenger?: Messenger,\n    sourceProvider?: Provider,\n    destinationProvider?: Provider\n  ): Promise<string> {\n    return this.service.getAmountToSendFromChain(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      messenger,\n      sourceProvider,\n      destinationProvider\n    );\n  }\n\n  /**\n   * Calculates the amount of tokens to send based on requested tokens amount be received as a result of transfer based on passed pool state.\n   * @param amountToBeReceivedFloat the amount of tokens that should be received\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param sourcePool source token pool state\n   * @param destinationPool destination token pool state\n   * @param messenger Optional. selected messenger\n   */\n  getAmountToSendFromPools(\n    amountToBeReceivedFloat: BigSource,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    sourcePool: PoolInfo,\n    destinationPool: PoolInfo,\n    messenger?: Messenger\n  ): string {\n    return this.service.getAmountToSendFromPools(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destinationPool,\n      messenger\n    );\n  }\n\n  /**\n   * Fetches possible ways to pay the transfer gas fee.\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @param messenger\n   * @returns {@link GasFeeOptions}\n   */\n  async getGasFeeOptions(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<GasFeeOptions> {\n    return this.service.getGasFeeOptions(sourceChainToken, destinationChainToken, messenger);\n  }\n\n  /**\n   * Gets the average time in ms to complete a transfer for given tokens and messenger.\n   * @param sourceChainToken selected token on the source chain.\n   * @param destinationChainToken selected token on the destination chain.\n   * @param messenger\n   * @returns Average transfer time in milliseconds or null if a given combination of tokens and messenger is not supported.\n   */\n  getAverageTransferTime(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): number | null {\n    return this.service.getAverageTransferTime(sourceChainToken, destinationChainToken, messenger);\n  }\n\n  /**\n   * Gets information about the poolInfo by token\n   * @param token\n   * @returns poolInfo\n   */\n  async getPoolInfoByToken(token: TokenWithChainDetails): Promise<PoolInfo> {\n    return this.service.getPoolInfoByToken(token);\n  }\n\n  /**\n   * Forces refresh of cached information about the state of liquidity pools.\n   * Outdated cache leads to calculated amounts being less accurate.\n   * The cache is invalidated at regular intervals, but it can be forced to be refreshed by calling this method.+\n   *\n   * @param tokens if present, the corresponding liquidity pools will be updated\n   */\n  async refreshPoolInfo(tokens?: TokenWithChainDetails | TokenWithChainDetails[]): Promise<void> {\n    return this.service.refreshPoolInfo(tokens);\n  }\n\n  /**\n   * Convert APR to percentage view\n   * @param apr\n   * @returns aprPercentageView\n   */\n  aprInPercents(apr: string): string {\n    return this.service.aprInPercents(apr);\n  }\n\n  /**\n   * Get possible limit of extra gas amount.\n   * @param sourceChainToken selected token on the source chain\n   * @param destinationChainToken selected token on the destination chain\n   * @returns {@link ExtraGasMaxLimitResponse}\n   */\n  async getExtraGasMaxLimits(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails\n  ): Promise<ExtraGasMaxLimitResponse> {\n    return this.service.getExtraGasMaxLimits(sourceChainToken, destinationChainToken);\n  }\n\n  /**\n   * @param amount - amount\n   * @param amountFormat - AmountFormat\n   * @param sourceToken - selected token on the source chain\n   * @return virtual amount\n   */\n  async getVUsdFromAmount(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails\n  ): Promise<AmountFormatted> {\n    return this.service.getVUsdFromAmount(amount, amountFormat, sourceToken);\n  }\n\n  /**\n   * @param vUsdAmount - amount of vUsd, int format\n   * @param destToken selected token on the destination chain\n   * @return amount of destToken\n   */\n  async getAmountFromVUsd(vUsdAmount: string, destToken: TokenWithChainDetails): Promise<AmountFormatted> {\n    return this.service.getAmountFromVUsd(vUsdAmount, destToken);\n  }\n\n  /**\n   * @deprecated Use {@link getSendAmountDetails}\n   * @param amountInTokenPrecision\n   * @param sourceToken\n   * @param destToken\n   */\n  async swapAndBridgeFeeCalculation(\n    amountInTokenPrecision: string,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SwapAndBridgeCalculationData> {\n    return this.service.swapAndBridgeFeeCalculation(amountInTokenPrecision, sourceToken, destToken);\n  }\n\n  /**\n   * @deprecated Use {@link getAmountToBeReceived} and then {@link getSendAmountDetails}\n   * @param amountInTokenPrecision\n   * @param sourceToken\n   * @param destToken\n   */\n  async swapAndBridgeFeeCalculationReverse(\n    amountInTokenPrecision: string,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SwapAndBridgeCalculationData> {\n    return this.service.swapAndBridgeFeeCalculationReverse(amountInTokenPrecision, sourceToken, destToken);\n  }\n\n  /**\n   *  Show amount changes (fee and amount adjustment) during send through pools on source and destination chains\n   */\n  async getSendAmountDetails(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SendAmountDetails> {\n    return this.service.getSendAmountDetails(amount, amountFormat, sourceToken, destToken);\n  }\n}\n"]}