{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/models/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAaA,oEAO2C;AANzC,2GAAA,SAAS,OAAA;AAKT,+GAAA,aAAa,OAAA;AAqBf,2DAAyC;AAWzC,gDAA8B;AAC9B,qDAA+D;AAAtD,0GAAA,WAAW,OAAA;AAAE,wGAAA,SAAS,OAAA;AAG/B,IAAY,gBAUX;AAVD,WAAY,gBAAgB;IAC1B;;OAEG;IACH,mDAA+B,CAAA;IAE/B;;OAEG;IACH,kDAA8B,CAAA;AAChC,CAAC,EAVW,gBAAgB,gCAAhB,gBAAgB,QAU3B;AAmCD;;;;GAIG;AACH,IAAY,YASX;AATD,WAAY,YAAY;IACtB;;OAEG;IACH,2BAAW,CAAA;IACX;;OAEG;IACH,+BAAe,CAAA;AACjB,CAAC,EATW,YAAY,4BAAZ,YAAY,QASvB","sourcesContent":["export {\n  ApproveParams as BridgeApproveParams,\n  BaseSendParams,\n  CheckAllowanceParams,\n  GetAllowanceParams,\n  GetTokenBalanceParams,\n  SendParams,\n  SwapParams,\n  GetNativeTokenBalanceParams,\n} from \"../services/bridge/models/bridge.model\";\nexport { BridgeService } from \"../services/bridge/index\";\nexport { CctpParams, CctpDomains } from \"../services/bridge/sol\";\nexport { LiquidityPoolService } from \"../services/liquidity-pool/index\";\nexport {\n  Messenger,\n  TransferStatusResponse,\n  BridgeTransaction,\n  GasBalanceResponse,\n  CheckAddressResponse,\n  AddressStatus,\n} from \"../client/core-api/core-api.model\";\nexport { RawBridgeTransactionBuilder } from \"../services/bridge/raw-bridge-transaction-builder\";\nexport { RawPoolTransactionBuilder } from \"../services/liquidity-pool/raw-pool-transaction-builder\";\nexport {\n  PoolInfo,\n  TokenWithChainDetails,\n  TransferTime,\n  TxCostAmount,\n  SuiAddresses,\n  MessengerTransferTime,\n} from \"../tokens-info/tokens-info.model\";\nexport {\n  UserBalanceInfo,\n  UserBalanceInfoDTO,\n  LiquidityPoolsParams,\n  LiquidityPoolsParamsWithAmount,\n  ApproveParams as LiquidityPoolsApproveParams,\n  CheckAllowanceParams as LiquidityPoolsCheckAllowanceParams,\n  GetAllowanceParams as LiquidityPoolsGetAllowanceParams,\n} from \"../services/liquidity-pool/models/pool.model\";\nexport * from \"../services/models/index\";\nexport {\n  SwapAndBridgeCalculationData,\n  SwapFromVUsdCalcResult,\n  SwapToVUsdCalcResult,\n} from \"../utils/calculation/swap-and-bridge-fee-calc\";\nexport { SendAmountDetails, AmountImpact } from \"../utils/calculation/swap-and-bridge-details\";\nexport { ChainDetailsMap, ChainDetailsWithTokens } from \"../tokens-info\";\nexport { Utils } from \"../utils\";\nexport { SrbUtils, TrustLineParams } from \"../utils/srb\";\nexport { SolUtils } from \"../utils/sol\";\nexport * from \"../exceptions\";\nexport { ChainSymbol, ChainType } from \"../chains/chain.enums\";\nexport { AdditionalBasicChainProperties, BasicChainProperties } from \"../chains/models\";\n\nexport enum FeePaymentMethod {\n  /**\n   * The fee is paid in the native currency of the source chain.\n   */\n  WITH_NATIVE_CURRENCY = \"native\",\n\n  /**\n   * The fee is paid with the stablecoin token.\n   */\n  WITH_STABLECOIN = \"stablecoin\",\n}\n\nexport interface AmountsAndGasFeeOptions {\n  /**\n   * The floating point amount of tokens to be sent (not including gas fee).\n   */\n  amountToSendFloat: string;\n\n  /**\n   * The floating point amount of tokens to be received.\n   */\n  amountToBeReceivedFloat: string;\n\n  /**\n   * Available ways to pay the transfer gas fee and gas fee amount.\n   */\n  gasFeeOptions: GasFeeOptions;\n}\n\ntype GasFeeOptionsType = {\n  [key in FeePaymentMethod]?: AmountFormatted;\n};\n\n/**\n * Describes available options of paying the gas fee and the amount to pay when using the corresponding method.\n *\n * For {@link FeePaymentMethod.WITH_NATIVE_CURRENCY} value contains the amount in the smallest denomination of the source chain currency\n *\n * For {@link FeePaymentMethod.WITH_STABLECOIN} value contains the amount in the smallest denomination of the source token\n */\nexport interface GasFeeOptions extends GasFeeOptionsType {\n  [FeePaymentMethod.WITH_NATIVE_CURRENCY]: AmountFormatted;\n  [FeePaymentMethod.WITH_STABLECOIN]?: AmountFormatted;\n}\n\n/**\n * Define the type of amount data<p/>\n * Example:<p/>\n *  \"1500000\" USDC {@link AmountFormat.INT} = \"1.5\" USDC {@link AmountFormat.FLOAT}, if USDC.decimals = 6\n */\nexport enum AmountFormat {\n  /**\n   * denominated in the smallest unit of the source token\n   */\n  INT = \"int\",\n  /**\n   * denominated in the unit of the source token\n   */\n  FLOAT = \"float\",\n}\n\n/**\n * Describes the same amount in two variation formats.\n *\n * For {@link AmountFormat.INT} value contains the amount in the smallest denomination\n *\n * For {@link AmountFormat.FLOAT} value contains the amount in tokens denomination\n */\nexport type AmountFormatted = {\n  [key in AmountFormat]: string;\n};\n\n/**\n * Describes MAX extra gas value can to be passed when using the corresponding method.\n *\n * For {@link FeePaymentMethod.WITH_NATIVE_CURRENCY} value contains {@link ExtraGasMaxLimit} the amount of the source chain currency\n *\n * For {@link FeePaymentMethod.WITH_STABLECOIN} value contains {@link ExtraGasMaxLimit} the amount of the source token\n */\nexport type ExtraGasMaxLimits = {\n  [key in FeePaymentMethod]?: ExtraGasMaxLimit;\n};\n\n/**\n * Describes the same MAX extra gas amount.\n */\nexport type ExtraGasMaxLimit = AmountFormatted;\n\n/**\n * Provide extra gas information\n */\nexport interface ExtraGasMaxLimitResponse {\n  /**\n   * See {@link ExtraGasMaxLimits}\n   */\n  extraGasMax: ExtraGasMaxLimits;\n  /**\n   * Information due to destination chain\n   */\n  destinationChain: {\n    /**\n     *  gasAmountMax maximum amount you can receive as extra gas on dest chain\n     */\n    gasAmountMax: ExtraGasMaxLimit;\n    /**\n     * cost of swap tx on chain\n     */\n    swap: AmountFormatted;\n    /**\n     * cost of send tx on chain\n     */\n    transfer: AmountFormatted;\n  };\n  /**\n   * Exchange rate\n   */\n  exchangeRate: string;\n  /**\n   * Source native token price\n   */\n  sourceNativeTokenPrice: string;\n}\n\n/**\n * Provide pending status information\n */\nexport interface PendingStatusInfoResponse {\n  /**\n   * Number of pending transactions\n   */\n  pendingTxs: number;\n  /**\n   * Total amount of pending transactions\n   */\n  pendingAmount: AmountFormatted;\n  /**\n   * The amount of tokens can be received as a result of transfer considering pending transactions\n   */\n  estimatedAmount: { min: AmountFormatted; max: AmountFormatted };\n}\n"]}