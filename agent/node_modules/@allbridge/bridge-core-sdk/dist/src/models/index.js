"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmountFormat = exports.FeePaymentMethod = exports.ChainType = exports.ChainSymbol = exports.AddressStatus = exports.Messenger = void 0;
var core_api_model_1 = require("../client/core-api/core-api.model");
Object.defineProperty(exports, "Messenger", { enumerable: true, get: function () { return core_api_model_1.Messenger; } });
Object.defineProperty(exports, "AddressStatus", { enumerable: true, get: function () { return core_api_model_1.AddressStatus; } });
__exportStar(require("../services/models/index"), exports);
__exportStar(require("../exceptions"), exports);
var chain_enums_1 = require("../chains/chain.enums");
Object.defineProperty(exports, "ChainSymbol", { enumerable: true, get: function () { return chain_enums_1.ChainSymbol; } });
Object.defineProperty(exports, "ChainType", { enumerable: true, get: function () { return chain_enums_1.ChainType; } });
var FeePaymentMethod;
(function (FeePaymentMethod) {
    /**
     * The fee is paid in the native currency of the source chain.
     */
    FeePaymentMethod["WITH_NATIVE_CURRENCY"] = "native";
    /**
     * The fee is paid with the stablecoin token.
     */
    FeePaymentMethod["WITH_STABLECOIN"] = "stablecoin";
})(FeePaymentMethod || (exports.FeePaymentMethod = FeePaymentMethod = {}));
/**
 * Define the type of amount data<p/>
 * Example:<p/>
 *  "1500000" USDC {@link AmountFormat.INT} = "1.5" USDC {@link AmountFormat.FLOAT}, if USDC.decimals = 6
 */
var AmountFormat;
(function (AmountFormat) {
    /**
     * denominated in the smallest unit of the source token
     */
    AmountFormat["INT"] = "int";
    /**
     * denominated in the unit of the source token
     */
    AmountFormat["FLOAT"] = "float";
})(AmountFormat || (exports.AmountFormat = AmountFormat = {}));
//# sourceMappingURL=index.js.map