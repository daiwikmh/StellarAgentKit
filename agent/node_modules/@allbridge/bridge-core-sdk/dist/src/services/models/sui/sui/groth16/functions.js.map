{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/groth16/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function bls12381(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::bls12381`,\n    arguments: [],\n  });\n}\n\nexport function bn254(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::bn254`,\n    arguments: [],\n  });\n}\n\nexport interface PrepareVerifyingKeyArgs {\n  curve: TransactionObjectInput;\n  verifyingKey: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function prepareVerifyingKey(tx: Transaction, args: PrepareVerifyingKeyArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::prepare_verifying_key`,\n    arguments: [obj(tx, args.curve), pure(tx, args.verifyingKey, `vector<u8>`)],\n  });\n}\n\nexport interface PrepareVerifyingKeyInternalArgs {\n  curve: number | TransactionArgument;\n  verifyingKey: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function prepareVerifyingKeyInternal(tx: Transaction, args: PrepareVerifyingKeyInternalArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::prepare_verifying_key_internal`,\n    arguments: [pure(tx, args.curve, `u8`), pure(tx, args.verifyingKey, `vector<u8>`)],\n  });\n}\n\nexport function proofPointsFromBytes(\n  tx: Transaction,\n  bytes: Array<number | TransactionArgument> | TransactionArgument\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::proof_points_from_bytes`,\n    arguments: [pure(tx, bytes, `vector<u8>`)],\n  });\n}\n\nexport function publicProofInputsFromBytes(\n  tx: Transaction,\n  bytes: Array<number | TransactionArgument> | TransactionArgument\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::public_proof_inputs_from_bytes`,\n    arguments: [pure(tx, bytes, `vector<u8>`)],\n  });\n}\n\nexport interface PvkFromBytesArgs {\n  vkGammaAbcG1Bytes: Array<number | TransactionArgument> | TransactionArgument;\n  alphaG1BetaG2Bytes: Array<number | TransactionArgument> | TransactionArgument;\n  gammaG2NegPcBytes: Array<number | TransactionArgument> | TransactionArgument;\n  deltaG2NegPcBytes: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function pvkFromBytes(tx: Transaction, args: PvkFromBytesArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::pvk_from_bytes`,\n    arguments: [\n      pure(tx, args.vkGammaAbcG1Bytes, `vector<u8>`),\n      pure(tx, args.alphaG1BetaG2Bytes, `vector<u8>`),\n      pure(tx, args.gammaG2NegPcBytes, `vector<u8>`),\n      pure(tx, args.deltaG2NegPcBytes, `vector<u8>`),\n    ],\n  });\n}\n\nexport function pvkToBytes(tx: Transaction, pvk: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::pvk_to_bytes`,\n    arguments: [obj(tx, pvk)],\n  });\n}\n\nexport interface VerifyGroth16ProofArgs {\n  curve: TransactionObjectInput;\n  preparedVerifyingKey: TransactionObjectInput;\n  publicProofInputs: TransactionObjectInput;\n  proofPoints: TransactionObjectInput;\n}\n\nexport function verifyGroth16Proof(tx: Transaction, args: VerifyGroth16ProofArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::verify_groth16_proof`,\n    arguments: [\n      obj(tx, args.curve),\n      obj(tx, args.preparedVerifyingKey),\n      obj(tx, args.publicProofInputs),\n      obj(tx, args.proofPoints),\n    ],\n  });\n}\n\nexport interface VerifyGroth16ProofInternalArgs {\n  curve: number | TransactionArgument;\n  vkGammaAbcG1Bytes: Array<number | TransactionArgument> | TransactionArgument;\n  alphaG1BetaG2Bytes: Array<number | TransactionArgument> | TransactionArgument;\n  gammaG2NegPcBytes: Array<number | TransactionArgument> | TransactionArgument;\n  deltaG2NegPcBytes: Array<number | TransactionArgument> | TransactionArgument;\n  publicProofInputs: Array<number | TransactionArgument> | TransactionArgument;\n  proofPoints: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function verifyGroth16ProofInternal(tx: Transaction, args: VerifyGroth16ProofInternalArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::groth16::verify_groth16_proof_internal`,\n    arguments: [\n      pure(tx, args.curve, `u8`),\n      pure(tx, args.vkGammaAbcG1Bytes, `vector<u8>`),\n      pure(tx, args.alphaG1BetaG2Bytes, `vector<u8>`),\n      pure(tx, args.gammaG2NegPcBytes, `vector<u8>`),\n      pure(tx, args.deltaG2NegPcBytes, `vector<u8>`),\n      pure(tx, args.publicProofInputs, `vector<u8>`),\n      pure(tx, args.proofPoints, `vector<u8>`),\n    ],\n  });\n}\n"]}