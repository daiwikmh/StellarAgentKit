import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { Bytes32 } from "../bytes32/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isMessage(type: string): boolean;
export interface MessageFields {
    message: ToField<Bytes32>;
}
export type MessageReified = Reified<Message, MessageFields>;
export declare class Message implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly message: ToField<Bytes32>;
    private constructor();
    static reified(): MessageReified;
    static get r(): import("../../_framework/reified").StructClassReified<Message, MessageFields>;
    static phantom(): PhantomReified<ToTypeStr<Message>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        message: {
            data: number[];
        };
    }, {
        message: {
            data: Iterable<number> & {
                length: number;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): Message;
    static fromFieldsWithTypes(item: FieldsWithTypes): Message;
    static fromBcs(data: Uint8Array): Message;
    toJSONField(): {
        message: {
            data: number[];
        };
    };
    toJSON(): {
        message: {
            data: number[];
        };
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): Message;
    static fromJSON(json: Record<string, any>): Message;
    static fromSuiParsedData(content: SuiParsedData): Message;
    static fromSuiObjectData(data: SuiObjectData): Message;
    static fetch(client: SuiClient, id: string): Promise<Message>;
}
