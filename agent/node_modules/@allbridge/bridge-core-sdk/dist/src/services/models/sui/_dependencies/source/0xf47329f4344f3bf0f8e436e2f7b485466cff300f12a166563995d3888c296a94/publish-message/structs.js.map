{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0xf47329f4344f3bf0f8e436e2f7b485466cff300f12a166563995d3888c296a94/publish-message/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  fieldToJSON,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { Vector } from \"../../../../_framework/vector\";\nimport { ID } from \"../../../../sui/object/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== MessageTicket =============================== */\n\nexport function isMessageTicket(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::publish_message::MessageTicket`;\n}\n\nexport interface MessageTicketFields {\n  sender: ToField<ID>;\n  sequence: ToField<\"u64\">;\n  nonce: ToField<\"u32\">;\n  payload: ToField<Vector<\"u8\">>;\n}\n\nexport type MessageTicketReified = Reified<MessageTicket, MessageTicketFields>;\n\nexport class MessageTicket implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::publish_message::MessageTicket`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = MessageTicket.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = MessageTicket.$isPhantom;\n\n  readonly sender: ToField<ID>;\n  readonly sequence: ToField<\"u64\">;\n  readonly nonce: ToField<\"u32\">;\n  readonly payload: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: MessageTicketFields) {\n    this.$fullTypeName = composeSuiType(MessageTicket.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.sender = fields.sender;\n    this.sequence = fields.sequence;\n    this.nonce = fields.nonce;\n    this.payload = fields.payload;\n  }\n\n  static reified(): MessageTicketReified {\n    return {\n      typeName: MessageTicket.$typeName,\n      fullTypeName: composeSuiType(MessageTicket.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: MessageTicket.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => MessageTicket.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => MessageTicket.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => MessageTicket.fromBcs(data),\n      bcs: MessageTicket.bcs,\n      fromJSONField: (field: any) => MessageTicket.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => MessageTicket.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => MessageTicket.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => MessageTicket.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => MessageTicket.fetch(client, id),\n      new: (fields: MessageTicketFields) => {\n        return new MessageTicket([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return MessageTicket.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<MessageTicket>> {\n    return phantom(MessageTicket.reified());\n  }\n  static get p() {\n    return MessageTicket.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"MessageTicket\", {\n      sender: ID.bcs,\n      sequence: bcs.u64(),\n      nonce: bcs.u32(),\n      payload: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): MessageTicket {\n    return MessageTicket.reified().new({\n      sender: decodeFromFields(ID.reified(), fields.sender),\n      sequence: decodeFromFields(\"u64\", fields.sequence),\n      nonce: decodeFromFields(\"u32\", fields.nonce),\n      payload: decodeFromFields(reified.vector(\"u8\"), fields.payload),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): MessageTicket {\n    if (!isMessageTicket(item.type)) {\n      throw new Error(\"not a MessageTicket type\");\n    }\n\n    return MessageTicket.reified().new({\n      sender: decodeFromFieldsWithTypes(ID.reified(), item.fields.sender),\n      sequence: decodeFromFieldsWithTypes(\"u64\", item.fields.sequence),\n      nonce: decodeFromFieldsWithTypes(\"u32\", item.fields.nonce),\n      payload: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.payload),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): MessageTicket {\n    return MessageTicket.fromFields(MessageTicket.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      sender: this.sender,\n      sequence: this.sequence.toString(),\n      nonce: this.nonce,\n      payload: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.payload),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): MessageTicket {\n    return MessageTicket.reified().new({\n      sender: decodeFromJSONField(ID.reified(), field.sender),\n      sequence: decodeFromJSONField(\"u64\", field.sequence),\n      nonce: decodeFromJSONField(\"u32\", field.nonce),\n      payload: decodeFromJSONField(reified.vector(\"u8\"), field.payload),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): MessageTicket {\n    if (json.$typeName !== MessageTicket.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return MessageTicket.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): MessageTicket {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isMessageTicket(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a MessageTicket object`);\n    }\n    return MessageTicket.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): MessageTicket {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isMessageTicket(data.bcs.type)) {\n        throw new Error(`object at is not a MessageTicket object`);\n      }\n\n      return MessageTicket.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return MessageTicket.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<MessageTicket> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching MessageTicket object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isMessageTicket(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a MessageTicket object`);\n    }\n\n    return MessageTicket.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== WormholeMessage =============================== */\n\nexport function isWormholeMessage(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::publish_message::WormholeMessage`;\n}\n\nexport interface WormholeMessageFields {\n  sender: ToField<ID>;\n  sequence: ToField<\"u64\">;\n  nonce: ToField<\"u32\">;\n  payload: ToField<Vector<\"u8\">>;\n  consistencyLevel: ToField<\"u8\">;\n  timestamp: ToField<\"u64\">;\n}\n\nexport type WormholeMessageReified = Reified<WormholeMessage, WormholeMessageFields>;\n\nexport class WormholeMessage implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::publish_message::WormholeMessage`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = WormholeMessage.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = WormholeMessage.$isPhantom;\n\n  readonly sender: ToField<ID>;\n  readonly sequence: ToField<\"u64\">;\n  readonly nonce: ToField<\"u32\">;\n  readonly payload: ToField<Vector<\"u8\">>;\n  readonly consistencyLevel: ToField<\"u8\">;\n  readonly timestamp: ToField<\"u64\">;\n\n  private constructor(typeArgs: [], fields: WormholeMessageFields) {\n    this.$fullTypeName = composeSuiType(WormholeMessage.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.sender = fields.sender;\n    this.sequence = fields.sequence;\n    this.nonce = fields.nonce;\n    this.payload = fields.payload;\n    this.consistencyLevel = fields.consistencyLevel;\n    this.timestamp = fields.timestamp;\n  }\n\n  static reified(): WormholeMessageReified {\n    return {\n      typeName: WormholeMessage.$typeName,\n      fullTypeName: composeSuiType(WormholeMessage.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: WormholeMessage.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => WormholeMessage.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => WormholeMessage.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => WormholeMessage.fromBcs(data),\n      bcs: WormholeMessage.bcs,\n      fromJSONField: (field: any) => WormholeMessage.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => WormholeMessage.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => WormholeMessage.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => WormholeMessage.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => WormholeMessage.fetch(client, id),\n      new: (fields: WormholeMessageFields) => {\n        return new WormholeMessage([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return WormholeMessage.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<WormholeMessage>> {\n    return phantom(WormholeMessage.reified());\n  }\n  static get p() {\n    return WormholeMessage.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"WormholeMessage\", {\n      sender: ID.bcs,\n      sequence: bcs.u64(),\n      nonce: bcs.u32(),\n      payload: bcs.vector(bcs.u8()),\n      consistency_level: bcs.u8(),\n      timestamp: bcs.u64(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): WormholeMessage {\n    return WormholeMessage.reified().new({\n      sender: decodeFromFields(ID.reified(), fields.sender),\n      sequence: decodeFromFields(\"u64\", fields.sequence),\n      nonce: decodeFromFields(\"u32\", fields.nonce),\n      payload: decodeFromFields(reified.vector(\"u8\"), fields.payload),\n      consistencyLevel: decodeFromFields(\"u8\", fields.consistency_level),\n      timestamp: decodeFromFields(\"u64\", fields.timestamp),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): WormholeMessage {\n    if (!isWormholeMessage(item.type)) {\n      throw new Error(\"not a WormholeMessage type\");\n    }\n\n    return WormholeMessage.reified().new({\n      sender: decodeFromFieldsWithTypes(ID.reified(), item.fields.sender),\n      sequence: decodeFromFieldsWithTypes(\"u64\", item.fields.sequence),\n      nonce: decodeFromFieldsWithTypes(\"u32\", item.fields.nonce),\n      payload: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.payload),\n      consistencyLevel: decodeFromFieldsWithTypes(\"u8\", item.fields.consistency_level),\n      timestamp: decodeFromFieldsWithTypes(\"u64\", item.fields.timestamp),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): WormholeMessage {\n    return WormholeMessage.fromFields(WormholeMessage.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      sender: this.sender,\n      sequence: this.sequence.toString(),\n      nonce: this.nonce,\n      payload: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.payload),\n      consistencyLevel: this.consistencyLevel,\n      timestamp: this.timestamp.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): WormholeMessage {\n    return WormholeMessage.reified().new({\n      sender: decodeFromJSONField(ID.reified(), field.sender),\n      sequence: decodeFromJSONField(\"u64\", field.sequence),\n      nonce: decodeFromJSONField(\"u32\", field.nonce),\n      payload: decodeFromJSONField(reified.vector(\"u8\"), field.payload),\n      consistencyLevel: decodeFromJSONField(\"u8\", field.consistencyLevel),\n      timestamp: decodeFromJSONField(\"u64\", field.timestamp),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): WormholeMessage {\n    if (json.$typeName !== WormholeMessage.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return WormholeMessage.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): WormholeMessage {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isWormholeMessage(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a WormholeMessage object`);\n    }\n    return WormholeMessage.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): WormholeMessage {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isWormholeMessage(data.bcs.type)) {\n        throw new Error(`object at is not a WormholeMessage object`);\n      }\n\n      return WormholeMessage.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return WormholeMessage.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<WormholeMessage> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching WormholeMessage object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isWormholeMessage(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a WormholeMessage object`);\n    }\n\n    return WormholeMessage.fromSuiObjectData(res.data);\n  }\n}\n"]}