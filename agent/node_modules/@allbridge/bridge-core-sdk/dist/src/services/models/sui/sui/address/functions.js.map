{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/address/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument } from \"@mysten/sui/transactions\";\n\nexport function length(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::length`,\n    arguments: [],\n  });\n}\n\nexport function toBytes(tx: Transaction, a: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::to_bytes`,\n    arguments: [pure(tx, a, `address`)],\n  });\n}\n\nexport function fromAsciiBytes(tx: Transaction, bytes: Array<number | TransactionArgument> | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::from_ascii_bytes`,\n    arguments: [pure(tx, bytes, `vector<u8>`)],\n  });\n}\n\nexport function fromBytes(tx: Transaction, bytes: Array<number | TransactionArgument> | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::from_bytes`,\n    arguments: [pure(tx, bytes, `vector<u8>`)],\n  });\n}\n\nexport function fromU256(tx: Transaction, n: bigint | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::from_u256`,\n    arguments: [pure(tx, n, `u256`)],\n  });\n}\n\nexport function hexCharValue(tx: Transaction, c: number | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::hex_char_value`,\n    arguments: [pure(tx, c, `u8`)],\n  });\n}\n\nexport function max(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::max`,\n    arguments: [],\n  });\n}\n\nexport function toAsciiString(tx: Transaction, a: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::to_ascii_string`,\n    arguments: [pure(tx, a, `address`)],\n  });\n}\n\nexport function toString(tx: Transaction, a: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::to_string`,\n    arguments: [pure(tx, a, `address`)],\n  });\n}\n\nexport function toU256(tx: Transaction, a: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::address::to_u256`,\n    arguments: [pure(tx, a, `address`)],\n  });\n}\n"]}