import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isMessengerProtocol(type: string): boolean;
export interface MessengerProtocolFields {
    id: ToField<"u8">;
}
export type MessengerProtocolReified = Reified<MessengerProtocol, MessengerProtocolFields>;
export declare class MessengerProtocol implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<"u8">;
    private constructor();
    static reified(): MessengerProtocolReified;
    static get r(): import("../../_framework/reified").StructClassReified<MessengerProtocol, MessengerProtocolFields>;
    static phantom(): PhantomReified<ToTypeStr<MessengerProtocol>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: number;
    }, {
        id: number;
    }>;
    static fromFields(fields: Record<string, any>): MessengerProtocol;
    static fromFieldsWithTypes(item: FieldsWithTypes): MessengerProtocol;
    static fromBcs(data: Uint8Array): MessengerProtocol;
    toJSONField(): {
        id: number;
    };
    toJSON(): {
        id: number;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): MessengerProtocol;
    static fromJSON(json: Record<string, any>): MessengerProtocol;
    static fromSuiParsedData(content: SuiParsedData): MessengerProtocol;
    static fromSuiObjectData(data: SuiObjectData): MessengerProtocol;
    static fetch(client: SuiClient, id: string): Promise<MessengerProtocol>;
}
