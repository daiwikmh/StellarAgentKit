"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CctpBridge = exports.FeeCollectorCap = exports.AdminCap = void 0;
exports.isAdminCap = isAdminCap;
exports.isFeeCollectorCap = isFeeCollectorCap;
exports.isCctpBridge = isCctpBridge;
// @ts-nocheck
const reified = __importStar(require("../../_framework/reified"));
const reified_1 = require("../../_framework/reified");
const util_1 = require("../../_framework/util");
const structs_1 = require("../../sui/object/structs");
const structs_2 = require("../../sui/table/structs");
const structs_3 = require("../../utils/fee-collector/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== AdminCap =============================== */
function isAdminCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::cctp_bridge::AdminCap`;
}
class AdminCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::cctp_bridge::AdminCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = AdminCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = AdminCap.$isPhantom;
    id;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(AdminCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
    }
    static reified() {
        return {
            typeName: AdminCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(AdminCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: AdminCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => AdminCap.fromFields(fields),
            fromFieldsWithTypes: (item) => AdminCap.fromFieldsWithTypes(item),
            fromBcs: (data) => AdminCap.fromBcs(data),
            bcs: AdminCap.bcs,
            fromJSONField: (field) => AdminCap.fromJSONField(field),
            fromJSON: (json) => AdminCap.fromJSON(json),
            fromSuiParsedData: (content) => AdminCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => AdminCap.fromSuiObjectData(content),
            fetch: async (client, id) => AdminCap.fetch(client, id),
            new: (fields) => {
                return new AdminCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return AdminCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(AdminCap.reified());
    }
    static get p() {
        return AdminCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("AdminCap", {
            id: structs_1.UID.bcs,
        });
    }
    static fromFields(fields) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_1.UID.reified(), fields.id),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isAdminCap(item.type)) {
            throw new Error("not a AdminCap type");
        }
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.UID.reified(), item.fields.id),
        });
    }
    static fromBcs(data) {
        return AdminCap.fromFields(AdminCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_1.UID.reified(), field.id),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== AdminCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return AdminCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isAdminCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a AdminCap object`);
        }
        return AdminCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isAdminCap(data.bcs.type)) {
                throw new Error(`object at is not a AdminCap object`);
            }
            return AdminCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return AdminCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching AdminCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isAdminCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a AdminCap object`);
        }
        return AdminCap.fromSuiObjectData(res.data);
    }
}
exports.AdminCap = AdminCap;
/* ============================== FeeCollectorCap =============================== */
function isFeeCollectorCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::cctp_bridge::FeeCollectorCap`;
}
class FeeCollectorCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::cctp_bridge::FeeCollectorCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = FeeCollectorCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = FeeCollectorCap.$isPhantom;
    dummyField;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(FeeCollectorCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.dummyField = fields.dummyField;
    }
    static reified() {
        return {
            typeName: FeeCollectorCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(FeeCollectorCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: FeeCollectorCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => FeeCollectorCap.fromFields(fields),
            fromFieldsWithTypes: (item) => FeeCollectorCap.fromFieldsWithTypes(item),
            fromBcs: (data) => FeeCollectorCap.fromBcs(data),
            bcs: FeeCollectorCap.bcs,
            fromJSONField: (field) => FeeCollectorCap.fromJSONField(field),
            fromJSON: (json) => FeeCollectorCap.fromJSON(json),
            fromSuiParsedData: (content) => FeeCollectorCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => FeeCollectorCap.fromSuiObjectData(content),
            fetch: async (client, id) => FeeCollectorCap.fetch(client, id),
            new: (fields) => {
                return new FeeCollectorCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return FeeCollectorCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(FeeCollectorCap.reified());
    }
    static get p() {
        return FeeCollectorCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("FeeCollectorCap", {
            dummy_field: bcs_1.bcs.bool(),
        });
    }
    static fromFields(fields) {
        return FeeCollectorCap.reified().new({
            dummyField: (0, reified_1.decodeFromFields)("bool", fields.dummy_field),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isFeeCollectorCap(item.type)) {
            throw new Error("not a FeeCollectorCap type");
        }
        return FeeCollectorCap.reified().new({
            dummyField: (0, reified_1.decodeFromFieldsWithTypes)("bool", item.fields.dummy_field),
        });
    }
    static fromBcs(data) {
        return FeeCollectorCap.fromFields(FeeCollectorCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            dummyField: this.dummyField,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return FeeCollectorCap.reified().new({
            dummyField: (0, reified_1.decodeFromJSONField)("bool", field.dummyField),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== FeeCollectorCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return FeeCollectorCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isFeeCollectorCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a FeeCollectorCap object`);
        }
        return FeeCollectorCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isFeeCollectorCap(data.bcs.type)) {
                throw new Error(`object at is not a FeeCollectorCap object`);
            }
            return FeeCollectorCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return FeeCollectorCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching FeeCollectorCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isFeeCollectorCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a FeeCollectorCap object`);
        }
        return FeeCollectorCap.fromSuiObjectData(res.data);
    }
}
exports.FeeCollectorCap = FeeCollectorCap;
/* ============================== CctpBridge =============================== */
function isCctpBridge(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::cctp_bridge::CctpBridge`;
}
class CctpBridge {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::cctp_bridge::CctpBridge`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = CctpBridge.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = CctpBridge.$isPhantom;
    id;
    chainIdDomainMap;
    senders;
    feeCollector;
    feeCollectorCap;
    adminFeeShareBp;
    gasUsage;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(CctpBridge.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
        this.chainIdDomainMap = fields.chainIdDomainMap;
        this.senders = fields.senders;
        this.feeCollector = fields.feeCollector;
        this.feeCollectorCap = fields.feeCollectorCap;
        this.adminFeeShareBp = fields.adminFeeShareBp;
        this.gasUsage = fields.gasUsage;
    }
    static reified() {
        return {
            typeName: CctpBridge.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(CctpBridge.$typeName, ...[]),
            typeArgs: [],
            isPhantom: CctpBridge.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => CctpBridge.fromFields(fields),
            fromFieldsWithTypes: (item) => CctpBridge.fromFieldsWithTypes(item),
            fromBcs: (data) => CctpBridge.fromBcs(data),
            bcs: CctpBridge.bcs,
            fromJSONField: (field) => CctpBridge.fromJSONField(field),
            fromJSON: (json) => CctpBridge.fromJSON(json),
            fromSuiParsedData: (content) => CctpBridge.fromSuiParsedData(content),
            fromSuiObjectData: (content) => CctpBridge.fromSuiObjectData(content),
            fetch: async (client, id) => CctpBridge.fetch(client, id),
            new: (fields) => {
                return new CctpBridge([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return CctpBridge.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(CctpBridge.reified());
    }
    static get p() {
        return CctpBridge.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("CctpBridge", {
            id: structs_1.UID.bcs,
            chain_id_domain_map: structs_2.Table.bcs,
            senders: structs_2.Table.bcs,
            fee_collector: structs_3.FeeCollector.bcs,
            fee_collector_cap: FeeCollectorCap.bcs,
            admin_fee_share_bp: bcs_1.bcs.u64(),
            gas_usage: structs_2.Table.bcs,
        });
    }
    static fromFields(fields) {
        return CctpBridge.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_1.UID.reified(), fields.id),
            chainIdDomainMap: (0, reified_1.decodeFromFields)(structs_2.Table.reified(reified.phantom("u8"), reified.phantom("u32")), fields.chain_id_domain_map),
            senders: (0, reified_1.decodeFromFields)(structs_2.Table.reified(reified.phantom("u64"), reified.phantom("address")), fields.senders),
            feeCollector: (0, reified_1.decodeFromFields)(structs_3.FeeCollector.reified(reified.phantom(FeeCollectorCap.reified())), fields.fee_collector),
            feeCollectorCap: (0, reified_1.decodeFromFields)(FeeCollectorCap.reified(), fields.fee_collector_cap),
            adminFeeShareBp: (0, reified_1.decodeFromFields)("u64", fields.admin_fee_share_bp),
            gasUsage: (0, reified_1.decodeFromFields)(structs_2.Table.reified(reified.phantom("u8"), reified.phantom("u64")), fields.gas_usage),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isCctpBridge(item.type)) {
            throw new Error("not a CctpBridge type");
        }
        return CctpBridge.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.UID.reified(), item.fields.id),
            chainIdDomainMap: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.Table.reified(reified.phantom("u8"), reified.phantom("u32")), item.fields.chain_id_domain_map),
            senders: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.Table.reified(reified.phantom("u64"), reified.phantom("address")), item.fields.senders),
            feeCollector: (0, reified_1.decodeFromFieldsWithTypes)(structs_3.FeeCollector.reified(reified.phantom(FeeCollectorCap.reified())), item.fields.fee_collector),
            feeCollectorCap: (0, reified_1.decodeFromFieldsWithTypes)(FeeCollectorCap.reified(), item.fields.fee_collector_cap),
            adminFeeShareBp: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.admin_fee_share_bp),
            gasUsage: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.Table.reified(reified.phantom("u8"), reified.phantom("u64")), item.fields.gas_usage),
        });
    }
    static fromBcs(data) {
        return CctpBridge.fromFields(CctpBridge.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
            chainIdDomainMap: this.chainIdDomainMap.toJSONField(),
            senders: this.senders.toJSONField(),
            feeCollector: this.feeCollector.toJSONField(),
            feeCollectorCap: this.feeCollectorCap.toJSONField(),
            adminFeeShareBp: this.adminFeeShareBp.toString(),
            gasUsage: this.gasUsage.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return CctpBridge.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_1.UID.reified(), field.id),
            chainIdDomainMap: (0, reified_1.decodeFromJSONField)(structs_2.Table.reified(reified.phantom("u8"), reified.phantom("u32")), field.chainIdDomainMap),
            senders: (0, reified_1.decodeFromJSONField)(structs_2.Table.reified(reified.phantom("u64"), reified.phantom("address")), field.senders),
            feeCollector: (0, reified_1.decodeFromJSONField)(structs_3.FeeCollector.reified(reified.phantom(FeeCollectorCap.reified())), field.feeCollector),
            feeCollectorCap: (0, reified_1.decodeFromJSONField)(FeeCollectorCap.reified(), field.feeCollectorCap),
            adminFeeShareBp: (0, reified_1.decodeFromJSONField)("u64", field.adminFeeShareBp),
            gasUsage: (0, reified_1.decodeFromJSONField)(structs_2.Table.reified(reified.phantom("u8"), reified.phantom("u64")), field.gasUsage),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== CctpBridge.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return CctpBridge.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isCctpBridge(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a CctpBridge object`);
        }
        return CctpBridge.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isCctpBridge(data.bcs.type)) {
                throw new Error(`object at is not a CctpBridge object`);
            }
            return CctpBridge.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return CctpBridge.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching CctpBridge object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isCctpBridge(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a CctpBridge object`);
        }
        return CctpBridge.fromSuiObjectData(res.data);
    }
}
exports.CctpBridge = CctpBridge;
//# sourceMappingURL=structs.js.map