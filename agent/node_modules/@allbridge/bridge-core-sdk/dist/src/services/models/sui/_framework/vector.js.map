{"version":3,"file":"vector.js","sourceRoot":"","sources":["../../../../../../src/services/models/sui/_framework/vector.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\n\nimport { bcs } from \"@mysten/sui/bcs\";\nimport {\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  Reified,\n  toBcs,\n  ToField,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  VectorClass,\n  VectorClassReified,\n  fieldToJSON,\n} from \"./reified\";\nimport { composeSuiType, FieldsWithTypes } from \"./util\";\n\nexport type VectorElements<T extends TypeArgument> = Array<ToField<T>>;\n\nexport type VectorReified<T extends TypeArgument> = VectorClassReified<Vector<T>, VectorElements<T>>;\n\nexport class Vector<T extends TypeArgument> implements VectorClass {\n  __VectorClass = true as const;\n\n  static readonly $typeName = \"vector\";\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [false] as const;\n\n  readonly $typeName = \"vector\";\n  readonly $fullTypeName: `vector<${ToTypeStr<T>}>`;\n  readonly $typeArgs: [ToTypeStr<T>];\n  readonly $isPhantom = [false] as const;\n\n  readonly elements: Array<ToField<T>>;\n\n  constructor(typeArgs: [ToTypeStr<T>], elements: VectorElements<T>) {\n    this.$fullTypeName = composeSuiType(this.$typeName, ...typeArgs) as `vector<${ToTypeStr<T>}>`;\n    this.$typeArgs = typeArgs;\n\n    this.elements = elements;\n  }\n\n  static reified<T extends Reified<TypeArgument, any>>(T: T): VectorReified<ToTypeArgument<T>> {\n    return {\n      typeName: Vector.$typeName,\n      fullTypeName: composeSuiType(Vector.$typeName, ...[extractType(T)]) as `vector<${ToTypeStr<ToTypeArgument<T>>}>`,\n      typeArgs: [extractType(T)] as [ToTypeStr<ToTypeArgument<T>>],\n      isPhantom: Vector.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (elements: any[]) => Vector.fromFields(T, elements),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Vector.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => Vector.fromBcs(T, data),\n      bcs: Vector.bcs(toBcs(T)),\n      fromJSONField: (field: any) => Vector.fromJSONField(T, field),\n      fromJSON: (json: any) => Vector.fromJSON(T, json),\n      new: (elements: VectorElements<ToTypeArgument<T>>) => {\n        return new Vector([extractType(T)], elements);\n      },\n      kind: \"VectorClassReified\",\n    };\n  }\n\n  static get r() {\n    return Vector.reified;\n  }\n\n  static get bcs() {\n    return bcs.vector;\n  }\n\n  static fromFields<T extends Reified<TypeArgument, any>>(typeArg: T, elements: any[]): Vector<ToTypeArgument<T>> {\n    return Vector.reified(typeArg).new(elements.map((element) => decodeFromFields(typeArg, element)));\n  }\n\n  static fromFieldsWithTypes<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): Vector<ToTypeArgument<T>> {\n    return Vector.reified(typeArg).new(\n      (item as unknown as any[]).map((field: any) => decodeFromFieldsWithTypes(typeArg, field))\n    );\n  }\n\n  static fromBcs<T extends Reified<TypeArgument, any>>(typeArg: T, data: Uint8Array): Vector<ToTypeArgument<T>> {\n    return Vector.fromFields(typeArg, Vector.bcs(toBcs(typeArg)).parse(data));\n  }\n\n  toJSONField() {\n    return this.elements.map((element) => fieldToJSON(this.$typeArgs[0], element));\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      elements: this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends Reified<TypeArgument, any>>(typeArg: T, field: any[]): Vector<ToTypeArgument<T>> {\n    return Vector.reified(typeArg).new(field.map((field) => decodeFromJSONField(typeArg, field)));\n  }\n\n  static fromJSON<T extends Reified<TypeArgument, any>>(typeArg: T, json: any): Vector<ToTypeArgument<T>> {\n    if (json.$typeName !== Vector.$typeName) {\n      throw new Error(\"not a vector json object\");\n    }\n\n    return Vector.fromJSONField(typeArg, json.elements);\n  }\n}\n\nexport function vector<T extends Reified<TypeArgument, any>>(\n  T: T\n): VectorClassReified<Vector<ToTypeArgument<T>>, VectorElements<ToTypeArgument<T>>> {\n  return Vector.r(T);\n}\n"]}