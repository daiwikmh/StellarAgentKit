{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/wormhole-messenger/wh-messenger-interface/functions.ts"],"names":[],"mappings":";;AAUA,0BAKC;AAED,0CAKC;AAOD,kCAKC;AAED,4CAKC;AASD,gDAUC;AAQD,kCAKC;AASD,wCAUC;AASD,8DAUC;AAYD,kCAaC;AASD,kCAUC;AAQD,wCAKC;AAQD,kEAKC;AAQD,kCAKC;AAOD,gDAKC;AAOD,0CAKC;AA1ND,cAAc;AACd,0BAAkC;AAClC,gDAAkD;AAQlD,SAAgB,OAAO,CAAC,EAAe,EAAE,IAAiB;IACxD,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;KACrE,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,eAAe,CAAC,EAAe,EAAE,SAAiC;IAChF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,6CAA6C;QACpE,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,SAAS,CAAC,CAAC;KAChC,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,WAAW,CAAC,EAAe,EAAE,IAAqB;IAChE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,yCAAyC;QAChE,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KACnE,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,gBAAgB,CAAC,EAAe,EAAE,SAAiC;IACjF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+CAA+C;QACtE,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,SAAS,CAAC,CAAC;KAChC,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,kBAAkB,CAAC,EAAe,EAAE,IAA4B;IAC9E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,gDAAgD;QACvE,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC;YAC3B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC;SAC7B;KACF,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,WAAW,CAAC,EAAe,EAAE,IAAqB;IAChE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,wCAAwC;QAC/D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;KAC5F,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,cAAc,CAAC,EAAe,EAAE,IAAwB;IACtE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,2CAA2C;QAClE,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC;YACzB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,YAAY,CAAC;YACvC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC;YAC3B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC;SACvB;KACF,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,yBAAyB,CAAC,EAAe,EAAE,IAAmC;IAC5F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,uDAAuD;QAC9E,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC;YACzB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC;YAC7B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;SACxB;KACF,CAAC,CAAC;AACL,CAAC;AAYD,SAAgB,WAAW,CAAC,EAAe,EAAE,IAAqB;IAChE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,wCAAwC;QAC/D,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC;YACzB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC;YAC3B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC;YACrB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC;SACnB;KACF,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,WAAW,CAAC,EAAe,EAAE,IAAqB;IAChE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,yCAAyC;QAChE,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC;YACzB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC;YAC5B,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC;SAChC;KACF,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,cAAc,CAAC,EAAe,EAAE,IAAwB;IACtE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,4CAA4C;QACnE,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;KAC7G,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,2BAA2B,CAAC,EAAe,EAAE,IAAqC;IAChG,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,yDAAyD;QAChF,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KAC9F,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,WAAW,CAAC,EAAe,EAAE,IAAqB;IAChE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,wCAAwC;QAC/D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KAC7F,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,kBAAkB,CAAC,EAAe,EAAE,IAA4B;IAC9E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,gDAAgD;QACvE,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC5D,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,eAAe,CAAC,EAAe,EAAE,IAAyB;IACxE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,6CAA6C;QACpE,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KAC5D,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface MigrateArgs {\n  adminCap: TransactionObjectInput;\n  wormholeMessenger: TransactionObjectInput;\n}\n\nexport function migrate(tx: Transaction, args: MigrateArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::migrate`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.wormholeMessenger)],\n  });\n}\n\nexport function gasBalanceValue(tx: Transaction, messenger: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::gas_balance_value`,\n    arguments: [obj(tx, messenger)],\n  });\n}\n\nexport interface GetGasUsageArgs {\n  messenger: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getGasUsage(tx: Transaction, args: GetGasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::get_gas_usage`,\n    arguments: [obj(tx, args.messenger), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport function getOtherChainIds(tx: Transaction, messenger: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::get_other_chain_ids`,\n    arguments: [obj(tx, messenger)],\n  });\n}\n\nexport interface GetTransactionCostArgs {\n  messenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getTransactionCost(tx: Transaction, args: GetTransactionCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::get_transaction_cost`,\n    arguments: [\n      obj(tx, args.messenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.gasOracle),\n      pure(tx, args.chainId, `u8`),\n    ],\n  });\n}\n\nexport interface InitEmitterArgs {\n  adminCap: TransactionObjectInput;\n  whMessenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n}\n\nexport function initEmitter(tx: Transaction, args: InitEmitterArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::init_emitter`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.whMessenger), obj(tx, args.wormholeState)],\n  });\n}\n\nexport interface ReceiveMessageArgs {\n  whMessenger: TransactionObjectInput;\n  encodedMsg: Array<number | TransactionArgument> | TransactionArgument;\n  wormholeState: TransactionObjectInput;\n  theClock: TransactionObjectInput;\n}\n\nexport function receiveMessage(tx: Transaction, args: ReceiveMessageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::receive_message`,\n    arguments: [\n      obj(tx, args.whMessenger),\n      pure(tx, args.encodedMsg, `vector<u8>`),\n      obj(tx, args.wormholeState),\n      obj(tx, args.theClock),\n    ],\n  });\n}\n\nexport interface RegisterWormholeMessengerArgs {\n  adminCap: TransactionObjectInput;\n  whMessenger: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  whAddress: TransactionObjectInput;\n}\n\nexport function registerWormholeMessenger(tx: Transaction, args: RegisterWormholeMessengerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::register_wormhole_messenger`,\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.whMessenger),\n      pure(tx, args.chainId, `u16`),\n      obj(tx, args.whAddress),\n    ],\n  });\n}\n\nexport interface SendMessageArgs {\n  whMessenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  payload: TransactionObjectInput;\n  sender: TransactionObjectInput;\n  theClock: TransactionObjectInput;\n  coin: TransactionObjectInput;\n}\n\nexport function sendMessage(tx: Transaction, args: SendMessageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::send_message`,\n    arguments: [\n      obj(tx, args.whMessenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.gasOracle),\n      obj(tx, args.payload),\n      obj(tx, args.sender),\n      obj(tx, args.theClock),\n      obj(tx, args.coin),\n    ],\n  });\n}\n\nexport interface SetGasUsageArgs {\n  adminCap: TransactionObjectInput;\n  whMessenger: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  gasAmount: bigint | TransactionArgument;\n}\n\nexport function setGasUsage(tx: Transaction, args: SetGasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::set_gas_usage`,\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.whMessenger),\n      pure(tx, args.chainId, `u8`),\n      pure(tx, args.gasAmount, `u64`),\n    ],\n  });\n}\n\nexport interface SetOtherChainsArgs {\n  adminCap: TransactionObjectInput;\n  whMessenger: TransactionObjectInput;\n  otherChainIds: Array<boolean | TransactionArgument> | TransactionArgument;\n}\n\nexport function setOtherChains(tx: Transaction, args: SetOtherChainsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::set_other_chains`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.whMessenger), pure(tx, args.otherChainIds, `vector<bool>`)],\n  });\n}\n\nexport interface UnregisterWormholeMessengerArgs {\n  adminCap: TransactionObjectInput;\n  whMessenger: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function unregisterWormholeMessenger(tx: Transaction, args: UnregisterWormholeMessengerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::unregister_wormhole_messenger`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.whMessenger), pure(tx, args.chainId, `u16`)],\n  });\n}\n\nexport interface WithdrawFeeArgs {\n  adminCap: TransactionObjectInput;\n  whMessenger: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function withdrawFee(tx: Transaction, args: WithdrawFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::withdraw_fee`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.whMessenger), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport interface HasReceivedMessageArgs {\n  messenger: TransactionObjectInput;\n  message: TransactionObjectInput;\n}\n\nexport function hasReceivedMessage(tx: Transaction, args: HasReceivedMessageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::has_received_message`,\n    arguments: [obj(tx, args.messenger), obj(tx, args.message)],\n  });\n}\n\nexport interface HasSentMessagesArgs {\n  messenger: TransactionObjectInput;\n  message: TransactionObjectInput;\n}\n\nexport function hasSentMessages(tx: Transaction, args: HasSentMessagesArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wh_messenger_interface::has_sent_messages`,\n    arguments: [obj(tx, args.messenger), obj(tx, args.message)],\n  });\n}\n"]}