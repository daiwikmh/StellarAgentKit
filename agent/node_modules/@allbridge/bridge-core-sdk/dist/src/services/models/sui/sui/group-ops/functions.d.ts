import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export interface AddArgs {
    type: number | TransactionArgument;
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function add(tx: Transaction, typeArg: string, args: AddArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface DivArgs {
    type: number | TransactionArgument;
    scalar: TransactionObjectInput;
    e: TransactionObjectInput;
}
export declare function div(tx: Transaction, typeArgs: [string, string], args: DivArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface MulArgs {
    type: number | TransactionArgument;
    scalar: TransactionObjectInput;
    e: TransactionObjectInput;
}
export declare function mul(tx: Transaction, typeArgs: [string, string], args: MulArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SubArgs {
    type: number | TransactionArgument;
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function sub(tx: Transaction, typeArg: string, args: SubArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function bytes(tx: Transaction, typeArg: string, e: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface FromBytesArgs {
    type: number | TransactionArgument;
    bytes: Array<number | TransactionArgument> | TransactionArgument;
    isTrusted: boolean | TransactionArgument;
}
export declare function fromBytes(tx: Transaction, typeArg: string, args: FromBytesArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalAddArgs {
    type: number | TransactionArgument;
    e1: Array<number | TransactionArgument> | TransactionArgument;
    e2: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function internalAdd(tx: Transaction, args: InternalAddArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ConvertArgs {
    fromType: number | TransactionArgument;
    toType: number | TransactionArgument;
    e: TransactionObjectInput;
}
export declare function convert(tx: Transaction, typeArgs: [string, string], args: ConvertArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface EqualArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function equal(tx: Transaction, typeArg: string, args: EqualArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface HashToArgs {
    type: number | TransactionArgument;
    m: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function hashTo(tx: Transaction, typeArg: string, args: HashToArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalConvertArgs {
    fromType: number | TransactionArgument;
    toType: number | TransactionArgument;
    e: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function internalConvert(tx: Transaction, args: InternalConvertArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalDivArgs {
    type: number | TransactionArgument;
    e1: Array<number | TransactionArgument> | TransactionArgument;
    e2: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function internalDiv(tx: Transaction, args: InternalDivArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalHashToArgs {
    type: number | TransactionArgument;
    m: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function internalHashTo(tx: Transaction, args: InternalHashToArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalMulArgs {
    type: number | TransactionArgument;
    e1: Array<number | TransactionArgument> | TransactionArgument;
    e2: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function internalMul(tx: Transaction, args: InternalMulArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalMultiScalarMulArgs {
    type: number | TransactionArgument;
    scalars: Array<number | TransactionArgument> | TransactionArgument;
    elements: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function internalMultiScalarMul(tx: Transaction, args: InternalMultiScalarMulArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalPairingArgs {
    type: number | TransactionArgument;
    e1: Array<number | TransactionArgument> | TransactionArgument;
    e2: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function internalPairing(tx: Transaction, args: InternalPairingArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalSubArgs {
    type: number | TransactionArgument;
    e1: Array<number | TransactionArgument> | TransactionArgument;
    e2: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function internalSub(tx: Transaction, args: InternalSubArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalSumArgs {
    type: number | TransactionArgument;
    e: Array<Array<number | TransactionArgument> | TransactionArgument> | TransactionArgument;
}
export declare function internalSum(tx: Transaction, args: InternalSumArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InternalValidateArgs {
    type: number | TransactionArgument;
    bytes: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function internalValidate(tx: Transaction, args: InternalValidateArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface MultiScalarMultiplicationArgs {
    type: number | TransactionArgument;
    scalars: Array<TransactionObjectInput> | TransactionArgument;
    elements: Array<TransactionObjectInput> | TransactionArgument;
}
export declare function multiScalarMultiplication(tx: Transaction, typeArgs: [string, string], args: MultiScalarMultiplicationArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface PairingArgs {
    type: number | TransactionArgument;
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function pairing(tx: Transaction, typeArgs: [string, string, string], args: PairingArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetAsPrefixArgs {
    x: bigint | TransactionArgument;
    bigEndian: boolean | TransactionArgument;
    buffer: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function setAsPrefix(tx: Transaction, args: SetAsPrefixArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SumArgs {
    type: number | TransactionArgument;
    terms: Array<TransactionObjectInput> | TransactionArgument;
}
export declare function sum(tx: Transaction, typeArg: string, args: SumArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
