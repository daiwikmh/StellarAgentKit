import { PhantomReified, PhantomToTypeStr, PhantomTypeArgument, Reified, StructClass, ToField, ToPhantomTypeArgument, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { Balance } from "../../sui/balance/structs";
import { UID } from "../../sui/object/structs";
import { PoolRewards } from "../pool-rewards/structs";
import { PoolState } from "../pool-state/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isAdminCap(type: string): boolean;
export interface AdminCapFields {
    id: ToField<UID>;
}
export type AdminCapReified = Reified<AdminCap, AdminCapFields>;
export declare class AdminCap implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    private constructor();
    static reified(): AdminCapReified;
    static get r(): import("../../_framework/reified").StructClassReified<AdminCap, AdminCapFields>;
    static phantom(): PhantomReified<ToTypeStr<AdminCap>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): AdminCap;
    static fromFieldsWithTypes(item: FieldsWithTypes): AdminCap;
    static fromBcs(data: Uint8Array): AdminCap;
    toJSONField(): {
        id: UID;
    };
    toJSON(): {
        id: UID;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): AdminCap;
    static fromJSON(json: Record<string, any>): AdminCap;
    static fromSuiParsedData(content: SuiParsedData): AdminCap;
    static fromSuiObjectData(data: SuiObjectData): AdminCap;
    static fetch(client: SuiClient, id: string): Promise<AdminCap>;
}
export declare function isPool(type: string): boolean;
export interface PoolFields<T extends PhantomTypeArgument> {
    id: ToField<UID>;
    state: ToField<PoolState<T>>;
    rewards: ToField<PoolRewards<T>>;
    feeShareBp: ToField<"u64">;
    canDeposit: ToField<"bool">;
    canWithdraw: ToField<"bool">;
    decimals: ToField<"u8">;
    balance: ToField<Balance<T>>;
}
export type PoolReified<T extends PhantomTypeArgument> = Reified<Pool<T>, PoolFields<T>>;
export declare class Pool<T extends PhantomTypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [true];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [PhantomToTypeStr<T>];
    readonly $isPhantom: readonly [true];
    readonly id: ToField<UID>;
    readonly state: ToField<PoolState<T>>;
    readonly rewards: ToField<PoolRewards<T>>;
    readonly feeShareBp: ToField<"u64">;
    readonly canDeposit: ToField<"bool">;
    readonly canWithdraw: ToField<"bool">;
    readonly decimals: ToField<"u8">;
    readonly balance: ToField<Balance<T>>;
    private constructor();
    static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): PoolReified<ToPhantomTypeArgument<T>>;
    static get r(): typeof Pool.reified;
    static phantom<T extends PhantomReified<PhantomTypeArgument>>(T: T): PhantomReified<ToTypeStr<Pool<ToPhantomTypeArgument<T>>>>;
    static get p(): typeof Pool.phantom;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
        state: {
            token_balance: string;
            vusd_balance: string;
            d: string;
            a: string;
            balance_ratio_min_bp: string;
        };
        rewards: {
            acc_reward_per_share_p: string;
            admin_fee_share_bp: string;
            admin_fee: {
                value: string;
            };
            rewards: {
                value: string;
            };
            lp_supply: string;
        };
        fee_share_bp: string;
        can_deposit: boolean;
        can_withdraw: boolean;
        decimals: number;
        balance: {
            value: string;
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
        state: {
            token_balance: string | number | bigint;
            vusd_balance: string | number | bigint;
            d: string | number | bigint;
            a: string | number | bigint;
            balance_ratio_min_bp: string | number | bigint;
        };
        rewards: {
            acc_reward_per_share_p: string | number | bigint;
            admin_fee_share_bp: string | number | bigint;
            admin_fee: {
                value: string | number | bigint;
            };
            rewards: {
                value: string | number | bigint;
            };
            lp_supply: string | number | bigint;
        };
        fee_share_bp: string | number | bigint;
        can_deposit: boolean;
        can_withdraw: boolean;
        decimals: number;
        balance: {
            value: string | number | bigint;
        };
    }>;
    static fromFields<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, fields: Record<string, any>): Pool<ToPhantomTypeArgument<T>>;
    static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, item: FieldsWithTypes): Pool<ToPhantomTypeArgument<T>>;
    static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: Uint8Array): Pool<ToPhantomTypeArgument<T>>;
    toJSONField(): {
        id: UID;
        state: {
            tokenBalance: string;
            vusdBalance: string;
            d: string;
            a: string;
            balanceRatioMinBp: string;
        };
        rewards: {
            accRewardPerShareP: string;
            adminFeeShareBp: string;
            adminFee: {
                value: string;
            };
            rewards: {
                value: string;
            };
            lpSupply: string;
        };
        feeShareBp: string;
        canDeposit: boolean;
        canWithdraw: boolean;
        decimals: number;
        balance: {
            value: string;
        };
    };
    toJSON(): {
        id: UID;
        state: {
            tokenBalance: string;
            vusdBalance: string;
            d: string;
            a: string;
            balanceRatioMinBp: string;
        };
        rewards: {
            accRewardPerShareP: string;
            adminFeeShareBp: string;
            adminFee: {
                value: string;
            };
            rewards: {
                value: string;
            };
            lpSupply: string;
        };
        feeShareBp: string;
        canDeposit: boolean;
        canWithdraw: boolean;
        decimals: number;
        balance: {
            value: string;
        };
        $typeName: string;
        $typeArgs: [PhantomToTypeStr<T>];
    };
    static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, field: any): Pool<ToPhantomTypeArgument<T>>;
    static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, json: Record<string, any>): Pool<ToPhantomTypeArgument<T>>;
    static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, content: SuiParsedData): Pool<ToPhantomTypeArgument<T>>;
    static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: SuiObjectData): Pool<ToPhantomTypeArgument<T>>;
    static fetch<T extends PhantomReified<PhantomTypeArgument>>(client: SuiClient, typeArg: T, id: string): Promise<Pool<ToPhantomTypeArgument<T>>>;
}
export declare function isStopCap(type: string): boolean;
export interface StopCapFields {
    id: ToField<UID>;
}
export type StopCapReified = Reified<StopCap, StopCapFields>;
export declare class StopCap implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    private constructor();
    static reified(): StopCapReified;
    static get r(): import("../../_framework/reified").StructClassReified<StopCap, StopCapFields>;
    static phantom(): PhantomReified<ToTypeStr<StopCap>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): StopCap;
    static fromFieldsWithTypes(item: FieldsWithTypes): StopCap;
    static fromBcs(data: Uint8Array): StopCap;
    toJSONField(): {
        id: UID;
    };
    toJSON(): {
        id: UID;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): StopCap;
    static fromJSON(json: Record<string, any>): StopCap;
    static fromSuiParsedData(content: SuiParsedData): StopCap;
    static fromSuiObjectData(data: SuiObjectData): StopCap;
    static fetch(client: SuiClient, id: string): Promise<StopCap>;
}
