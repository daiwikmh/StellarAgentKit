{"version":3,"file":"gas-oracle-contract.js","sourceRoot":"","sources":["../../../../../src/services/models/srb/gas-oracle-contract.ts"],"names":[],"mappings":"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","sourcesContent":["import { contract } from \"@stellar/stellar-sdk\";\nimport u128 = contract.u128;\nimport u32 = contract.u32;\nimport AssembledTransaction = contract.AssembledTransaction;\nimport Result = contract.Result;\nimport Option = contract.Option;\nimport ContractSpec = contract.Spec;\nimport ContractClient = contract.Client;\nimport ContractClientOptions = contract.ClientOptions;\n\nexport interface ChainData {\n  gas_price: u128;\n  price: u128;\n}\n\nexport type Admin = readonly [string];\nexport type GasOracleAddress = readonly [string];\nexport type GasUsage = readonly [Map<u32, u128>];\nexport type NativeToken = readonly [string];\nexport type StopAuthority = readonly [string];\nexport const Errors = {\n  0: { message: \"\" },\n  1: { message: \"\" },\n  2: { message: \"\" },\n  3: { message: \"\" },\n  4: { message: \"\" },\n  5: { message: \"\" },\n  6: { message: \"\" },\n  7: { message: \"\" },\n  8: { message: \"\" },\n  9: { message: \"\" },\n  10: { message: \"\" },\n  11: { message: \"\" },\n  12: { message: \"\" },\n  103: { message: \"\" },\n  104: { message: \"\" },\n  105: { message: \"\" },\n  106: { message: \"\" },\n  107: { message: \"\" },\n  108: { message: \"\" },\n  109: { message: \"\" },\n  203: { message: \"\" },\n  204: { message: \"\" },\n  205: { message: \"\" },\n  206: { message: \"\" },\n  207: { message: \"\" },\n  208: { message: \"\" },\n  209: { message: \"\" },\n  210: { message: \"\" },\n  211: { message: \"\" },\n  212: { message: \"\" },\n  214: { message: \"\" },\n  215: { message: \"\" },\n  216: { message: \"\" },\n  217: { message: \"\" },\n  218: { message: \"\" },\n  300: { message: \"\" },\n  301: { message: \"\" },\n  302: { message: \"\" },\n  303: { message: \"\" },\n  400: { message: \"\" },\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport interface GasOracleContract {\n  /**\n   * Construct and simulate a initialize transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  initialize: (\n    { admin }: { admin: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_price transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_price: (\n    {\n      chain_id,\n      price,\n      gas_price,\n    }: {\n      chain_id: u32;\n      price: Option<u128>;\n      gas_price: Option<u128>;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_admin: (\n    { new_admin }: { new_admin: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a get_gas_price transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_gas_price: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<ChainData>>>;\n\n  /**\n   * Construct and simulate a get_price transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_price: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_gas_cost_in_native_token transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_gas_cost_in_native_token: (\n    { other_chain_id, gas_amount }: { other_chain_id: u32; gas_amount: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_transaction_gas_cost_in_usd transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_transaction_gas_cost_in_usd: (\n    { other_chain_id, gas_amount }: { other_chain_id: u32; gas_amount: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a crossrate transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  crossrate: (\n    { other_chain_id }: { other_chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_admin: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a upgrade transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  upgrade: (\n    { new_wasm_hash }: { new_wasm_hash: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class GasOracleContract extends ContractClient {\n  constructor(public readonly options: ContractClientOptions) {\n    super(\n      new ContractSpec([\n        \"AAAAAAAAAAAAAAAKaW5pdGlhbGl6ZQAAAAAAAQAAAAAAAAAFYWRtaW4AAAAAAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAJc2V0X3ByaWNlAAAAAAAAAwAAAAAAAAAIY2hhaW5faWQAAAAEAAAAAAAAAAVwcmljZQAAAAAAA+gAAAAKAAAAAAAAAAlnYXNfcHJpY2UAAAAAAAPoAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAJc2V0X2FkbWluAAAAAAAAAQAAAAAAAAAJbmV3X2FkbWluAAAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAANZ2V0X2dhc19wcmljZQAAAAAAAAEAAAAAAAAACGNoYWluX2lkAAAABAAAAAEAAAPpAAAH0AAAAAlDaGFpbkRhdGEAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAJZ2V0X3ByaWNlAAAAAAAAAQAAAAAAAAAIY2hhaW5faWQAAAAEAAAAAQAAA+kAAAAKAAAAAw==\",\n        \"AAAAAAAAAAAAAAAcZ2V0X2dhc19jb3N0X2luX25hdGl2ZV90b2tlbgAAAAIAAAAAAAAADm90aGVyX2NoYWluX2lkAAAAAAAEAAAAAAAAAApnYXNfYW1vdW50AAAAAAAKAAAAAQAAA+kAAAAKAAAAAw==\",\n        \"AAAAAAAAAAAAAAAfZ2V0X3RyYW5zYWN0aW9uX2dhc19jb3N0X2luX3VzZAAAAAACAAAAAAAAAA5vdGhlcl9jaGFpbl9pZAAAAAAABAAAAAAAAAAKZ2FzX2Ftb3VudAAAAAAACgAAAAEAAAPpAAAACgAAAAM=\",\n        \"AAAAAAAAAAAAAAAJY3Jvc3NyYXRlAAAAAAAAAQAAAAAAAAAOb3RoZXJfY2hhaW5faWQAAAAAAAQAAAABAAAD6QAAAAoAAAAD\",\n        \"AAAAAAAAAAAAAAAJZ2V0X2FkbWluAAAAAAAAAAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAAHdXBncmFkZQAAAAABAAAAAAAAAA1uZXdfd2FzbV9oYXNoAAAAAAAD7gAAACAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAQAAAAAAAAAAAAAACUNoYWluRGF0YQAAAAAAAAIAAAAAAAAACWdhc19wcmljZQAAAAAAAAoAAAAAAAAABXByaWNlAAAAAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAABUFkbWluAAAAAAAAAQAAAAAAAAABMAAAAAAAABM=\",\n        \"AAAAAQAAAAAAAAAAAAAAEEdhc09yYWNsZUFkZHJlc3MAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAACEdhc1VzYWdlAAAAAQAAAAAAAAABMAAAAAAAA+wAAAAEAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAC05hdGl2ZVRva2VuAAAAAAEAAAAAAAAAATAAAAAAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAADVN0b3BBdXRob3JpdHkAAAAAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAABAAAAAAAAAAAAAAABUVycm9yAAAAAAAAKAAAAAAAAAANVW5pbXBsZW1lbnRlZAAAAAAAAAAAAAAAAAAAC0luaXRpYWxpemVkAAAAAAEAAAAAAAAADVVuaW5pdGlhbGl6ZWQAAAAAAAACAAAAAAAAAAxVbmF1dGhvcml6ZWQAAAADAAAAAAAAAApJbnZhbGlkQXJnAAAAAAAEAAAAAAAAAA5JbnZhbGlkQ2hhaW5JZAAAAAAABQAAAAAAAAATSW52YWxpZE90aGVyQ2hhaW5JZAAAAAAGAAAAAAAAAA5HYXNVc2FnZU5vdFNldAAAAAAABwAAAAAAAAANQnJva2VuQWRkcmVzcwAAAAAAAAgAAAAAAAAACE5vdEZvdW5kAAAACQAAAAAAAAAYVG9rZW5JbnN1ZmZpY2llbnRCYWxhbmNlAAAACgAAAAAAAAAKQ2FzdEZhaWxlZAAAAAAACwAAAAAAAAAMVTI1Nk92ZXJmbG93AAAADAAAAAAAAAAKWmVyb0Ftb3VudAAAAAAAZwAAAAAAAAAMUG9vbE92ZXJmbG93AAAAaAAAAAAAAAALWmVyb0NoYW5nZXMAAAAAaQAAAAAAAAARUmVzZXJ2ZXNFeGhhdXN0ZWQAAAAAAABqAAAAAAAAABpJbnN1ZmZpY2llbnRSZWNlaXZlZEFtb3VudAAAAAAAawAAAAAAAAAUQmFsYW5jZVJhdGlvRXhjZWVkZWQAAABsAAAAAAAAAAlGb3JiaWRkZW4AAAAAAABtAAAAAAAAABlVbmF1dGhvcml6ZWRTdG9wQXV0aG9yaXR5AAAAAAAAywAAAAAAAAAOU3dhcFByb2hpYml0ZWQAAAAAAMwAAAAAAAAAEkFtb3VudFRvb0xvd0ZvckZlZQAAAAAAzQAAAAAAAAAWQnJpZGdlVG9UaGVaZXJvQWRkcmVzcwAAAAAAzgAAAAAAAAAORW1wdHlSZWNpcGllbnQAAAAAAM8AAAAAAAAAE1NvdXJjZU5vdFJlZ2lzdGVyZWQAAAAA0AAAAAAAAAAVV3JvbmdEZXN0aW5hdGlvbkNoYWluAAAAAAAA0QAAAAAAAAATVW5rbm93bkFub3RoZXJDaGFpbgAAAADSAAAAAAAAABFUb2tlbnNBbHJlYWR5U2VudAAAAAAAANMAAAAAAAAAEE1lc3NhZ2VQcm9jZXNzZWQAAADUAAAAAAAAAAxOb3RFbm91Z2hGZWUAAADWAAAAAAAAAAlOb01lc3NhZ2UAAAAAAADXAAAAAAAAAA1Ob1JlY2VpdmVQb29sAAAAAAAA2AAAAAAAAAAGTm9Qb29sAAAAAADZAAAAAAAAABNVbmtub3duQW5vdGhlclRva2VuAAAAANoAAAAAAAAAD1dyb25nQnl0ZUxlbmd0aAAAAAEsAAAAAAAAAApIYXNNZXNzYWdlAAAAAAEtAAAAAAAAABdJbnZhbGlkUHJpbWFyeVNpZ25hdHVyZQAAAAEuAAAAAAAAABlJbnZhbGlkU2Vjb25kYXJ5U2lnbmF0dXJlAAAAAAABLwAAAAAAAAARTm9HYXNEYXRhRm9yQ2hhaW4AAAAAAAGQ\",\n      ]),\n      options\n    );\n  }\n\n  public readonly fromJSON = {\n    initialize: this.txFromJSON<Result<void>>,\n    set_price: this.txFromJSON<Result<void>>,\n    set_admin: this.txFromJSON<Result<void>>,\n    get_gas_price: this.txFromJSON<Result<ChainData>>,\n    get_price: this.txFromJSON<Result<u128>>,\n    get_gas_cost_in_native_token: this.txFromJSON<Result<u128>>,\n    get_transaction_gas_cost_in_usd: this.txFromJSON<Result<u128>>,\n    crossrate: this.txFromJSON<Result<u128>>,\n    get_admin: this.txFromJSON<Result<string>>,\n    upgrade: this.txFromJSON<Result<void>>,\n  };\n}\n"]}