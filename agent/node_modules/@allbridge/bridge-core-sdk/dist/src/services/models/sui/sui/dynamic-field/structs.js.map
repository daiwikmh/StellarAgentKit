{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/dynamic-field/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  fieldToJSON,\n  phantom,\n  toBcs,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { UID } from \"../object/structs\";\nimport { BcsType, bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Field =============================== */\n\nexport function isField(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::dynamic_field::Field` + \"<\");\n}\n\nexport interface FieldFields<Name extends TypeArgument, Value extends TypeArgument> {\n  id: ToField<UID>;\n  name: ToField<Name>;\n  value: ToField<Value>;\n}\n\nexport type FieldReified<Name extends TypeArgument, Value extends TypeArgument> = Reified<\n  Field<Name, Value>,\n  FieldFields<Name, Value>\n>;\n\nexport class Field<Name extends TypeArgument, Value extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::dynamic_field::Field`;\n  }\n  static readonly $numTypeParams = 2;\n  static readonly $isPhantom = [false, false] as const;\n\n  readonly $typeName = Field.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<Name>, ToTypeStr<Value>];\n  readonly $isPhantom = Field.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly name: ToField<Name>;\n  readonly value: ToField<Value>;\n\n  private constructor(typeArgs: [ToTypeStr<Name>, ToTypeStr<Value>], fields: FieldFields<Name, Value>) {\n    this.$fullTypeName = composeSuiType(Field.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.name = fields.name;\n    this.value = fields.value;\n  }\n\n  static reified<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    Name: Name,\n    Value: Value\n  ): FieldReified<ToTypeArgument<Name>, ToTypeArgument<Value>> {\n    return {\n      typeName: Field.$typeName,\n      fullTypeName: composeSuiType(Field.$typeName, ...[extractType(Name), extractType(Value)]) as string,\n      typeArgs: [extractType(Name), extractType(Value)] as [\n        ToTypeStr<ToTypeArgument<Name>>,\n        ToTypeStr<ToTypeArgument<Value>>,\n      ],\n      isPhantom: Field.$isPhantom,\n      reifiedTypeArgs: [Name, Value],\n      fromFields: (fields: Record<string, any>) => Field.fromFields([Name, Value], fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Field.fromFieldsWithTypes([Name, Value], item),\n      fromBcs: (data: Uint8Array) => Field.fromBcs([Name, Value], data),\n      bcs: Field.bcs(toBcs(Name), toBcs(Value)),\n      fromJSONField: (field: any) => Field.fromJSONField([Name, Value], field),\n      fromJSON: (json: Record<string, any>) => Field.fromJSON([Name, Value], json),\n      fromSuiParsedData: (content: SuiParsedData) => Field.fromSuiParsedData([Name, Value], content),\n      fromSuiObjectData: (content: SuiObjectData) => Field.fromSuiObjectData([Name, Value], content),\n      fetch: async (client: SuiClient, id: string) => Field.fetch(client, [Name, Value], id),\n      new: (fields: FieldFields<ToTypeArgument<Name>, ToTypeArgument<Value>>) => {\n        return new Field([extractType(Name), extractType(Value)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Field.reified;\n  }\n\n  static phantom<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    Name: Name,\n    Value: Value\n  ): PhantomReified<ToTypeStr<Field<ToTypeArgument<Name>, ToTypeArgument<Value>>>> {\n    return phantom(Field.reified(Name, Value));\n  }\n  static get p() {\n    return Field.phantom;\n  }\n\n  static get bcs() {\n    return <Name extends BcsType<any>, Value extends BcsType<any>>(Name: Name, Value: Value) =>\n      bcs.struct(`Field<${Name.name}, ${Value.name}>`, {\n        id: UID.bcs,\n        name: Name,\n        value: Value,\n      });\n  }\n\n  static fromFields<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    typeArgs: [Name, Value],\n    fields: Record<string, any>\n  ): Field<ToTypeArgument<Name>, ToTypeArgument<Value>> {\n    return Field.reified(typeArgs[0], typeArgs[1]).new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      name: decodeFromFields(typeArgs[0], fields.name),\n      value: decodeFromFields(typeArgs[1], fields.value),\n    });\n  }\n\n  static fromFieldsWithTypes<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    typeArgs: [Name, Value],\n    item: FieldsWithTypes\n  ): Field<ToTypeArgument<Name>, ToTypeArgument<Value>> {\n    if (!isField(item.type)) {\n      throw new Error(\"not a Field type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, typeArgs);\n\n    return Field.reified(typeArgs[0], typeArgs[1]).new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      name: decodeFromFieldsWithTypes(typeArgs[0], item.fields.name),\n      value: decodeFromFieldsWithTypes(typeArgs[1], item.fields.value),\n    });\n  }\n\n  static fromBcs<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    typeArgs: [Name, Value],\n    data: Uint8Array\n  ): Field<ToTypeArgument<Name>, ToTypeArgument<Value>> {\n    return Field.fromFields(typeArgs, Field.bcs(toBcs(typeArgs[0]), toBcs(typeArgs[1])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      name: fieldToJSON<Name>(this.$typeArgs[0], this.name),\n      value: fieldToJSON<Value>(this.$typeArgs[1], this.value),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    typeArgs: [Name, Value],\n    field: any\n  ): Field<ToTypeArgument<Name>, ToTypeArgument<Value>> {\n    return Field.reified(typeArgs[0], typeArgs[1]).new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      name: decodeFromJSONField(typeArgs[0], field.name),\n      value: decodeFromJSONField(typeArgs[1], field.value),\n    });\n  }\n\n  static fromJSON<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    typeArgs: [Name, Value],\n    json: Record<string, any>\n  ): Field<ToTypeArgument<Name>, ToTypeArgument<Value>> {\n    if (json.$typeName !== Field.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Field.$typeName, ...typeArgs.map(extractType)), json.$typeArgs, typeArgs);\n\n    return Field.fromJSONField(typeArgs, json);\n  }\n\n  static fromSuiParsedData<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    typeArgs: [Name, Value],\n    content: SuiParsedData\n  ): Field<ToTypeArgument<Name>, ToTypeArgument<Value>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isField(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Field object`);\n    }\n    return Field.fromFieldsWithTypes(typeArgs, content);\n  }\n\n  static fromSuiObjectData<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    typeArgs: [Name, Value],\n    data: SuiObjectData\n  ): Field<ToTypeArgument<Name>, ToTypeArgument<Value>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isField(data.bcs.type)) {\n        throw new Error(`object at is not a Field object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 2) {\n        throw new Error(`type argument mismatch: expected 2 type arguments but got ${gotTypeArgs.length}`);\n      }\n      for (let i = 0; i < 2; i++) {\n        const gotTypeArg = compressSuiType(gotTypeArgs[i]);\n        const expectedTypeArg = compressSuiType(extractType(typeArgs[i]));\n        if (gotTypeArg !== expectedTypeArg) {\n          throw new Error(\n            `type argument mismatch at position ${i}: expected '${expectedTypeArg}' but got '${gotTypeArg}'`\n          );\n        }\n      }\n\n      return Field.fromBcs(typeArgs, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Field.fromSuiParsedData(typeArgs, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<Name extends Reified<TypeArgument, any>, Value extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArgs: [Name, Value],\n    id: string\n  ): Promise<Field<ToTypeArgument<Name>, ToTypeArgument<Value>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Field object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isField(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Field object`);\n    }\n\n    return Field.fromSuiObjectData(typeArgs, res.data);\n  }\n}\n"]}