"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default_ = default_;
exports.new_ = new_;
exports.uid = uid;
exports.withdraw = withdraw;
exports.addReceipt = addReceipt;
exports.addRule = addRule;
exports.addToBalance = addToBalance;
exports.confirmRequest = confirmRequest;
exports.destroyAndWithdraw = destroyAndWithdraw;
exports.from = from;
exports.getRule = getRule;
exports.hasRule = hasRule;
exports.item = item;
exports.newRequest = newRequest;
exports.paid = paid;
exports.removeRule = removeRule;
exports.rules = rules;
exports.uidMutAsOwner = uidMutAsOwner;
// @ts-nocheck
const __1 = require("..");
const structs_1 = require("../../_dependencies/source/0x1/option/structs");
const util_1 = require("../../_framework/util");
const structs_2 = require("../object/structs");
function default_(tx, typeArg, pub) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::default`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pub)],
    });
}
function new_(tx, typeArg, pub) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::new`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pub)],
    });
}
function uid(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::uid`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function withdraw(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.amount, `${structs_1.Option.$typeName}<u64>`)],
    });
}
function addReceipt(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::add_receipt`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.generic)(tx, `${typeArgs[1]}`, args.rule), (0, util_1.obj)(tx, args.request)],
    });
}
function addRule(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::add_rule`,
        typeArguments: typeArgs,
        arguments: [
            (0, util_1.generic)(tx, `${typeArgs[1]}`, args.rule),
            (0, util_1.obj)(tx, args.policy),
            (0, util_1.obj)(tx, args.cap),
            (0, util_1.generic)(tx, `${typeArgs[2]}`, args.cfg),
        ],
    });
}
function addToBalance(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::add_to_balance`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.generic)(tx, `${typeArgs[1]}`, args.rule), (0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.coin)],
    });
}
function confirmRequest(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::confirm_request`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.request)],
    });
}
function destroyAndWithdraw(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::destroy_and_withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function from(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::from`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function getRule(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::get_rule`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.generic)(tx, `${typeArgs[1]}`, args.rule), (0, util_1.obj)(tx, args.policy)],
    });
}
function hasRule(tx, typeArgs, policy) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::has_rule`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, policy)],
    });
}
function item(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::item`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function newRequest(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::new_request`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.pure)(tx, args.item, `${structs_2.ID.$typeName}`),
            (0, util_1.pure)(tx, args.paid, `u64`),
            (0, util_1.pure)(tx, args.from, `${structs_2.ID.$typeName}`),
        ],
    });
}
function paid(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::paid`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function removeRule(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::remove_rule`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.cap)],
    });
}
function rules(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::rules`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function uidMutAsOwner(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer_policy::uid_mut_as_owner`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
//# sourceMappingURL=functions.js.map