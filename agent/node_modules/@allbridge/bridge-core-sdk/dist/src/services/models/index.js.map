{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/services/models/index.ts"],"names":[],"mappings":";;;AAKA,6BAAsG;AAA/B,sGAAA,eAAe,OAAA","sourcesContent":["import { Transaction as SolanaWeb3Transaction, VersionedTransaction } from \"@solana/web3.js\";\nimport { TronWeb } from \"tronweb\";\nimport { Transaction as TronWebTransaction } from \"tronweb/src/types/Transaction\";\nimport { SolanaTxFee } from \"./sol\";\n\nexport { SolanaTxFee, PricePerUnitInMicroLamports, ExtraFeeInLamports, SolanaAutoTxFee } from \"./sol\";\n\n/**\n * Blockchain fee added to tx\n */\nexport interface TxFeeParams {\n  solana?: SolanaTxFee;\n}\n\n/**\n * The `EssentialWeb3` interface provides the minimum set of Web3 functionalities\n * required by the SDK. It allows any web3-like provider to be used, as long as it\n * matches the signature of these essential methods and properties. This prevents\n * tight coupling to a specific version of the `web3` library.\n */\nexport interface EssentialWeb3 {\n  eth: {\n    getBalance: (address: string) => Promise<any>;\n    estimateGas: (tx: any) => Promise<any>;\n    sendTransaction: (tx: any) => Promise<any>;\n    Contract: new (abi: any, address?: string) => any;\n    BatchRequest: new () => any;\n  };\n}\n\n/**\n * The provider is type that combines connection implementations for different chains.<br/>\n * TIP: None provider in the Solana blockchain case.\n */\nexport type Provider = EssentialWeb3 | TronWeb;\n\n/**\n * The `EssentialWeb3Transaction` interface provides the minimum set of Web3 Transaction\n * returned by the SDK. It allows any web3-like provider to be used, as long as it\n * matches the signature of these essential interface. This prevents\n * tight coupling to a specific version of the `web3` library.\n */\nexport interface EssentialWeb3Transaction {\n  from?: string;\n  to?: string;\n  value?: string;\n  data?: string;\n}\n\nexport type RawTransaction =\n  | RawTronTransaction\n  | RawEvmTransaction\n  | RawSorobanTransaction\n  | RawBridgeSolanaTransaction\n  | RawPoolSolanaTransaction;\nexport type RawEvmTransaction = EssentialWeb3Transaction;\nexport type RawTronTransaction = TronWebTransaction;\nexport type RawSorobanTransaction = string;\nexport type RawPoolSolanaTransaction = SolanaWeb3Transaction;\nexport type RawBridgeSolanaTransaction = VersionedTransaction;\nexport type RawSuiTransaction = string;\n\nexport interface SmartContractMethodParameter {\n  type: string;\n  value: string | number | Buffer;\n}\n\nexport interface TransactionResponse {\n  txId: string;\n}\n"]}