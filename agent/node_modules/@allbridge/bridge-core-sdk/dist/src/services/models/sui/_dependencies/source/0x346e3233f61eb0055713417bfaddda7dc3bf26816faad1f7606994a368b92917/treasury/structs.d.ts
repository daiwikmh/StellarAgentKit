import * as reified from "../../../../_framework/reified";
import { PhantomReified, PhantomToTypeStr, PhantomTypeArgument, Reified, StructClass, ToField, ToPhantomTypeArgument, ToTypeStr, ToTypeStr as ToPhantom } from "../../../../_framework/reified";
import { FieldsWithTypes } from "../../../../_framework/util";
import { ID, UID } from "../../../../sui/object/structs";
import { Table } from "../../../../sui/table/structs";
import { VecSet } from "../../../../sui/vec-set/structs";
import { MintAllowance } from "../mint-allowance/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isBurn(type: string): boolean;
export interface BurnFields<T extends PhantomTypeArgument> {
    mintCap: ToField<ID>;
    amount: ToField<"u64">;
}
export type BurnReified<T extends PhantomTypeArgument> = Reified<Burn<T>, BurnFields<T>>;
export declare class Burn<T extends PhantomTypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [true];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [PhantomToTypeStr<T>];
    readonly $isPhantom: readonly [true];
    readonly mintCap: ToField<ID>;
    readonly amount: ToField<"u64">;
    private constructor();
    static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): BurnReified<ToPhantomTypeArgument<T>>;
    static get r(): typeof Burn.reified;
    static phantom<T extends PhantomReified<PhantomTypeArgument>>(T: T): PhantomReified<ToTypeStr<Burn<ToPhantomTypeArgument<T>>>>;
    static get p(): typeof Burn.phantom;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        mint_cap: {
            bytes: string;
        };
        amount: string;
    }, {
        mint_cap: {
            bytes: string;
        };
        amount: string | number | bigint;
    }>;
    static fromFields<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, fields: Record<string, any>): Burn<ToPhantomTypeArgument<T>>;
    static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, item: FieldsWithTypes): Burn<ToPhantomTypeArgument<T>>;
    static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: Uint8Array): Burn<ToPhantomTypeArgument<T>>;
    toJSONField(): {
        mintCap: ID;
        amount: string;
    };
    toJSON(): {
        mintCap: ID;
        amount: string;
        $typeName: string;
        $typeArgs: [reified.PhantomToTypeStr<T>];
    };
    static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, field: any): Burn<ToPhantomTypeArgument<T>>;
    static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, json: Record<string, any>): Burn<ToPhantomTypeArgument<T>>;
    static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, content: SuiParsedData): Burn<ToPhantomTypeArgument<T>>;
    static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: SuiObjectData): Burn<ToPhantomTypeArgument<T>>;
    static fetch<T extends PhantomReified<PhantomTypeArgument>>(client: SuiClient, typeArg: T, id: string): Promise<Burn<ToPhantomTypeArgument<T>>>;
}
export declare function isMintCap(type: string): boolean;
export interface MintCapFields<T extends PhantomTypeArgument> {
    id: ToField<UID>;
}
export type MintCapReified<T extends PhantomTypeArgument> = Reified<MintCap<T>, MintCapFields<T>>;
export declare class MintCap<T extends PhantomTypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [true];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [PhantomToTypeStr<T>];
    readonly $isPhantom: readonly [true];
    readonly id: ToField<UID>;
    private constructor();
    static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): MintCapReified<ToPhantomTypeArgument<T>>;
    static get r(): typeof MintCap.reified;
    static phantom<T extends PhantomReified<PhantomTypeArgument>>(T: T): PhantomReified<ToTypeStr<MintCap<ToPhantomTypeArgument<T>>>>;
    static get p(): typeof MintCap.phantom;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
    }>;
    static fromFields<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, fields: Record<string, any>): MintCap<ToPhantomTypeArgument<T>>;
    static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, item: FieldsWithTypes): MintCap<ToPhantomTypeArgument<T>>;
    static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: Uint8Array): MintCap<ToPhantomTypeArgument<T>>;
    toJSONField(): {
        id: UID;
    };
    toJSON(): {
        id: UID;
        $typeName: string;
        $typeArgs: [reified.PhantomToTypeStr<T>];
    };
    static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, field: any): MintCap<ToPhantomTypeArgument<T>>;
    static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, json: Record<string, any>): MintCap<ToPhantomTypeArgument<T>>;
    static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, content: SuiParsedData): MintCap<ToPhantomTypeArgument<T>>;
    static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: SuiObjectData): MintCap<ToPhantomTypeArgument<T>>;
    static fetch<T extends PhantomReified<PhantomTypeArgument>>(client: SuiClient, typeArg: T, id: string): Promise<MintCap<ToPhantomTypeArgument<T>>>;
}
export declare function isTreasury(type: string): boolean;
export interface TreasuryFields<T extends PhantomTypeArgument> {
    id: ToField<UID>;
    controllers: ToField<Table<"address", ToPhantom<ID>>>;
    mintAllowances: ToField<Table<ToPhantom<ID>, ToPhantom<MintAllowance<T>>>>;
    compatibleVersions: ToField<VecSet<"u64">>;
}
export type TreasuryReified<T extends PhantomTypeArgument> = Reified<Treasury<T>, TreasuryFields<T>>;
export declare class Treasury<T extends PhantomTypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [true];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [PhantomToTypeStr<T>];
    readonly $isPhantom: readonly [true];
    readonly id: ToField<UID>;
    readonly controllers: ToField<Table<"address", ToPhantom<ID>>>;
    readonly mintAllowances: ToField<Table<ToPhantom<ID>, ToPhantom<MintAllowance<T>>>>;
    readonly compatibleVersions: ToField<VecSet<"u64">>;
    private constructor();
    static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): TreasuryReified<ToPhantomTypeArgument<T>>;
    static get r(): typeof Treasury.reified;
    static phantom<T extends PhantomReified<PhantomTypeArgument>>(T: T): PhantomReified<ToTypeStr<Treasury<ToPhantomTypeArgument<T>>>>;
    static get p(): typeof Treasury.phantom;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
        controllers: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
        mint_allowances: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
        compatible_versions: {
            contents: any[];
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
        controllers: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
        mint_allowances: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
        compatible_versions: {
            contents: Iterable<any> & {
                length: number;
            };
        };
    }>;
    static fromFields<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, fields: Record<string, any>): Treasury<ToPhantomTypeArgument<T>>;
    static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, item: FieldsWithTypes): Treasury<ToPhantomTypeArgument<T>>;
    static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: Uint8Array): Treasury<ToPhantomTypeArgument<T>>;
    toJSONField(): {
        id: UID;
        controllers: {
            id: UID;
            size: string;
        };
        mintAllowances: {
            id: UID;
            size: string;
        };
        compatibleVersions: {
            contents: string[];
        };
    };
    toJSON(): {
        id: UID;
        controllers: {
            id: UID;
            size: string;
        };
        mintAllowances: {
            id: UID;
            size: string;
        };
        compatibleVersions: {
            contents: string[];
        };
        $typeName: string;
        $typeArgs: [reified.PhantomToTypeStr<T>];
    };
    static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, field: any): Treasury<ToPhantomTypeArgument<T>>;
    static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, json: Record<string, any>): Treasury<ToPhantomTypeArgument<T>>;
    static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, content: SuiParsedData): Treasury<ToPhantomTypeArgument<T>>;
    static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: SuiObjectData): Treasury<ToPhantomTypeArgument<T>>;
    static fetch<T extends PhantomReified<PhantomTypeArgument>>(client: SuiClient, typeArg: T, id: string): Promise<Treasury<ToPhantomTypeArgument<T>>>;
}
export declare function isTreasuryCapKey(type: string): boolean;
export interface TreasuryCapKeyFields {
    dummyField: ToField<"bool">;
}
export type TreasuryCapKeyReified = Reified<TreasuryCapKey, TreasuryCapKeyFields>;
export declare class TreasuryCapKey implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly dummyField: ToField<"bool">;
    private constructor();
    static reified(): TreasuryCapKeyReified;
    static get r(): reified.StructClassReified<TreasuryCapKey, TreasuryCapKeyFields>;
    static phantom(): PhantomReified<ToTypeStr<TreasuryCapKey>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        dummy_field: boolean;
    }, {
        dummy_field: boolean;
    }>;
    static fromFields(fields: Record<string, any>): TreasuryCapKey;
    static fromFieldsWithTypes(item: FieldsWithTypes): TreasuryCapKey;
    static fromBcs(data: Uint8Array): TreasuryCapKey;
    toJSONField(): {
        dummyField: boolean;
    };
    toJSON(): {
        dummyField: boolean;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): TreasuryCapKey;
    static fromJSON(json: Record<string, any>): TreasuryCapKey;
    static fromSuiParsedData(content: SuiParsedData): TreasuryCapKey;
    static fromSuiObjectData(data: SuiObjectData): TreasuryCapKey;
    static fetch(client: SuiClient, id: string): Promise<TreasuryCapKey>;
}
