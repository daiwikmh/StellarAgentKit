"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addPerTypeConfig = addPerTypeConfig;
exports.borrowPerTypeConfig = borrowPerTypeConfig;
exports.borrowPerTypeConfigMut = borrowPerTypeConfigMut;
exports.create = create;
exports.migrateV1ToV2 = migrateV1ToV2;
exports.perTypeExists = perTypeExists;
exports.perTypeList = perTypeList;
exports.v1Add = v1Add;
exports.v1Contains = v1Contains;
exports.v1PerTypeListAdd = v1PerTypeListAdd;
exports.v1PerTypeListContains = v1PerTypeListContains;
exports.v1PerTypeListRemove = v1PerTypeListRemove;
exports.v1Remove = v1Remove;
exports.v2Add = v2Add;
exports.v2ContainsCurrentEpoch = v2ContainsCurrentEpoch;
exports.v2ContainsNextEpoch = v2ContainsNextEpoch;
exports.v2DisableGlobalPause = v2DisableGlobalPause;
exports.v2EnableGlobalPause = v2EnableGlobalPause;
exports.v2IsGlobalPauseEnabledCurrentEpoch = v2IsGlobalPauseEnabledCurrentEpoch;
exports.v2IsGlobalPauseEnabledNextEpoch = v2IsGlobalPauseEnabledNextEpoch;
exports.v2Remove = v2Remove;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function addPerTypeConfig(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::add_per_type_config`,
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.perTypeIndex, `u64`), (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`)],
    });
}
function borrowPerTypeConfig(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::borrow_per_type_config`,
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.perTypeIndex, `u64`), (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`)],
    });
}
function borrowPerTypeConfigMut(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::borrow_per_type_config_mut`,
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.perTypeIndex, `u64`), (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`)],
    });
}
function create(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::create`,
        arguments: [],
    });
}
function migrateV1ToV2(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::migrate_v1_to_v2`,
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.perTypeIndex, `u64`), (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`)],
    });
}
function perTypeExists(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::per_type_exists`,
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.perTypeIndex, `u64`), (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`)],
    });
}
function perTypeList(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::per_type_list`,
        arguments: [],
    });
}
function v1Add(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v1_add`,
        arguments: [
            (0, util_1.obj)(tx, args.denyList),
            (0, util_1.pure)(tx, args.perTypeIndex, `u64`),
            (0, util_1.pure)(tx, args.type, `vector<u8>`),
            (0, util_1.pure)(tx, args.addr, `address`),
        ],
    });
}
function v1Contains(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v1_contains`,
        arguments: [
            (0, util_1.obj)(tx, args.denyList),
            (0, util_1.pure)(tx, args.perTypeIndex, `u64`),
            (0, util_1.pure)(tx, args.type, `vector<u8>`),
            (0, util_1.pure)(tx, args.addr, `address`),
        ],
    });
}
function v1PerTypeListAdd(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v1_per_type_list_add`,
        arguments: [(0, util_1.obj)(tx, args.list), (0, util_1.pure)(tx, args.type, `vector<u8>`), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function v1PerTypeListContains(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v1_per_type_list_contains`,
        arguments: [(0, util_1.obj)(tx, args.list), (0, util_1.pure)(tx, args.type, `vector<u8>`), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function v1PerTypeListRemove(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v1_per_type_list_remove`,
        arguments: [(0, util_1.obj)(tx, args.list), (0, util_1.pure)(tx, args.type, `vector<u8>`), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function v1Remove(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v1_remove`,
        arguments: [
            (0, util_1.obj)(tx, args.denyList),
            (0, util_1.pure)(tx, args.perTypeIndex, `u64`),
            (0, util_1.pure)(tx, args.type, `vector<u8>`),
            (0, util_1.pure)(tx, args.addr, `address`),
        ],
    });
}
function v2Add(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v2_add`,
        arguments: [
            (0, util_1.obj)(tx, args.denyList),
            (0, util_1.pure)(tx, args.perTypeIndex, `u64`),
            (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`),
            (0, util_1.pure)(tx, args.addr, `address`),
        ],
    });
}
function v2ContainsCurrentEpoch(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v2_contains_current_epoch`,
        arguments: [
            (0, util_1.obj)(tx, args.denyList),
            (0, util_1.pure)(tx, args.perTypeIndex, `u64`),
            (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`),
            (0, util_1.pure)(tx, args.addr, `address`),
        ],
    });
}
function v2ContainsNextEpoch(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v2_contains_next_epoch`,
        arguments: [
            (0, util_1.obj)(tx, args.denyList),
            (0, util_1.pure)(tx, args.perTypeIndex, `u64`),
            (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`),
            (0, util_1.pure)(tx, args.addr, `address`),
        ],
    });
}
function v2DisableGlobalPause(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v2_disable_global_pause`,
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.perTypeIndex, `u64`), (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`)],
    });
}
function v2EnableGlobalPause(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v2_enable_global_pause`,
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.perTypeIndex, `u64`), (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`)],
    });
}
function v2IsGlobalPauseEnabledCurrentEpoch(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v2_is_global_pause_enabled_current_epoch`,
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.perTypeIndex, `u64`), (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`)],
    });
}
function v2IsGlobalPauseEnabledNextEpoch(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v2_is_global_pause_enabled_next_epoch`,
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.perTypeIndex, `u64`), (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`)],
    });
}
function v2Remove(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::deny_list::v2_remove`,
        arguments: [
            (0, util_1.obj)(tx, args.denyList),
            (0, util_1.pure)(tx, args.perTypeIndex, `u64`),
            (0, util_1.pure)(tx, args.perTypeKey, `vector<u8>`),
            (0, util_1.pure)(tx, args.addr, `address`),
        ],
    });
}
//# sourceMappingURL=functions.js.map