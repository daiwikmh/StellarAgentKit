import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isMessageTransmitterAuthenticator(type: string): boolean;
export interface MessageTransmitterAuthenticatorFields {
    dummyField: ToField<"bool">;
}
export type MessageTransmitterAuthenticatorReified = Reified<MessageTransmitterAuthenticator, MessageTransmitterAuthenticatorFields>;
export declare class MessageTransmitterAuthenticator implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly dummyField: ToField<"bool">;
    private constructor();
    static reified(): MessageTransmitterAuthenticatorReified;
    static get r(): import("../../_framework/reified").StructClassReified<MessageTransmitterAuthenticator, MessageTransmitterAuthenticatorFields>;
    static phantom(): PhantomReified<ToTypeStr<MessageTransmitterAuthenticator>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        dummy_field: boolean;
    }, {
        dummy_field: boolean;
    }>;
    static fromFields(fields: Record<string, any>): MessageTransmitterAuthenticator;
    static fromFieldsWithTypes(item: FieldsWithTypes): MessageTransmitterAuthenticator;
    static fromBcs(data: Uint8Array): MessageTransmitterAuthenticator;
    toJSONField(): {
        dummyField: boolean;
    };
    toJSON(): {
        dummyField: boolean;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): MessageTransmitterAuthenticator;
    static fromJSON(json: Record<string, any>): MessageTransmitterAuthenticator;
    static fromSuiParsedData(content: SuiParsedData): MessageTransmitterAuthenticator;
    static fromSuiObjectData(data: SuiObjectData): MessageTransmitterAuthenticator;
    static fetch(client: SuiClient, id: string): Promise<MessageTransmitterAuthenticator>;
}
