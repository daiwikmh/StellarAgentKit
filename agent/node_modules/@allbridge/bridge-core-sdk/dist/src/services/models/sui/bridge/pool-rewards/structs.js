"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolRewards = void 0;
exports.isPoolRewards = isPoolRewards;
// @ts-nocheck
const reified_1 = require("../../_framework/reified");
const util_1 = require("../../_framework/util");
const structs_1 = require("../../sui/balance/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== PoolRewards =============================== */
function isPoolRewards(type) {
    type = (0, util_1.compressSuiType)(type);
    return type.startsWith(`${index_1.PKG_V1}::pool_rewards::PoolRewards` + "<");
}
class PoolRewards {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::pool_rewards::PoolRewards`;
    }
    static $numTypeParams = 1;
    static $isPhantom = [true];
    $typeName = PoolRewards.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = PoolRewards.$isPhantom;
    accRewardPerShareP;
    adminFeeShareBp;
    adminFee;
    rewards;
    lpSupply;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(PoolRewards.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.accRewardPerShareP = fields.accRewardPerShareP;
        this.adminFeeShareBp = fields.adminFeeShareBp;
        this.adminFee = fields.adminFee;
        this.rewards = fields.rewards;
        this.lpSupply = fields.lpSupply;
    }
    static reified(T) {
        return {
            typeName: PoolRewards.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(PoolRewards.$typeName, ...[(0, reified_1.extractType)(T)]),
            typeArgs: [(0, reified_1.extractType)(T)],
            isPhantom: PoolRewards.$isPhantom,
            reifiedTypeArgs: [T],
            fromFields: (fields) => PoolRewards.fromFields(T, fields),
            fromFieldsWithTypes: (item) => PoolRewards.fromFieldsWithTypes(T, item),
            fromBcs: (data) => PoolRewards.fromBcs(T, data),
            bcs: PoolRewards.bcs,
            fromJSONField: (field) => PoolRewards.fromJSONField(T, field),
            fromJSON: (json) => PoolRewards.fromJSON(T, json),
            fromSuiParsedData: (content) => PoolRewards.fromSuiParsedData(T, content),
            fromSuiObjectData: (content) => PoolRewards.fromSuiObjectData(T, content),
            fetch: async (client, id) => PoolRewards.fetch(client, T, id),
            new: (fields) => {
                return new PoolRewards([(0, reified_1.extractType)(T)], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return PoolRewards.reified;
    }
    static phantom(T) {
        return (0, reified_1.phantom)(PoolRewards.reified(T));
    }
    static get p() {
        return PoolRewards.phantom;
    }
    static get bcs() {
        return bcs_1.bcs.struct("PoolRewards", {
            acc_reward_per_share_p: bcs_1.bcs.u128(),
            admin_fee_share_bp: bcs_1.bcs.u64(),
            admin_fee: structs_1.Balance.bcs,
            rewards: structs_1.Balance.bcs,
            lp_supply: bcs_1.bcs.u64(),
        });
    }
    static fromFields(typeArg, fields) {
        return PoolRewards.reified(typeArg).new({
            accRewardPerShareP: (0, reified_1.decodeFromFields)("u128", fields.acc_reward_per_share_p),
            adminFeeShareBp: (0, reified_1.decodeFromFields)("u64", fields.admin_fee_share_bp),
            adminFee: (0, reified_1.decodeFromFields)(structs_1.Balance.reified(typeArg), fields.admin_fee),
            rewards: (0, reified_1.decodeFromFields)(structs_1.Balance.reified(typeArg), fields.rewards),
            lpSupply: (0, reified_1.decodeFromFields)("u64", fields.lp_supply),
        });
    }
    static fromFieldsWithTypes(typeArg, item) {
        if (!isPoolRewards(item.type)) {
            throw new Error("not a PoolRewards type");
        }
        (0, reified_1.assertFieldsWithTypesArgsMatch)(item, [typeArg]);
        return PoolRewards.reified(typeArg).new({
            accRewardPerShareP: (0, reified_1.decodeFromFieldsWithTypes)("u128", item.fields.acc_reward_per_share_p),
            adminFeeShareBp: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.admin_fee_share_bp),
            adminFee: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.Balance.reified(typeArg), item.fields.admin_fee),
            rewards: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.Balance.reified(typeArg), item.fields.rewards),
            lpSupply: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.lp_supply),
        });
    }
    static fromBcs(typeArg, data) {
        return PoolRewards.fromFields(typeArg, PoolRewards.bcs.parse(data));
    }
    toJSONField() {
        return {
            accRewardPerShareP: this.accRewardPerShareP.toString(),
            adminFeeShareBp: this.adminFeeShareBp.toString(),
            adminFee: this.adminFee.toJSONField(),
            rewards: this.rewards.toJSONField(),
            lpSupply: this.lpSupply.toString(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(typeArg, field) {
        return PoolRewards.reified(typeArg).new({
            accRewardPerShareP: (0, reified_1.decodeFromJSONField)("u128", field.accRewardPerShareP),
            adminFeeShareBp: (0, reified_1.decodeFromJSONField)("u64", field.adminFeeShareBp),
            adminFee: (0, reified_1.decodeFromJSONField)(structs_1.Balance.reified(typeArg), field.adminFee),
            rewards: (0, reified_1.decodeFromJSONField)(structs_1.Balance.reified(typeArg), field.rewards),
            lpSupply: (0, reified_1.decodeFromJSONField)("u64", field.lpSupply),
        });
    }
    static fromJSON(typeArg, json) {
        if (json.$typeName !== PoolRewards.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        (0, reified_1.assertReifiedTypeArgsMatch)((0, util_1.composeSuiType)(PoolRewards.$typeName, (0, reified_1.extractType)(typeArg)), json.$typeArgs, [typeArg]);
        return PoolRewards.fromJSONField(typeArg, json);
    }
    static fromSuiParsedData(typeArg, content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isPoolRewards(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a PoolRewards object`);
        }
        return PoolRewards.fromFieldsWithTypes(typeArg, content);
    }
    static fromSuiObjectData(typeArg, data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isPoolRewards(data.bcs.type)) {
                throw new Error(`object at is not a PoolRewards object`);
            }
            const gotTypeArgs = (0, util_1.parseTypeName)(data.bcs.type).typeArgs;
            if (gotTypeArgs.length !== 1) {
                throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);
            }
            const gotTypeArg = (0, util_1.compressSuiType)(gotTypeArgs[0]);
            const expectedTypeArg = (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg));
            if (gotTypeArg !== (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg))) {
                throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);
            }
            return PoolRewards.fromBcs(typeArg, (0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return PoolRewards.fromSuiParsedData(typeArg, data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, typeArg, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching PoolRewards object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isPoolRewards(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a PoolRewards object`);
        }
        return PoolRewards.fromSuiObjectData(typeArg, res.data);
    }
}
exports.PoolRewards = PoolRewards;
//# sourceMappingURL=structs.js.map