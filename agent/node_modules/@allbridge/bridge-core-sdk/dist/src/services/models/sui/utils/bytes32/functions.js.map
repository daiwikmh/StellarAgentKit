{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/utils/bytes32/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { String } from \"../../_dependencies/source/0x1/ascii/structs\";\nimport { String as String1 } from \"../../_dependencies/source/0x1/string/structs\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { ID } from \"../../sui/object/structs\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function isZero(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::is_zero`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function data(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::data`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function empty(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::empty`,\n    arguments: [],\n  });\n}\n\nexport function new_(tx: Transaction, data: Array<number | TransactionArgument> | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::new`,\n    arguments: [pure(tx, data, `vector<u8>`)],\n  });\n}\n\nexport function fromAddress(tx: Transaction, a: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_address`,\n    arguments: [pure(tx, a, `address`)],\n  });\n}\n\nexport function fromAsciiHex(tx: Transaction, value: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_ascii_hex`,\n    arguments: [pure(tx, value, `${String.$typeName}`)],\n  });\n}\n\nexport function fromHex(tx: Transaction, value: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_hex`,\n    arguments: [pure(tx, value, `${String1.$typeName}`)],\n  });\n}\n\nexport function fromId(tx: Transaction, id: string | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_id`,\n    arguments: [pure(tx, id, `${ID.$typeName}`)],\n  });\n}\n\nexport function fromUid(tx: Transaction, id: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::from_uid`,\n    arguments: [obj(tx, id)],\n  });\n}\n\nexport function newFromPartial(\n  tx: Transaction,\n  partialData: Array<number | TransactionArgument> | TransactionArgument\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::new_from_partial`,\n    arguments: [pure(tx, partialData, `vector<u8>`)],\n  });\n}\n\nexport function toAddress(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::to_address`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function toAsciiHex(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::to_ascii_hex`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function toHex(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::to_hex`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n\nexport function toId(tx: Transaction, bytes: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bytes32::to_id`,\n    arguments: [obj(tx, bytes)],\n  });\n}\n"]}