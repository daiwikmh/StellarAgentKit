"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bridge = bridge;
exports.getId = getId;
exports.getVersion = getVersion;
exports.init = init;
exports.migrate = migrate;
exports.getTransactionCost = getTransactionCost;
exports.setGasUsage = setGasUsage;
exports.withdrawFee = withdrawFee;
exports.gasUsage = gasUsage;
exports.feeValue = feeValue;
exports.receiveTokens = receiveTokens;
exports.changeRecipient = changeRecipient;
exports.deserializeNonce = deserializeNonce;
exports.getBridgingCostInTokens = getBridgingCostInTokens;
exports.getDomainByChainId = getDomainByChainId;
exports.isMessageProcessed = isMessageProcessed;
exports.registerBridgeDestination = registerBridgeDestination;
exports.setAdminFeeShare = setAdminFeeShare;
exports.unregisterBridgeDestination = unregisterBridgeDestination;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function bridge(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::bridge`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.cctpBridge),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.obj)(tx, args.tokenMessengerMinterState),
            (0, util_1.obj)(tx, args.messageTransmitterState),
            (0, util_1.obj)(tx, args.treasury),
            (0, util_1.obj)(tx, args.denyList),
            (0, util_1.obj)(tx, args.amount),
            (0, util_1.obj)(tx, args.feeSuiCoin),
            (0, util_1.obj)(tx, args.feeTokenCoin),
            (0, util_1.pure)(tx, args.destinationChainId, `u8`),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.obj)(tx, args.recipientWalletAddress),
        ],
    });
}
function getId(tx, cctpBridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::get_id`,
        arguments: [(0, util_1.obj)(tx, cctpBridge)],
    });
}
function getVersion(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::get_version`,
        arguments: [],
    });
}
function init(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::init`,
        arguments: [],
    });
}
function migrate(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::migrate`,
        arguments: [(0, util_1.obj)(tx, args.admin), (0, util_1.obj)(tx, args.cctpBridge)],
    });
}
function getTransactionCost(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::get_transaction_cost`,
        arguments: [(0, util_1.obj)(tx, args.cctpBridge), (0, util_1.obj)(tx, args.gasOracle), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function setGasUsage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::set_gas_usage`,
        arguments: [(0, util_1.obj)(tx, args.cctpBridge), (0, util_1.pure)(tx, args.chainId, `u8`), (0, util_1.pure)(tx, args.value, `u64`)],
    });
}
function withdrawFee(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::withdraw_fee`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.cctpBridge), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function gasUsage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::gas_usage`,
        arguments: [(0, util_1.obj)(tx, args.cctpBridge), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function feeValue(tx, typeArg, cctpBridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::fee_value`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, cctpBridge)],
    });
}
function receiveTokens(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::receive_tokens`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.tokenMessengerMinterState),
            (0, util_1.obj)(tx, args.messageTransmitterState),
            (0, util_1.obj)(tx, args.denyList),
            (0, util_1.obj)(tx, args.treasury),
            (0, util_1.pure)(tx, args.recipient, `address`),
            (0, util_1.pure)(tx, args.message, `vector<u8>`),
            (0, util_1.pure)(tx, args.signature, `vector<u8>`),
            (0, util_1.obj)(tx, args.extraGasCoin),
        ],
    });
}
function changeRecipient(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::change_recipient`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.cctpBridge),
            (0, util_1.pure)(tx, args.originalMessage, `vector<u8>`),
            (0, util_1.pure)(tx, args.originalAttestation, `vector<u8>`),
            (0, util_1.obj)(tx, args.newRecipient),
            (0, util_1.obj)(tx, args.tokenMessengerMinterState),
            (0, util_1.obj)(tx, args.messageTransmitterState),
        ],
    });
}
function deserializeNonce(tx, data) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::deserialize_nonce`,
        arguments: [(0, util_1.pure)(tx, data, `vector<u8>`)],
    });
}
function getBridgingCostInTokens(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::get_bridging_cost_in_tokens`,
        arguments: [(0, util_1.obj)(tx, args.cctpBridge), (0, util_1.obj)(tx, args.gasOracle), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function getDomainByChainId(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::get_domain_by_chain_id`,
        arguments: [(0, util_1.obj)(tx, args.cctpBridge), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function isMessageProcessed(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::is_message_processed`,
        arguments: [
            (0, util_1.obj)(tx, args.cctpBridge),
            (0, util_1.obj)(tx, args.messageTransmitterState),
            (0, util_1.pure)(tx, args.sourceChainId, `u8`),
            (0, util_1.pure)(tx, args.nonce, `u64`),
        ],
    });
}
function registerBridgeDestination(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::register_bridge_destination`,
        arguments: [(0, util_1.obj)(tx, args.cctpBridge), (0, util_1.pure)(tx, args.chainId, `u8`), (0, util_1.pure)(tx, args.domain, `u32`)],
    });
}
function setAdminFeeShare(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::set_admin_fee_share`,
        arguments: [(0, util_1.obj)(tx, args.cctpBridge), (0, util_1.pure)(tx, args.adminFeeShareBp, `u64`)],
    });
}
function unregisterBridgeDestination(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::cctp_bridge::unregister_bridge_destination`,
        arguments: [(0, util_1.obj)(tx, args.cctpBridge), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
//# sourceMappingURL=functions.js.map