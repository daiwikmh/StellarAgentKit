"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmitterCreated = exports.EmitterCap = void 0;
exports.isEmitterCap = isEmitterCap;
exports.isEmitterCreated = isEmitterCreated;
// @ts-nocheck
const reified_1 = require("../../../../_framework/reified");
const util_1 = require("../../../../_framework/util");
const structs_1 = require("../../../../sui/object/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== EmitterCap =============================== */
function isEmitterCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::emitter::EmitterCap`;
}
class EmitterCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::emitter::EmitterCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = EmitterCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = EmitterCap.$isPhantom;
    id;
    sequence;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(EmitterCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
        this.sequence = fields.sequence;
    }
    static reified() {
        return {
            typeName: EmitterCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(EmitterCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: EmitterCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => EmitterCap.fromFields(fields),
            fromFieldsWithTypes: (item) => EmitterCap.fromFieldsWithTypes(item),
            fromBcs: (data) => EmitterCap.fromBcs(data),
            bcs: EmitterCap.bcs,
            fromJSONField: (field) => EmitterCap.fromJSONField(field),
            fromJSON: (json) => EmitterCap.fromJSON(json),
            fromSuiParsedData: (content) => EmitterCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => EmitterCap.fromSuiObjectData(content),
            fetch: async (client, id) => EmitterCap.fetch(client, id),
            new: (fields) => {
                return new EmitterCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return EmitterCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(EmitterCap.reified());
    }
    static get p() {
        return EmitterCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("EmitterCap", {
            id: structs_1.UID.bcs,
            sequence: bcs_1.bcs.u64(),
        });
    }
    static fromFields(fields) {
        return EmitterCap.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_1.UID.reified(), fields.id),
            sequence: (0, reified_1.decodeFromFields)("u64", fields.sequence),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isEmitterCap(item.type)) {
            throw new Error("not a EmitterCap type");
        }
        return EmitterCap.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.UID.reified(), item.fields.id),
            sequence: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.sequence),
        });
    }
    static fromBcs(data) {
        return EmitterCap.fromFields(EmitterCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
            sequence: this.sequence.toString(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return EmitterCap.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_1.UID.reified(), field.id),
            sequence: (0, reified_1.decodeFromJSONField)("u64", field.sequence),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== EmitterCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return EmitterCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isEmitterCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a EmitterCap object`);
        }
        return EmitterCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isEmitterCap(data.bcs.type)) {
                throw new Error(`object at is not a EmitterCap object`);
            }
            return EmitterCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return EmitterCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching EmitterCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isEmitterCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a EmitterCap object`);
        }
        return EmitterCap.fromSuiObjectData(res.data);
    }
}
exports.EmitterCap = EmitterCap;
/* ============================== EmitterCreated =============================== */
function isEmitterCreated(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::emitter::EmitterCreated`;
}
class EmitterCreated {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::emitter::EmitterCreated`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = EmitterCreated.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = EmitterCreated.$isPhantom;
    emitterCap;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(EmitterCreated.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.emitterCap = fields.emitterCap;
    }
    static reified() {
        return {
            typeName: EmitterCreated.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(EmitterCreated.$typeName, ...[]),
            typeArgs: [],
            isPhantom: EmitterCreated.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => EmitterCreated.fromFields(fields),
            fromFieldsWithTypes: (item) => EmitterCreated.fromFieldsWithTypes(item),
            fromBcs: (data) => EmitterCreated.fromBcs(data),
            bcs: EmitterCreated.bcs,
            fromJSONField: (field) => EmitterCreated.fromJSONField(field),
            fromJSON: (json) => EmitterCreated.fromJSON(json),
            fromSuiParsedData: (content) => EmitterCreated.fromSuiParsedData(content),
            fromSuiObjectData: (content) => EmitterCreated.fromSuiObjectData(content),
            fetch: async (client, id) => EmitterCreated.fetch(client, id),
            new: (fields) => {
                return new EmitterCreated([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return EmitterCreated.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(EmitterCreated.reified());
    }
    static get p() {
        return EmitterCreated.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("EmitterCreated", {
            emitter_cap: structs_1.ID.bcs,
        });
    }
    static fromFields(fields) {
        return EmitterCreated.reified().new({
            emitterCap: (0, reified_1.decodeFromFields)(structs_1.ID.reified(), fields.emitter_cap),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isEmitterCreated(item.type)) {
            throw new Error("not a EmitterCreated type");
        }
        return EmitterCreated.reified().new({
            emitterCap: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.ID.reified(), item.fields.emitter_cap),
        });
    }
    static fromBcs(data) {
        return EmitterCreated.fromFields(EmitterCreated.bcs.parse(data));
    }
    toJSONField() {
        return {
            emitterCap: this.emitterCap,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return EmitterCreated.reified().new({
            emitterCap: (0, reified_1.decodeFromJSONField)(structs_1.ID.reified(), field.emitterCap),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== EmitterCreated.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return EmitterCreated.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isEmitterCreated(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a EmitterCreated object`);
        }
        return EmitterCreated.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isEmitterCreated(data.bcs.type)) {
                throw new Error(`object at is not a EmitterCreated object`);
            }
            return EmitterCreated.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return EmitterCreated.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching EmitterCreated object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isEmitterCreated(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a EmitterCreated object`);
        }
        return EmitterCreated.fromSuiObjectData(res.data);
    }
}
exports.EmitterCreated = EmitterCreated;
//# sourceMappingURL=structs.js.map