{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/wormhole-messenger/wormhole-messenger/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport { Option } from \"../../_dependencies/source/0x1/option/structs\";\nimport { EmitterCap } from \"../../_dependencies/source/0xf47329f4344f3bf0f8e436e2f7b485466cff300f12a166563995d3888c296a94/emitter/structs\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  fieldToJSON,\n  phantom,\n  ToTypeStr as ToPhantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { Vector } from \"../../_framework/vector\";\nimport { Balance } from \"../../sui/balance/structs\";\nimport { UID } from \"../../sui/object/structs\";\nimport { SUI } from \"../../sui/sui/structs\";\nimport { Table } from \"../../sui/table/structs\";\nimport { Bytes32 } from \"../../utils/bytes32/structs\";\nimport { Message } from \"../../utils/message/structs\";\nimport { Set } from \"../../utils/set/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== AdminCap =============================== */\n\nexport function isAdminCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::wormhole_messenger::AdminCap`;\n}\n\nexport interface AdminCapFields {\n  id: ToField<UID>;\n}\n\nexport type AdminCapReified = Reified<AdminCap, AdminCapFields>;\n\nexport class AdminCap implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::wormhole_messenger::AdminCap`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = AdminCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = AdminCap.$isPhantom;\n\n  readonly id: ToField<UID>;\n\n  private constructor(typeArgs: [], fields: AdminCapFields) {\n    this.$fullTypeName = composeSuiType(AdminCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified(): AdminCapReified {\n    return {\n      typeName: AdminCap.$typeName,\n      fullTypeName: composeSuiType(AdminCap.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: AdminCap.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => AdminCap.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => AdminCap.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => AdminCap.fromBcs(data),\n      bcs: AdminCap.bcs,\n      fromJSONField: (field: any) => AdminCap.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => AdminCap.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => AdminCap.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => AdminCap.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => AdminCap.fetch(client, id),\n      new: (fields: AdminCapFields) => {\n        return new AdminCap([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return AdminCap.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<AdminCap>> {\n    return phantom(AdminCap.reified());\n  }\n  static get p() {\n    return AdminCap.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"AdminCap\", {\n      id: UID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): AdminCap {\n    return AdminCap.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): AdminCap {\n    if (!isAdminCap(item.type)) {\n      throw new Error(\"not a AdminCap type\");\n    }\n\n    return AdminCap.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): AdminCap {\n    return AdminCap.fromFields(AdminCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): AdminCap {\n    return AdminCap.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): AdminCap {\n    if (json.$typeName !== AdminCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return AdminCap.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): AdminCap {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isAdminCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a AdminCap object`);\n    }\n    return AdminCap.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): AdminCap {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isAdminCap(data.bcs.type)) {\n        throw new Error(`object at is not a AdminCap object`);\n      }\n\n      return AdminCap.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return AdminCap.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<AdminCap> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching AdminCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isAdminCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a AdminCap object`);\n    }\n\n    return AdminCap.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== WormholeMessenger =============================== */\n\nexport function isWormholeMessenger(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::wormhole_messenger::WormholeMessenger`;\n}\n\nexport interface WormholeMessengerFields {\n  id: ToField<UID>;\n  emitterCap: ToField<Option<EmitterCap>>;\n  receivedMessages: ToField<Set<ToPhantom<Message>>>;\n  sentMessages: ToField<Set<ToPhantom<Message>>>;\n  otherWormholeMessengers: ToField<Table<\"u16\", ToPhantom<Bytes32>>>;\n  otherChainIds: ToField<Vector<\"bool\">>;\n  gasUsage: ToField<Table<\"u8\", \"u64\">>;\n  gasBalance: ToField<Balance<ToPhantom<SUI>>>;\n}\n\nexport type WormholeMessengerReified = Reified<WormholeMessenger, WormholeMessengerFields>;\n\nexport class WormholeMessenger implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::wormhole_messenger::WormholeMessenger`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = WormholeMessenger.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = WormholeMessenger.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly emitterCap: ToField<Option<EmitterCap>>;\n  readonly receivedMessages: ToField<Set<ToPhantom<Message>>>;\n  readonly sentMessages: ToField<Set<ToPhantom<Message>>>;\n  readonly otherWormholeMessengers: ToField<Table<\"u16\", ToPhantom<Bytes32>>>;\n  readonly otherChainIds: ToField<Vector<\"bool\">>;\n  readonly gasUsage: ToField<Table<\"u8\", \"u64\">>;\n  readonly gasBalance: ToField<Balance<ToPhantom<SUI>>>;\n\n  private constructor(typeArgs: [], fields: WormholeMessengerFields) {\n    this.$fullTypeName = composeSuiType(WormholeMessenger.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.emitterCap = fields.emitterCap;\n    this.receivedMessages = fields.receivedMessages;\n    this.sentMessages = fields.sentMessages;\n    this.otherWormholeMessengers = fields.otherWormholeMessengers;\n    this.otherChainIds = fields.otherChainIds;\n    this.gasUsage = fields.gasUsage;\n    this.gasBalance = fields.gasBalance;\n  }\n\n  static reified(): WormholeMessengerReified {\n    return {\n      typeName: WormholeMessenger.$typeName,\n      fullTypeName: composeSuiType(WormholeMessenger.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: WormholeMessenger.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => WormholeMessenger.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => WormholeMessenger.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => WormholeMessenger.fromBcs(data),\n      bcs: WormholeMessenger.bcs,\n      fromJSONField: (field: any) => WormholeMessenger.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => WormholeMessenger.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => WormholeMessenger.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => WormholeMessenger.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => WormholeMessenger.fetch(client, id),\n      new: (fields: WormholeMessengerFields) => {\n        return new WormholeMessenger([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return WormholeMessenger.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<WormholeMessenger>> {\n    return phantom(WormholeMessenger.reified());\n  }\n  static get p() {\n    return WormholeMessenger.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"WormholeMessenger\", {\n      id: UID.bcs,\n      emitter_cap: Option.bcs(EmitterCap.bcs),\n      received_messages: Set.bcs,\n      sent_messages: Set.bcs,\n      other_wormhole_messengers: Table.bcs,\n      other_chain_ids: bcs.vector(bcs.bool()),\n      gas_usage: Table.bcs,\n      gas_balance: Balance.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): WormholeMessenger {\n    return WormholeMessenger.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      emitterCap: decodeFromFields(Option.reified(EmitterCap.reified()), fields.emitter_cap),\n      receivedMessages: decodeFromFields(Set.reified(reified.phantom(Message.reified())), fields.received_messages),\n      sentMessages: decodeFromFields(Set.reified(reified.phantom(Message.reified())), fields.sent_messages),\n      otherWormholeMessengers: decodeFromFields(\n        Table.reified(reified.phantom(\"u16\"), reified.phantom(Bytes32.reified())),\n        fields.other_wormhole_messengers\n      ),\n      otherChainIds: decodeFromFields(reified.vector(\"bool\"), fields.other_chain_ids),\n      gasUsage: decodeFromFields(Table.reified(reified.phantom(\"u8\"), reified.phantom(\"u64\")), fields.gas_usage),\n      gasBalance: decodeFromFields(Balance.reified(reified.phantom(SUI.reified())), fields.gas_balance),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): WormholeMessenger {\n    if (!isWormholeMessenger(item.type)) {\n      throw new Error(\"not a WormholeMessenger type\");\n    }\n\n    return WormholeMessenger.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      emitterCap: decodeFromFieldsWithTypes(Option.reified(EmitterCap.reified()), item.fields.emitter_cap),\n      receivedMessages: decodeFromFieldsWithTypes(\n        Set.reified(reified.phantom(Message.reified())),\n        item.fields.received_messages\n      ),\n      sentMessages: decodeFromFieldsWithTypes(\n        Set.reified(reified.phantom(Message.reified())),\n        item.fields.sent_messages\n      ),\n      otherWormholeMessengers: decodeFromFieldsWithTypes(\n        Table.reified(reified.phantom(\"u16\"), reified.phantom(Bytes32.reified())),\n        item.fields.other_wormhole_messengers\n      ),\n      otherChainIds: decodeFromFieldsWithTypes(reified.vector(\"bool\"), item.fields.other_chain_ids),\n      gasUsage: decodeFromFieldsWithTypes(\n        Table.reified(reified.phantom(\"u8\"), reified.phantom(\"u64\")),\n        item.fields.gas_usage\n      ),\n      gasBalance: decodeFromFieldsWithTypes(Balance.reified(reified.phantom(SUI.reified())), item.fields.gas_balance),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): WormholeMessenger {\n    return WormholeMessenger.fromFields(WormholeMessenger.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      emitterCap: fieldToJSON<Option<EmitterCap>>(`${Option.$typeName}<${EmitterCap.$typeName}>`, this.emitterCap),\n      receivedMessages: this.receivedMessages.toJSONField(),\n      sentMessages: this.sentMessages.toJSONField(),\n      otherWormholeMessengers: this.otherWormholeMessengers.toJSONField(),\n      otherChainIds: fieldToJSON<Vector<\"bool\">>(`vector<bool>`, this.otherChainIds),\n      gasUsage: this.gasUsage.toJSONField(),\n      gasBalance: this.gasBalance.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): WormholeMessenger {\n    return WormholeMessenger.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      emitterCap: decodeFromJSONField(Option.reified(EmitterCap.reified()), field.emitterCap),\n      receivedMessages: decodeFromJSONField(Set.reified(reified.phantom(Message.reified())), field.receivedMessages),\n      sentMessages: decodeFromJSONField(Set.reified(reified.phantom(Message.reified())), field.sentMessages),\n      otherWormholeMessengers: decodeFromJSONField(\n        Table.reified(reified.phantom(\"u16\"), reified.phantom(Bytes32.reified())),\n        field.otherWormholeMessengers\n      ),\n      otherChainIds: decodeFromJSONField(reified.vector(\"bool\"), field.otherChainIds),\n      gasUsage: decodeFromJSONField(Table.reified(reified.phantom(\"u8\"), reified.phantom(\"u64\")), field.gasUsage),\n      gasBalance: decodeFromJSONField(Balance.reified(reified.phantom(SUI.reified())), field.gasBalance),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): WormholeMessenger {\n    if (json.$typeName !== WormholeMessenger.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return WormholeMessenger.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): WormholeMessenger {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isWormholeMessenger(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a WormholeMessenger object`);\n    }\n    return WormholeMessenger.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): WormholeMessenger {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isWormholeMessenger(data.bcs.type)) {\n        throw new Error(`object at is not a WormholeMessenger object`);\n      }\n\n      return WormholeMessenger.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return WormholeMessenger.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<WormholeMessenger> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching WormholeMessenger object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isWormholeMessenger(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a WormholeMessenger object`);\n    }\n\n    return WormholeMessenger.fromSuiObjectData(res.data);\n  }\n}\n"]}