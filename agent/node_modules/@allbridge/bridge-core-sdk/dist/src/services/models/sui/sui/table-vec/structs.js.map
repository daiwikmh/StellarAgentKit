{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/table-vec/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { Table } from \"../table/structs\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== TableVec =============================== */\n\nexport function isTableVec(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::table_vec::TableVec` + \"<\");\n}\n\nexport interface TableVecFields<Element extends PhantomTypeArgument> {\n  contents: ToField<Table<\"u64\", Element>>;\n}\n\nexport type TableVecReified<Element extends PhantomTypeArgument> = Reified<TableVec<Element>, TableVecFields<Element>>;\n\nexport class TableVec<Element extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::table_vec::TableVec`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = TableVec.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<Element>];\n  readonly $isPhantom = TableVec.$isPhantom;\n\n  readonly contents: ToField<Table<\"u64\", Element>>;\n\n  private constructor(typeArgs: [PhantomToTypeStr<Element>], fields: TableVecFields<Element>) {\n    this.$fullTypeName = composeSuiType(TableVec.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.contents = fields.contents;\n  }\n\n  static reified<Element extends PhantomReified<PhantomTypeArgument>>(\n    Element: Element\n  ): TableVecReified<ToPhantomTypeArgument<Element>> {\n    return {\n      typeName: TableVec.$typeName,\n      fullTypeName: composeSuiType(TableVec.$typeName, ...[extractType(Element)]) as string,\n      typeArgs: [extractType(Element)] as [PhantomToTypeStr<ToPhantomTypeArgument<Element>>],\n      isPhantom: TableVec.$isPhantom,\n      reifiedTypeArgs: [Element],\n      fromFields: (fields: Record<string, any>) => TableVec.fromFields(Element, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => TableVec.fromFieldsWithTypes(Element, item),\n      fromBcs: (data: Uint8Array) => TableVec.fromBcs(Element, data),\n      bcs: TableVec.bcs,\n      fromJSONField: (field: any) => TableVec.fromJSONField(Element, field),\n      fromJSON: (json: Record<string, any>) => TableVec.fromJSON(Element, json),\n      fromSuiParsedData: (content: SuiParsedData) => TableVec.fromSuiParsedData(Element, content),\n      fromSuiObjectData: (content: SuiObjectData) => TableVec.fromSuiObjectData(Element, content),\n      fetch: async (client: SuiClient, id: string) => TableVec.fetch(client, Element, id),\n      new: (fields: TableVecFields<ToPhantomTypeArgument<Element>>) => {\n        return new TableVec([extractType(Element)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return TableVec.reified;\n  }\n\n  static phantom<Element extends PhantomReified<PhantomTypeArgument>>(\n    Element: Element\n  ): PhantomReified<ToTypeStr<TableVec<ToPhantomTypeArgument<Element>>>> {\n    return phantom(TableVec.reified(Element));\n  }\n  static get p() {\n    return TableVec.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"TableVec\", {\n      contents: Table.bcs,\n    });\n  }\n\n  static fromFields<Element extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Element,\n    fields: Record<string, any>\n  ): TableVec<ToPhantomTypeArgument<Element>> {\n    return TableVec.reified(typeArg).new({\n      contents: decodeFromFields(Table.reified(reified.phantom(\"u64\"), typeArg), fields.contents),\n    });\n  }\n\n  static fromFieldsWithTypes<Element extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Element,\n    item: FieldsWithTypes\n  ): TableVec<ToPhantomTypeArgument<Element>> {\n    if (!isTableVec(item.type)) {\n      throw new Error(\"not a TableVec type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return TableVec.reified(typeArg).new({\n      contents: decodeFromFieldsWithTypes(Table.reified(reified.phantom(\"u64\"), typeArg), item.fields.contents),\n    });\n  }\n\n  static fromBcs<Element extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Element,\n    data: Uint8Array\n  ): TableVec<ToPhantomTypeArgument<Element>> {\n    return TableVec.fromFields(typeArg, TableVec.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      contents: this.contents.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<Element extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Element,\n    field: any\n  ): TableVec<ToPhantomTypeArgument<Element>> {\n    return TableVec.reified(typeArg).new({\n      contents: decodeFromJSONField(Table.reified(reified.phantom(\"u64\"), typeArg), field.contents),\n    });\n  }\n\n  static fromJSON<Element extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Element,\n    json: Record<string, any>\n  ): TableVec<ToPhantomTypeArgument<Element>> {\n    if (json.$typeName !== TableVec.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(TableVec.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return TableVec.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<Element extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Element,\n    content: SuiParsedData\n  ): TableVec<ToPhantomTypeArgument<Element>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isTableVec(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a TableVec object`);\n    }\n    return TableVec.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<Element extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Element,\n    data: SuiObjectData\n  ): TableVec<ToPhantomTypeArgument<Element>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isTableVec(data.bcs.type)) {\n        throw new Error(`object at is not a TableVec object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return TableVec.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return TableVec.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<Element extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: Element,\n    id: string\n  ): Promise<TableVec<ToPhantomTypeArgument<Element>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching TableVec object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isTableVec(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a TableVec object`);\n    }\n\n    return TableVec.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}