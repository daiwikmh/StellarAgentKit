{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/transfer/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { ID } from \"../object/structs\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Receiving =============================== */\n\nexport function isReceiving(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::transfer::Receiving` + \"<\");\n}\n\nexport interface ReceivingFields<T extends PhantomTypeArgument> {\n  id: ToField<ID>;\n  version: ToField<\"u64\">;\n}\n\nexport type ReceivingReified<T extends PhantomTypeArgument> = Reified<Receiving<T>, ReceivingFields<T>>;\n\nexport class Receiving<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::transfer::Receiving`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = Receiving.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = Receiving.$isPhantom;\n\n  readonly id: ToField<ID>;\n  readonly version: ToField<\"u64\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: ReceivingFields<T>) {\n    this.$fullTypeName = composeSuiType(Receiving.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.version = fields.version;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): ReceivingReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: Receiving.$typeName,\n      fullTypeName: composeSuiType(Receiving.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: Receiving.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => Receiving.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Receiving.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => Receiving.fromBcs(T, data),\n      bcs: Receiving.bcs,\n      fromJSONField: (field: any) => Receiving.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => Receiving.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => Receiving.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => Receiving.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => Receiving.fetch(client, T, id),\n      new: (fields: ReceivingFields<ToPhantomTypeArgument<T>>) => {\n        return new Receiving([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Receiving.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<Receiving<ToPhantomTypeArgument<T>>>> {\n    return phantom(Receiving.reified(T));\n  }\n  static get p() {\n    return Receiving.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Receiving\", {\n      id: ID.bcs,\n      version: bcs.u64(),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): Receiving<ToPhantomTypeArgument<T>> {\n    return Receiving.reified(typeArg).new({\n      id: decodeFromFields(ID.reified(), fields.id),\n      version: decodeFromFields(\"u64\", fields.version),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): Receiving<ToPhantomTypeArgument<T>> {\n    if (!isReceiving(item.type)) {\n      throw new Error(\"not a Receiving type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Receiving.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(ID.reified(), item.fields.id),\n      version: decodeFromFieldsWithTypes(\"u64\", item.fields.version),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): Receiving<ToPhantomTypeArgument<T>> {\n    return Receiving.fromFields(typeArg, Receiving.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      version: this.version.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): Receiving<ToPhantomTypeArgument<T>> {\n    return Receiving.reified(typeArg).new({\n      id: decodeFromJSONField(ID.reified(), field.id),\n      version: decodeFromJSONField(\"u64\", field.version),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): Receiving<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== Receiving.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Receiving.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Receiving.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): Receiving<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isReceiving(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Receiving object`);\n    }\n    return Receiving.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): Receiving<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isReceiving(data.bcs.type)) {\n        throw new Error(`object at is not a Receiving object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Receiving.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Receiving.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<Receiving<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Receiving object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isReceiving(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Receiving object`);\n    }\n\n    return Receiving.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}