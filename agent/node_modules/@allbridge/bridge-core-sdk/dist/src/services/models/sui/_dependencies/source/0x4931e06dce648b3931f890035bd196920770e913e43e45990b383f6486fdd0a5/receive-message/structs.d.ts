import * as reified from "../../../../_framework/reified";
import { PhantomReified, Reified, StructClass, ToField, ToTypeArgument, ToTypeStr, TypeArgument } from "../../../../_framework/reified";
import { FieldsWithTypes } from "../../../../_framework/util";
import { Vector } from "../../../../_framework/vector";
import { VecSet } from "../../../../sui/vec-set/structs";
import { BcsType } from "@mysten/sui/bcs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isReceipt(type: string): boolean;
export interface ReceiptFields {
    caller: ToField<"address">;
    recipient: ToField<"address">;
    sourceDomain: ToField<"u32">;
    sender: ToField<"address">;
    nonce: ToField<"u64">;
    messageBody: ToField<Vector<"u8">>;
    currentVersion: ToField<VecSet<"u64">>;
}
export type ReceiptReified = Reified<Receipt, ReceiptFields>;
export declare class Receipt implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly caller: ToField<"address">;
    readonly recipient: ToField<"address">;
    readonly sourceDomain: ToField<"u32">;
    readonly sender: ToField<"address">;
    readonly nonce: ToField<"u64">;
    readonly messageBody: ToField<Vector<"u8">>;
    readonly currentVersion: ToField<VecSet<"u64">>;
    private constructor();
    static reified(): ReceiptReified;
    static get r(): reified.StructClassReified<Receipt, ReceiptFields>;
    static phantom(): PhantomReified<ToTypeStr<Receipt>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): BcsType<{
        caller: string;
        recipient: string;
        source_domain: number;
        sender: string;
        nonce: string;
        message_body: number[];
        current_version: {
            contents: any[];
        };
    }, {
        caller: string;
        recipient: string;
        source_domain: number;
        sender: string;
        nonce: string | number | bigint;
        message_body: Iterable<number> & {
            length: number;
        };
        current_version: {
            contents: Iterable<any> & {
                length: number;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): Receipt;
    static fromFieldsWithTypes(item: FieldsWithTypes): Receipt;
    static fromBcs(data: Uint8Array): Receipt;
    toJSONField(): {
        caller: string;
        recipient: string;
        sourceDomain: number;
        sender: string;
        nonce: string;
        messageBody: number[];
        currentVersion: {
            contents: string[];
        };
    };
    toJSON(): {
        caller: string;
        recipient: string;
        sourceDomain: number;
        sender: string;
        nonce: string;
        messageBody: number[];
        currentVersion: {
            contents: string[];
        };
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): Receipt;
    static fromJSON(json: Record<string, any>): Receipt;
    static fromSuiParsedData(content: SuiParsedData): Receipt;
    static fromSuiObjectData(data: SuiObjectData): Receipt;
    static fetch(client: SuiClient, id: string): Promise<Receipt>;
}
export declare function isStampReceiptTicket(type: string): boolean;
export interface StampReceiptTicketFields<Auth extends TypeArgument> {
    auth: ToField<Auth>;
    receipt: ToField<Receipt>;
}
export type StampReceiptTicketReified<Auth extends TypeArgument> = Reified<StampReceiptTicket<Auth>, StampReceiptTicketFields<Auth>>;
export declare class StampReceiptTicket<Auth extends TypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [false];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [ToTypeStr<Auth>];
    readonly $isPhantom: readonly [false];
    readonly auth: ToField<Auth>;
    readonly receipt: ToField<Receipt>;
    private constructor();
    static reified<Auth extends Reified<TypeArgument, any>>(Auth: Auth): StampReceiptTicketReified<ToTypeArgument<Auth>>;
    static get r(): typeof StampReceiptTicket.reified;
    static phantom<Auth extends Reified<TypeArgument, any>>(Auth: Auth): PhantomReified<ToTypeStr<StampReceiptTicket<ToTypeArgument<Auth>>>>;
    static get p(): typeof StampReceiptTicket.phantom;
    static get bcs(): <Auth extends BcsType<any>>(Auth: Auth) => BcsType<{
        auth: Auth extends BcsType<infer U, any> ? U : never;
        receipt: {
            caller: string;
            recipient: string;
            source_domain: number;
            sender: string;
            nonce: string;
            message_body: number[];
            current_version: {
                contents: any[];
            };
        };
    }, {
        auth: Auth extends BcsType<any, infer U_1> ? U_1 : never;
        receipt: {
            caller: string;
            recipient: string;
            source_domain: number;
            sender: string;
            nonce: string | number | bigint;
            message_body: Iterable<number> & {
                length: number;
            };
            current_version: {
                contents: Iterable<any> & {
                    length: number;
                };
            };
        };
    }>;
    static fromFields<Auth extends Reified<TypeArgument, any>>(typeArg: Auth, fields: Record<string, any>): StampReceiptTicket<ToTypeArgument<Auth>>;
    static fromFieldsWithTypes<Auth extends Reified<TypeArgument, any>>(typeArg: Auth, item: FieldsWithTypes): StampReceiptTicket<ToTypeArgument<Auth>>;
    static fromBcs<Auth extends Reified<TypeArgument, any>>(typeArg: Auth, data: Uint8Array): StampReceiptTicket<ToTypeArgument<Auth>>;
    toJSONField(): {
        auth: reified.ToJSON<Auth>;
        receipt: {
            caller: string;
            recipient: string;
            sourceDomain: number;
            sender: string;
            nonce: string;
            messageBody: number[];
            currentVersion: {
                contents: string[];
            };
        };
    };
    toJSON(): {
        auth: reified.ToJSON<Auth>;
        receipt: {
            caller: string;
            recipient: string;
            sourceDomain: number;
            sender: string;
            nonce: string;
            messageBody: number[];
            currentVersion: {
                contents: string[];
            };
        };
        $typeName: string;
        $typeArgs: [reified.ToTypeStr<Auth>];
    };
    static fromJSONField<Auth extends Reified<TypeArgument, any>>(typeArg: Auth, field: any): StampReceiptTicket<ToTypeArgument<Auth>>;
    static fromJSON<Auth extends Reified<TypeArgument, any>>(typeArg: Auth, json: Record<string, any>): StampReceiptTicket<ToTypeArgument<Auth>>;
    static fromSuiParsedData<Auth extends Reified<TypeArgument, any>>(typeArg: Auth, content: SuiParsedData): StampReceiptTicket<ToTypeArgument<Auth>>;
    static fromSuiObjectData<Auth extends Reified<TypeArgument, any>>(typeArg: Auth, data: SuiObjectData): StampReceiptTicket<ToTypeArgument<Auth>>;
    static fetch<Auth extends Reified<TypeArgument, any>>(client: SuiClient, typeArg: Auth, id: string): Promise<StampReceiptTicket<ToTypeArgument<Auth>>>;
}
export declare function isStampedReceipt(type: string): boolean;
export interface StampedReceiptFields {
    receipt: ToField<Receipt>;
}
export type StampedReceiptReified = Reified<StampedReceipt, StampedReceiptFields>;
export declare class StampedReceipt implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly receipt: ToField<Receipt>;
    private constructor();
    static reified(): StampedReceiptReified;
    static get r(): reified.StructClassReified<StampedReceipt, StampedReceiptFields>;
    static phantom(): PhantomReified<ToTypeStr<StampedReceipt>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): BcsType<{
        receipt: {
            caller: string;
            recipient: string;
            source_domain: number;
            sender: string;
            nonce: string;
            message_body: number[];
            current_version: {
                contents: any[];
            };
        };
    }, {
        receipt: {
            caller: string;
            recipient: string;
            source_domain: number;
            sender: string;
            nonce: string | number | bigint;
            message_body: Iterable<number> & {
                length: number;
            };
            current_version: {
                contents: Iterable<any> & {
                    length: number;
                };
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): StampedReceipt;
    static fromFieldsWithTypes(item: FieldsWithTypes): StampedReceipt;
    static fromBcs(data: Uint8Array): StampedReceipt;
    toJSONField(): {
        receipt: {
            caller: string;
            recipient: string;
            sourceDomain: number;
            sender: string;
            nonce: string;
            messageBody: number[];
            currentVersion: {
                contents: string[];
            };
        };
    };
    toJSON(): {
        receipt: {
            caller: string;
            recipient: string;
            sourceDomain: number;
            sender: string;
            nonce: string;
            messageBody: number[];
            currentVersion: {
                contents: string[];
            };
        };
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): StampedReceipt;
    static fromJSON(json: Record<string, any>): StampedReceipt;
    static fromSuiParsedData(content: SuiParsedData): StampedReceipt;
    static fromSuiObjectData(data: SuiObjectData): StampedReceipt;
    static fetch(client: SuiClient, id: string): Promise<StampedReceipt>;
}
