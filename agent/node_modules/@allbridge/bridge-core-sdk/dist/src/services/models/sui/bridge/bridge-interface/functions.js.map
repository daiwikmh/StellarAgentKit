{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/bridge/bridge-interface/functions.ts"],"names":[],"mappings":";;AAKA,oCAMC;AAQD,oBAMC;AAQD,0BAMC;AAQD,4BAMC;AAQD,gCAMC;AAOD,0BAKC;AASD,kCAUC;AAQD,kCAMC;AAOD,4BAKC;AAED,4BAMC;AAED,gCAMC;AAOD,sCAMC;AAOD,kCAMC;AAQD,gDAMC;AAED,0CAMC;AAQD,oDAMC;AAED,oBAMC;AAQD,kDAMC;AAED,gCAMC;AAED,kCAMC;AAED,4BAMC;AAQD,kCAMC;AAOD,oCAMC;AAOD,sCAMC;AAOD,kCAMC;AAOD,oCAMC;AASD,8BAUC;AASD,wCAKC;AAQD,0BAMC;AAED,0BAKC;AAED,4BAMC;AASD,wDAKC;AAQD,sCAKC;AAUD,sDAWC;AAOD,gDAKC;AAaD,sDAeC;AAQD,oCAKC;AASD,8CAKC;AAQD,sCAKC;AAOD,8BAKC;AAOD,4BAKC;AAiBD,sDAmBC;AASD,0BAWC;AAED,wCAMC;AAED,sBAMC;AAED,kCAMC;AAED,sBAMC;AAED,oCAMC;AAED,oCAMC;AAOD,gDAMC;AAED,4CAMC;AAED,0CAMC;AAaD,sCAeC;AAeD,sCAiBC;AAjtBD,cAAc;AACd,0BAAkC;AAClC,gDAAkD;AAGlD,SAAgB,YAAY,CAAC,EAAe,EAAE,OAAe,EAAE,WAAmC;IAChG,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,WAAW,CAAC,CAAC;KAClC,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,IAAI,CAAC,EAAe,EAAE,QAA0B,EAAE,IAAc;IAC9E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,0BAA0B;QACjD,aAAa,EAAE,QAAQ;QACvB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;KAC9F,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,OAAO,CAAC,EAAe,EAAE,OAAe,EAAE,IAAiB;IACzE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,6BAA6B;QACpD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KACjF,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,QAAQ,CAAC,EAAe,EAAE,OAAe,EAAE,IAAkB;IAC3E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8BAA8B;QACrD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;KAC7F,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,UAAU,CAAC,EAAe,EAAE,OAAe,EAAE,IAAoB;IAC/E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iCAAiC;QACxD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9E,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,OAAO,CAAC,EAAe,EAAE,IAAiB;IACxD,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,6BAA6B;QACpD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KAC1D,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,WAAW,CAAC,EAAe,EAAE,IAAqB;IAChE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC;YAC5B,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;SAC5B;KACF,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,WAAW,CAAC,EAAe,EAAE,OAAe,EAAE,IAAqB;IACjF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,kCAAkC;QACzD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACxF,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,QAAQ,CAAC,EAAe,EAAE,IAAkB;IAC1D,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+BAA+B;QACtD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAChE,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,QAAQ,CAAC,EAAe,EAAE,OAAe,EAAE,WAAmC;IAC5F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+BAA+B;QACtD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,WAAW,CAAC,CAAC;KAClC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,UAAU,CAAC,EAAe,EAAE,OAAe,EAAE,WAAmC;IAC9F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iCAAiC;QACxD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,WAAW,CAAC,CAAC;KAClC,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,aAAa,CAAC,EAAe,EAAE,OAAe,EAAE,IAAuB;IACrF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,qCAAqC;QAC5D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KAC1D,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,WAAW,CAAC,EAAe,EAAE,OAAe,EAAE,IAAqB;IACjF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,kCAAkC;QACzD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAC7D,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,kBAAkB,CAAC,EAAe,EAAE,OAAe,EAAE,IAA4B;IAC/F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,4CAA4C;QACnE,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;KACjG,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,eAAe,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IAC9F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,wCAAwC;QAC/D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,oBAAoB,CAAC,EAAe,EAAE,OAAe,EAAE,IAA8B;IACnG,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8CAA8C;QACrE,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;KACnG,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,IAAI,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IACnF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,0BAA0B;QACjD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,mBAAmB,CAAC,EAAe,EAAE,OAAe,EAAE,IAA6B;IACjG,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,4CAA4C;QACnE,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KACrF,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,UAAU,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IACzF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iCAAiC;QACxD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,WAAW,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IAC1F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,kCAAkC;QACzD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,QAAQ,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IACvF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+BAA+B;QACtD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,WAAW,CAAC,EAAe,EAAE,OAAe,EAAE,IAAqB;IACjF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;KAC5F,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,YAAY,CAAC,EAAe,EAAE,OAAe,EAAE,IAAsB;IACnF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KAC1D,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,aAAa,CAAC,EAAe,EAAE,OAAe,EAAE,IAAuB;IACrF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,oCAAoC;QAC3D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KAC1D,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,WAAW,CAAC,EAAe,EAAE,OAAe,EAAE,IAAqB;IACjF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,kCAAkC;QACzD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACzD,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,YAAY,CAAC,EAAe,EAAE,OAAe,EAAE,IAAsB;IACnF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KACzD,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,SAAS,CAAC,EAAe,EAAE,IAAmB;IAC5D,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,gCAAgC;QACvD,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC;YAC5B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC;SAC5B;KACF,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,cAAc,CAAC,EAAe,EAAE,IAAwB;IACtE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,sCAAsC;QAC7D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KACpH,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,OAAO,CAAC,EAAe,EAAE,OAAe,EAAE,IAAiB;IACzE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8BAA8B;QACrD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9E,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,OAAO,CAAC,EAAe,EAAE,MAA8B;IACrE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8BAA8B;QACrD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,QAAQ,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IACvF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+BAA+B;QACtD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,sBAAsB,CAAC,EAAe,EAAE,IAAgC;IACtF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+CAA+C;QACtE,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KAClH,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,aAAa,CAAC,EAAe,EAAE,IAAuB;IACpE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,qCAAqC;QAC5D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KACzF,CAAC,CAAC;AACL,CAAC;AAUD,SAAgB,qBAAqB,CAAC,EAAe,EAAE,IAA+B;IACpF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8CAA8C;QACrE,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC;YAC3B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC;SAC7B;KACF,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,kBAAkB,CAAC,EAAe,EAAE,IAA4B;IAC9E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,0CAA0C;QACjE,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KACzD,CAAC,CAAC;AACL,CAAC;AAaD,SAAgB,qBAAqB,CAAC,EAAe,EAAE,OAAe,EAAE,IAA+B;IACrG,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,6CAA6C;QACpE,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;YAC5B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC;YAClC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC;YAC5B,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC;YACtC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC;SAC3B;KACF,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,YAAY,CAAC,EAAe,EAAE,IAAsB;IAClE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;KACxF,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,iBAAiB,CAAC,EAAe,EAAE,IAA2B;IAC5E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,yCAAyC;QAChE,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KACpH,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,aAAa,CAAC,EAAe,EAAE,IAAuB;IACpE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,oCAAoC;QAC3D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;KAChG,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,SAAS,CAAC,EAAe,EAAE,IAAmB;IAC5D,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,gCAAgC;QACvD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KAC1D,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,QAAQ,CAAC,EAAe,EAAE,IAAkB;IAC1D,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+BAA+B;QACtD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;KAC7D,CAAC,CAAC;AACL,CAAC;AAiBD,SAAgB,qBAAqB,CAAC,EAAe,EAAE,OAAe,EAAE,IAA+B;IACrG,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8CAA8C;QACrE,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC;YAC3B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC;YACvC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC;YAC1B,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC;YAC5B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC;YACxB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC;SAC3B;KACF,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,OAAO,CAAC,EAAe,EAAE,OAAe,EAAE,IAAiB;IACzE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8BAA8B;QACrD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC;YACtB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC;YAC1B,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC;YACvB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;SACjC;KACF,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,cAAc,CAAC,EAAe,EAAE,OAAe;IAC7D,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,sCAAsC;QAC7D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,EAAE;KACd,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,KAAK,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IACpF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,4BAA4B;QACnD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,WAAW,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IAC1F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,kCAAkC;QACzD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,KAAK,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IACpF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,4BAA4B;QACnD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,YAAY,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IAC3F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,YAAY,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IAC3F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,oCAAoC;QAC3D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,kBAAkB,CAAC,EAAe,EAAE,OAAe,EAAE,IAA4B;IAC/F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,0CAA0C;QACjE,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;KAC7D,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,gBAAgB,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IAC/F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,wCAAwC;QAC/D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,eAAe,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IAC9F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,uCAAuC;QAC9D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC;AAaD,SAAgB,aAAa,CAAC,EAAe,EAAE,OAAe,EAAE,IAAuB;IACrF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,oCAAoC;QAC3D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;YAC5B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC;YAClC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC;YAC5B,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,gBAAgB,EAAE,KAAK,CAAC;YACtC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC;SAC3B;KACF,CAAC,CAAC;AACL,CAAC;AAeD,SAAgB,aAAa,CAAC,EAAe,EAAE,OAAe,EAAE,IAAuB;IACrF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,qCAAqC;QAC5D,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC;YACvC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC;YAC1B,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC;YAC5B,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC;YACxB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC;SAC3B;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function destroyEmpty(tx: Transaction, typeArg: string, userDeposit: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::destroy_empty`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, userDeposit)],\n  });\n}\n\nexport interface SwapArgs {\n  bridge: TransactionObjectInput;\n  coin: TransactionObjectInput;\n  receiveAmountMin: bigint | TransactionArgument;\n}\n\nexport function swap(tx: Transaction, typeArgs: [string, string], args: SwapArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::swap`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.bridge), obj(tx, args.coin), pure(tx, args.receiveAmountMin, `u64`)],\n  });\n}\n\nexport interface DepositArgs {\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n  coin: TransactionObjectInput;\n}\n\nexport function deposit(tx: Transaction, typeArg: string, args: DepositArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.userDeposit), obj(tx, args.coin)],\n  });\n}\n\nexport interface WithdrawArgs {\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n  amountLp: bigint | TransactionArgument;\n}\n\nexport function withdraw(tx: Transaction, typeArg: string, args: WithdrawArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.userDeposit), pure(tx, args.amountLp, `u64`)],\n  });\n}\n\nexport interface DepositFeeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  coin: TransactionObjectInput;\n}\n\nexport function depositFee(tx: Transaction, typeArg: string, args: DepositFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::deposit_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), obj(tx, args.coin)],\n  });\n}\n\nexport interface MigrateArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function migrate(tx: Transaction, args: MigrateArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::migrate`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface SetGasUsageArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  value: bigint | TransactionArgument;\n}\n\nexport function setGasUsage(tx: Transaction, args: SetGasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_gas_usage`,\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.bridge),\n      pure(tx, args.chainId, `u8`),\n      pure(tx, args.value, `u64`),\n    ],\n  });\n}\n\nexport interface WithdrawFeeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function withdrawFee(tx: Transaction, typeArg: string, args: WithdrawFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::withdraw_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport interface GasUsageArgs {\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function gasUsage(tx: Transaction, args: GasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::gas_usage`,\n    arguments: [obj(tx, args.bridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport function lpAmount(tx: Transaction, typeArg: string, userDeposit: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::lp_amount`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, userDeposit)],\n  });\n}\n\nexport function rewardDebt(tx: Transaction, typeArg: string, userDeposit: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::reward_debt`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, userDeposit)],\n  });\n}\n\nexport interface ClaimAdminFeeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function claimAdminFee(tx: Transaction, typeArg: string, args: ClaimAdminFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::claim_admin_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface ClaimRewardArgs {\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function claimReward(tx: Transaction, typeArg: string, args: ClaimRewardArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::claim_reward`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.userDeposit)],\n  });\n}\n\nexport interface SetAdminFeeShareBpArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  adminFeeShareBp: bigint | TransactionArgument;\n}\n\nexport function setAdminFeeShareBp(tx: Transaction, typeArg: string, args: SetAdminFeeShareBpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_admin_fee_share_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.adminFeeShareBp, `u64`)],\n  });\n}\n\nexport function adminFeeShareBp(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::admin_fee_share_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface SetBalanceRatioMinBpArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  balanceRatioMinBp: bigint | TransactionArgument;\n}\n\nexport function setBalanceRatioMinBp(tx: Transaction, typeArg: string, args: SetBalanceRatioMinBpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_balance_ratio_min_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.balanceRatioMinBp, `u64`)],\n  });\n}\n\nexport function pool(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface AdjustTotalLpAmountArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function adjustTotalLpAmount(tx: Transaction, typeArg: string, args: AdjustTotalLpAmountArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::adjust_total_lp_amount`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), obj(tx, args.userDeposit)],\n  });\n}\n\nexport function canDeposit(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::can_deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function canWithdraw(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::can_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function feeShare(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::fee_share`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface SetFeeShareArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  feeShareBp: bigint | TransactionArgument;\n}\n\nexport function setFeeShare(tx: Transaction, typeArg: string, args: SetFeeShareArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_fee_share`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.feeShareBp, `u64`)],\n  });\n}\n\nexport interface StartDepositArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function startDeposit(tx: Transaction, typeArg: string, args: StartDepositArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::start_deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface StartWithdrawArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function startWithdraw(tx: Transaction, typeArg: string, args: StartWithdrawArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::start_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface StopDepositArgs {\n  stopCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function stopDeposit(tx: Transaction, typeArg: string, args: StopDepositArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::stop_deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.stopCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface StopWithdrawArgs {\n  stopCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function stopWithdraw(tx: Transaction, typeArg: string, args: StopWithdrawArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::stop_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.stopCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface AddBridgeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  bridgeAddress: TransactionObjectInput;\n}\n\nexport function addBridge(tx: Transaction, args: AddBridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::add_bridge`,\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.bridge),\n      pure(tx, args.chainId, `u8`),\n      obj(tx, args.bridgeAddress),\n    ],\n  });\n}\n\nexport interface AddBridgeTokenArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  tokenAddress: TransactionObjectInput;\n}\n\nexport function addBridgeToken(tx: Transaction, args: AddBridgeTokenArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::add_bridge_token`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.chainId, `u8`), obj(tx, args.tokenAddress)],\n  });\n}\n\nexport interface AddPoolArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  pool: TransactionObjectInput;\n}\n\nexport function addPool(tx: Transaction, typeArg: string, args: AddPoolArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::add_pool`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), obj(tx, args.pool)],\n  });\n}\n\nexport function canSwap(tx: Transaction, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::can_swap`,\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function feeValue(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::fee_value`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface GetBridgeAllbridgeCostArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgeAllbridgeCost(tx: Transaction, args: GetBridgeAllbridgeCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::get_bridge_allbridge_cost`,\n    arguments: [obj(tx, args.bridge), obj(tx, args.messenger), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface GetBridgeCostArgs {\n  bridge: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgeCost(tx: Transaction, args: GetBridgeCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::get_bridge_cost`,\n    arguments: [obj(tx, args.bridge), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface GetBridgeWormholeCostArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgeWormholeCost(tx: Transaction, args: GetBridgeWormholeCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::get_bridge_wormhole_cost`,\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.gasOracle),\n      pure(tx, args.chainId, `u8`),\n    ],\n  });\n}\n\nexport interface IsProcessedMessageArgs {\n  bridge: TransactionObjectInput;\n  message: TransactionObjectInput;\n}\n\nexport function isProcessedMessage(tx: Transaction, args: IsProcessedMessageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::is_processed_message`,\n    arguments: [obj(tx, args.bridge), obj(tx, args.message)],\n  });\n}\n\nexport interface ReceiveTokensWormholeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n  recipient: TransactionObjectInput;\n  sourceChainId: number | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n  receiveAmountMin: bigint | TransactionArgument;\n  extraGasCoin: TransactionObjectInput;\n}\n\nexport function receiveTokensWormhole(tx: Transaction, typeArg: string, args: ReceiveTokensWormholeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::receive_tokens_wormhole`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      pure(tx, args.amount, `u64`),\n      obj(tx, args.recipient),\n      pure(tx, args.sourceChainId, `u8`),\n      pure(tx, args.nonce, `u256`),\n      pure(tx, args.receiveAmountMin, `u64`),\n      obj(tx, args.extraGasCoin),\n    ],\n  });\n}\n\nexport interface RemoveBridgeArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function removeBridge(tx: Transaction, args: RemoveBridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::remove_bridge`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface RemoveBridgeTokenArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  tokenAddress: TransactionObjectInput;\n}\n\nexport function removeBridgeToken(tx: Transaction, args: RemoveBridgeTokenArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::remove_bridge_token`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.chainId, `u8`), obj(tx, args.tokenAddress)],\n  });\n}\n\nexport interface SetRebalancerArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n  rebalancer: string | TransactionArgument;\n}\n\nexport function setRebalancer(tx: Transaction, args: SetRebalancerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::set_rebalancer`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge), pure(tx, args.rebalancer, `address`)],\n  });\n}\n\nexport interface StartSwapArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function startSwap(tx: Transaction, args: StartSwapArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::start_swap`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface StopSwapArgs {\n  stopSwapCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function stopSwap(tx: Transaction, args: StopSwapArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::stop_swap`,\n    arguments: [obj(tx, args.stopSwapCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface SwapAndBridgeWormholeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  theClock: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  amount: TransactionObjectInput;\n  recipient: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  receiveToken: TransactionObjectInput;\n  nonce: bigint | TransactionArgument;\n  feeSuiCoin: TransactionObjectInput;\n  feeTokenCoin: TransactionObjectInput;\n}\n\nexport function swapAndBridgeWormhole(tx: Transaction, typeArg: string, args: SwapAndBridgeWormholeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::swap_and_bridge_wormhole`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.theClock),\n      obj(tx, args.gasOracle),\n      obj(tx, args.amount),\n      obj(tx, args.recipient),\n      pure(tx, args.destinationChainId, `u8`),\n      obj(tx, args.receiveToken),\n      pure(tx, args.nonce, `u256`),\n      obj(tx, args.feeSuiCoin),\n      obj(tx, args.feeTokenCoin),\n    ],\n  });\n}\n\nexport interface NewPoolArgs {\n  adminCap: TransactionObjectInput;\n  coinMetadata: TransactionObjectInput;\n  a: bigint | TransactionArgument;\n  feeShareBp: bigint | TransactionArgument;\n}\n\nexport function newPool(tx: Transaction, typeArg: string, args: NewPoolArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::new_pool`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.adminCap),\n      obj(tx, args.coinMetadata),\n      pure(tx, args.a, `u64`),\n      pure(tx, args.feeShareBp, `u64`),\n    ],\n  });\n}\n\nexport function newUserDeposit(tx: Transaction, typeArg: string) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::new_user_deposit`,\n    typeArguments: [typeArg],\n    arguments: [],\n  });\n}\n\nexport function poolA(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_a`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolBalance(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolD(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_d`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolDecimals(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_decimals`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolLpSupply(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_lp_supply`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface PoolPendingRewardsArgs {\n  bridge: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function poolPendingRewards(tx: Transaction, typeArg: string, args: PoolPendingRewardsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_pending_rewards`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.userDeposit)],\n  });\n}\n\nexport function poolTokenBalance(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_token_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function poolVusdBalance(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::pool_vusd_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface ReceiveTokensArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n  recipient: TransactionObjectInput;\n  sourceChainId: number | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n  receiveAmountMin: bigint | TransactionArgument;\n  extraGasCoin: TransactionObjectInput;\n}\n\nexport function receiveTokens(tx: Transaction, typeArg: string, args: ReceiveTokensArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::receive_tokens`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      pure(tx, args.amount, `u64`),\n      obj(tx, args.recipient),\n      pure(tx, args.sourceChainId, `u8`),\n      pure(tx, args.nonce, `u256`),\n      pure(tx, args.receiveAmountMin, `u64`),\n      obj(tx, args.extraGasCoin),\n    ],\n  });\n}\n\nexport interface SwapAndBridgeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  amount: TransactionObjectInput;\n  recipient: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  receiveToken: TransactionObjectInput;\n  nonce: bigint | TransactionArgument;\n  feeSuiCoin: TransactionObjectInput;\n  feeTokenCoin: TransactionObjectInput;\n}\n\nexport function swapAndBridge(tx: Transaction, typeArg: string, args: SwapAndBridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge_interface::swap_and_bridge`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      obj(tx, args.gasOracle),\n      obj(tx, args.amount),\n      obj(tx, args.recipient),\n      pure(tx, args.destinationChainId, `u8`),\n      obj(tx, args.receiveToken),\n      pure(tx, args.nonce, `u256`),\n      obj(tx, args.feeSuiCoin),\n      obj(tx, args.feeTokenCoin),\n    ],\n  });\n}\n"]}