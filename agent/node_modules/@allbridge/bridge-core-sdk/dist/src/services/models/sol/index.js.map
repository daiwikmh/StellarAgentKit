{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/models/sol/index.ts"],"names":[],"mappings":";;;AAMA;;GAEG;AACU,QAAA,eAAe,GAAG,MAAM,CAAC","sourcesContent":["import { BN, Program, Provider } from \"@project-serum/anchor\";\nimport { PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { Bridge as BridgeType } from \"./types/bridge\";\nimport { CctpBridge as CctpBridgeType } from \"./types/cctp_bridge\";\n\nexport type SolanaTxFee = PricePerUnitInMicroLamports | ExtraFeeInLamports | typeof SolanaAutoTxFee;\n/**\n * Priority Fee will be calculated based on {@link https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getRecentPrioritizationFees}\n */\nexport const SolanaAutoTxFee = \"AUTO\";\n\n/**\n * Add Priority Fee as price per unit in micro-lamports\n */\nexport interface PricePerUnitInMicroLamports {\n  pricePerUnitInMicroLamports: string;\n}\n\n/**\n * Total Priority Fee impact will be as extraFeeInLamports param\n */\nexport interface ExtraFeeInLamports {\n  extraFeeInLamports: string;\n}\n\nexport interface SwapAndBridgeSolData {\n  bridge: Program<BridgeType>;\n  amount: BN;\n  vusdAmount: BN;\n  nonce: number[];\n  recipient: number[];\n  receiveToken: number[];\n  poolAccount: PublicKey;\n  lockAccount: PublicKey;\n  bridgeAuthority: PublicKey;\n  userToken: PublicKey;\n  bridgeTokenAccount: PublicKey;\n  chainBridgeAccount: PublicKey;\n  otherBridgeTokenAccount: PublicKey;\n  userAccount: PublicKey;\n  destinationChainId: number;\n  mint: string;\n  config: PublicKey;\n  configAccountInfo: ConfigAccountInfo;\n  gasPrice: PublicKey;\n  thisGasPrice: PublicKey;\n  message: Buffer;\n  extraGasInstruction?: TransactionInstruction;\n  provider: Provider;\n}\n\nexport interface SwapAndBridgeSolDataCctpData {\n  cctpBridge: Program<CctpBridgeType>;\n  cctpBridgeAccount: PublicKey;\n  cctpAddressAccount: PublicKey;\n  amount: BN;\n  recipient: number[];\n  receiveToken: number[];\n  userToken: PublicKey;\n  bridgeAuthority: PublicKey;\n  bridgeTokenAccount: PublicKey;\n  chainBridgeAccount: PublicKey;\n  userAccount: PublicKey;\n  destinationChainId: number;\n  mint: PublicKey;\n  gasPrice: PublicKey;\n  thisGasPrice: PublicKey;\n  extraGasInstruction?: TransactionInstruction;\n  provider: Provider;\n}\n\ninterface ConfigAccountInfo {\n  allbridgeMessengerProgramId: PublicKey;\n  wormholeMessengerProgramId: PublicKey;\n  gasOracleProgramId: PublicKey;\n}\n\nexport interface TokenAccountData {\n  amount: BN;\n  authority: PublicKey;\n  closeAuthority: unknown;\n  delegate: unknown;\n  delegatedAmount: BN;\n  isNative: unknown;\n  mint: PublicKey;\n  state: unknown;\n}\n"]}