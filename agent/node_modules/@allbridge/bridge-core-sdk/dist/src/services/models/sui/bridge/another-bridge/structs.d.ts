import * as reified from "../../_framework/reified";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr, ToTypeStr as ToPhantom } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { Bytes32 } from "../../utils/bytes32/structs";
import { Set } from "../../utils/set/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isAnotherBridge(type: string): boolean;
export interface AnotherBridgeFields {
    address: ToField<Bytes32>;
    tokens: ToField<Set<ToPhantom<Bytes32>>>;
    gasUsage: ToField<"u64">;
}
export type AnotherBridgeReified = Reified<AnotherBridge, AnotherBridgeFields>;
export declare class AnotherBridge implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly address: ToField<Bytes32>;
    readonly tokens: ToField<Set<ToPhantom<Bytes32>>>;
    readonly gasUsage: ToField<"u64">;
    private constructor();
    static reified(): AnotherBridgeReified;
    static get r(): reified.StructClassReified<AnotherBridge, AnotherBridgeFields>;
    static phantom(): PhantomReified<ToTypeStr<AnotherBridge>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        address: {
            data: number[];
        };
        tokens: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string;
            };
        };
        gas_usage: string;
    }, {
        address: {
            data: Iterable<number> & {
                length: number;
            };
        };
        tokens: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string | number | bigint;
            };
        };
        gas_usage: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): AnotherBridge;
    static fromFieldsWithTypes(item: FieldsWithTypes): AnotherBridge;
    static fromBcs(data: Uint8Array): AnotherBridge;
    toJSONField(): {
        address: {
            data: number[];
        };
        tokens: {
            items: {
                id: import("../../sui/object/structs").UID;
                size: string;
            };
        };
        gasUsage: string;
    };
    toJSON(): {
        address: {
            data: number[];
        };
        tokens: {
            items: {
                id: import("../../sui/object/structs").UID;
                size: string;
            };
        };
        gasUsage: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): AnotherBridge;
    static fromJSON(json: Record<string, any>): AnotherBridge;
    static fromSuiParsedData(content: SuiParsedData): AnotherBridge;
    static fromSuiObjectData(data: SuiObjectData): AnotherBridge;
    static fetch(client: SuiClient, id: string): Promise<AnotherBridge>;
}
