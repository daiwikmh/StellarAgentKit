{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/utils/version/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== CurrentVersion =============================== */\n\nexport function isCurrentVersion(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::version::CurrentVersion` + \"<\");\n}\n\nexport interface CurrentVersionFields<Cap extends PhantomTypeArgument> {\n  version: ToField<\"u64\">;\n}\n\nexport type CurrentVersionReified<Cap extends PhantomTypeArgument> = Reified<\n  CurrentVersion<Cap>,\n  CurrentVersionFields<Cap>\n>;\n\nexport class CurrentVersion<Cap extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::version::CurrentVersion`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = CurrentVersion.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<Cap>];\n  readonly $isPhantom = CurrentVersion.$isPhantom;\n\n  readonly version: ToField<\"u64\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<Cap>], fields: CurrentVersionFields<Cap>) {\n    this.$fullTypeName = composeSuiType(CurrentVersion.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.version = fields.version;\n  }\n\n  static reified<Cap extends PhantomReified<PhantomTypeArgument>>(\n    Cap: Cap\n  ): CurrentVersionReified<ToPhantomTypeArgument<Cap>> {\n    return {\n      typeName: CurrentVersion.$typeName,\n      fullTypeName: composeSuiType(CurrentVersion.$typeName, ...[extractType(Cap)]) as string,\n      typeArgs: [extractType(Cap)] as [PhantomToTypeStr<ToPhantomTypeArgument<Cap>>],\n      isPhantom: CurrentVersion.$isPhantom,\n      reifiedTypeArgs: [Cap],\n      fromFields: (fields: Record<string, any>) => CurrentVersion.fromFields(Cap, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => CurrentVersion.fromFieldsWithTypes(Cap, item),\n      fromBcs: (data: Uint8Array) => CurrentVersion.fromBcs(Cap, data),\n      bcs: CurrentVersion.bcs,\n      fromJSONField: (field: any) => CurrentVersion.fromJSONField(Cap, field),\n      fromJSON: (json: Record<string, any>) => CurrentVersion.fromJSON(Cap, json),\n      fromSuiParsedData: (content: SuiParsedData) => CurrentVersion.fromSuiParsedData(Cap, content),\n      fromSuiObjectData: (content: SuiObjectData) => CurrentVersion.fromSuiObjectData(Cap, content),\n      fetch: async (client: SuiClient, id: string) => CurrentVersion.fetch(client, Cap, id),\n      new: (fields: CurrentVersionFields<ToPhantomTypeArgument<Cap>>) => {\n        return new CurrentVersion([extractType(Cap)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return CurrentVersion.reified;\n  }\n\n  static phantom<Cap extends PhantomReified<PhantomTypeArgument>>(\n    Cap: Cap\n  ): PhantomReified<ToTypeStr<CurrentVersion<ToPhantomTypeArgument<Cap>>>> {\n    return phantom(CurrentVersion.reified(Cap));\n  }\n  static get p() {\n    return CurrentVersion.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"CurrentVersion\", {\n      version: bcs.u64(),\n    });\n  }\n\n  static fromFields<Cap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Cap,\n    fields: Record<string, any>\n  ): CurrentVersion<ToPhantomTypeArgument<Cap>> {\n    return CurrentVersion.reified(typeArg).new({\n      version: decodeFromFields(\"u64\", fields.version),\n    });\n  }\n\n  static fromFieldsWithTypes<Cap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Cap,\n    item: FieldsWithTypes\n  ): CurrentVersion<ToPhantomTypeArgument<Cap>> {\n    if (!isCurrentVersion(item.type)) {\n      throw new Error(\"not a CurrentVersion type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return CurrentVersion.reified(typeArg).new({\n      version: decodeFromFieldsWithTypes(\"u64\", item.fields.version),\n    });\n  }\n\n  static fromBcs<Cap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Cap,\n    data: Uint8Array\n  ): CurrentVersion<ToPhantomTypeArgument<Cap>> {\n    return CurrentVersion.fromFields(typeArg, CurrentVersion.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      version: this.version.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<Cap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Cap,\n    field: any\n  ): CurrentVersion<ToPhantomTypeArgument<Cap>> {\n    return CurrentVersion.reified(typeArg).new({\n      version: decodeFromJSONField(\"u64\", field.version),\n    });\n  }\n\n  static fromJSON<Cap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Cap,\n    json: Record<string, any>\n  ): CurrentVersion<ToPhantomTypeArgument<Cap>> {\n    if (json.$typeName !== CurrentVersion.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(CurrentVersion.$typeName, extractType(typeArg)), json.$typeArgs, [\n      typeArg,\n    ]);\n\n    return CurrentVersion.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<Cap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Cap,\n    content: SuiParsedData\n  ): CurrentVersion<ToPhantomTypeArgument<Cap>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isCurrentVersion(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a CurrentVersion object`);\n    }\n    return CurrentVersion.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<Cap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Cap,\n    data: SuiObjectData\n  ): CurrentVersion<ToPhantomTypeArgument<Cap>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isCurrentVersion(data.bcs.type)) {\n        throw new Error(`object at is not a CurrentVersion object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return CurrentVersion.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return CurrentVersion.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<Cap extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: Cap,\n    id: string\n  ): Promise<CurrentVersion<ToPhantomTypeArgument<Cap>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching CurrentVersion object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isCurrentVersion(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a CurrentVersion object`);\n    }\n\n    return CurrentVersion.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}