{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/priority-queue/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { GenericArg, generic, obj, pure, vector } from \"../../_framework/util\";\nimport { Entry } from \"./structs\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface InsertArgs {\n  pq: TransactionObjectInput;\n  priority: bigint | TransactionArgument;\n  value: GenericArg;\n}\n\nexport function insert(tx: Transaction, typeArg: string, args: InsertArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::priority_queue::insert`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pq), pure(tx, args.priority, `u64`), generic(tx, `${typeArg}`, args.value)],\n  });\n}\n\nexport function new_(tx: Transaction, typeArg: string, entries: Array<TransactionObjectInput> | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::priority_queue::new`,\n    typeArguments: [typeArg],\n    arguments: [vector(tx, `${Entry.$typeName}<${typeArg}>`, entries)],\n  });\n}\n\nexport interface CreateEntriesArgs {\n  p: Array<bigint | TransactionArgument> | TransactionArgument;\n  v: Array<GenericArg> | TransactionArgument;\n}\n\nexport function createEntries(tx: Transaction, typeArg: string, args: CreateEntriesArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::priority_queue::create_entries`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.p, `vector<u64>`), vector(tx, `${typeArg}`, args.v)],\n  });\n}\n\nexport interface MaxHeapifyRecursiveArgs {\n  v: Array<TransactionObjectInput> | TransactionArgument;\n  len: bigint | TransactionArgument;\n  i: bigint | TransactionArgument;\n}\n\nexport function maxHeapifyRecursive(tx: Transaction, typeArg: string, args: MaxHeapifyRecursiveArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::priority_queue::max_heapify_recursive`,\n    typeArguments: [typeArg],\n    arguments: [\n      vector(tx, `${Entry.$typeName}<${typeArg}>`, args.v),\n      pure(tx, args.len, `u64`),\n      pure(tx, args.i, `u64`),\n    ],\n  });\n}\n\nexport interface NewEntryArgs {\n  priority: bigint | TransactionArgument;\n  value: GenericArg;\n}\n\nexport function newEntry(tx: Transaction, typeArg: string, args: NewEntryArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::priority_queue::new_entry`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.priority, `u64`), generic(tx, `${typeArg}`, args.value)],\n  });\n}\n\nexport function popMax(tx: Transaction, typeArg: string, pq: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::priority_queue::pop_max`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pq)],\n  });\n}\n\nexport function priorities(tx: Transaction, typeArg: string, pq: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::priority_queue::priorities`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pq)],\n  });\n}\n\nexport interface RestoreHeapRecursiveArgs {\n  v: Array<TransactionObjectInput> | TransactionArgument;\n  i: bigint | TransactionArgument;\n}\n\nexport function restoreHeapRecursive(tx: Transaction, typeArg: string, args: RestoreHeapRecursiveArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::priority_queue::restore_heap_recursive`,\n    typeArguments: [typeArg],\n    arguments: [vector(tx, `${Entry.$typeName}<${typeArg}>`, args.v), pure(tx, args.i, `u64`)],\n  });\n}\n"]}