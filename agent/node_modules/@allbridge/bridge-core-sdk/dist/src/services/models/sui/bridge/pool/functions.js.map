{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/bridge/pool/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface NewArgs {\n  coinMetadata: TransactionObjectInput;\n  a: bigint | TransactionArgument;\n  feeShareBp: bigint | TransactionArgument;\n}\n\nexport function new_(tx: Transaction, typeArg: string, args: NewArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::new`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.coinMetadata), pure(tx, args.a, `u64`), pure(tx, args.feeShareBp, `u64`)],\n  });\n}\n\nexport function balance(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport function decimals(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::decimals`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport interface DepositArgs {\n  pool: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n  coin: TransactionObjectInput;\n}\n\nexport function deposit(tx: Transaction, typeArg: string, args: DepositArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), obj(tx, args.userDeposit), obj(tx, args.coin)],\n  });\n}\n\nexport interface WithdrawArgs {\n  pool: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n  amountLp: bigint | TransactionArgument;\n}\n\nexport function withdraw(tx: Transaction, typeArg: string, args: WithdrawArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), obj(tx, args.userDeposit), pure(tx, args.amountLp, `u64`)],\n  });\n}\n\nexport function state(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::state`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport function init(tx: Transaction) {\n  return tx.moveCall({ target: `${PUBLISHED_AT}::pool::init`, arguments: [] });\n}\n\nexport function rewards(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::rewards`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport function claimAdminFee(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::claim_admin_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport interface ClaimRewardArgs {\n  pool: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function claimReward(tx: Transaction, typeArg: string, args: ClaimRewardArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::claim_reward`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), obj(tx, args.userDeposit)],\n  });\n}\n\nexport interface SetAdminFeeShareBpArgs {\n  pool: TransactionObjectInput;\n  adminFeeShareBp: bigint | TransactionArgument;\n}\n\nexport function setAdminFeeShareBp(tx: Transaction, typeArg: string, args: SetAdminFeeShareBpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::set_admin_fee_share_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), pure(tx, args.adminFeeShareBp, `u64`)],\n  });\n}\n\nexport interface SetBalanceRatioMinBpArgs {\n  pool: TransactionObjectInput;\n  balanceRatioMinBp: bigint | TransactionArgument;\n}\n\nexport function setBalanceRatioMinBp(tx: Transaction, typeArg: string, args: SetBalanceRatioMinBpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::set_balance_ratio_min_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), pure(tx, args.balanceRatioMinBp, `u64`)],\n  });\n}\n\nexport interface AdjustTotalLpAmountArgs {\n  pool: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function adjustTotalLpAmount(tx: Transaction, typeArg: string, args: AdjustTotalLpAmountArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::adjust_total_lp_amount`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), obj(tx, args.userDeposit)],\n  });\n}\n\nexport function canDeposit(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::can_deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport function canWithdraw(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::can_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport function feeShare(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::fee_share`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport interface FromSystemPrecisionArgs {\n  pool: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function fromSystemPrecision(tx: Transaction, typeArg: string, args: FromSystemPrecisionArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::from_system_precision`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport interface GetFeeArgs {\n  pool: TransactionObjectInput;\n  coin: TransactionObjectInput;\n  zeroFee: boolean | TransactionArgument;\n}\n\nexport function getFee(tx: Transaction, typeArg: string, args: GetFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::get_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), obj(tx, args.coin), pure(tx, args.zeroFee, `bool`)],\n  });\n}\n\nexport interface SetFeeShareArgs {\n  pool: TransactionObjectInput;\n  feeShareBp: bigint | TransactionArgument;\n}\n\nexport function setFeeShare(tx: Transaction, typeArg: string, args: SetFeeShareArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::set_fee_share`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), pure(tx, args.feeShareBp, `u64`)],\n  });\n}\n\nexport function startDeposit(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::start_deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport function startWithdraw(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::start_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport function stopDeposit(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::stop_deposit`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport function stopWithdraw(tx: Transaction, typeArg: string, pool: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::stop_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pool)],\n  });\n}\n\nexport interface SwapFromVusdArgs {\n  pool: TransactionObjectInput;\n  vusdAmount: bigint | TransactionArgument;\n  receiveAmountMin: bigint | TransactionArgument;\n  zeroFee: boolean | TransactionArgument;\n}\n\nexport function swapFromVusd(tx: Transaction, typeArg: string, args: SwapFromVusdArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::swap_from_vusd`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.pool),\n      pure(tx, args.vusdAmount, `u64`),\n      pure(tx, args.receiveAmountMin, `u64`),\n      pure(tx, args.zeroFee, `bool`),\n    ],\n  });\n}\n\nexport interface SwapToVusdArgs {\n  pool: TransactionObjectInput;\n  coin: TransactionObjectInput;\n  zeroFee: boolean | TransactionArgument;\n}\n\nexport function swapToVusd(tx: Transaction, typeArg: string, args: SwapToVusdArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::swap_to_vusd`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), obj(tx, args.coin), pure(tx, args.zeroFee, `bool`)],\n  });\n}\n\nexport interface ToSystemPrecisionArgs {\n  pool: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function toSystemPrecision(tx: Transaction, typeArg: string, args: ToSystemPrecisionArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool::to_system_precision`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.pool), pure(tx, args.amount, `u64`)],\n  });\n}\n"]}