"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = void 0;
exports.isState = isState;
// @ts-nocheck
const reified = __importStar(require("../../../../_framework/reified"));
const reified_1 = require("../../../../_framework/reified");
const util_1 = require("../../../../_framework/util");
const structs_1 = require("../../../../sui/object/structs");
const structs_2 = require("../../../../sui/table/structs");
const structs_3 = require("../../../../sui/vec-set/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== State =============================== */
function isState(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::state::State`;
}
class State {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::state::State`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = State.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = State.$isPhantom;
    id;
    localDomain;
    messageVersion;
    maxMessageBodySize;
    enabledAttesters;
    nextAvailableNonce;
    usedNonces;
    signatureThreshold;
    paused;
    compatibleVersions;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(State.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
        this.localDomain = fields.localDomain;
        this.messageVersion = fields.messageVersion;
        this.maxMessageBodySize = fields.maxMessageBodySize;
        this.enabledAttesters = fields.enabledAttesters;
        this.nextAvailableNonce = fields.nextAvailableNonce;
        this.usedNonces = fields.usedNonces;
        this.signatureThreshold = fields.signatureThreshold;
        this.paused = fields.paused;
        this.compatibleVersions = fields.compatibleVersions;
    }
    static reified() {
        return {
            typeName: State.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(State.$typeName, ...[]),
            typeArgs: [],
            isPhantom: State.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => State.fromFields(fields),
            fromFieldsWithTypes: (item) => State.fromFieldsWithTypes(item),
            fromBcs: (data) => State.fromBcs(data),
            bcs: State.bcs,
            fromJSONField: (field) => State.fromJSONField(field),
            fromJSON: (json) => State.fromJSON(json),
            fromSuiParsedData: (content) => State.fromSuiParsedData(content),
            fromSuiObjectData: (content) => State.fromSuiObjectData(content),
            fetch: async (client, id) => State.fetch(client, id),
            new: (fields) => {
                return new State([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return State.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(State.reified());
    }
    static get p() {
        return State.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("State", {
            id: structs_1.UID.bcs,
            local_domain: bcs_1.bcs.u32(),
            message_version: bcs_1.bcs.u32(),
            max_message_body_size: bcs_1.bcs.u64(),
            enabled_attesters: structs_3.VecSet.bcs(bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            })),
            next_available_nonce: bcs_1.bcs.u64(),
            used_nonces: structs_2.Table.bcs,
            signature_threshold: bcs_1.bcs.u64(),
            paused: bcs_1.bcs.bool(),
            compatible_versions: structs_3.VecSet.bcs(bcs_1.bcs.u64()),
        });
    }
    static fromFields(fields) {
        return State.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_1.UID.reified(), fields.id),
            localDomain: (0, reified_1.decodeFromFields)("u32", fields.local_domain),
            messageVersion: (0, reified_1.decodeFromFields)("u32", fields.message_version),
            maxMessageBodySize: (0, reified_1.decodeFromFields)("u64", fields.max_message_body_size),
            enabledAttesters: (0, reified_1.decodeFromFields)(structs_3.VecSet.reified("address"), fields.enabled_attesters),
            nextAvailableNonce: (0, reified_1.decodeFromFields)("u64", fields.next_available_nonce),
            usedNonces: (0, reified_1.decodeFromFields)(structs_2.Table.reified(reified.phantom("address"), reified.phantom("bool")), fields.used_nonces),
            signatureThreshold: (0, reified_1.decodeFromFields)("u64", fields.signature_threshold),
            paused: (0, reified_1.decodeFromFields)("bool", fields.paused),
            compatibleVersions: (0, reified_1.decodeFromFields)(structs_3.VecSet.reified("u64"), fields.compatible_versions),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isState(item.type)) {
            throw new Error("not a State type");
        }
        return State.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.UID.reified(), item.fields.id),
            localDomain: (0, reified_1.decodeFromFieldsWithTypes)("u32", item.fields.local_domain),
            messageVersion: (0, reified_1.decodeFromFieldsWithTypes)("u32", item.fields.message_version),
            maxMessageBodySize: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.max_message_body_size),
            enabledAttesters: (0, reified_1.decodeFromFieldsWithTypes)(structs_3.VecSet.reified("address"), item.fields.enabled_attesters),
            nextAvailableNonce: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.next_available_nonce),
            usedNonces: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.Table.reified(reified.phantom("address"), reified.phantom("bool")), item.fields.used_nonces),
            signatureThreshold: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.signature_threshold),
            paused: (0, reified_1.decodeFromFieldsWithTypes)("bool", item.fields.paused),
            compatibleVersions: (0, reified_1.decodeFromFieldsWithTypes)(structs_3.VecSet.reified("u64"), item.fields.compatible_versions),
        });
    }
    static fromBcs(data) {
        return State.fromFields(State.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
            localDomain: this.localDomain,
            messageVersion: this.messageVersion,
            maxMessageBodySize: this.maxMessageBodySize.toString(),
            enabledAttesters: this.enabledAttesters.toJSONField(),
            nextAvailableNonce: this.nextAvailableNonce.toString(),
            usedNonces: this.usedNonces.toJSONField(),
            signatureThreshold: this.signatureThreshold.toString(),
            paused: this.paused,
            compatibleVersions: this.compatibleVersions.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return State.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_1.UID.reified(), field.id),
            localDomain: (0, reified_1.decodeFromJSONField)("u32", field.localDomain),
            messageVersion: (0, reified_1.decodeFromJSONField)("u32", field.messageVersion),
            maxMessageBodySize: (0, reified_1.decodeFromJSONField)("u64", field.maxMessageBodySize),
            enabledAttesters: (0, reified_1.decodeFromJSONField)(structs_3.VecSet.reified("address"), field.enabledAttesters),
            nextAvailableNonce: (0, reified_1.decodeFromJSONField)("u64", field.nextAvailableNonce),
            usedNonces: (0, reified_1.decodeFromJSONField)(structs_2.Table.reified(reified.phantom("address"), reified.phantom("bool")), field.usedNonces),
            signatureThreshold: (0, reified_1.decodeFromJSONField)("u64", field.signatureThreshold),
            paused: (0, reified_1.decodeFromJSONField)("bool", field.paused),
            compatibleVersions: (0, reified_1.decodeFromJSONField)(structs_3.VecSet.reified("u64"), field.compatibleVersions),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== State.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return State.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isState(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a State object`);
        }
        return State.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isState(data.bcs.type)) {
                throw new Error(`object at is not a State object`);
            }
            return State.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return State.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching State object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isState(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a State object`);
        }
        return State.fromSuiObjectData(res.data);
    }
}
exports.State = State;
//# sourceMappingURL=structs.js.map