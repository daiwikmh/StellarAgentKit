import { PhantomReified, PhantomToTypeStr, PhantomTypeArgument, Reified, StructClass, ToField, ToPhantomTypeArgument, ToTypeStr } from "../../../../_framework/reified";
import { FieldsWithTypes } from "../../../../_framework/util";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isMintAllowance(type: string): boolean;
export interface MintAllowanceFields<T extends PhantomTypeArgument> {
    value: ToField<"u64">;
}
export type MintAllowanceReified<T extends PhantomTypeArgument> = Reified<MintAllowance<T>, MintAllowanceFields<T>>;
export declare class MintAllowance<T extends PhantomTypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [true];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [PhantomToTypeStr<T>];
    readonly $isPhantom: readonly [true];
    readonly value: ToField<"u64">;
    private constructor();
    static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): MintAllowanceReified<ToPhantomTypeArgument<T>>;
    static get r(): typeof MintAllowance.reified;
    static phantom<T extends PhantomReified<PhantomTypeArgument>>(T: T): PhantomReified<ToTypeStr<MintAllowance<ToPhantomTypeArgument<T>>>>;
    static get p(): typeof MintAllowance.phantom;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        value: string;
    }, {
        value: string | number | bigint;
    }>;
    static fromFields<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, fields: Record<string, any>): MintAllowance<ToPhantomTypeArgument<T>>;
    static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, item: FieldsWithTypes): MintAllowance<ToPhantomTypeArgument<T>>;
    static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: Uint8Array): MintAllowance<ToPhantomTypeArgument<T>>;
    toJSONField(): {
        value: string;
    };
    toJSON(): {
        value: string;
        $typeName: string;
        $typeArgs: [PhantomToTypeStr<T>];
    };
    static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, field: any): MintAllowance<ToPhantomTypeArgument<T>>;
    static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, json: Record<string, any>): MintAllowance<ToPhantomTypeArgument<T>>;
    static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, content: SuiParsedData): MintAllowance<ToPhantomTypeArgument<T>>;
    static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: SuiObjectData): MintAllowance<ToPhantomTypeArgument<T>>;
    static fetch<T extends PhantomReified<PhantomTypeArgument>>(client: SuiClient, typeArg: T, id: string): Promise<MintAllowance<ToPhantomTypeArgument<T>>>;
}
