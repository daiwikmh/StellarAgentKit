{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0x4931e06dce648b3931f890035bd196920770e913e43e45990b383f6486fdd0a5/message/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  fieldToJSON,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { Vector } from \"../../../../_framework/vector\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64, fromHEX, toHEX } from \"@mysten/sui/utils\";\n\n/* ============================== Message =============================== */\n\nexport function isMessage(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::message::Message`;\n}\n\nexport interface MessageFields {\n  version: ToField<\"u32\">;\n  sourceDomain: ToField<\"u32\">;\n  destinationDomain: ToField<\"u32\">;\n  nonce: ToField<\"u64\">;\n  sender: ToField<\"address\">;\n  recipient: ToField<\"address\">;\n  destinationCaller: ToField<\"address\">;\n  messageBody: ToField<Vector<\"u8\">>;\n}\n\nexport type MessageReified = Reified<Message, MessageFields>;\n\nexport class Message implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::message::Message`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Message.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Message.$isPhantom;\n\n  readonly version: ToField<\"u32\">;\n  readonly sourceDomain: ToField<\"u32\">;\n  readonly destinationDomain: ToField<\"u32\">;\n  readonly nonce: ToField<\"u64\">;\n  readonly sender: ToField<\"address\">;\n  readonly recipient: ToField<\"address\">;\n  readonly destinationCaller: ToField<\"address\">;\n  readonly messageBody: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: MessageFields) {\n    this.$fullTypeName = composeSuiType(Message.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.version = fields.version;\n    this.sourceDomain = fields.sourceDomain;\n    this.destinationDomain = fields.destinationDomain;\n    this.nonce = fields.nonce;\n    this.sender = fields.sender;\n    this.recipient = fields.recipient;\n    this.destinationCaller = fields.destinationCaller;\n    this.messageBody = fields.messageBody;\n  }\n\n  static reified(): MessageReified {\n    return {\n      typeName: Message.$typeName,\n      fullTypeName: composeSuiType(Message.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Message.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Message.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Message.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Message.fromBcs(data),\n      bcs: Message.bcs,\n      fromJSONField: (field: any) => Message.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Message.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Message.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Message.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Message.fetch(client, id),\n      new: (fields: MessageFields) => {\n        return new Message([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Message.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Message>> {\n    return phantom(Message.reified());\n  }\n  static get p() {\n    return Message.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Message\", {\n      version: bcs.u32(),\n      source_domain: bcs.u32(),\n      destination_domain: bcs.u32(),\n      nonce: bcs.u64(),\n      sender: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      recipient: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      destination_caller: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      message_body: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Message {\n    return Message.reified().new({\n      version: decodeFromFields(\"u32\", fields.version),\n      sourceDomain: decodeFromFields(\"u32\", fields.source_domain),\n      destinationDomain: decodeFromFields(\"u32\", fields.destination_domain),\n      nonce: decodeFromFields(\"u64\", fields.nonce),\n      sender: decodeFromFields(\"address\", fields.sender),\n      recipient: decodeFromFields(\"address\", fields.recipient),\n      destinationCaller: decodeFromFields(\"address\", fields.destination_caller),\n      messageBody: decodeFromFields(reified.vector(\"u8\"), fields.message_body),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Message {\n    if (!isMessage(item.type)) {\n      throw new Error(\"not a Message type\");\n    }\n\n    return Message.reified().new({\n      version: decodeFromFieldsWithTypes(\"u32\", item.fields.version),\n      sourceDomain: decodeFromFieldsWithTypes(\"u32\", item.fields.source_domain),\n      destinationDomain: decodeFromFieldsWithTypes(\"u32\", item.fields.destination_domain),\n      nonce: decodeFromFieldsWithTypes(\"u64\", item.fields.nonce),\n      sender: decodeFromFieldsWithTypes(\"address\", item.fields.sender),\n      recipient: decodeFromFieldsWithTypes(\"address\", item.fields.recipient),\n      destinationCaller: decodeFromFieldsWithTypes(\"address\", item.fields.destination_caller),\n      messageBody: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.message_body),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Message {\n    return Message.fromFields(Message.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      version: this.version,\n      sourceDomain: this.sourceDomain,\n      destinationDomain: this.destinationDomain,\n      nonce: this.nonce.toString(),\n      sender: this.sender,\n      recipient: this.recipient,\n      destinationCaller: this.destinationCaller,\n      messageBody: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.messageBody),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Message {\n    return Message.reified().new({\n      version: decodeFromJSONField(\"u32\", field.version),\n      sourceDomain: decodeFromJSONField(\"u32\", field.sourceDomain),\n      destinationDomain: decodeFromJSONField(\"u32\", field.destinationDomain),\n      nonce: decodeFromJSONField(\"u64\", field.nonce),\n      sender: decodeFromJSONField(\"address\", field.sender),\n      recipient: decodeFromJSONField(\"address\", field.recipient),\n      destinationCaller: decodeFromJSONField(\"address\", field.destinationCaller),\n      messageBody: decodeFromJSONField(reified.vector(\"u8\"), field.messageBody),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): Message {\n    if (json.$typeName !== Message.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Message.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Message {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isMessage(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Message object`);\n    }\n    return Message.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Message {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isMessage(data.bcs.type)) {\n        throw new Error(`object at is not a Message object`);\n      }\n\n      return Message.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Message.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Message> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Message object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isMessage(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Message object`);\n    }\n\n    return Message.fromSuiObjectData(res.data);\n  }\n}\n"]}