{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/bridge/another-bridge/structs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,0CAGC;AA3BD,cAAc;AACd,kEAAoD;AACpD,sDAWkC;AAClC,gDAAyF;AACzF,yDAAsD;AACtD,qDAA8C;AAC9C,oCAAkC;AAClC,yCAAsC;AAEtC,6CAA4C;AAE5C,kFAAkF;AAElF,SAAgB,eAAe,CAAC,IAAY;IAC1C,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,KAAK,GAAG,cAAM,iCAAiC,CAAC;AAC7D,CAAC;AAUD,MAAa,aAAa;IACxB,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,cAAM,iCAAiC,CAAC;IACpD,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,EAAW,CAAC;IAEhC,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;IACpC,aAAa,CAAS;IACtB,SAAS,CAAK;IACd,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC;IAEtC,OAAO,CAAmB;IAC1B,MAAM,CAAmC;IACzC,QAAQ,CAAiB;IAElC,YAAoB,QAAY,EAAE,MAA2B;QAC3D,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,aAAa,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QACpF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,aAAa,CAAC,SAAS;YACjC,YAAY,EAAE,IAAA,qBAAc,EAAC,aAAa,CAAC,SAAS,EAAE,GAAG,EAAE,CAAW;YACtE,QAAQ,EAAE,EAAQ;YAClB,SAAS,EAAE,aAAa,CAAC,UAAU;YACnC,eAAe,EAAE,EAAE;YACnB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC;YAC7E,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC,IAAI,CAAC;YACvF,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC;YAC1D,GAAG,EAAE,aAAa,CAAC,GAAG;YACtB,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC;YACjE,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC;YACrE,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,aAAa,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACvF,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,aAAa,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACvF,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YAC/E,GAAG,EAAE,CAAC,MAA2B,EAAE,EAAE;gBACnC,OAAO,IAAI,aAAa,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YACvC,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,aAAa,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO,IAAA,iBAAO,EAAC,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;IAC1C,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,aAAa,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,SAAG,CAAC,MAAM,CAAC,eAAe,EAAE;YACjC,OAAO,EAAE,iBAAO,CAAC,GAAG;YACpB,MAAM,EAAE,aAAG,CAAC,GAAG;YACf,SAAS,EAAE,SAAG,CAAC,GAAG,EAAE;SACrB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAA2B;QAC3C,OAAO,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACjC,OAAO,EAAE,IAAA,0BAAgB,EAAC,iBAAO,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC;YAC5D,MAAM,EAAE,IAAA,0BAAgB,EAAC,aAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAO,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC;YACxF,QAAQ,EAAE,IAAA,0BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC;SACpD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAqB;QAC9C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC9C,CAAC;QAED,OAAO,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACjC,OAAO,EAAE,IAAA,mCAAyB,EAAC,iBAAO,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YAC1E,MAAM,EAAE,IAAA,mCAAyB,EAAC,aAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAO,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACtG,QAAQ,EAAE,IAAA,mCAAyB,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;SAClE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAgB;QAC7B,OAAO,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACjE,CAAC;IAED,WAAW;QACT,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;YACnC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;YACjC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;SACnC,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,KAAU;QAC7B,OAAO,aAAa,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACjC,OAAO,EAAE,IAAA,6BAAmB,EAAC,iBAAO,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC;YAC9D,MAAM,EAAE,IAAA,6BAAmB,EAAC,aAAG,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAO,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC;YAC1F,QAAQ,EAAE,IAAA,6BAAmB,EAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC;SACrD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAyB;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,aAAa,CAAC,SAAS,EAAE,CAAC;YAC/C,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAsB;QAC7C,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,gCAAgC,CAAC,CAAC;QAC3F,CAAC;QACD,OAAO,aAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC1E,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;YAC7D,CAAC;YAED,OAAO,aAAa,CAAC,OAAO,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3D,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAiB,EAAE,EAAU;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,6CAA6C,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACxF,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACpF,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,gCAAgC,CAAC,CAAC;QACtE,CAAC;QAED,OAAO,aAAa,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;;AAjKH,sCAkKC","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n  ToTypeStr as ToPhantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { Bytes32 } from \"../../utils/bytes32/structs\";\nimport { Set } from \"../../utils/set/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== AnotherBridge =============================== */\n\nexport function isAnotherBridge(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::another_bridge::AnotherBridge`;\n}\n\nexport interface AnotherBridgeFields {\n  address: ToField<Bytes32>;\n  tokens: ToField<Set<ToPhantom<Bytes32>>>;\n  gasUsage: ToField<\"u64\">;\n}\n\nexport type AnotherBridgeReified = Reified<AnotherBridge, AnotherBridgeFields>;\n\nexport class AnotherBridge implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::another_bridge::AnotherBridge`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = AnotherBridge.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = AnotherBridge.$isPhantom;\n\n  readonly address: ToField<Bytes32>;\n  readonly tokens: ToField<Set<ToPhantom<Bytes32>>>;\n  readonly gasUsage: ToField<\"u64\">;\n\n  private constructor(typeArgs: [], fields: AnotherBridgeFields) {\n    this.$fullTypeName = composeSuiType(AnotherBridge.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.address = fields.address;\n    this.tokens = fields.tokens;\n    this.gasUsage = fields.gasUsage;\n  }\n\n  static reified(): AnotherBridgeReified {\n    return {\n      typeName: AnotherBridge.$typeName,\n      fullTypeName: composeSuiType(AnotherBridge.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: AnotherBridge.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => AnotherBridge.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => AnotherBridge.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => AnotherBridge.fromBcs(data),\n      bcs: AnotherBridge.bcs,\n      fromJSONField: (field: any) => AnotherBridge.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => AnotherBridge.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => AnotherBridge.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => AnotherBridge.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => AnotherBridge.fetch(client, id),\n      new: (fields: AnotherBridgeFields) => {\n        return new AnotherBridge([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return AnotherBridge.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<AnotherBridge>> {\n    return phantom(AnotherBridge.reified());\n  }\n  static get p() {\n    return AnotherBridge.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"AnotherBridge\", {\n      address: Bytes32.bcs,\n      tokens: Set.bcs,\n      gas_usage: bcs.u64(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): AnotherBridge {\n    return AnotherBridge.reified().new({\n      address: decodeFromFields(Bytes32.reified(), fields.address),\n      tokens: decodeFromFields(Set.reified(reified.phantom(Bytes32.reified())), fields.tokens),\n      gasUsage: decodeFromFields(\"u64\", fields.gas_usage),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): AnotherBridge {\n    if (!isAnotherBridge(item.type)) {\n      throw new Error(\"not a AnotherBridge type\");\n    }\n\n    return AnotherBridge.reified().new({\n      address: decodeFromFieldsWithTypes(Bytes32.reified(), item.fields.address),\n      tokens: decodeFromFieldsWithTypes(Set.reified(reified.phantom(Bytes32.reified())), item.fields.tokens),\n      gasUsage: decodeFromFieldsWithTypes(\"u64\", item.fields.gas_usage),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): AnotherBridge {\n    return AnotherBridge.fromFields(AnotherBridge.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      address: this.address.toJSONField(),\n      tokens: this.tokens.toJSONField(),\n      gasUsage: this.gasUsage.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): AnotherBridge {\n    return AnotherBridge.reified().new({\n      address: decodeFromJSONField(Bytes32.reified(), field.address),\n      tokens: decodeFromJSONField(Set.reified(reified.phantom(Bytes32.reified())), field.tokens),\n      gasUsage: decodeFromJSONField(\"u64\", field.gasUsage),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): AnotherBridge {\n    if (json.$typeName !== AnotherBridge.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return AnotherBridge.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): AnotherBridge {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isAnotherBridge(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a AnotherBridge object`);\n    }\n    return AnotherBridge.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): AnotherBridge {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isAnotherBridge(data.bcs.type)) {\n        throw new Error(`object at is not a AnotherBridge object`);\n      }\n\n      return AnotherBridge.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return AnotherBridge.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<AnotherBridge> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching AnotherBridge object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isAnotherBridge(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a AnotherBridge object`);\n    }\n\n    return AnotherBridge.fromSuiObjectData(res.data);\n  }\n}\n"]}