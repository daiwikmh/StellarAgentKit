"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.add = add;
exports.remove = remove;
exports.lock = lock;
exports.place = place;
exports.canLock = canLock;
exports.canPlace = canPlace;
exports.disable = disable;
exports.enable = enable;
exports.extension = extension;
exports.extensionMut = extensionMut;
exports.isEnabled = isEnabled;
exports.isInstalled = isInstalled;
exports.storage = storage;
exports.storageMut = storageMut;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function add(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::add`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.generic)(tx, `${typeArg}`, args.ext),
            (0, util_1.obj)(tx, args.self),
            (0, util_1.obj)(tx, args.cap),
            (0, util_1.pure)(tx, args.permissions, `u128`),
        ],
    });
}
function remove(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::remove`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function lock(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::lock`,
        typeArguments: typeArgs,
        arguments: [
            (0, util_1.generic)(tx, `${typeArgs[0]}`, args.ext),
            (0, util_1.obj)(tx, args.self),
            (0, util_1.generic)(tx, `${typeArgs[1]}`, args.item),
            (0, util_1.obj)(tx, args.policy),
        ],
    });
}
function place(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::place`,
        typeArguments: typeArgs,
        arguments: [
            (0, util_1.generic)(tx, `${typeArgs[0]}`, args.ext),
            (0, util_1.obj)(tx, args.self),
            (0, util_1.generic)(tx, `${typeArgs[1]}`, args.item),
            (0, util_1.obj)(tx, args.policy),
        ],
    });
}
function canLock(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::can_lock`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function canPlace(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::can_place`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function disable(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::disable`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function enable(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::enable`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function extension(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::extension`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function extensionMut(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::extension_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function isEnabled(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::is_enabled`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function isInstalled(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::is_installed`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function storage(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::storage`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, args.ext), (0, util_1.obj)(tx, args.self)],
    });
}
function storageMut(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk_extension::storage_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, args.ext), (0, util_1.obj)(tx, args.self)],
    });
}
//# sourceMappingURL=functions.js.map