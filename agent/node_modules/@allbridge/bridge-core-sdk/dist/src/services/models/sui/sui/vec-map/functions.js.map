{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/vec-map/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { GenericArg, generic, obj, pure, vector } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface ContainsArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function contains(tx: Transaction, typeArgs: [string, string], args: ContainsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::contains`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), generic(tx, `${typeArgs[0]}`, args.key)],\n  });\n}\n\nexport function destroyEmpty(tx: Transaction, typeArgs: [string, string], self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::destroy_empty`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport function empty(tx: Transaction, typeArgs: [string, string]) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::empty`,\n    typeArguments: typeArgs,\n    arguments: [],\n  });\n}\n\nexport interface InsertArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n  value: GenericArg;\n}\n\nexport function insert(tx: Transaction, typeArgs: [string, string], args: InsertArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::insert`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), generic(tx, `${typeArgs[0]}`, args.key), generic(tx, `${typeArgs[1]}`, args.value)],\n  });\n}\n\nexport function isEmpty(tx: Transaction, typeArgs: [string, string], self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::is_empty`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface RemoveArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function remove(tx: Transaction, typeArgs: [string, string], args: RemoveArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::remove`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), generic(tx, `${typeArgs[0]}`, args.key)],\n  });\n}\n\nexport function keys(tx: Transaction, typeArgs: [string, string], self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::keys`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface GetIdxArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function getIdx(tx: Transaction, typeArgs: [string, string], args: GetIdxArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::get_idx`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), generic(tx, `${typeArgs[0]}`, args.key)],\n  });\n}\n\nexport interface GetIdxOptArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function getIdxOpt(tx: Transaction, typeArgs: [string, string], args: GetIdxOptArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::get_idx_opt`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), generic(tx, `${typeArgs[0]}`, args.key)],\n  });\n}\n\nexport function size(tx: Transaction, typeArgs: [string, string], self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::size`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface GetArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function get(tx: Transaction, typeArgs: [string, string], args: GetArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::get`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), generic(tx, `${typeArgs[0]}`, args.key)],\n  });\n}\n\nexport interface FromKeysValuesArgs {\n  keys: Array<GenericArg> | TransactionArgument;\n  values: Array<GenericArg> | TransactionArgument;\n}\n\nexport function fromKeysValues(tx: Transaction, typeArgs: [string, string], args: FromKeysValuesArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::from_keys_values`,\n    typeArguments: typeArgs,\n    arguments: [vector(tx, `${typeArgs[0]}`, args.keys), vector(tx, `${typeArgs[1]}`, args.values)],\n  });\n}\n\nexport interface GetEntryByIdxArgs {\n  self: TransactionObjectInput;\n  idx: bigint | TransactionArgument;\n}\n\nexport function getEntryByIdx(tx: Transaction, typeArgs: [string, string], args: GetEntryByIdxArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::get_entry_by_idx`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), pure(tx, args.idx, `u64`)],\n  });\n}\n\nexport interface GetEntryByIdxMutArgs {\n  self: TransactionObjectInput;\n  idx: bigint | TransactionArgument;\n}\n\nexport function getEntryByIdxMut(tx: Transaction, typeArgs: [string, string], args: GetEntryByIdxMutArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::get_entry_by_idx_mut`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), pure(tx, args.idx, `u64`)],\n  });\n}\n\nexport interface GetMutArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function getMut(tx: Transaction, typeArgs: [string, string], args: GetMutArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::get_mut`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), generic(tx, `${typeArgs[0]}`, args.key)],\n  });\n}\n\nexport function intoKeysValues(tx: Transaction, typeArgs: [string, string], self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::into_keys_values`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport function pop(tx: Transaction, typeArgs: [string, string], self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::pop`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface RemoveEntryByIdxArgs {\n  self: TransactionObjectInput;\n  idx: bigint | TransactionArgument;\n}\n\nexport function removeEntryByIdx(tx: Transaction, typeArgs: [string, string], args: RemoveEntryByIdxArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::remove_entry_by_idx`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), pure(tx, args.idx, `u64`)],\n  });\n}\n\nexport interface TryGetArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function tryGet(tx: Transaction, typeArgs: [string, string], args: TryGetArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_map::try_get`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.self), generic(tx, `${typeArgs[0]}`, args.key)],\n  });\n}\n"]}