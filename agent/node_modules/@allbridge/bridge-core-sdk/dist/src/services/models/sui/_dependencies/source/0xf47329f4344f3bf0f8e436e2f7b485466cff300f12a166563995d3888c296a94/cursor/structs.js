"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cursor = void 0;
exports.isCursor = isCursor;
// @ts-nocheck
const reified = __importStar(require("../../../../_framework/reified"));
const reified_1 = require("../../../../_framework/reified");
const util_1 = require("../../../../_framework/util");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== Cursor =============================== */
function isCursor(type) {
    type = (0, util_1.compressSuiType)(type);
    return type.startsWith(`${index_1.PKG_V1}::cursor::Cursor` + "<");
}
class Cursor {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::cursor::Cursor`;
    }
    static $numTypeParams = 1;
    static $isPhantom = [false];
    $typeName = Cursor.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = Cursor.$isPhantom;
    data;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(Cursor.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.data = fields.data;
    }
    static reified(T) {
        return {
            typeName: Cursor.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(Cursor.$typeName, ...[(0, reified_1.extractType)(T)]),
            typeArgs: [(0, reified_1.extractType)(T)],
            isPhantom: Cursor.$isPhantom,
            reifiedTypeArgs: [T],
            fromFields: (fields) => Cursor.fromFields(T, fields),
            fromFieldsWithTypes: (item) => Cursor.fromFieldsWithTypes(T, item),
            fromBcs: (data) => Cursor.fromBcs(T, data),
            bcs: Cursor.bcs((0, reified_1.toBcs)(T)),
            fromJSONField: (field) => Cursor.fromJSONField(T, field),
            fromJSON: (json) => Cursor.fromJSON(T, json),
            fromSuiParsedData: (content) => Cursor.fromSuiParsedData(T, content),
            fromSuiObjectData: (content) => Cursor.fromSuiObjectData(T, content),
            fetch: async (client, id) => Cursor.fetch(client, T, id),
            new: (fields) => {
                return new Cursor([(0, reified_1.extractType)(T)], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return Cursor.reified;
    }
    static phantom(T) {
        return (0, reified_1.phantom)(Cursor.reified(T));
    }
    static get p() {
        return Cursor.phantom;
    }
    static get bcs() {
        return (T) => bcs_1.bcs.struct(`Cursor<${T.name}>`, {
            data: bcs_1.bcs.vector(T),
        });
    }
    static fromFields(typeArg, fields) {
        return Cursor.reified(typeArg).new({
            data: (0, reified_1.decodeFromFields)(reified.vector(typeArg), fields.data),
        });
    }
    static fromFieldsWithTypes(typeArg, item) {
        if (!isCursor(item.type)) {
            throw new Error("not a Cursor type");
        }
        (0, reified_1.assertFieldsWithTypesArgsMatch)(item, [typeArg]);
        return Cursor.reified(typeArg).new({
            data: (0, reified_1.decodeFromFieldsWithTypes)(reified.vector(typeArg), item.fields.data),
        });
    }
    static fromBcs(typeArg, data) {
        const typeArgs = [typeArg];
        return Cursor.fromFields(typeArg, Cursor.bcs((0, reified_1.toBcs)(typeArgs[0])).parse(data));
    }
    toJSONField() {
        return {
            data: (0, reified_1.fieldToJSON)(`vector<${this.$typeArgs[0]}>`, this.data),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(typeArg, field) {
        return Cursor.reified(typeArg).new({
            data: (0, reified_1.decodeFromJSONField)(reified.vector(typeArg), field.data),
        });
    }
    static fromJSON(typeArg, json) {
        if (json.$typeName !== Cursor.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        (0, reified_1.assertReifiedTypeArgsMatch)((0, util_1.composeSuiType)(Cursor.$typeName, (0, reified_1.extractType)(typeArg)), json.$typeArgs, [typeArg]);
        return Cursor.fromJSONField(typeArg, json);
    }
    static fromSuiParsedData(typeArg, content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isCursor(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a Cursor object`);
        }
        return Cursor.fromFieldsWithTypes(typeArg, content);
    }
    static fromSuiObjectData(typeArg, data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isCursor(data.bcs.type)) {
                throw new Error(`object at is not a Cursor object`);
            }
            const gotTypeArgs = (0, util_1.parseTypeName)(data.bcs.type).typeArgs;
            if (gotTypeArgs.length !== 1) {
                throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);
            }
            const gotTypeArg = (0, util_1.compressSuiType)(gotTypeArgs[0]);
            const expectedTypeArg = (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg));
            if (gotTypeArg !== (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg))) {
                throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);
            }
            return Cursor.fromBcs(typeArg, (0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return Cursor.fromSuiParsedData(typeArg, data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, typeArg, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching Cursor object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isCursor(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a Cursor object`);
        }
        return Cursor.fromSuiObjectData(typeArg, res.data);
    }
}
exports.Cursor = Cursor;
//# sourceMappingURL=structs.js.map