{"version":3,"file":"pool-contract.js","sourceRoot":"","sources":["../../../../../src/services/models/srb/pool-contract.ts"],"names":[],"mappings":"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","sourcesContent":["import { contract } from \"@stellar/stellar-sdk\";\nimport u128 = contract.u128;\nimport u32 = contract.u32;\nimport AssembledTransaction = contract.AssembledTransaction;\nimport Result = contract.Result;\nimport ContractSpec = contract.Spec;\nimport ContractClient = contract.Client;\nimport ContractClientOptions = contract.ClientOptions;\n\nexport interface SwappedFromVUsd {\n  amount: u128;\n  fee: u128;\n  recipient: string;\n  token: string;\n  vusd_amount: u128;\n}\n\nexport interface SwappedToVUsd {\n  amount: u128;\n  fee: u128;\n  sender: string;\n  token: string;\n  vusd_amount: u128;\n}\n\nexport interface Deposit {\n  amount: u128;\n  user: string;\n}\n\nexport interface Withdraw {\n  amount: u128;\n  user: string;\n}\n\nexport interface RewardsClaimed {\n  amount: u128;\n  user: string;\n}\n\nexport type Bridge = readonly [string];\nexport interface DataKey {\n  tag: \"UserDeposit\";\n  values: readonly [string];\n}\n\nexport interface Pool {\n  a: u128;\n  acc_reward_per_share_p: u128;\n  admin_fee_amount: u128;\n  admin_fee_share_bp: u128;\n  balance_ratio_min_bp: u128;\n  can_deposit: boolean;\n  can_withdraw: boolean;\n  d: u128;\n  decimals: u32;\n  fee_share_bp: u128;\n  reserves: u128;\n  token: string;\n  token_balance: u128;\n  total_lp_amount: u128;\n  v_usd_balance: u128;\n}\n\nexport interface UserDeposit {\n  lp_amount: u128;\n  reward_debt: u128;\n}\n\nexport type Admin = readonly [string];\nexport type GasOracleAddress = readonly [string];\nexport type GasUsage = readonly [Map<u32, u128>];\nexport type NativeToken = readonly [string];\nexport type StopAuthority = readonly [string];\nexport const Errors = {\n  0: { message: \"\" },\n  1: { message: \"\" },\n  2: { message: \"\" },\n  3: { message: \"\" },\n  4: { message: \"\" },\n  5: { message: \"\" },\n  6: { message: \"\" },\n  7: { message: \"\" },\n  8: { message: \"\" },\n  9: { message: \"\" },\n  10: { message: \"\" },\n  11: { message: \"\" },\n  12: { message: \"\" },\n  103: { message: \"\" },\n  104: { message: \"\" },\n  105: { message: \"\" },\n  106: { message: \"\" },\n  107: { message: \"\" },\n  108: { message: \"\" },\n  109: { message: \"\" },\n  203: { message: \"\" },\n  204: { message: \"\" },\n  205: { message: \"\" },\n  206: { message: \"\" },\n  207: { message: \"\" },\n  208: { message: \"\" },\n  209: { message: \"\" },\n  210: { message: \"\" },\n  211: { message: \"\" },\n  212: { message: \"\" },\n  214: { message: \"\" },\n  215: { message: \"\" },\n  216: { message: \"\" },\n  217: { message: \"\" },\n  218: { message: \"\" },\n  300: { message: \"\" },\n  301: { message: \"\" },\n  302: { message: \"\" },\n  303: { message: \"\" },\n  400: { message: \"\" },\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport interface PoolContract {\n  /**\n   * Construct and simulate a initialize transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  initialize: (\n    {\n      admin,\n      bridge,\n      a,\n      token,\n      fee_share_bp,\n      balance_ratio_min_bp,\n      admin_fee_share_bp,\n    }: {\n      admin: string;\n      bridge: string;\n      a: u128;\n      token: string;\n      fee_share_bp: u128;\n      balance_ratio_min_bp: u128;\n      admin_fee_share_bp: u128;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a deposit transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  deposit: (\n    { sender, amount }: { sender: string; amount: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a withdraw transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  withdraw: (\n    { sender, amount_lp }: { sender: string; amount_lp: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a swap_to_v_usd transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  swap_to_v_usd: (\n    { user, amount, zero_fee }: { user: string; amount: u128; zero_fee: boolean },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a swap_from_v_usd transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  swap_from_v_usd: (\n    {\n      user,\n      vusd_amount,\n      receive_amount_min,\n      zero_fee,\n    }: {\n      user: string;\n      vusd_amount: u128;\n      receive_amount_min: u128;\n      zero_fee: boolean;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a claim_rewards transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  claim_rewards: (\n    { sender }: { sender: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_fee_share transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * `admin`\n   */\n  set_fee_share: (\n    { fee_share_bp }: { fee_share_bp: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a adjust_total_lp_amount transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  adjust_total_lp_amount: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_balance_ratio_min_bp transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_balance_ratio_min_bp: (\n    { balance_ratio_min_bp }: { balance_ratio_min_bp: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a stop_deposit transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  stop_deposit: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a start_deposit transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  start_deposit: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a stop_withdraw transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  stop_withdraw: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a start_withdraw transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  start_withdraw: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_stop_authority transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_stop_authority: (\n    { stop_authority }: { stop_authority: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_bridge transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_bridge: (\n    { bridge }: { bridge: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_admin: (\n    { new_admin }: { new_admin: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_admin_fee_share transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_admin_fee_share: (\n    { admin_fee_share_bp }: { admin_fee_share_bp: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a claim_admin_fee transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  claim_admin_fee: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a pending_reward transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.   *\n   * `view`\n   */\n  pending_reward: (\n    { user }: { user: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_pool transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_pool: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<Pool>>>;\n\n  /**\n   * Construct and simulate a get_admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_admin: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_stop_authority transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_stop_authority: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_bridge transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_bridge: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_user_deposit transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_user_deposit: (\n    { user }: { user: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<UserDeposit>>>;\n\n  /**\n   * Construct and simulate a upgrade transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  upgrade: (\n    { new_wasm_hash }: { new_wasm_hash: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class PoolContract extends ContractClient {\n  constructor(public readonly options: ContractClientOptions) {\n    super(\n      new ContractSpec([\n        \"AAAAAAAAAAAAAAAKaW5pdGlhbGl6ZQAAAAAABwAAAAAAAAAFYWRtaW4AAAAAAAATAAAAAAAAAAZicmlkZ2UAAAAAABMAAAAAAAAAAWEAAAAAAAAKAAAAAAAAAAV0b2tlbgAAAAAAABMAAAAAAAAADGZlZV9zaGFyZV9icAAAAAoAAAAAAAAAFGJhbGFuY2VfcmF0aW9fbWluX2JwAAAACgAAAAAAAAASYWRtaW5fZmVlX3NoYXJlX2JwAAAAAAAKAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAHZGVwb3NpdAAAAAACAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAABmFtb3VudAAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAId2l0aGRyYXcAAAACAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAACWFtb3VudF9scAAAAAAAAAoAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAANc3dhcF90b192X3VzZAAAAAAAAAMAAAAAAAAABHVzZXIAAAATAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAACHplcm9fZmVlAAAAAQAAAAEAAAPpAAAACgAAAAM=\",\n        \"AAAAAAAAAAAAAAAPc3dhcF9mcm9tX3ZfdXNkAAAAAAQAAAAAAAAABHVzZXIAAAATAAAAAAAAAAt2dXNkX2Ftb3VudAAAAAAKAAAAAAAAABJyZWNlaXZlX2Ftb3VudF9taW4AAAAAAAoAAAAAAAAACHplcm9fZmVlAAAAAQAAAAEAAAPpAAAACgAAAAM=\",\n        \"AAAAAAAAAAAAAAANY2xhaW1fcmV3YXJkcwAAAAAAAAEAAAAAAAAABnNlbmRlcgAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAdgYWRtaW5gAAAAAA1zZXRfZmVlX3NoYXJlAAAAAAAAAQAAAAAAAAAMZmVlX3NoYXJlX2JwAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAWYWRqdXN0X3RvdGFsX2xwX2Ftb3VudAAAAAAAAAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAYc2V0X2JhbGFuY2VfcmF0aW9fbWluX2JwAAAAAQAAAAAAAAAUYmFsYW5jZV9yYXRpb19taW5fYnAAAAAKAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAMc3RvcF9kZXBvc2l0AAAAAAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAANc3RhcnRfZGVwb3NpdAAAAAAAAAAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAANc3RvcF93aXRoZHJhdwAAAAAAAAAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAAOc3RhcnRfd2l0aGRyYXcAAAAAAAAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAASc2V0X3N0b3BfYXV0aG9yaXR5AAAAAAABAAAAAAAAAA5zdG9wX2F1dGhvcml0eQAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAKc2V0X2JyaWRnZQAAAAAAAQAAAAAAAAAGYnJpZGdlAAAAAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAJc2V0X2FkbWluAAAAAAAAAQAAAAAAAAAJbmV3X2FkbWluAAAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAATc2V0X2FkbWluX2ZlZV9zaGFyZQAAAAABAAAAAAAAABJhZG1pbl9mZWVfc2hhcmVfYnAAAAAAAAoAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAAPY2xhaW1fYWRtaW5fZmVlAAAAAAAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAZgdmlld2AAAAAAAA5wZW5kaW5nX3Jld2FyZAAAAAAAAQAAAAAAAAAEdXNlcgAAABMAAAABAAAD6QAAAAoAAAAD\",\n        \"AAAAAAAAAAAAAAAIZ2V0X3Bvb2wAAAAAAAAAAQAAA+kAAAfQAAAABFBvb2wAAAAD\",\n        \"AAAAAAAAAAAAAAAJZ2V0X2FkbWluAAAAAAAAAAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAASZ2V0X3N0b3BfYXV0aG9yaXR5AAAAAAAAAAAAAQAAA+kAAAATAAAAAw==\",\n        \"AAAAAAAAAAAAAAAKZ2V0X2JyaWRnZQAAAAAAAAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAAQZ2V0X3VzZXJfZGVwb3NpdAAAAAEAAAAAAAAABHVzZXIAAAATAAAAAQAAA+kAAAfQAAAAC1VzZXJEZXBvc2l0AAAAAAM=\",\n        \"AAAAAAAAAAAAAAAHdXBncmFkZQAAAAABAAAAAAAAAA1uZXdfd2FzbV9oYXNoAAAAAAAD7gAAACAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAQAAAAAAAAAAAAAAD1N3YXBwZWRGcm9tVlVzZAAAAAAFAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAAA2ZlZQAAAAAKAAAAAAAAAAlyZWNpcGllbnQAAAAAAAATAAAAAAAAAAV0b2tlbgAAAAAAABMAAAAAAAAAC3Z1c2RfYW1vdW50AAAAAAo=\",\n        \"AAAAAQAAAAAAAAAAAAAADVN3YXBwZWRUb1ZVc2QAAAAAAAAFAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAAA2ZlZQAAAAAKAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAABXRva2VuAAAAAAAAEwAAAAAAAAALdnVzZF9hbW91bnQAAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAB0RlcG9zaXQAAAAAAgAAAAAAAAAGYW1vdW50AAAAAAAKAAAAAAAAAAR1c2VyAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAACFdpdGhkcmF3AAAAAgAAAAAAAAAGYW1vdW50AAAAAAAKAAAAAAAAAAR1c2VyAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAADlJld2FyZHNDbGFpbWVkAAAAAAACAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAABHVzZXIAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAABkJyaWRnZQAAAAAAAQAAAAAAAAABMAAAAAAAABM=\",\n        \"AAAAAgAAAAAAAAAAAAAAB0RhdGFLZXkAAAAAAQAAAAEAAAAAAAAAC1VzZXJEZXBvc2l0AAAAAAEAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAABFBvb2wAAAAPAAAAAAAAAAFhAAAAAAAACgAAAAAAAAAWYWNjX3Jld2FyZF9wZXJfc2hhcmVfcAAAAAAACgAAAAAAAAAQYWRtaW5fZmVlX2Ftb3VudAAAAAoAAAAAAAAAEmFkbWluX2ZlZV9zaGFyZV9icAAAAAAACgAAAAAAAAAUYmFsYW5jZV9yYXRpb19taW5fYnAAAAAKAAAAAAAAAAtjYW5fZGVwb3NpdAAAAAABAAAAAAAAAAxjYW5fd2l0aGRyYXcAAAABAAAAAAAAAAFkAAAAAAAACgAAAAAAAAAIZGVjaW1hbHMAAAAEAAAAAAAAAAxmZWVfc2hhcmVfYnAAAAAKAAAAAAAAAAhyZXNlcnZlcwAAAAoAAAAAAAAABXRva2VuAAAAAAAAEwAAAAAAAAANdG9rZW5fYmFsYW5jZQAAAAAAAAoAAAAAAAAAD3RvdGFsX2xwX2Ftb3VudAAAAAAKAAAAAAAAAA12X3VzZF9iYWxhbmNlAAAAAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAC1VzZXJEZXBvc2l0AAAAAAIAAAAAAAAACWxwX2Ftb3VudAAAAAAAAAoAAAAAAAAAC3Jld2FyZF9kZWJ0AAAAAAo=\",\n        \"AAAAAQAAAAAAAAAAAAAABUFkbWluAAAAAAAAAQAAAAAAAAABMAAAAAAAABM=\",\n        \"AAAAAQAAAAAAAAAAAAAAEEdhc09yYWNsZUFkZHJlc3MAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAACEdhc1VzYWdlAAAAAQAAAAAAAAABMAAAAAAAA+wAAAAEAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAC05hdGl2ZVRva2VuAAAAAAEAAAAAAAAAATAAAAAAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAADVN0b3BBdXRob3JpdHkAAAAAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAABAAAAAAAAAAAAAAABUVycm9yAAAAAAAAKAAAAAAAAAANVW5pbXBsZW1lbnRlZAAAAAAAAAAAAAAAAAAAC0luaXRpYWxpemVkAAAAAAEAAAAAAAAADVVuaW5pdGlhbGl6ZWQAAAAAAAACAAAAAAAAAAxVbmF1dGhvcml6ZWQAAAADAAAAAAAAAApJbnZhbGlkQXJnAAAAAAAEAAAAAAAAAA5JbnZhbGlkQ2hhaW5JZAAAAAAABQAAAAAAAAATSW52YWxpZE90aGVyQ2hhaW5JZAAAAAAGAAAAAAAAAA5HYXNVc2FnZU5vdFNldAAAAAAABwAAAAAAAAANQnJva2VuQWRkcmVzcwAAAAAAAAgAAAAAAAAACE5vdEZvdW5kAAAACQAAAAAAAAAYVG9rZW5JbnN1ZmZpY2llbnRCYWxhbmNlAAAACgAAAAAAAAAKQ2FzdEZhaWxlZAAAAAAACwAAAAAAAAAMVTI1Nk92ZXJmbG93AAAADAAAAAAAAAAKWmVyb0Ftb3VudAAAAAAAZwAAAAAAAAAMUG9vbE92ZXJmbG93AAAAaAAAAAAAAAALWmVyb0NoYW5nZXMAAAAAaQAAAAAAAAARUmVzZXJ2ZXNFeGhhdXN0ZWQAAAAAAABqAAAAAAAAABpJbnN1ZmZpY2llbnRSZWNlaXZlZEFtb3VudAAAAAAAawAAAAAAAAAUQmFsYW5jZVJhdGlvRXhjZWVkZWQAAABsAAAAAAAAAAlGb3JiaWRkZW4AAAAAAABtAAAAAAAAABlVbmF1dGhvcml6ZWRTdG9wQXV0aG9yaXR5AAAAAAAAywAAAAAAAAAOU3dhcFByb2hpYml0ZWQAAAAAAMwAAAAAAAAAEkFtb3VudFRvb0xvd0ZvckZlZQAAAAAAzQAAAAAAAAAWQnJpZGdlVG9UaGVaZXJvQWRkcmVzcwAAAAAAzgAAAAAAAAAORW1wdHlSZWNpcGllbnQAAAAAAM8AAAAAAAAAE1NvdXJjZU5vdFJlZ2lzdGVyZWQAAAAA0AAAAAAAAAAVV3JvbmdEZXN0aW5hdGlvbkNoYWluAAAAAAAA0QAAAAAAAAATVW5rbm93bkFub3RoZXJDaGFpbgAAAADSAAAAAAAAABFUb2tlbnNBbHJlYWR5U2VudAAAAAAAANMAAAAAAAAAEE1lc3NhZ2VQcm9jZXNzZWQAAADUAAAAAAAAAAxOb3RFbm91Z2hGZWUAAADWAAAAAAAAAAlOb01lc3NhZ2UAAAAAAADXAAAAAAAAAA1Ob1JlY2VpdmVQb29sAAAAAAAA2AAAAAAAAAAGTm9Qb29sAAAAAADZAAAAAAAAABNVbmtub3duQW5vdGhlclRva2VuAAAAANoAAAAAAAAAD1dyb25nQnl0ZUxlbmd0aAAAAAEsAAAAAAAAAApIYXNNZXNzYWdlAAAAAAEtAAAAAAAAABdJbnZhbGlkUHJpbWFyeVNpZ25hdHVyZQAAAAEuAAAAAAAAABlJbnZhbGlkU2Vjb25kYXJ5U2lnbmF0dXJlAAAAAAABLwAAAAAAAAARTm9HYXNEYXRhRm9yQ2hhaW4AAAAAAAGQ\",\n      ]),\n      options\n    );\n  }\n  public readonly fromJSON = {\n    initialize: this.txFromJSON<Result<void>>,\n    deposit: this.txFromJSON<Result<void>>,\n    withdraw: this.txFromJSON<Result<void>>,\n    swap_to_v_usd: this.txFromJSON<Result<u128>>,\n    swap_from_v_usd: this.txFromJSON<Result<u128>>,\n    claim_rewards: this.txFromJSON<Result<void>>,\n    set_fee_share: this.txFromJSON<Result<void>>,\n    adjust_total_lp_amount: this.txFromJSON<Result<void>>,\n    set_balance_ratio_min_bp: this.txFromJSON<Result<void>>,\n    stop_deposit: this.txFromJSON<Result<void>>,\n    start_deposit: this.txFromJSON<Result<void>>,\n    stop_withdraw: this.txFromJSON<Result<void>>,\n    start_withdraw: this.txFromJSON<Result<void>>,\n    set_stop_authority: this.txFromJSON<Result<void>>,\n    set_bridge: this.txFromJSON<Result<void>>,\n    set_admin: this.txFromJSON<Result<void>>,\n    set_admin_fee_share: this.txFromJSON<Result<void>>,\n    claim_admin_fee: this.txFromJSON<Result<void>>,\n    pending_reward: this.txFromJSON<Result<u128>>,\n    get_pool: this.txFromJSON<Result<Pool>>,\n    get_admin: this.txFromJSON<Result<string>>,\n    get_stop_authority: this.txFromJSON<Result<string>>,\n    get_bridge: this.txFromJSON<Result<string>>,\n    get_user_deposit: this.txFromJSON<Result<UserDeposit>>,\n    upgrade: this.txFromJSON<Result<void>>,\n  };\n}\n"]}