import * as reified from "../../_framework/reified";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr, ToTypeStr as ToPhantom } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { Vector } from "../../_framework/vector";
import { Balance } from "../../sui/balance/structs";
import { UID } from "../../sui/object/structs";
import { SUI } from "../../sui/sui/structs";
import { Table } from "../../sui/table/structs";
import { Message } from "../../utils/message/structs";
import { Set } from "../../utils/set/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isAdminCap(type: string): boolean;
export interface AdminCapFields {
    id: ToField<UID>;
}
export type AdminCapReified = Reified<AdminCap, AdminCapFields>;
export declare class AdminCap implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    private constructor();
    static reified(): AdminCapReified;
    static get r(): reified.StructClassReified<AdminCap, AdminCapFields>;
    static phantom(): PhantomReified<ToTypeStr<AdminCap>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): AdminCap;
    static fromFieldsWithTypes(item: FieldsWithTypes): AdminCap;
    static fromBcs(data: Uint8Array): AdminCap;
    toJSONField(): {
        id: UID;
    };
    toJSON(): {
        id: UID;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): AdminCap;
    static fromJSON(json: Record<string, any>): AdminCap;
    static fromSuiParsedData(content: SuiParsedData): AdminCap;
    static fromSuiObjectData(data: SuiObjectData): AdminCap;
    static fetch(client: SuiClient, id: string): Promise<AdminCap>;
}
export declare function isMessenger(type: string): boolean;
export interface MessengerFields {
    id: ToField<UID>;
    primaryValidator: ToField<Vector<"u8">>;
    secondaryValidators: ToField<Set<ToPhantom<Vector<"u8">>>>;
    receivedMessages: ToField<Set<ToPhantom<Message>>>;
    sentMessages: ToField<Set<ToPhantom<Message>>>;
    otherChainIds: ToField<Vector<"bool">>;
    gasUsage: ToField<Table<"u8", "u64">>;
    gasBalance: ToField<Balance<ToPhantom<SUI>>>;
}
export type MessengerReified = Reified<Messenger, MessengerFields>;
export declare class Messenger implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    readonly primaryValidator: ToField<Vector<"u8">>;
    readonly secondaryValidators: ToField<Set<ToPhantom<Vector<"u8">>>>;
    readonly receivedMessages: ToField<Set<ToPhantom<Message>>>;
    readonly sentMessages: ToField<Set<ToPhantom<Message>>>;
    readonly otherChainIds: ToField<Vector<"bool">>;
    readonly gasUsage: ToField<Table<"u8", "u64">>;
    readonly gasBalance: ToField<Balance<ToPhantom<SUI>>>;
    private constructor();
    static reified(): MessengerReified;
    static get r(): reified.StructClassReified<Messenger, MessengerFields>;
    static phantom(): PhantomReified<ToTypeStr<Messenger>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
        primary_validator: number[];
        secondary_validators: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string;
            };
        };
        received_messages: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string;
            };
        };
        sent_messages: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string;
            };
        };
        other_chain_ids: boolean[];
        gas_usage: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
        gas_balance: {
            value: string;
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
        primary_validator: Iterable<number> & {
            length: number;
        };
        secondary_validators: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string | number | bigint;
            };
        };
        received_messages: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string | number | bigint;
            };
        };
        sent_messages: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string | number | bigint;
            };
        };
        other_chain_ids: Iterable<boolean> & {
            length: number;
        };
        gas_usage: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
        gas_balance: {
            value: string | number | bigint;
        };
    }>;
    static fromFields(fields: Record<string, any>): Messenger;
    static fromFieldsWithTypes(item: FieldsWithTypes): Messenger;
    static fromBcs(data: Uint8Array): Messenger;
    toJSONField(): {
        id: UID;
        primaryValidator: number[];
        secondaryValidators: {
            items: {
                id: UID;
                size: string;
            };
        };
        receivedMessages: {
            items: {
                id: UID;
                size: string;
            };
        };
        sentMessages: {
            items: {
                id: UID;
                size: string;
            };
        };
        otherChainIds: boolean[];
        gasUsage: {
            id: UID;
            size: string;
        };
        gasBalance: {
            value: string;
        };
    };
    toJSON(): {
        id: UID;
        primaryValidator: number[];
        secondaryValidators: {
            items: {
                id: UID;
                size: string;
            };
        };
        receivedMessages: {
            items: {
                id: UID;
                size: string;
            };
        };
        sentMessages: {
            items: {
                id: UID;
                size: string;
            };
        };
        otherChainIds: boolean[];
        gasUsage: {
            id: UID;
            size: string;
        };
        gasBalance: {
            value: string;
        };
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): Messenger;
    static fromJSON(json: Record<string, any>): Messenger;
    static fromSuiParsedData(content: SuiParsedData): Messenger;
    static fromSuiObjectData(data: SuiObjectData): Messenger;
    static fetch(client: SuiClient, id: string): Promise<Messenger>;
}
