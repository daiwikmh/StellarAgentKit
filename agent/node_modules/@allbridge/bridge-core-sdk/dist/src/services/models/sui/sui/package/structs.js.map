{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/package/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport { String } from \"../../_dependencies/source/0x1/ascii/structs\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  fieldToJSON,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { Vector } from \"../../_framework/vector\";\nimport { PKG_V26 } from \"../index\";\nimport { ID, UID } from \"../object/structs\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Publisher =============================== */\n\nexport function isPublisher(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::package::Publisher`;\n}\n\nexport interface PublisherFields {\n  id: ToField<UID>;\n  package: ToField<String>;\n  moduleName: ToField<String>;\n}\n\nexport type PublisherReified = Reified<Publisher, PublisherFields>;\n\nexport class Publisher implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::package::Publisher`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Publisher.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Publisher.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly package: ToField<String>;\n  readonly moduleName: ToField<String>;\n\n  private constructor(typeArgs: [], fields: PublisherFields) {\n    this.$fullTypeName = composeSuiType(Publisher.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.package = fields.package;\n    this.moduleName = fields.moduleName;\n  }\n\n  static reified(): PublisherReified {\n    return {\n      typeName: Publisher.$typeName,\n      fullTypeName: composeSuiType(Publisher.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Publisher.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Publisher.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Publisher.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Publisher.fromBcs(data),\n      bcs: Publisher.bcs,\n      fromJSONField: (field: any) => Publisher.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Publisher.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Publisher.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Publisher.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Publisher.fetch(client, id),\n      new: (fields: PublisherFields) => {\n        return new Publisher([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Publisher.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Publisher>> {\n    return phantom(Publisher.reified());\n  }\n  static get p() {\n    return Publisher.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Publisher\", {\n      id: UID.bcs,\n      package: String.bcs,\n      module_name: String.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Publisher {\n    return Publisher.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      package: decodeFromFields(String.reified(), fields.package),\n      moduleName: decodeFromFields(String.reified(), fields.module_name),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Publisher {\n    if (!isPublisher(item.type)) {\n      throw new Error(\"not a Publisher type\");\n    }\n\n    return Publisher.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      package: decodeFromFieldsWithTypes(String.reified(), item.fields.package),\n      moduleName: decodeFromFieldsWithTypes(String.reified(), item.fields.module_name),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Publisher {\n    return Publisher.fromFields(Publisher.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      package: this.package,\n      moduleName: this.moduleName,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Publisher {\n    return Publisher.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      package: decodeFromJSONField(String.reified(), field.package),\n      moduleName: decodeFromJSONField(String.reified(), field.moduleName),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): Publisher {\n    if (json.$typeName !== Publisher.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Publisher.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Publisher {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isPublisher(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Publisher object`);\n    }\n    return Publisher.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Publisher {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isPublisher(data.bcs.type)) {\n        throw new Error(`object at is not a Publisher object`);\n      }\n\n      return Publisher.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Publisher.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Publisher> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Publisher object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isPublisher(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Publisher object`);\n    }\n\n    return Publisher.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== UpgradeCap =============================== */\n\nexport function isUpgradeCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::package::UpgradeCap`;\n}\n\nexport interface UpgradeCapFields {\n  id: ToField<UID>;\n  package: ToField<ID>;\n  version: ToField<\"u64\">;\n  policy: ToField<\"u8\">;\n}\n\nexport type UpgradeCapReified = Reified<UpgradeCap, UpgradeCapFields>;\n\nexport class UpgradeCap implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::package::UpgradeCap`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = UpgradeCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = UpgradeCap.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly package: ToField<ID>;\n  readonly version: ToField<\"u64\">;\n  readonly policy: ToField<\"u8\">;\n\n  private constructor(typeArgs: [], fields: UpgradeCapFields) {\n    this.$fullTypeName = composeSuiType(UpgradeCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.package = fields.package;\n    this.version = fields.version;\n    this.policy = fields.policy;\n  }\n\n  static reified(): UpgradeCapReified {\n    return {\n      typeName: UpgradeCap.$typeName,\n      fullTypeName: composeSuiType(UpgradeCap.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: UpgradeCap.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => UpgradeCap.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => UpgradeCap.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => UpgradeCap.fromBcs(data),\n      bcs: UpgradeCap.bcs,\n      fromJSONField: (field: any) => UpgradeCap.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => UpgradeCap.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => UpgradeCap.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => UpgradeCap.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => UpgradeCap.fetch(client, id),\n      new: (fields: UpgradeCapFields) => {\n        return new UpgradeCap([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return UpgradeCap.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<UpgradeCap>> {\n    return phantom(UpgradeCap.reified());\n  }\n  static get p() {\n    return UpgradeCap.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"UpgradeCap\", {\n      id: UID.bcs,\n      package: ID.bcs,\n      version: bcs.u64(),\n      policy: bcs.u8(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): UpgradeCap {\n    return UpgradeCap.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      package: decodeFromFields(ID.reified(), fields.package),\n      version: decodeFromFields(\"u64\", fields.version),\n      policy: decodeFromFields(\"u8\", fields.policy),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): UpgradeCap {\n    if (!isUpgradeCap(item.type)) {\n      throw new Error(\"not a UpgradeCap type\");\n    }\n\n    return UpgradeCap.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      package: decodeFromFieldsWithTypes(ID.reified(), item.fields.package),\n      version: decodeFromFieldsWithTypes(\"u64\", item.fields.version),\n      policy: decodeFromFieldsWithTypes(\"u8\", item.fields.policy),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): UpgradeCap {\n    return UpgradeCap.fromFields(UpgradeCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      package: this.package,\n      version: this.version.toString(),\n      policy: this.policy,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): UpgradeCap {\n    return UpgradeCap.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      package: decodeFromJSONField(ID.reified(), field.package),\n      version: decodeFromJSONField(\"u64\", field.version),\n      policy: decodeFromJSONField(\"u8\", field.policy),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): UpgradeCap {\n    if (json.$typeName !== UpgradeCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return UpgradeCap.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): UpgradeCap {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isUpgradeCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a UpgradeCap object`);\n    }\n    return UpgradeCap.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): UpgradeCap {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isUpgradeCap(data.bcs.type)) {\n        throw new Error(`object at is not a UpgradeCap object`);\n      }\n\n      return UpgradeCap.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return UpgradeCap.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<UpgradeCap> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching UpgradeCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isUpgradeCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a UpgradeCap object`);\n    }\n\n    return UpgradeCap.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== UpgradeReceipt =============================== */\n\nexport function isUpgradeReceipt(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::package::UpgradeReceipt`;\n}\n\nexport interface UpgradeReceiptFields {\n  cap: ToField<ID>;\n  package: ToField<ID>;\n}\n\nexport type UpgradeReceiptReified = Reified<UpgradeReceipt, UpgradeReceiptFields>;\n\nexport class UpgradeReceipt implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::package::UpgradeReceipt`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = UpgradeReceipt.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = UpgradeReceipt.$isPhantom;\n\n  readonly cap: ToField<ID>;\n  readonly package: ToField<ID>;\n\n  private constructor(typeArgs: [], fields: UpgradeReceiptFields) {\n    this.$fullTypeName = composeSuiType(UpgradeReceipt.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.cap = fields.cap;\n    this.package = fields.package;\n  }\n\n  static reified(): UpgradeReceiptReified {\n    return {\n      typeName: UpgradeReceipt.$typeName,\n      fullTypeName: composeSuiType(UpgradeReceipt.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: UpgradeReceipt.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => UpgradeReceipt.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => UpgradeReceipt.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => UpgradeReceipt.fromBcs(data),\n      bcs: UpgradeReceipt.bcs,\n      fromJSONField: (field: any) => UpgradeReceipt.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => UpgradeReceipt.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => UpgradeReceipt.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => UpgradeReceipt.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => UpgradeReceipt.fetch(client, id),\n      new: (fields: UpgradeReceiptFields) => {\n        return new UpgradeReceipt([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return UpgradeReceipt.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<UpgradeReceipt>> {\n    return phantom(UpgradeReceipt.reified());\n  }\n  static get p() {\n    return UpgradeReceipt.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"UpgradeReceipt\", {\n      cap: ID.bcs,\n      package: ID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): UpgradeReceipt {\n    return UpgradeReceipt.reified().new({\n      cap: decodeFromFields(ID.reified(), fields.cap),\n      package: decodeFromFields(ID.reified(), fields.package),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): UpgradeReceipt {\n    if (!isUpgradeReceipt(item.type)) {\n      throw new Error(\"not a UpgradeReceipt type\");\n    }\n\n    return UpgradeReceipt.reified().new({\n      cap: decodeFromFieldsWithTypes(ID.reified(), item.fields.cap),\n      package: decodeFromFieldsWithTypes(ID.reified(), item.fields.package),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): UpgradeReceipt {\n    return UpgradeReceipt.fromFields(UpgradeReceipt.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      cap: this.cap,\n      package: this.package,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): UpgradeReceipt {\n    return UpgradeReceipt.reified().new({\n      cap: decodeFromJSONField(ID.reified(), field.cap),\n      package: decodeFromJSONField(ID.reified(), field.package),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): UpgradeReceipt {\n    if (json.$typeName !== UpgradeReceipt.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return UpgradeReceipt.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): UpgradeReceipt {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isUpgradeReceipt(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a UpgradeReceipt object`);\n    }\n    return UpgradeReceipt.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): UpgradeReceipt {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isUpgradeReceipt(data.bcs.type)) {\n        throw new Error(`object at is not a UpgradeReceipt object`);\n      }\n\n      return UpgradeReceipt.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return UpgradeReceipt.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<UpgradeReceipt> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching UpgradeReceipt object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isUpgradeReceipt(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a UpgradeReceipt object`);\n    }\n\n    return UpgradeReceipt.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== UpgradeTicket =============================== */\n\nexport function isUpgradeTicket(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::package::UpgradeTicket`;\n}\n\nexport interface UpgradeTicketFields {\n  cap: ToField<ID>;\n  package: ToField<ID>;\n  policy: ToField<\"u8\">;\n  digest: ToField<Vector<\"u8\">>;\n}\n\nexport type UpgradeTicketReified = Reified<UpgradeTicket, UpgradeTicketFields>;\n\nexport class UpgradeTicket implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::package::UpgradeTicket`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = UpgradeTicket.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = UpgradeTicket.$isPhantom;\n\n  readonly cap: ToField<ID>;\n  readonly package: ToField<ID>;\n  readonly policy: ToField<\"u8\">;\n  readonly digest: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: UpgradeTicketFields) {\n    this.$fullTypeName = composeSuiType(UpgradeTicket.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.cap = fields.cap;\n    this.package = fields.package;\n    this.policy = fields.policy;\n    this.digest = fields.digest;\n  }\n\n  static reified(): UpgradeTicketReified {\n    return {\n      typeName: UpgradeTicket.$typeName,\n      fullTypeName: composeSuiType(UpgradeTicket.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: UpgradeTicket.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => UpgradeTicket.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => UpgradeTicket.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => UpgradeTicket.fromBcs(data),\n      bcs: UpgradeTicket.bcs,\n      fromJSONField: (field: any) => UpgradeTicket.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => UpgradeTicket.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => UpgradeTicket.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => UpgradeTicket.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => UpgradeTicket.fetch(client, id),\n      new: (fields: UpgradeTicketFields) => {\n        return new UpgradeTicket([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return UpgradeTicket.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<UpgradeTicket>> {\n    return phantom(UpgradeTicket.reified());\n  }\n  static get p() {\n    return UpgradeTicket.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"UpgradeTicket\", {\n      cap: ID.bcs,\n      package: ID.bcs,\n      policy: bcs.u8(),\n      digest: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): UpgradeTicket {\n    return UpgradeTicket.reified().new({\n      cap: decodeFromFields(ID.reified(), fields.cap),\n      package: decodeFromFields(ID.reified(), fields.package),\n      policy: decodeFromFields(\"u8\", fields.policy),\n      digest: decodeFromFields(reified.vector(\"u8\"), fields.digest),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): UpgradeTicket {\n    if (!isUpgradeTicket(item.type)) {\n      throw new Error(\"not a UpgradeTicket type\");\n    }\n\n    return UpgradeTicket.reified().new({\n      cap: decodeFromFieldsWithTypes(ID.reified(), item.fields.cap),\n      package: decodeFromFieldsWithTypes(ID.reified(), item.fields.package),\n      policy: decodeFromFieldsWithTypes(\"u8\", item.fields.policy),\n      digest: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.digest),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): UpgradeTicket {\n    return UpgradeTicket.fromFields(UpgradeTicket.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      cap: this.cap,\n      package: this.package,\n      policy: this.policy,\n      digest: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.digest),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): UpgradeTicket {\n    return UpgradeTicket.reified().new({\n      cap: decodeFromJSONField(ID.reified(), field.cap),\n      package: decodeFromJSONField(ID.reified(), field.package),\n      policy: decodeFromJSONField(\"u8\", field.policy),\n      digest: decodeFromJSONField(reified.vector(\"u8\"), field.digest),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): UpgradeTicket {\n    if (json.$typeName !== UpgradeTicket.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return UpgradeTicket.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): UpgradeTicket {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isUpgradeTicket(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a UpgradeTicket object`);\n    }\n    return UpgradeTicket.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): UpgradeTicket {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isUpgradeTicket(data.bcs.type)) {\n        throw new Error(`object at is not a UpgradeTicket object`);\n      }\n\n      return UpgradeTicket.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return UpgradeTicket.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<UpgradeTicket> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching UpgradeTicket object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isUpgradeTicket(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a UpgradeTicket object`);\n    }\n\n    return UpgradeTicket.fromSuiObjectData(res.data);\n  }\n}\n"]}