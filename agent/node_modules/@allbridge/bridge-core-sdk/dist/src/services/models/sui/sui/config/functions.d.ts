import { GenericArg } from "../../_framework/util";
import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export declare function new_(tx: Transaction, typeArg: string, cap: GenericArg): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface TransferArgs {
    config: TransactionObjectInput;
    owner: string | TransactionArgument;
}
export declare function transfer(tx: Transaction, typeArg: string, args: TransferArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ExistsWithTypeArgs {
    config: TransactionObjectInput;
    name: GenericArg;
}
export declare function existsWithType(tx: Transaction, typeArgs: [string, string, string], args: ExistsWithTypeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddForNextEpochArgs {
    config: TransactionObjectInput;
    cap: GenericArg;
    name: GenericArg;
    value: GenericArg;
}
export declare function addForNextEpoch(tx: Transaction, typeArgs: [string, string, string], args: AddForNextEpochArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface BorrowForNextEpochMutArgs {
    config: TransactionObjectInput;
    cap: GenericArg;
    name: GenericArg;
}
export declare function borrowForNextEpochMut(tx: Transaction, typeArgs: [string, string, string], args: BorrowForNextEpochMutArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ExistsWithTypeForNextEpochArgs {
    config: TransactionObjectInput;
    name: GenericArg;
}
export declare function existsWithTypeForNextEpoch(tx: Transaction, typeArgs: [string, string, string], args: ExistsWithTypeForNextEpochArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReadSettingArgs {
    config: string | TransactionArgument;
    name: GenericArg;
}
export declare function readSetting(tx: Transaction, typeArgs: [string, string], args: ReadSettingArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReadSettingForNextEpochArgs {
    config: TransactionObjectInput;
    name: GenericArg;
}
export declare function readSettingForNextEpoch(tx: Transaction, typeArgs: [string, string, string], args: ReadSettingForNextEpochArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReadSettingImplArgs {
    config: string | TransactionArgument;
    name: string | TransactionArgument;
    currentEpoch: bigint | TransactionArgument;
}
export declare function readSettingImpl(tx: Transaction, typeArgs: [string, string, string, string], args: ReadSettingImplArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveForNextEpochArgs {
    config: TransactionObjectInput;
    cap: GenericArg;
    name: GenericArg;
}
export declare function removeForNextEpoch(tx: Transaction, typeArgs: [string, string, string], args: RemoveForNextEpochArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function share(tx: Transaction, typeArg: string, config: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
