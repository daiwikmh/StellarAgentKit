{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/random/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { GenericArg, obj, pure, vector } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function create(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::create`,\n    arguments: [],\n  });\n}\n\nexport function loadInner(tx: Transaction, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::load_inner`,\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport function loadInnerMut(tx: Transaction, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::load_inner_mut`,\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport function deriveNextBlock(tx: Transaction, g: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::derive_next_block`,\n    arguments: [obj(tx, g)],\n  });\n}\n\nexport function fillBuffer(tx: Transaction, g: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::fill_buffer`,\n    arguments: [obj(tx, g)],\n  });\n}\n\nexport function generateBool(tx: Transaction, g: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_bool`,\n    arguments: [obj(tx, g)],\n  });\n}\n\nexport interface GenerateBytesArgs {\n  g: TransactionObjectInput;\n  numOfBytes: number | TransactionArgument;\n}\n\nexport function generateBytes(tx: Transaction, args: GenerateBytesArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_bytes`,\n    arguments: [obj(tx, args.g), pure(tx, args.numOfBytes, `u16`)],\n  });\n}\n\nexport function generateU128(tx: Transaction, g: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u128`,\n    arguments: [obj(tx, g)],\n  });\n}\n\nexport interface GenerateU128InRangeArgs {\n  g: TransactionObjectInput;\n  min: bigint | TransactionArgument;\n  max: bigint | TransactionArgument;\n}\n\nexport function generateU128InRange(tx: Transaction, args: GenerateU128InRangeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u128_in_range`,\n    arguments: [obj(tx, args.g), pure(tx, args.min, `u128`), pure(tx, args.max, `u128`)],\n  });\n}\n\nexport function generateU16(tx: Transaction, g: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u16`,\n    arguments: [obj(tx, g)],\n  });\n}\n\nexport interface GenerateU16InRangeArgs {\n  g: TransactionObjectInput;\n  min: number | TransactionArgument;\n  max: number | TransactionArgument;\n}\n\nexport function generateU16InRange(tx: Transaction, args: GenerateU16InRangeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u16_in_range`,\n    arguments: [obj(tx, args.g), pure(tx, args.min, `u16`), pure(tx, args.max, `u16`)],\n  });\n}\n\nexport function generateU256(tx: Transaction, g: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u256`,\n    arguments: [obj(tx, g)],\n  });\n}\n\nexport function generateU32(tx: Transaction, g: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u32`,\n    arguments: [obj(tx, g)],\n  });\n}\n\nexport interface GenerateU32InRangeArgs {\n  g: TransactionObjectInput;\n  min: number | TransactionArgument;\n  max: number | TransactionArgument;\n}\n\nexport function generateU32InRange(tx: Transaction, args: GenerateU32InRangeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u32_in_range`,\n    arguments: [obj(tx, args.g), pure(tx, args.min, `u32`), pure(tx, args.max, `u32`)],\n  });\n}\n\nexport function generateU64(tx: Transaction, g: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u64`,\n    arguments: [obj(tx, g)],\n  });\n}\n\nexport interface GenerateU64InRangeArgs {\n  g: TransactionObjectInput;\n  min: bigint | TransactionArgument;\n  max: bigint | TransactionArgument;\n}\n\nexport function generateU64InRange(tx: Transaction, args: GenerateU64InRangeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u64_in_range`,\n    arguments: [obj(tx, args.g), pure(tx, args.min, `u64`), pure(tx, args.max, `u64`)],\n  });\n}\n\nexport function generateU8(tx: Transaction, g: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u8`,\n    arguments: [obj(tx, g)],\n  });\n}\n\nexport interface GenerateU8InRangeArgs {\n  g: TransactionObjectInput;\n  min: number | TransactionArgument;\n  max: number | TransactionArgument;\n}\n\nexport function generateU8InRange(tx: Transaction, args: GenerateU8InRangeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::generate_u8_in_range`,\n    arguments: [obj(tx, args.g), pure(tx, args.min, `u8`), pure(tx, args.max, `u8`)],\n  });\n}\n\nexport function newGenerator(tx: Transaction, r: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::new_generator`,\n    arguments: [obj(tx, r)],\n  });\n}\n\nexport interface ShuffleArgs {\n  g: TransactionObjectInput;\n  v: Array<GenericArg> | TransactionArgument;\n}\n\nexport function shuffle(tx: Transaction, typeArg: string, args: ShuffleArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::shuffle`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.g), vector(tx, `${typeArg}`, args.v)],\n  });\n}\n\nexport interface U128InRangeArgs {\n  g: TransactionObjectInput;\n  min: bigint | TransactionArgument;\n  max: bigint | TransactionArgument;\n  numOfBytes: number | TransactionArgument;\n}\n\nexport function u128InRange(tx: Transaction, args: U128InRangeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::u128_in_range`,\n    arguments: [\n      obj(tx, args.g),\n      pure(tx, args.min, `u128`),\n      pure(tx, args.max, `u128`),\n      pure(tx, args.numOfBytes, `u8`),\n    ],\n  });\n}\n\nexport interface U256FromBytesArgs {\n  g: TransactionObjectInput;\n  numOfBytes: number | TransactionArgument;\n}\n\nexport function u256FromBytes(tx: Transaction, args: U256FromBytesArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::u256_from_bytes`,\n    arguments: [obj(tx, args.g), pure(tx, args.numOfBytes, `u8`)],\n  });\n}\n\nexport interface UpdateRandomnessStateArgs {\n  self: TransactionObjectInput;\n  newRound: bigint | TransactionArgument;\n  newBytes: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function updateRandomnessState(tx: Transaction, args: UpdateRandomnessStateArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::random::update_randomness_state`,\n    arguments: [obj(tx, args.self), pure(tx, args.newRound, `u64`), pure(tx, args.newBytes, `vector<u8>`)],\n  });\n}\n"]}