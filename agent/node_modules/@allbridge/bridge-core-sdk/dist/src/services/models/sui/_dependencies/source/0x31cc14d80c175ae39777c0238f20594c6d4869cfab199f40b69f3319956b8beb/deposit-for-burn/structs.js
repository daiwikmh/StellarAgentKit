"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReplaceDepositForBurnTicket = exports.DepositForBurnTicket = void 0;
exports.isDepositForBurnTicket = isDepositForBurnTicket;
exports.isReplaceDepositForBurnTicket = isReplaceDepositForBurnTicket;
// @ts-nocheck
const reified = __importStar(require("../../../../_framework/reified"));
const reified_1 = require("../../../../_framework/reified");
const util_1 = require("../../../../_framework/util");
const structs_1 = require("../../../../sui/coin/structs");
const structs_2 = require("../../0x1/option/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== DepositForBurnTicket =============================== */
function isDepositForBurnTicket(type) {
    type = (0, util_1.compressSuiType)(type);
    return type.startsWith(`${index_1.PKG_V1}::deposit_for_burn::DepositForBurnTicket` + "<");
}
class DepositForBurnTicket {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::deposit_for_burn::DepositForBurnTicket`;
    }
    static $numTypeParams = 2;
    static $isPhantom = [true, false];
    $typeName = DepositForBurnTicket.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = DepositForBurnTicket.$isPhantom;
    auth;
    coins;
    destinationDomain;
    mintRecipient;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(DepositForBurnTicket.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.auth = fields.auth;
        this.coins = fields.coins;
        this.destinationDomain = fields.destinationDomain;
        this.mintRecipient = fields.mintRecipient;
    }
    static reified(T, Auth) {
        return {
            typeName: DepositForBurnTicket.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(DepositForBurnTicket.$typeName, ...[(0, reified_1.extractType)(T), (0, reified_1.extractType)(Auth)]),
            typeArgs: [(0, reified_1.extractType)(T), (0, reified_1.extractType)(Auth)],
            isPhantom: DepositForBurnTicket.$isPhantom,
            reifiedTypeArgs: [T, Auth],
            fromFields: (fields) => DepositForBurnTicket.fromFields([T, Auth], fields),
            fromFieldsWithTypes: (item) => DepositForBurnTicket.fromFieldsWithTypes([T, Auth], item),
            fromBcs: (data) => DepositForBurnTicket.fromBcs([T, Auth], data),
            bcs: DepositForBurnTicket.bcs((0, reified_1.toBcs)(Auth)),
            fromJSONField: (field) => DepositForBurnTicket.fromJSONField([T, Auth], field),
            fromJSON: (json) => DepositForBurnTicket.fromJSON([T, Auth], json),
            fromSuiParsedData: (content) => DepositForBurnTicket.fromSuiParsedData([T, Auth], content),
            fromSuiObjectData: (content) => DepositForBurnTicket.fromSuiObjectData([T, Auth], content),
            fetch: async (client, id) => DepositForBurnTicket.fetch(client, [T, Auth], id),
            new: (fields) => {
                return new DepositForBurnTicket([(0, reified_1.extractType)(T), (0, reified_1.extractType)(Auth)], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return DepositForBurnTicket.reified;
    }
    static phantom(T, Auth) {
        return (0, reified_1.phantom)(DepositForBurnTicket.reified(T, Auth));
    }
    static get p() {
        return DepositForBurnTicket.phantom;
    }
    static get bcs() {
        return (Auth) => bcs_1.bcs.struct(`DepositForBurnTicket<${Auth.name}>`, {
            auth: Auth,
            coins: structs_1.Coin.bcs,
            destination_domain: bcs_1.bcs.u32(),
            mint_recipient: bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            }),
        });
    }
    static fromFields(typeArgs, fields) {
        return DepositForBurnTicket.reified(typeArgs[0], typeArgs[1]).new({
            auth: (0, reified_1.decodeFromFields)(typeArgs[1], fields.auth),
            coins: (0, reified_1.decodeFromFields)(structs_1.Coin.reified(typeArgs[0]), fields.coins),
            destinationDomain: (0, reified_1.decodeFromFields)("u32", fields.destination_domain),
            mintRecipient: (0, reified_1.decodeFromFields)("address", fields.mint_recipient),
        });
    }
    static fromFieldsWithTypes(typeArgs, item) {
        if (!isDepositForBurnTicket(item.type)) {
            throw new Error("not a DepositForBurnTicket type");
        }
        (0, reified_1.assertFieldsWithTypesArgsMatch)(item, typeArgs);
        return DepositForBurnTicket.reified(typeArgs[0], typeArgs[1]).new({
            auth: (0, reified_1.decodeFromFieldsWithTypes)(typeArgs[1], item.fields.auth),
            coins: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.Coin.reified(typeArgs[0]), item.fields.coins),
            destinationDomain: (0, reified_1.decodeFromFieldsWithTypes)("u32", item.fields.destination_domain),
            mintRecipient: (0, reified_1.decodeFromFieldsWithTypes)("address", item.fields.mint_recipient),
        });
    }
    static fromBcs(typeArgs, data) {
        return DepositForBurnTicket.fromFields(typeArgs, DepositForBurnTicket.bcs((0, reified_1.toBcs)(typeArgs[1])).parse(data));
    }
    toJSONField() {
        return {
            auth: (0, reified_1.fieldToJSON)(this.$typeArgs[1], this.auth),
            coins: this.coins.toJSONField(),
            destinationDomain: this.destinationDomain,
            mintRecipient: this.mintRecipient,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(typeArgs, field) {
        return DepositForBurnTicket.reified(typeArgs[0], typeArgs[1]).new({
            auth: (0, reified_1.decodeFromJSONField)(typeArgs[1], field.auth),
            coins: (0, reified_1.decodeFromJSONField)(structs_1.Coin.reified(typeArgs[0]), field.coins),
            destinationDomain: (0, reified_1.decodeFromJSONField)("u32", field.destinationDomain),
            mintRecipient: (0, reified_1.decodeFromJSONField)("address", field.mintRecipient),
        });
    }
    static fromJSON(typeArgs, json) {
        if (json.$typeName !== DepositForBurnTicket.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        (0, reified_1.assertReifiedTypeArgsMatch)((0, util_1.composeSuiType)(DepositForBurnTicket.$typeName, ...typeArgs.map(reified_1.extractType)), json.$typeArgs, typeArgs);
        return DepositForBurnTicket.fromJSONField(typeArgs, json);
    }
    static fromSuiParsedData(typeArgs, content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isDepositForBurnTicket(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a DepositForBurnTicket object`);
        }
        return DepositForBurnTicket.fromFieldsWithTypes(typeArgs, content);
    }
    static fromSuiObjectData(typeArgs, data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isDepositForBurnTicket(data.bcs.type)) {
                throw new Error(`object at is not a DepositForBurnTicket object`);
            }
            const gotTypeArgs = (0, util_1.parseTypeName)(data.bcs.type).typeArgs;
            if (gotTypeArgs.length !== 2) {
                throw new Error(`type argument mismatch: expected 2 type arguments but got ${gotTypeArgs.length}`);
            }
            for (let i = 0; i < 2; i++) {
                const gotTypeArg = (0, util_1.compressSuiType)(gotTypeArgs[i]);
                const expectedTypeArg = (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArgs[i]));
                if (gotTypeArg !== expectedTypeArg) {
                    throw new Error(`type argument mismatch at position ${i}: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);
                }
            }
            return DepositForBurnTicket.fromBcs(typeArgs, (0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return DepositForBurnTicket.fromSuiParsedData(typeArgs, data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, typeArgs, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching DepositForBurnTicket object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isDepositForBurnTicket(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a DepositForBurnTicket object`);
        }
        return DepositForBurnTicket.fromSuiObjectData(typeArgs, res.data);
    }
}
exports.DepositForBurnTicket = DepositForBurnTicket;
/* ============================== ReplaceDepositForBurnTicket =============================== */
function isReplaceDepositForBurnTicket(type) {
    type = (0, util_1.compressSuiType)(type);
    return type.startsWith(`${index_1.PKG_V1}::deposit_for_burn::ReplaceDepositForBurnTicket` + "<");
}
class ReplaceDepositForBurnTicket {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::deposit_for_burn::ReplaceDepositForBurnTicket`;
    }
    static $numTypeParams = 1;
    static $isPhantom = [false];
    $typeName = ReplaceDepositForBurnTicket.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = ReplaceDepositForBurnTicket.$isPhantom;
    auth;
    originalRawMessage;
    originalAttestation;
    newDestinationCaller;
    newMintRecipient;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(ReplaceDepositForBurnTicket.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.auth = fields.auth;
        this.originalRawMessage = fields.originalRawMessage;
        this.originalAttestation = fields.originalAttestation;
        this.newDestinationCaller = fields.newDestinationCaller;
        this.newMintRecipient = fields.newMintRecipient;
    }
    static reified(Auth) {
        return {
            typeName: ReplaceDepositForBurnTicket.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(ReplaceDepositForBurnTicket.$typeName, ...[(0, reified_1.extractType)(Auth)]),
            typeArgs: [(0, reified_1.extractType)(Auth)],
            isPhantom: ReplaceDepositForBurnTicket.$isPhantom,
            reifiedTypeArgs: [Auth],
            fromFields: (fields) => ReplaceDepositForBurnTicket.fromFields(Auth, fields),
            fromFieldsWithTypes: (item) => ReplaceDepositForBurnTicket.fromFieldsWithTypes(Auth, item),
            fromBcs: (data) => ReplaceDepositForBurnTicket.fromBcs(Auth, data),
            bcs: ReplaceDepositForBurnTicket.bcs((0, reified_1.toBcs)(Auth)),
            fromJSONField: (field) => ReplaceDepositForBurnTicket.fromJSONField(Auth, field),
            fromJSON: (json) => ReplaceDepositForBurnTicket.fromJSON(Auth, json),
            fromSuiParsedData: (content) => ReplaceDepositForBurnTicket.fromSuiParsedData(Auth, content),
            fromSuiObjectData: (content) => ReplaceDepositForBurnTicket.fromSuiObjectData(Auth, content),
            fetch: async (client, id) => ReplaceDepositForBurnTicket.fetch(client, Auth, id),
            new: (fields) => {
                return new ReplaceDepositForBurnTicket([(0, reified_1.extractType)(Auth)], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return ReplaceDepositForBurnTicket.reified;
    }
    static phantom(Auth) {
        return (0, reified_1.phantom)(ReplaceDepositForBurnTicket.reified(Auth));
    }
    static get p() {
        return ReplaceDepositForBurnTicket.phantom;
    }
    static get bcs() {
        return (Auth) => bcs_1.bcs.struct(`ReplaceDepositForBurnTicket<${Auth.name}>`, {
            auth: Auth,
            original_raw_message: bcs_1.bcs.vector(bcs_1.bcs.u8()),
            original_attestation: bcs_1.bcs.vector(bcs_1.bcs.u8()),
            new_destination_caller: structs_2.Option.bcs(bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            })),
            new_mint_recipient: structs_2.Option.bcs(bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            })),
        });
    }
    static fromFields(typeArg, fields) {
        return ReplaceDepositForBurnTicket.reified(typeArg).new({
            auth: (0, reified_1.decodeFromFields)(typeArg, fields.auth),
            originalRawMessage: (0, reified_1.decodeFromFields)(reified.vector("u8"), fields.original_raw_message),
            originalAttestation: (0, reified_1.decodeFromFields)(reified.vector("u8"), fields.original_attestation),
            newDestinationCaller: (0, reified_1.decodeFromFields)(structs_2.Option.reified("address"), fields.new_destination_caller),
            newMintRecipient: (0, reified_1.decodeFromFields)(structs_2.Option.reified("address"), fields.new_mint_recipient),
        });
    }
    static fromFieldsWithTypes(typeArg, item) {
        if (!isReplaceDepositForBurnTicket(item.type)) {
            throw new Error("not a ReplaceDepositForBurnTicket type");
        }
        (0, reified_1.assertFieldsWithTypesArgsMatch)(item, [typeArg]);
        return ReplaceDepositForBurnTicket.reified(typeArg).new({
            auth: (0, reified_1.decodeFromFieldsWithTypes)(typeArg, item.fields.auth),
            originalRawMessage: (0, reified_1.decodeFromFieldsWithTypes)(reified.vector("u8"), item.fields.original_raw_message),
            originalAttestation: (0, reified_1.decodeFromFieldsWithTypes)(reified.vector("u8"), item.fields.original_attestation),
            newDestinationCaller: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.Option.reified("address"), item.fields.new_destination_caller),
            newMintRecipient: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.Option.reified("address"), item.fields.new_mint_recipient),
        });
    }
    static fromBcs(typeArg, data) {
        const typeArgs = [typeArg];
        return ReplaceDepositForBurnTicket.fromFields(typeArg, ReplaceDepositForBurnTicket.bcs((0, reified_1.toBcs)(typeArgs[0])).parse(data));
    }
    toJSONField() {
        return {
            auth: (0, reified_1.fieldToJSON)(this.$typeArgs[0], this.auth),
            originalRawMessage: (0, reified_1.fieldToJSON)(`vector<u8>`, this.originalRawMessage),
            originalAttestation: (0, reified_1.fieldToJSON)(`vector<u8>`, this.originalAttestation),
            newDestinationCaller: (0, reified_1.fieldToJSON)(`${structs_2.Option.$typeName}<address>`, this.newDestinationCaller),
            newMintRecipient: (0, reified_1.fieldToJSON)(`${structs_2.Option.$typeName}<address>`, this.newMintRecipient),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(typeArg, field) {
        return ReplaceDepositForBurnTicket.reified(typeArg).new({
            auth: (0, reified_1.decodeFromJSONField)(typeArg, field.auth),
            originalRawMessage: (0, reified_1.decodeFromJSONField)(reified.vector("u8"), field.originalRawMessage),
            originalAttestation: (0, reified_1.decodeFromJSONField)(reified.vector("u8"), field.originalAttestation),
            newDestinationCaller: (0, reified_1.decodeFromJSONField)(structs_2.Option.reified("address"), field.newDestinationCaller),
            newMintRecipient: (0, reified_1.decodeFromJSONField)(structs_2.Option.reified("address"), field.newMintRecipient),
        });
    }
    static fromJSON(typeArg, json) {
        if (json.$typeName !== ReplaceDepositForBurnTicket.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        (0, reified_1.assertReifiedTypeArgsMatch)((0, util_1.composeSuiType)(ReplaceDepositForBurnTicket.$typeName, (0, reified_1.extractType)(typeArg)), json.$typeArgs, [typeArg]);
        return ReplaceDepositForBurnTicket.fromJSONField(typeArg, json);
    }
    static fromSuiParsedData(typeArg, content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isReplaceDepositForBurnTicket(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a ReplaceDepositForBurnTicket object`);
        }
        return ReplaceDepositForBurnTicket.fromFieldsWithTypes(typeArg, content);
    }
    static fromSuiObjectData(typeArg, data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isReplaceDepositForBurnTicket(data.bcs.type)) {
                throw new Error(`object at is not a ReplaceDepositForBurnTicket object`);
            }
            const gotTypeArgs = (0, util_1.parseTypeName)(data.bcs.type).typeArgs;
            if (gotTypeArgs.length !== 1) {
                throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);
            }
            const gotTypeArg = (0, util_1.compressSuiType)(gotTypeArgs[0]);
            const expectedTypeArg = (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg));
            if (gotTypeArg !== (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg))) {
                throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);
            }
            return ReplaceDepositForBurnTicket.fromBcs(typeArg, (0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return ReplaceDepositForBurnTicket.fromSuiParsedData(typeArg, data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, typeArg, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching ReplaceDepositForBurnTicket object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isReplaceDepositForBurnTicket(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a ReplaceDepositForBurnTicket object`);
        }
        return ReplaceDepositForBurnTicket.fromSuiObjectData(typeArg, res.data);
    }
}
exports.ReplaceDepositForBurnTicket = ReplaceDepositForBurnTicket;
//# sourceMappingURL=structs.js.map