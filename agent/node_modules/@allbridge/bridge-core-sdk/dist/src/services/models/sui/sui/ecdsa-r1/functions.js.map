{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/ecdsa-r1/functions.ts"],"names":[],"mappings":";;AAWA,gDAKC;AASD,0CAUC;AAnCD,cAAc;AACd,0BAAkC;AAClC,gDAA6C;AAS7C,SAAgB,kBAAkB,CAAC,EAAe,EAAE,IAA4B;IAC9E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iCAAiC;QACxD,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACjH,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,eAAe,CAAC,EAAe,EAAE,IAAyB;IACxE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8BAA8B;QACrD,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC;YACtC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC;YACtC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,YAAY,CAAC;YAChC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;SAC1B;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument } from \"@mysten/sui/transactions\";\n\nexport interface Secp256r1EcrecoverArgs {\n  signature: Array<number | TransactionArgument> | TransactionArgument;\n  msg: Array<number | TransactionArgument> | TransactionArgument;\n  hash: number | TransactionArgument;\n}\n\nexport function secp256r1Ecrecover(tx: Transaction, args: Secp256r1EcrecoverArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::ecdsa_r1::secp256r1_ecrecover`,\n    arguments: [pure(tx, args.signature, `vector<u8>`), pure(tx, args.msg, `vector<u8>`), pure(tx, args.hash, `u8`)],\n  });\n}\n\nexport interface Secp256r1VerifyArgs {\n  signature: Array<number | TransactionArgument> | TransactionArgument;\n  publicKey: Array<number | TransactionArgument> | TransactionArgument;\n  msg: Array<number | TransactionArgument> | TransactionArgument;\n  hash: number | TransactionArgument;\n}\n\nexport function secp256r1Verify(tx: Transaction, args: Secp256r1VerifyArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::ecdsa_r1::secp256r1_verify`,\n    arguments: [\n      pure(tx, args.signature, `vector<u8>`),\n      pure(tx, args.publicKey, `vector<u8>`),\n      pure(tx, args.msg, `vector<u8>`),\n      pure(tx, args.hash, `u8`),\n    ],\n  });\n}\n"]}