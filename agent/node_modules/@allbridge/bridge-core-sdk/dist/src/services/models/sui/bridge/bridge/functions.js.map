{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/bridge/bridge/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface SwapArgs {\n  bridge: TransactionObjectInput;\n  coin: TransactionObjectInput;\n  receiveAmountMin: bigint | TransactionArgument;\n}\n\nexport function swap(tx: Transaction, typeArgs: [string, string], args: SwapArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::swap`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.bridge), obj(tx, args.coin), pure(tx, args.receiveAmountMin, `u64`)],\n  });\n}\n\nexport interface DepositFeeArgs {\n  bridge: TransactionObjectInput;\n  coin: TransactionObjectInput;\n}\n\nexport function depositFee(tx: Transaction, typeArg: string, args: DepositFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::deposit_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.coin)],\n  });\n}\n\nexport function getId(tx: Transaction, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::get_id`,\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function getVersion(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::get_version`,\n    arguments: [],\n  });\n}\n\nexport function init(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::init`,\n    arguments: [],\n  });\n}\n\nexport interface MigrateArgs {\n  adminCap: TransactionObjectInput;\n  bridge: TransactionObjectInput;\n}\n\nexport function migrate(tx: Transaction, args: MigrateArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::migrate`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.bridge)],\n  });\n}\n\nexport interface SetGasUsageArgs {\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  value: bigint | TransactionArgument;\n}\n\nexport function setGasUsage(tx: Transaction, args: SetGasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::set_gas_usage`,\n    arguments: [obj(tx, args.bridge), pure(tx, args.chainId, `u8`), pure(tx, args.value, `u64`)],\n  });\n}\n\nexport interface WithdrawFeeArgs {\n  bridge: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function withdrawFee(tx: Transaction, typeArg: string, args: WithdrawFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::withdraw_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport interface GasUsageArgs {\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function gasUsage(tx: Transaction, args: GasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::gas_usage`,\n    arguments: [obj(tx, args.bridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport function adminFeeShareBp(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::admin_fee_share_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function pool(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::pool`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface AddBridgeArgs {\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  bridgeAddress: TransactionObjectInput;\n}\n\nexport function addBridge(tx: Transaction, args: AddBridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::add_bridge`,\n    arguments: [obj(tx, args.bridge), pure(tx, args.chainId, `u8`), obj(tx, args.bridgeAddress)],\n  });\n}\n\nexport interface AddBridgeTokenArgs {\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  tokenAddress: TransactionObjectInput;\n}\n\nexport function addBridgeToken(tx: Transaction, args: AddBridgeTokenArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::add_bridge_token`,\n    arguments: [obj(tx, args.bridge), pure(tx, args.chainId, `u8`), obj(tx, args.tokenAddress)],\n  });\n}\n\nexport interface AddPoolArgs {\n  bridge: TransactionObjectInput;\n  pool: TransactionObjectInput;\n}\n\nexport function addPool(tx: Transaction, typeArg: string, args: AddPoolArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::add_pool`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bridge), obj(tx, args.pool)],\n  });\n}\n\nexport function canSwap(tx: Transaction, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::can_swap`,\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function feeValue(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::fee_value`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface GetBridgeAllbridgeCostArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgeAllbridgeCost(tx: Transaction, args: GetBridgeAllbridgeCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::get_bridge_allbridge_cost`,\n    arguments: [obj(tx, args.bridge), obj(tx, args.messenger), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface GetBridgeCostArgs {\n  bridge: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgeCost(tx: Transaction, args: GetBridgeCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::get_bridge_cost`,\n    arguments: [obj(tx, args.bridge), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface GetBridgeWormholeCostArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgeWormholeCost(tx: Transaction, args: GetBridgeWormholeCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::get_bridge_wormhole_cost`,\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.gasOracle),\n      pure(tx, args.chainId, `u8`),\n    ],\n  });\n}\n\nexport function getPoolKey(tx: Transaction, typeArg: string) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::get_pool_key`,\n    typeArguments: [typeArg],\n    arguments: [],\n  });\n}\n\nexport interface IsProcessedMessageArgs {\n  bridge: TransactionObjectInput;\n  message: TransactionObjectInput;\n}\n\nexport function isProcessedMessage(tx: Transaction, args: IsProcessedMessageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::is_processed_message`,\n    arguments: [obj(tx, args.bridge), obj(tx, args.message)],\n  });\n}\n\nexport function poolMut(tx: Transaction, typeArg: string, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::pool_mut`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface ReceiveTokensAllbridgeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n  recipient: TransactionObjectInput;\n  sourceChainId: number | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n  receiveAmountMin: bigint | TransactionArgument;\n  extraGasCoin: TransactionObjectInput;\n}\n\nexport function receiveTokensAllbridge(tx: Transaction, typeArg: string, args: ReceiveTokensAllbridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::receive_tokens_allbridge`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      pure(tx, args.amount, `u64`),\n      obj(tx, args.recipient),\n      pure(tx, args.sourceChainId, `u8`),\n      pure(tx, args.nonce, `u256`),\n      pure(tx, args.receiveAmountMin, `u64`),\n      obj(tx, args.extraGasCoin),\n    ],\n  });\n}\n\nexport interface ReceiveTokensWormholeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n  recipient: TransactionObjectInput;\n  sourceChainId: number | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n  receiveAmountMin: bigint | TransactionArgument;\n  extraGasCoin: TransactionObjectInput;\n}\n\nexport function receiveTokensWormhole(tx: Transaction, typeArg: string, args: ReceiveTokensWormholeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::receive_tokens_wormhole`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      pure(tx, args.amount, `u64`),\n      obj(tx, args.recipient),\n      pure(tx, args.sourceChainId, `u8`),\n      pure(tx, args.nonce, `u256`),\n      pure(tx, args.receiveAmountMin, `u64`),\n      obj(tx, args.extraGasCoin),\n    ],\n  });\n}\n\nexport interface RemoveBridgeArgs {\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function removeBridge(tx: Transaction, args: RemoveBridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::remove_bridge`,\n    arguments: [obj(tx, args.bridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface RemoveBridgeTokenArgs {\n  bridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  tokenAddress: TransactionObjectInput;\n}\n\nexport function removeBridgeToken(tx: Transaction, args: RemoveBridgeTokenArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::remove_bridge_token`,\n    arguments: [obj(tx, args.bridge), pure(tx, args.chainId, `u8`), obj(tx, args.tokenAddress)],\n  });\n}\n\nexport interface SetRebalancerArgs {\n  bridge: TransactionObjectInput;\n  rebalancer: string | TransactionArgument;\n}\n\nexport function setRebalancer(tx: Transaction, args: SetRebalancerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::set_rebalancer`,\n    arguments: [obj(tx, args.bridge), pure(tx, args.rebalancer, `address`)],\n  });\n}\n\nexport function startSwap(tx: Transaction, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::start_swap`,\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport function stopSwap(tx: Transaction, bridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::stop_swap`,\n    arguments: [obj(tx, bridge)],\n  });\n}\n\nexport interface SwapAndBridgeAllbridgeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  coin: TransactionObjectInput;\n  recipient: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  receiveToken: TransactionObjectInput;\n  nonce: bigint | TransactionArgument;\n  feeSuiCoin: TransactionObjectInput;\n  feeTokenCoin: TransactionObjectInput;\n}\n\nexport function swapAndBridgeAllbridge(tx: Transaction, typeArg: string, args: SwapAndBridgeAllbridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::swap_and_bridge_allbridge`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      obj(tx, args.gasOracle),\n      obj(tx, args.coin),\n      obj(tx, args.recipient),\n      pure(tx, args.destinationChainId, `u8`),\n      obj(tx, args.receiveToken),\n      pure(tx, args.nonce, `u256`),\n      obj(tx, args.feeSuiCoin),\n      obj(tx, args.feeTokenCoin),\n    ],\n  });\n}\n\nexport interface SwapAndBridgeWormholeArgs {\n  bridge: TransactionObjectInput;\n  messenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  theClock: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  coin: TransactionObjectInput;\n  recipient: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  receiveToken: TransactionObjectInput;\n  nonce: bigint | TransactionArgument;\n  feeSuiCoin: TransactionObjectInput;\n  feeTokenCoin: TransactionObjectInput;\n}\n\nexport function swapAndBridgeWormhole(tx: Transaction, typeArg: string, args: SwapAndBridgeWormholeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::bridge::swap_and_bridge_wormhole`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.bridge),\n      obj(tx, args.messenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.theClock),\n      obj(tx, args.gasOracle),\n      obj(tx, args.coin),\n      obj(tx, args.recipient),\n      pure(tx, args.destinationChainId, `u8`),\n      obj(tx, args.receiveToken),\n      pure(tx, args.nonce, `u256`),\n      obj(tx, args.feeSuiCoin),\n      obj(tx, args.feeTokenCoin),\n    ],\n  });\n}\n"]}