{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0xf47329f4344f3bf0f8e436e2f7b485466cff300f12a166563995d3888c296a94/external-address/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { Bytes32 } from \"../bytes32/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== ExternalAddress =============================== */\n\nexport function isExternalAddress(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::external_address::ExternalAddress`;\n}\n\nexport interface ExternalAddressFields {\n  value: ToField<Bytes32>;\n}\n\nexport type ExternalAddressReified = Reified<ExternalAddress, ExternalAddressFields>;\n\nexport class ExternalAddress implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::external_address::ExternalAddress`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = ExternalAddress.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = ExternalAddress.$isPhantom;\n\n  readonly value: ToField<Bytes32>;\n\n  private constructor(typeArgs: [], fields: ExternalAddressFields) {\n    this.$fullTypeName = composeSuiType(ExternalAddress.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.value = fields.value;\n  }\n\n  static reified(): ExternalAddressReified {\n    return {\n      typeName: ExternalAddress.$typeName,\n      fullTypeName: composeSuiType(ExternalAddress.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: ExternalAddress.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => ExternalAddress.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => ExternalAddress.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => ExternalAddress.fromBcs(data),\n      bcs: ExternalAddress.bcs,\n      fromJSONField: (field: any) => ExternalAddress.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => ExternalAddress.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => ExternalAddress.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => ExternalAddress.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => ExternalAddress.fetch(client, id),\n      new: (fields: ExternalAddressFields) => {\n        return new ExternalAddress([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return ExternalAddress.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<ExternalAddress>> {\n    return phantom(ExternalAddress.reified());\n  }\n  static get p() {\n    return ExternalAddress.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"ExternalAddress\", {\n      value: Bytes32.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): ExternalAddress {\n    return ExternalAddress.reified().new({\n      value: decodeFromFields(Bytes32.reified(), fields.value),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): ExternalAddress {\n    if (!isExternalAddress(item.type)) {\n      throw new Error(\"not a ExternalAddress type\");\n    }\n\n    return ExternalAddress.reified().new({\n      value: decodeFromFieldsWithTypes(Bytes32.reified(), item.fields.value),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): ExternalAddress {\n    return ExternalAddress.fromFields(ExternalAddress.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      value: this.value.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): ExternalAddress {\n    return ExternalAddress.reified().new({\n      value: decodeFromJSONField(Bytes32.reified(), field.value),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): ExternalAddress {\n    if (json.$typeName !== ExternalAddress.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return ExternalAddress.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): ExternalAddress {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isExternalAddress(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a ExternalAddress object`);\n    }\n    return ExternalAddress.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): ExternalAddress {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isExternalAddress(data.bcs.type)) {\n        throw new Error(`object at is not a ExternalAddress object`);\n      }\n\n      return ExternalAddress.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return ExternalAddress.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<ExternalAddress> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching ExternalAddress object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isExternalAddress(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a ExternalAddress object`);\n    }\n\n    return ExternalAddress.fromSuiObjectData(res.data);\n  }\n}\n"]}