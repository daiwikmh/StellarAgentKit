"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = create;
exports.loadInner = loadInner;
exports.loadInnerMut = loadInnerMut;
exports.deriveNextBlock = deriveNextBlock;
exports.fillBuffer = fillBuffer;
exports.generateBool = generateBool;
exports.generateBytes = generateBytes;
exports.generateU128 = generateU128;
exports.generateU128InRange = generateU128InRange;
exports.generateU16 = generateU16;
exports.generateU16InRange = generateU16InRange;
exports.generateU256 = generateU256;
exports.generateU32 = generateU32;
exports.generateU32InRange = generateU32InRange;
exports.generateU64 = generateU64;
exports.generateU64InRange = generateU64InRange;
exports.generateU8 = generateU8;
exports.generateU8InRange = generateU8InRange;
exports.newGenerator = newGenerator;
exports.shuffle = shuffle;
exports.u128InRange = u128InRange;
exports.u256FromBytes = u256FromBytes;
exports.updateRandomnessState = updateRandomnessState;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function create(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::create`,
        arguments: [],
    });
}
function loadInner(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::load_inner`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function loadInnerMut(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::load_inner_mut`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function deriveNextBlock(tx, g) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::derive_next_block`,
        arguments: [(0, util_1.obj)(tx, g)],
    });
}
function fillBuffer(tx, g) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::fill_buffer`,
        arguments: [(0, util_1.obj)(tx, g)],
    });
}
function generateBool(tx, g) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_bool`,
        arguments: [(0, util_1.obj)(tx, g)],
    });
}
function generateBytes(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_bytes`,
        arguments: [(0, util_1.obj)(tx, args.g), (0, util_1.pure)(tx, args.numOfBytes, `u16`)],
    });
}
function generateU128(tx, g) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u128`,
        arguments: [(0, util_1.obj)(tx, g)],
    });
}
function generateU128InRange(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u128_in_range`,
        arguments: [(0, util_1.obj)(tx, args.g), (0, util_1.pure)(tx, args.min, `u128`), (0, util_1.pure)(tx, args.max, `u128`)],
    });
}
function generateU16(tx, g) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u16`,
        arguments: [(0, util_1.obj)(tx, g)],
    });
}
function generateU16InRange(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u16_in_range`,
        arguments: [(0, util_1.obj)(tx, args.g), (0, util_1.pure)(tx, args.min, `u16`), (0, util_1.pure)(tx, args.max, `u16`)],
    });
}
function generateU256(tx, g) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u256`,
        arguments: [(0, util_1.obj)(tx, g)],
    });
}
function generateU32(tx, g) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u32`,
        arguments: [(0, util_1.obj)(tx, g)],
    });
}
function generateU32InRange(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u32_in_range`,
        arguments: [(0, util_1.obj)(tx, args.g), (0, util_1.pure)(tx, args.min, `u32`), (0, util_1.pure)(tx, args.max, `u32`)],
    });
}
function generateU64(tx, g) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u64`,
        arguments: [(0, util_1.obj)(tx, g)],
    });
}
function generateU64InRange(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u64_in_range`,
        arguments: [(0, util_1.obj)(tx, args.g), (0, util_1.pure)(tx, args.min, `u64`), (0, util_1.pure)(tx, args.max, `u64`)],
    });
}
function generateU8(tx, g) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u8`,
        arguments: [(0, util_1.obj)(tx, g)],
    });
}
function generateU8InRange(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::generate_u8_in_range`,
        arguments: [(0, util_1.obj)(tx, args.g), (0, util_1.pure)(tx, args.min, `u8`), (0, util_1.pure)(tx, args.max, `u8`)],
    });
}
function newGenerator(tx, r) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::new_generator`,
        arguments: [(0, util_1.obj)(tx, r)],
    });
}
function shuffle(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::shuffle`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.g), (0, util_1.vector)(tx, `${typeArg}`, args.v)],
    });
}
function u128InRange(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::u128_in_range`,
        arguments: [
            (0, util_1.obj)(tx, args.g),
            (0, util_1.pure)(tx, args.min, `u128`),
            (0, util_1.pure)(tx, args.max, `u128`),
            (0, util_1.pure)(tx, args.numOfBytes, `u8`),
        ],
    });
}
function u256FromBytes(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::u256_from_bytes`,
        arguments: [(0, util_1.obj)(tx, args.g), (0, util_1.pure)(tx, args.numOfBytes, `u8`)],
    });
}
function updateRandomnessState(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::random::update_randomness_state`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.newRound, `u64`), (0, util_1.pure)(tx, args.newBytes, `vector<u8>`)],
    });
}
//# sourceMappingURL=functions.js.map