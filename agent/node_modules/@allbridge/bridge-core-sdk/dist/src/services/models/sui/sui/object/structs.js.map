{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/object/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64, fromHEX, toHEX } from \"@mysten/sui/utils\";\n\n/* ============================== ID =============================== */\n\nexport function isID(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::object::ID`;\n}\n\nexport interface IDFields {\n  bytes: ToField<\"address\">;\n}\n\nexport type IDReified = Reified<ID, IDFields>;\n\nexport class ID implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::object::ID`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = ID.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = ID.$isPhantom;\n\n  readonly bytes: ToField<\"address\">;\n\n  private constructor(typeArgs: [], fields: IDFields) {\n    this.$fullTypeName = composeSuiType(ID.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.bytes = fields.bytes;\n  }\n\n  static reified(): IDReified {\n    return {\n      typeName: ID.$typeName,\n      fullTypeName: composeSuiType(ID.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: ID.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => ID.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => ID.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => ID.fromBcs(data),\n      bcs: ID.bcs,\n      fromJSONField: (field: any) => ID.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => ID.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => ID.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => ID.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => ID.fetch(client, id),\n      new: (fields: IDFields) => {\n        return new ID([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return ID.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<ID>> {\n    return phantom(ID.reified());\n  }\n  static get p() {\n    return ID.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"ID\", {\n      bytes: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): ID {\n    return ID.reified().new({\n      bytes: decodeFromFields(\"address\", fields.bytes),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): ID {\n    if (!isID(item.type)) {\n      throw new Error(\"not a ID type\");\n    }\n\n    return ID.reified().new({\n      bytes: decodeFromFieldsWithTypes(\"address\", item.fields.bytes),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): ID {\n    return ID.fromFields(ID.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      bytes: this.bytes,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): ID {\n    return ID.reified().new({\n      bytes: decodeFromJSONField(\"address\", field.bytes),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): ID {\n    if (json.$typeName !== ID.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return ID.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): ID {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isID(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a ID object`);\n    }\n    return ID.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): ID {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isID(data.bcs.type)) {\n        throw new Error(`object at is not a ID object`);\n      }\n\n      return ID.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return ID.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<ID> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching ID object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isID(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a ID object`);\n    }\n\n    return ID.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== UID =============================== */\n\nexport function isUID(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::object::UID`;\n}\n\nexport interface UIDFields {\n  id: ToField<ID>;\n}\n\nexport type UIDReified = Reified<UID, UIDFields>;\n\nexport class UID implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::object::UID`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = UID.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = UID.$isPhantom;\n\n  readonly id: ToField<ID>;\n\n  private constructor(typeArgs: [], fields: UIDFields) {\n    this.$fullTypeName = composeSuiType(UID.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified(): UIDReified {\n    return {\n      typeName: UID.$typeName,\n      fullTypeName: composeSuiType(UID.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: UID.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => UID.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => UID.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => UID.fromBcs(data),\n      bcs: UID.bcs,\n      fromJSONField: (field: any) => UID.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => UID.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => UID.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => UID.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => UID.fetch(client, id),\n      new: (fields: UIDFields) => {\n        return new UID([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return UID.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<UID>> {\n    return phantom(UID.reified());\n  }\n  static get p() {\n    return UID.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"UID\", {\n      id: ID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): UID {\n    return UID.reified().new({ id: decodeFromFields(ID.reified(), fields.id) });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): UID {\n    if (!isUID(item.type)) {\n      throw new Error(\"not a UID type\");\n    }\n\n    return UID.reified().new({\n      id: decodeFromFieldsWithTypes(ID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): UID {\n    return UID.fromFields(UID.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): UID {\n    return UID.reified().new({\n      id: decodeFromJSONField(ID.reified(), field.id),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): UID {\n    if (json.$typeName !== UID.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return UID.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): UID {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isUID(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a UID object`);\n    }\n    return UID.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): UID {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isUID(data.bcs.type)) {\n        throw new Error(`object at is not a UID object`);\n      }\n\n      return UID.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return UID.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<UID> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching UID object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isUID(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a UID object`);\n    }\n\n    return UID.fromSuiObjectData(res.data);\n  }\n}\n"]}