import { String } from "../../_dependencies/source/0x1/ascii/structs";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isMessageReceivedEvent(type: string): boolean;
export interface MessageReceivedEventFields {
    message: ToField<String>;
    sequence: ToField<"u64">;
}
export type MessageReceivedEventReified = Reified<MessageReceivedEvent, MessageReceivedEventFields>;
export declare class MessageReceivedEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly message: ToField<String>;
    readonly sequence: ToField<"u64">;
    private constructor();
    static reified(): MessageReceivedEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<MessageReceivedEvent, MessageReceivedEventFields>;
    static phantom(): PhantomReified<ToTypeStr<MessageReceivedEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        message: {
            bytes: number[];
        };
        sequence: string;
    }, {
        message: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        sequence: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): MessageReceivedEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): MessageReceivedEvent;
    static fromBcs(data: Uint8Array): MessageReceivedEvent;
    toJSONField(): {
        message: String;
        sequence: string;
    };
    toJSON(): {
        message: String;
        sequence: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): MessageReceivedEvent;
    static fromJSON(json: Record<string, any>): MessageReceivedEvent;
    static fromSuiParsedData(content: SuiParsedData): MessageReceivedEvent;
    static fromSuiObjectData(data: SuiObjectData): MessageReceivedEvent;
    static fetch(client: SuiClient, id: string): Promise<MessageReceivedEvent>;
}
export declare function isMessageSentEvent(type: string): boolean;
export interface MessageSentEventFields {
    message: ToField<String>;
    sequence: ToField<"u64">;
}
export type MessageSentEventReified = Reified<MessageSentEvent, MessageSentEventFields>;
export declare class MessageSentEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly message: ToField<String>;
    readonly sequence: ToField<"u64">;
    private constructor();
    static reified(): MessageSentEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<MessageSentEvent, MessageSentEventFields>;
    static phantom(): PhantomReified<ToTypeStr<MessageSentEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        message: {
            bytes: number[];
        };
        sequence: string;
    }, {
        message: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        sequence: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): MessageSentEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): MessageSentEvent;
    static fromBcs(data: Uint8Array): MessageSentEvent;
    toJSONField(): {
        message: String;
        sequence: string;
    };
    toJSON(): {
        message: String;
        sequence: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): MessageSentEvent;
    static fromJSON(json: Record<string, any>): MessageSentEvent;
    static fromSuiParsedData(content: SuiParsedData): MessageSentEvent;
    static fromSuiObjectData(data: SuiObjectData): MessageSentEvent;
    static fetch(client: SuiClient, id: string): Promise<MessageSentEvent>;
}
