{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0x31cc14d80c175ae39777c0238f20594c6d4869cfab199f40b69f3319956b8beb/state/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { Bag } from \"../../../../sui/bag/structs\";\nimport { UID } from \"../../../../sui/object/structs\";\nimport { Table } from \"../../../../sui/table/structs\";\nimport { VecSet } from \"../../../../sui/vec-set/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== State =============================== */\n\nexport function isState(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::state::State`;\n}\n\nexport interface StateFields {\n  id: ToField<UID>;\n  messageBodyVersion: ToField<\"u32\">;\n  remoteTokenMessengers: ToField<Table<\"u32\", \"address\">>;\n  burnLimitsPerMessage: ToField<Table<\"address\", \"u64\">>;\n  remoteTokensToLocalTokens: ToField<Table<\"address\", \"address\">>;\n  mintCaps: ToField<Bag>;\n  paused: ToField<\"bool\">;\n  compatibleVersions: ToField<VecSet<\"u64\">>;\n}\n\nexport type StateReified = Reified<State, StateFields>;\n\nexport class State implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::state::State`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = State.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = State.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly messageBodyVersion: ToField<\"u32\">;\n  readonly remoteTokenMessengers: ToField<Table<\"u32\", \"address\">>;\n  readonly burnLimitsPerMessage: ToField<Table<\"address\", \"u64\">>;\n  readonly remoteTokensToLocalTokens: ToField<Table<\"address\", \"address\">>;\n  readonly mintCaps: ToField<Bag>;\n  readonly paused: ToField<\"bool\">;\n  readonly compatibleVersions: ToField<VecSet<\"u64\">>;\n\n  private constructor(typeArgs: [], fields: StateFields) {\n    this.$fullTypeName = composeSuiType(State.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.messageBodyVersion = fields.messageBodyVersion;\n    this.remoteTokenMessengers = fields.remoteTokenMessengers;\n    this.burnLimitsPerMessage = fields.burnLimitsPerMessage;\n    this.remoteTokensToLocalTokens = fields.remoteTokensToLocalTokens;\n    this.mintCaps = fields.mintCaps;\n    this.paused = fields.paused;\n    this.compatibleVersions = fields.compatibleVersions;\n  }\n\n  static reified(): StateReified {\n    return {\n      typeName: State.$typeName,\n      fullTypeName: composeSuiType(State.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: State.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => State.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => State.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => State.fromBcs(data),\n      bcs: State.bcs,\n      fromJSONField: (field: any) => State.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => State.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => State.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => State.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => State.fetch(client, id),\n      new: (fields: StateFields) => {\n        return new State([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return State.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<State>> {\n    return phantom(State.reified());\n  }\n  static get p() {\n    return State.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"State\", {\n      id: UID.bcs,\n      message_body_version: bcs.u32(),\n      remote_token_messengers: Table.bcs,\n      burn_limits_per_message: Table.bcs,\n      remote_tokens_to_local_tokens: Table.bcs,\n      mint_caps: Bag.bcs,\n      paused: bcs.bool(),\n      compatible_versions: VecSet.bcs(bcs.u64()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): State {\n    return State.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      messageBodyVersion: decodeFromFields(\"u32\", fields.message_body_version),\n      remoteTokenMessengers: decodeFromFields(\n        Table.reified(reified.phantom(\"u32\"), reified.phantom(\"address\")),\n        fields.remote_token_messengers\n      ),\n      burnLimitsPerMessage: decodeFromFields(\n        Table.reified(reified.phantom(\"address\"), reified.phantom(\"u64\")),\n        fields.burn_limits_per_message\n      ),\n      remoteTokensToLocalTokens: decodeFromFields(\n        Table.reified(reified.phantom(\"address\"), reified.phantom(\"address\")),\n        fields.remote_tokens_to_local_tokens\n      ),\n      mintCaps: decodeFromFields(Bag.reified(), fields.mint_caps),\n      paused: decodeFromFields(\"bool\", fields.paused),\n      compatibleVersions: decodeFromFields(VecSet.reified(\"u64\"), fields.compatible_versions),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): State {\n    if (!isState(item.type)) {\n      throw new Error(\"not a State type\");\n    }\n\n    return State.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      messageBodyVersion: decodeFromFieldsWithTypes(\"u32\", item.fields.message_body_version),\n      remoteTokenMessengers: decodeFromFieldsWithTypes(\n        Table.reified(reified.phantom(\"u32\"), reified.phantom(\"address\")),\n        item.fields.remote_token_messengers\n      ),\n      burnLimitsPerMessage: decodeFromFieldsWithTypes(\n        Table.reified(reified.phantom(\"address\"), reified.phantom(\"u64\")),\n        item.fields.burn_limits_per_message\n      ),\n      remoteTokensToLocalTokens: decodeFromFieldsWithTypes(\n        Table.reified(reified.phantom(\"address\"), reified.phantom(\"address\")),\n        item.fields.remote_tokens_to_local_tokens\n      ),\n      mintCaps: decodeFromFieldsWithTypes(Bag.reified(), item.fields.mint_caps),\n      paused: decodeFromFieldsWithTypes(\"bool\", item.fields.paused),\n      compatibleVersions: decodeFromFieldsWithTypes(VecSet.reified(\"u64\"), item.fields.compatible_versions),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): State {\n    return State.fromFields(State.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      messageBodyVersion: this.messageBodyVersion,\n      remoteTokenMessengers: this.remoteTokenMessengers.toJSONField(),\n      burnLimitsPerMessage: this.burnLimitsPerMessage.toJSONField(),\n      remoteTokensToLocalTokens: this.remoteTokensToLocalTokens.toJSONField(),\n      mintCaps: this.mintCaps.toJSONField(),\n      paused: this.paused,\n      compatibleVersions: this.compatibleVersions.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): State {\n    return State.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      messageBodyVersion: decodeFromJSONField(\"u32\", field.messageBodyVersion),\n      remoteTokenMessengers: decodeFromJSONField(\n        Table.reified(reified.phantom(\"u32\"), reified.phantom(\"address\")),\n        field.remoteTokenMessengers\n      ),\n      burnLimitsPerMessage: decodeFromJSONField(\n        Table.reified(reified.phantom(\"address\"), reified.phantom(\"u64\")),\n        field.burnLimitsPerMessage\n      ),\n      remoteTokensToLocalTokens: decodeFromJSONField(\n        Table.reified(reified.phantom(\"address\"), reified.phantom(\"address\")),\n        field.remoteTokensToLocalTokens\n      ),\n      mintCaps: decodeFromJSONField(Bag.reified(), field.mintCaps),\n      paused: decodeFromJSONField(\"bool\", field.paused),\n      compatibleVersions: decodeFromJSONField(VecSet.reified(\"u64\"), field.compatibleVersions),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): State {\n    if (json.$typeName !== State.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return State.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): State {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isState(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a State object`);\n    }\n    return State.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): State {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isState(data.bcs.type)) {\n        throw new Error(`object at is not a State object`);\n      }\n\n      return State.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return State.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<State> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching State object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isState(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a State object`);\n    }\n\n    return State.fromSuiObjectData(res.data);\n  }\n}\n"]}