"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.new_ = new_;
exports.addRewards = addRewards;
exports.claimAdminFee = claimAdminFee;
exports.claimReward = claimReward;
exports.depositLp = depositLp;
exports.getAdminFeeShareBp = getAdminFeeShareBp;
exports.lpSupply = lpSupply;
exports.pendingRewards = pendingRewards;
exports.setAdminFeeShareBp = setAdminFeeShareBp;
exports.withdrawLp = withdrawLp;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function new_(tx, typeArg) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::new`,
        typeArguments: [typeArg],
        arguments: [],
    });
}
function addRewards(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::add_rewards`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolRewards), (0, util_1.obj)(tx, args.rewards)],
    });
}
function claimAdminFee(tx, typeArg, poolRewards) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::claim_admin_fee`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolRewards)],
    });
}
function claimReward(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::claim_reward`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolRewards), (0, util_1.obj)(tx, args.userDeposit)],
    });
}
function depositLp(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::deposit_lp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolRewards), (0, util_1.obj)(tx, args.userDeposit), (0, util_1.pure)(tx, args.lpAmount, `u64`)],
    });
}
function getAdminFeeShareBp(tx, typeArg, poolRewards) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::get_admin_fee_share_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolRewards)],
    });
}
function lpSupply(tx, typeArg, poolRewards) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::lp_supply`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolRewards)],
    });
}
function pendingRewards(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::pending_rewards`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolRewards), (0, util_1.obj)(tx, args.userDeposit)],
    });
}
function setAdminFeeShareBp(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::set_admin_fee_share_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolRewards), (0, util_1.pure)(tx, args.adminFeeShareBp, `u64`)],
    });
}
function withdrawLp(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_rewards::withdraw_lp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolRewards), (0, util_1.obj)(tx, args.userDeposit), (0, util_1.pure)(tx, args.lpAmount, `u64`)],
    });
}
//# sourceMappingURL=functions.js.map