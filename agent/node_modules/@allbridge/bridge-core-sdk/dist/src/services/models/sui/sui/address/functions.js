"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.length = length;
exports.toBytes = toBytes;
exports.fromAsciiBytes = fromAsciiBytes;
exports.fromBytes = fromBytes;
exports.fromU256 = fromU256;
exports.hexCharValue = hexCharValue;
exports.max = max;
exports.toAsciiString = toAsciiString;
exports.toString = toString;
exports.toU256 = toU256;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function length(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::length`,
        arguments: [],
    });
}
function toBytes(tx, a) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::to_bytes`,
        arguments: [(0, util_1.pure)(tx, a, `address`)],
    });
}
function fromAsciiBytes(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::from_ascii_bytes`,
        arguments: [(0, util_1.pure)(tx, bytes, `vector<u8>`)],
    });
}
function fromBytes(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::from_bytes`,
        arguments: [(0, util_1.pure)(tx, bytes, `vector<u8>`)],
    });
}
function fromU256(tx, n) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::from_u256`,
        arguments: [(0, util_1.pure)(tx, n, `u256`)],
    });
}
function hexCharValue(tx, c) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::hex_char_value`,
        arguments: [(0, util_1.pure)(tx, c, `u8`)],
    });
}
function max(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::max`,
        arguments: [],
    });
}
function toAsciiString(tx, a) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::to_ascii_string`,
        arguments: [(0, util_1.pure)(tx, a, `address`)],
    });
}
function toString(tx, a) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::to_string`,
        arguments: [(0, util_1.pure)(tx, a, `address`)],
    });
}
function toU256(tx, a) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::address::to_u256`,
        arguments: [(0, util_1.pure)(tx, a, `address`)],
    });
}
//# sourceMappingURL=functions.js.map