import { String } from "../../_dependencies/source/0x1/ascii/structs";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isReceiveFeeEvent(type: string): boolean;
export interface ReceiveFeeEventFields {
    userPaySui: ToField<"u64">;
    userPayStable: ToField<"u64">;
    totalPaySui: ToField<"u64">;
    totalFeeSui: ToField<"u64">;
}
export type ReceiveFeeEventReified = Reified<ReceiveFeeEvent, ReceiveFeeEventFields>;
export declare class ReceiveFeeEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly userPaySui: ToField<"u64">;
    readonly userPayStable: ToField<"u64">;
    readonly totalPaySui: ToField<"u64">;
    readonly totalFeeSui: ToField<"u64">;
    private constructor();
    static reified(): ReceiveFeeEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<ReceiveFeeEvent, ReceiveFeeEventFields>;
    static phantom(): PhantomReified<ToTypeStr<ReceiveFeeEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        user_pay_sui: string;
        user_pay_stable: string;
        total_pay_sui: string;
        total_fee_sui: string;
    }, {
        user_pay_sui: string | number | bigint;
        user_pay_stable: string | number | bigint;
        total_pay_sui: string | number | bigint;
        total_fee_sui: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): ReceiveFeeEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): ReceiveFeeEvent;
    static fromBcs(data: Uint8Array): ReceiveFeeEvent;
    toJSONField(): {
        userPaySui: string;
        userPayStable: string;
        totalPaySui: string;
        totalFeeSui: string;
    };
    toJSON(): {
        userPaySui: string;
        userPayStable: string;
        totalPaySui: string;
        totalFeeSui: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): ReceiveFeeEvent;
    static fromJSON(json: Record<string, any>): ReceiveFeeEvent;
    static fromSuiParsedData(content: SuiParsedData): ReceiveFeeEvent;
    static fromSuiObjectData(data: SuiObjectData): ReceiveFeeEvent;
    static fetch(client: SuiClient, id: string): Promise<ReceiveFeeEvent>;
}
export declare function isTokensReceivedEvent(type: string): boolean;
export interface TokensReceivedEventFields {
    token: ToField<String>;
    message: ToField<String>;
    recipient: ToField<"address">;
    extraGasValue: ToField<"u64">;
}
export type TokensReceivedEventReified = Reified<TokensReceivedEvent, TokensReceivedEventFields>;
export declare class TokensReceivedEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly message: ToField<String>;
    readonly recipient: ToField<"address">;
    readonly extraGasValue: ToField<"u64">;
    private constructor();
    static reified(): TokensReceivedEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<TokensReceivedEvent, TokensReceivedEventFields>;
    static phantom(): PhantomReified<ToTypeStr<TokensReceivedEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        message: {
            bytes: number[];
        };
        recipient: string;
        extra_gas_value: string;
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        message: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        recipient: string;
        extra_gas_value: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): TokensReceivedEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): TokensReceivedEvent;
    static fromBcs(data: Uint8Array): TokensReceivedEvent;
    toJSONField(): {
        token: String;
        message: String;
        recipient: string;
        extraGasValue: string;
    };
    toJSON(): {
        token: String;
        message: String;
        recipient: string;
        extraGasValue: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): TokensReceivedEvent;
    static fromJSON(json: Record<string, any>): TokensReceivedEvent;
    static fromSuiParsedData(content: SuiParsedData): TokensReceivedEvent;
    static fromSuiObjectData(data: SuiObjectData): TokensReceivedEvent;
    static fetch(client: SuiClient, id: string): Promise<TokensReceivedEvent>;
}
export declare function isTokensSentEvent(type: string): boolean;
export interface TokensSentEventFields {
    token: ToField<String>;
    amount: ToField<"u64">;
    adminFee: ToField<"u64">;
    sender: ToField<"address">;
    recipient: ToField<String>;
    recipientWalletAddress: ToField<String>;
    destinationChainId: ToField<"u8">;
    nonce: ToField<"u64">;
}
export type TokensSentEventReified = Reified<TokensSentEvent, TokensSentEventFields>;
export declare class TokensSentEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly amount: ToField<"u64">;
    readonly adminFee: ToField<"u64">;
    readonly sender: ToField<"address">;
    readonly recipient: ToField<String>;
    readonly recipientWalletAddress: ToField<String>;
    readonly destinationChainId: ToField<"u8">;
    readonly nonce: ToField<"u64">;
    private constructor();
    static reified(): TokensSentEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<TokensSentEvent, TokensSentEventFields>;
    static phantom(): PhantomReified<ToTypeStr<TokensSentEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        amount: string;
        admin_fee: string;
        sender: string;
        recipient: {
            bytes: number[];
        };
        recipient_wallet_address: {
            bytes: number[];
        };
        destination_chain_id: number;
        nonce: string;
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        amount: string | number | bigint;
        admin_fee: string | number | bigint;
        sender: string;
        recipient: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        recipient_wallet_address: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        destination_chain_id: number;
        nonce: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): TokensSentEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): TokensSentEvent;
    static fromBcs(data: Uint8Array): TokensSentEvent;
    toJSONField(): {
        token: String;
        amount: string;
        adminFee: string;
        sender: string;
        recipient: String;
        recipientWalletAddress: String;
        destinationChainId: number;
        nonce: string;
    };
    toJSON(): {
        token: String;
        amount: string;
        adminFee: string;
        sender: string;
        recipient: String;
        recipientWalletAddress: String;
        destinationChainId: number;
        nonce: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): TokensSentEvent;
    static fromJSON(json: Record<string, any>): TokensSentEvent;
    static fromSuiParsedData(content: SuiParsedData): TokensSentEvent;
    static fromSuiObjectData(data: SuiObjectData): TokensSentEvent;
    static fetch(client: SuiClient, id: string): Promise<TokensSentEvent>;
}
export declare function isRecipientReplaced(type: string): boolean;
export interface RecipientReplacedFields {
    token: ToField<String>;
    sender: ToField<"address">;
    nonce: ToField<"u64">;
    newRecipitne: ToField<String>;
}
export type RecipientReplacedReified = Reified<RecipientReplaced, RecipientReplacedFields>;
export declare class RecipientReplaced implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly sender: ToField<"address">;
    readonly nonce: ToField<"u64">;
    readonly newRecipitne: ToField<String>;
    private constructor();
    static reified(): RecipientReplacedReified;
    static get r(): import("../../_framework/reified").StructClassReified<RecipientReplaced, RecipientReplacedFields>;
    static phantom(): PhantomReified<ToTypeStr<RecipientReplaced>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        sender: string;
        nonce: string;
        new_recipitne: {
            bytes: number[];
        };
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        sender: string;
        nonce: string | number | bigint;
        new_recipitne: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): RecipientReplaced;
    static fromFieldsWithTypes(item: FieldsWithTypes): RecipientReplaced;
    static fromBcs(data: Uint8Array): RecipientReplaced;
    toJSONField(): {
        token: String;
        sender: string;
        nonce: string;
        newRecipitne: String;
    };
    toJSON(): {
        token: String;
        sender: string;
        nonce: string;
        newRecipitne: String;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): RecipientReplaced;
    static fromJSON(json: Record<string, any>): RecipientReplaced;
    static fromSuiParsedData(content: SuiParsedData): RecipientReplaced;
    static fromSuiObjectData(data: SuiObjectData): RecipientReplaced;
    static fetch(client: SuiClient, id: string): Promise<RecipientReplaced>;
}
