{"version":3,"file":"messenger-contract.js","sourceRoot":"","sources":["../../../../../src/services/models/srb/messenger-contract.ts"],"names":[],"mappings":";;;AAAA,sDAAgD;AAKhD,IAAO,YAAY,GAAG,sBAAQ,CAAC,IAAI,CAAC;AACpC,IAAO,cAAc,GAAG,sBAAQ,CAAC,MAAM,CAAC;AAgC3B,QAAA,MAAM,GAAG;IACpB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACnB,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACnB,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACnB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;CACrB,CAAC;AAmeF,4EAA4E;AAC5E,MAAa,iBAAkB,SAAQ,cAAc;IACvB;IAA5B,YAA4B,OAA8B;QACxD,KAAK,CACH,IAAI,YAAY,CAAC;YACf,8WAA8W;YAC9W,8HAA8H;YAC9H,kSAAkS;YAClS,kIAAkI;YAClI,kIAAkI;YAClI,0IAA0I;YAC1I,kIAAkI;YAClI,kGAAkG;YAClG,0GAA0G;YAC1G,0HAA0H;YAC1H,kIAAkI;YAClI,8EAA8E;YAC9E,kGAAkG;YAClG,0GAA0G;YAC1G,kHAAkH;YAClH,8FAA8F;YAC9F,kGAAkG;YAClG,8DAA8D;YAC9D,kEAAkE;YAClE,0GAA0G;YAC1G,8EAA8E;YAC9E,kFAAkF;YAClF,kJAAkJ;YAClJ,kOAAkO;YAClO,8IAA8I;YAC9I,8DAA8D;YAC9D,0EAA0E;YAC1E,0EAA0E;YAC1E,kEAAkE;YAClE,0EAA0E;YAC1E,kjDAAkjD;SACnjD,CAAC,EACF,OAAO,CACR,CAAC;QApCwB,YAAO,GAAP,OAAO,CAAuB;IAqC1D,CAAC;IACe,QAAQ,GAAG;QACzB,UAAU,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACzC,YAAY,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC3C,eAAe,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC9C,aAAa,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC5C,uBAAuB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACtD,0BAA0B,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACzD,qBAAqB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACpD,SAAS,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACxC,cAAc,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC7C,mBAAmB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAClD,mBAAmB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAClD,UAAU,EAAE,CAAA,IAAI,CAAC,UAA0B,CAAA;QAC3C,gBAAgB,EAAE,CAAA,IAAI,CAAC,UAA2B,CAAA;QAClD,oBAAoB,EAAE,CAAA,IAAI,CAAC,UAA2B,CAAA;QACtD,yBAAyB,EAAE,CAAA,IAAI,CAAC,UAAuB,CAAA;QACvD,aAAa,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC5C,oBAAoB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACnD,SAAS,EAAE,CAAA,IAAI,CAAC,UAA0B,CAAA;QAC1C,cAAc,EAAE,CAAA,IAAI,CAAC,UAA0B,CAAA;QAC/C,OAAO,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;KACvC,CAAC;CACH;AA7DD,8CA6DC","sourcesContent":["import { contract } from \"@stellar/stellar-sdk\";\nimport u128 = contract.u128;\nimport u32 = contract.u32;\nimport AssembledTransaction = contract.AssembledTransaction;\nimport Result = contract.Result;\nimport ContractSpec = contract.Spec;\nimport ContractClient = contract.Client;\nimport ContractClientOptions = contract.ClientOptions;\n\nexport interface MessageSent {\n  message: Buffer;\n}\n\nexport interface MessageReceived {\n  message: Buffer;\n}\n\nexport interface SecondaryValidatorsSet {\n  new_validators: string[];\n  old_validators: string[];\n}\n\nexport interface Config {\n  chain_id: u32;\n  other_chain_ids: Buffer;\n  primary_validator_key: Buffer;\n  secondary_validator_keys: Map<Buffer, boolean>;\n}\n\nexport type DataKey =\n  | { tag: \"SentMessage\"; values: readonly [Buffer] }\n  | { tag: \"ReceivedMessage\"; values: readonly [Buffer] };\n\nexport type Admin = readonly [string];\nexport type GasOracleAddress = readonly [string];\nexport type GasUsage = readonly [Map<u32, u128>];\nexport type NativeToken = readonly [string];\nexport type StopAuthority = readonly [string];\nexport const Errors = {\n  0: { message: \"\" },\n  1: { message: \"\" },\n  2: { message: \"\" },\n  3: { message: \"\" },\n  4: { message: \"\" },\n  5: { message: \"\" },\n  6: { message: \"\" },\n  7: { message: \"\" },\n  8: { message: \"\" },\n  9: { message: \"\" },\n  10: { message: \"\" },\n  11: { message: \"\" },\n  12: { message: \"\" },\n  103: { message: \"\" },\n  104: { message: \"\" },\n  105: { message: \"\" },\n  106: { message: \"\" },\n  107: { message: \"\" },\n  108: { message: \"\" },\n  109: { message: \"\" },\n  203: { message: \"\" },\n  204: { message: \"\" },\n  205: { message: \"\" },\n  206: { message: \"\" },\n  207: { message: \"\" },\n  208: { message: \"\" },\n  209: { message: \"\" },\n  210: { message: \"\" },\n  211: { message: \"\" },\n  212: { message: \"\" },\n  214: { message: \"\" },\n  215: { message: \"\" },\n  216: { message: \"\" },\n  217: { message: \"\" },\n  218: { message: \"\" },\n  300: { message: \"\" },\n  301: { message: \"\" },\n  302: { message: \"\" },\n  303: { message: \"\" },\n  400: { message: \"\" },\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport interface MessengerContract {\n  /**\n   * Construct and simulate a initialize transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  initialize: (\n    {\n      admin,\n      chain_id,\n      native_token_address,\n      other_chain_ids,\n      gas_oracle_address,\n      primary_validator_key,\n      secondary_validator_keys,\n    }: {\n      admin: string;\n      chain_id: u32;\n      native_token_address: string;\n      other_chain_ids: Buffer;\n      gas_oracle_address: string;\n      primary_validator_key: Buffer;\n      secondary_validator_keys: Map<Buffer, boolean>;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a send_message transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  send_message: (\n    { message, sender }: { message: Buffer; sender: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a receive_message transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  receive_message: (\n    {\n      message,\n      primary_signature,\n      primary_recovery_id,\n      secondary_signature,\n      secondary_recovery_id,\n    }: {\n      message: Buffer;\n      primary_signature: Buffer;\n      primary_recovery_id: u32;\n      secondary_signature: Buffer;\n      secondary_recovery_id: u32;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_gas_usage transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_gas_usage: (\n    { chain_id, gas_usage }: { chain_id: u32; gas_usage: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a add_secondary_validator transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  add_secondary_validator: (\n    { validator_address }: { validator_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a remove_secondary_validator transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  remove_secondary_validator: (\n    { validator_address }: { validator_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_primary_validator transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_primary_validator: (\n    { validator_address }: { validator_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_admin: (\n    { new_admin }: { new_admin: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_gas_oracle transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_gas_oracle: (\n    { new_address }: { new_address: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_other_chain_ids transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_other_chain_ids: (\n    { other_chain_ids }: { other_chain_ids: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a withdraw_gas_tokens transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  withdraw_gas_tokens: (\n    { sender, amount }: { sender: string; amount: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a get_config transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_config: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<Config>>>;\n\n  /**\n   * Construct and simulate a has_sent_message transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  has_sent_message: (\n    { message }: { message: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<boolean>>>;\n\n  /**\n   * Construct and simulate a has_received_message transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  has_received_message: (\n    { message }: { message: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<boolean>>>;\n\n  /**\n   * Construct and simulate a get_sent_message_sequence transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_sent_message_sequence: (\n    { message }: { message: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u32>>>;\n\n  /**\n   * Construct and simulate a get_gas_usage transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_gas_usage: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_transaction_cost transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_transaction_cost: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_admin transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_admin: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_gas_oracle transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_gas_oracle: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a upgrade transaction. Returns an `AssembledTransaction` object which will have a `result` field containing the result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  upgrade: (\n    { new_wasm_hash }: { new_wasm_hash: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class MessengerContract extends ContractClient {\n  constructor(public readonly options: ContractClientOptions) {\n    super(\n      new ContractSpec([\n        \"AAAAAAAAAAAAAAAKaW5pdGlhbGl6ZQAAAAAABwAAAAAAAAAFYWRtaW4AAAAAAAATAAAAAAAAAAhjaGFpbl9pZAAAAAQAAAAAAAAAFG5hdGl2ZV90b2tlbl9hZGRyZXNzAAAAEwAAAAAAAAAPb3RoZXJfY2hhaW5faWRzAAAAA+4AAAAgAAAAAAAAABJnYXNfb3JhY2xlX2FkZHJlc3MAAAAAABMAAAAAAAAAFXByaW1hcnlfdmFsaWRhdG9yX2tleQAAAAAAA+4AAABBAAAAAAAAABhzZWNvbmRhcnlfdmFsaWRhdG9yX2tleXMAAAPsAAAD7gAAAEEAAAABAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAMc2VuZF9tZXNzYWdlAAAAAgAAAAAAAAAHbWVzc2FnZQAAAAPuAAAAIAAAAAAAAAAGc2VuZGVyAAAAAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAPcmVjZWl2ZV9tZXNzYWdlAAAAAAUAAAAAAAAAB21lc3NhZ2UAAAAD7gAAACAAAAAAAAAAEXByaW1hcnlfc2lnbmF0dXJlAAAAAAAD7gAAAEAAAAAAAAAAE3ByaW1hcnlfcmVjb3ZlcnlfaWQAAAAABAAAAAAAAAATc2Vjb25kYXJ5X3NpZ25hdHVyZQAAAAPuAAAAQAAAAAAAAAAVc2Vjb25kYXJ5X3JlY292ZXJ5X2lkAAAAAAAABAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAANc2V0X2dhc191c2FnZQAAAAAAAAIAAAAAAAAACGNoYWluX2lkAAAABAAAAAAAAAAJZ2FzX3VzYWdlAAAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAXYWRkX3NlY29uZGFyeV92YWxpZGF0b3IAAAAAAQAAAAAAAAARdmFsaWRhdG9yX2FkZHJlc3MAAAAAAAPuAAAAQQAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAacmVtb3ZlX3NlY29uZGFyeV92YWxpZGF0b3IAAAAAAAEAAAAAAAAAEXZhbGlkYXRvcl9hZGRyZXNzAAAAAAAD7gAAAEEAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAAVc2V0X3ByaW1hcnlfdmFsaWRhdG9yAAAAAAAAAQAAAAAAAAARdmFsaWRhdG9yX2FkZHJlc3MAAAAAAAPuAAAAQQAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAJc2V0X2FkbWluAAAAAAAAAQAAAAAAAAAJbmV3X2FkbWluAAAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAOc2V0X2dhc19vcmFjbGUAAAAAAAEAAAAAAAAAC25ld19hZGRyZXNzAAAAABMAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAATc2V0X290aGVyX2NoYWluX2lkcwAAAAABAAAAAAAAAA9vdGhlcl9jaGFpbl9pZHMAAAAD7gAAACAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAATd2l0aGRyYXdfZ2FzX3Rva2VucwAAAAACAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAABmFtb3VudAAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAKZ2V0X2NvbmZpZwAAAAAAAAAAAAEAAAPpAAAH0AAAAAZDb25maWcAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAQaGFzX3NlbnRfbWVzc2FnZQAAAAEAAAAAAAAAB21lc3NhZ2UAAAAD7gAAACAAAAABAAAD6QAAAAEAAAAD\",\n        \"AAAAAAAAAAAAAAAUaGFzX3JlY2VpdmVkX21lc3NhZ2UAAAABAAAAAAAAAAdtZXNzYWdlAAAAA+4AAAAgAAAAAQAAA+kAAAABAAAAAw==\",\n        \"AAAAAAAAAAAAAAAZZ2V0X3NlbnRfbWVzc2FnZV9zZXF1ZW5jZQAAAAAAAAEAAAAAAAAAB21lc3NhZ2UAAAAD7gAAACAAAAABAAAD6QAAAAQAAAAD\",\n        \"AAAAAAAAAAAAAAANZ2V0X2dhc191c2FnZQAAAAAAAAEAAAAAAAAACGNoYWluX2lkAAAABAAAAAEAAAPpAAAACgAAAAM=\",\n        \"AAAAAAAAAAAAAAAUZ2V0X3RyYW5zYWN0aW9uX2Nvc3QAAAABAAAAAAAAAAhjaGFpbl9pZAAAAAQAAAABAAAD6QAAAAoAAAAD\",\n        \"AAAAAAAAAAAAAAAJZ2V0X2FkbWluAAAAAAAAAAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAAOZ2V0X2dhc19vcmFjbGUAAAAAAAAAAAABAAAD6QAAABMAAAAD\",\n        \"AAAAAAAAAAAAAAAHdXBncmFkZQAAAAABAAAAAAAAAA1uZXdfd2FzbV9oYXNoAAAAAAAD7gAAACAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAQAAAAAAAAAAAAAAC01lc3NhZ2VTZW50AAAAAAEAAAAAAAAAB21lc3NhZ2UAAAAD7gAAACA=\",\n        \"AAAAAQAAAAAAAAAAAAAAD01lc3NhZ2VSZWNlaXZlZAAAAAABAAAAAAAAAAdtZXNzYWdlAAAAA+4AAAAg\",\n        \"AAAAAQAAAAAAAAAAAAAAFlNlY29uZGFyeVZhbGlkYXRvcnNTZXQAAAAAAAIAAAAAAAAADm5ld192YWxpZGF0b3JzAAAAAAPqAAAAEwAAAAAAAAAOb2xkX3ZhbGlkYXRvcnMAAAAAA+oAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAABkNvbmZpZwAAAAAABAAAAAAAAAAIY2hhaW5faWQAAAAEAAAAAAAAAA9vdGhlcl9jaGFpbl9pZHMAAAAD7gAAACAAAAAAAAAAFXByaW1hcnlfdmFsaWRhdG9yX2tleQAAAAAAA+4AAABBAAAAAAAAABhzZWNvbmRhcnlfdmFsaWRhdG9yX2tleXMAAAPsAAAD7gAAAEEAAAAB\",\n        \"AAAAAgAAAAAAAAAAAAAAB0RhdGFLZXkAAAAAAgAAAAEAAAAAAAAAC1NlbnRNZXNzYWdlAAAAAAEAAAPuAAAAIAAAAAEAAAAAAAAAD1JlY2VpdmVkTWVzc2FnZQAAAAABAAAD7gAAACA=\",\n        \"AAAAAQAAAAAAAAAAAAAABUFkbWluAAAAAAAAAQAAAAAAAAABMAAAAAAAABM=\",\n        \"AAAAAQAAAAAAAAAAAAAAEEdhc09yYWNsZUFkZHJlc3MAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAACEdhc1VzYWdlAAAAAQAAAAAAAAABMAAAAAAAA+wAAAAEAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAC05hdGl2ZVRva2VuAAAAAAEAAAAAAAAAATAAAAAAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAADVN0b3BBdXRob3JpdHkAAAAAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAABAAAAAAAAAAAAAAABUVycm9yAAAAAAAAKAAAAAAAAAANVW5pbXBsZW1lbnRlZAAAAAAAAAAAAAAAAAAAC0luaXRpYWxpemVkAAAAAAEAAAAAAAAADVVuaW5pdGlhbGl6ZWQAAAAAAAACAAAAAAAAAAxVbmF1dGhvcml6ZWQAAAADAAAAAAAAAApJbnZhbGlkQXJnAAAAAAAEAAAAAAAAAA5JbnZhbGlkQ2hhaW5JZAAAAAAABQAAAAAAAAATSW52YWxpZE90aGVyQ2hhaW5JZAAAAAAGAAAAAAAAAA5HYXNVc2FnZU5vdFNldAAAAAAABwAAAAAAAAANQnJva2VuQWRkcmVzcwAAAAAAAAgAAAAAAAAACE5vdEZvdW5kAAAACQAAAAAAAAAYVG9rZW5JbnN1ZmZpY2llbnRCYWxhbmNlAAAACgAAAAAAAAAKQ2FzdEZhaWxlZAAAAAAACwAAAAAAAAAMVTI1Nk92ZXJmbG93AAAADAAAAAAAAAAKWmVyb0Ftb3VudAAAAAAAZwAAAAAAAAAMUG9vbE92ZXJmbG93AAAAaAAAAAAAAAALWmVyb0NoYW5nZXMAAAAAaQAAAAAAAAARUmVzZXJ2ZXNFeGhhdXN0ZWQAAAAAAABqAAAAAAAAABpJbnN1ZmZpY2llbnRSZWNlaXZlZEFtb3VudAAAAAAAawAAAAAAAAAUQmFsYW5jZVJhdGlvRXhjZWVkZWQAAABsAAAAAAAAAAlGb3JiaWRkZW4AAAAAAABtAAAAAAAAABlVbmF1dGhvcml6ZWRTdG9wQXV0aG9yaXR5AAAAAAAAywAAAAAAAAAOU3dhcFByb2hpYml0ZWQAAAAAAMwAAAAAAAAAEkFtb3VudFRvb0xvd0ZvckZlZQAAAAAAzQAAAAAAAAAWQnJpZGdlVG9UaGVaZXJvQWRkcmVzcwAAAAAAzgAAAAAAAAAORW1wdHlSZWNpcGllbnQAAAAAAM8AAAAAAAAAE1NvdXJjZU5vdFJlZ2lzdGVyZWQAAAAA0AAAAAAAAAAVV3JvbmdEZXN0aW5hdGlvbkNoYWluAAAAAAAA0QAAAAAAAAATVW5rbm93bkFub3RoZXJDaGFpbgAAAADSAAAAAAAAABFUb2tlbnNBbHJlYWR5U2VudAAAAAAAANMAAAAAAAAAEE1lc3NhZ2VQcm9jZXNzZWQAAADUAAAAAAAAAAxOb3RFbm91Z2hGZWUAAADWAAAAAAAAAAlOb01lc3NhZ2UAAAAAAADXAAAAAAAAAA1Ob1JlY2VpdmVQb29sAAAAAAAA2AAAAAAAAAAGTm9Qb29sAAAAAADZAAAAAAAAABNVbmtub3duQW5vdGhlclRva2VuAAAAANoAAAAAAAAAD1dyb25nQnl0ZUxlbmd0aAAAAAEsAAAAAAAAAApIYXNNZXNzYWdlAAAAAAEtAAAAAAAAABdJbnZhbGlkUHJpbWFyeVNpZ25hdHVyZQAAAAEuAAAAAAAAABlJbnZhbGlkU2Vjb25kYXJ5U2lnbmF0dXJlAAAAAAABLwAAAAAAAAARTm9HYXNEYXRhRm9yQ2hhaW4AAAAAAAGQ\",\n      ]),\n      options\n    );\n  }\n  public readonly fromJSON = {\n    initialize: this.txFromJSON<Result<void>>,\n    send_message: this.txFromJSON<Result<void>>,\n    receive_message: this.txFromJSON<Result<void>>,\n    set_gas_usage: this.txFromJSON<Result<void>>,\n    add_secondary_validator: this.txFromJSON<Result<void>>,\n    remove_secondary_validator: this.txFromJSON<Result<void>>,\n    set_primary_validator: this.txFromJSON<Result<void>>,\n    set_admin: this.txFromJSON<Result<void>>,\n    set_gas_oracle: this.txFromJSON<Result<void>>,\n    set_other_chain_ids: this.txFromJSON<Result<void>>,\n    withdraw_gas_tokens: this.txFromJSON<Result<void>>,\n    get_config: this.txFromJSON<Result<Config>>,\n    has_sent_message: this.txFromJSON<Result<boolean>>,\n    has_received_message: this.txFromJSON<Result<boolean>>,\n    get_sent_message_sequence: this.txFromJSON<Result<u32>>,\n    get_gas_usage: this.txFromJSON<Result<u128>>,\n    get_transaction_cost: this.txFromJSON<Result<u128>>,\n    get_admin: this.txFromJSON<Result<string>>,\n    get_gas_oracle: this.txFromJSON<Result<string>>,\n    upgrade: this.txFromJSON<Result<void>>,\n  };\n}\n"]}