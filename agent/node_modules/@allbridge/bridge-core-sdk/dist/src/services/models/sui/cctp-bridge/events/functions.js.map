{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/cctp-bridge/events/functions.ts"],"names":[],"mappings":";;AAYA,0CAUC;AAQD,kDAUC;AAYD,0CAcC;AAQD,8CAMC;AAhFD,cAAc;AACd,0BAAkC;AAClC,gDAAkD;AAUlD,SAAgB,eAAe,CAAC,EAAe,EAAE,IAAyB;IACxE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,6BAA6B;QACpD,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;YAChC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC;YACnC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC;YACjC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC;SAClC;KACF,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,mBAAmB,CAAC,EAAe,EAAE,OAAe,EAAE,IAA6B;IACjG,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iCAAiC;QACxD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC;YACnC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC;YACpC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,KAAK,CAAC;SACpC;KACF,CAAC,CAAC;AACL,CAAC;AAYD,SAAgB,eAAe,CAAC,EAAe,EAAE,OAAe,EAAE,IAAyB;IACzF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,6BAA6B;QACpD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC;YAC5B,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC;YAC9B,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;YAChC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,SAAS,CAAC;YACvB,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,sBAAsB,CAAC;YACpC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC;YACvC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC;SAC5B;KACF,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,iBAAiB,CAAC,EAAe,EAAE,OAAe,EAAE,IAA2B;IAC7F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8BAA8B;QACrD,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KACvG,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface ReceiveFeeEventArgs {\n  userPaySui: bigint | TransactionArgument;\n  userPayStable: bigint | TransactionArgument;\n  totalPaySui: bigint | TransactionArgument;\n  totalFeeSui: bigint | TransactionArgument;\n}\n\nexport function receiveFeeEvent(tx: Transaction, args: ReceiveFeeEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::receive_fee_event`,\n    arguments: [\n      pure(tx, args.userPaySui, `u64`),\n      pure(tx, args.userPayStable, `u64`),\n      pure(tx, args.totalPaySui, `u64`),\n      pure(tx, args.totalFeeSui, `u64`),\n    ],\n  });\n}\n\nexport interface TokensReceivedEventArgs {\n  recipient: string | TransactionArgument;\n  message: Array<number | TransactionArgument> | TransactionArgument;\n  extraGasValue: bigint | TransactionArgument;\n}\n\nexport function tokensReceivedEvent(tx: Transaction, typeArg: string, args: TokensReceivedEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::tokens_received_event`,\n    typeArguments: [typeArg],\n    arguments: [\n      pure(tx, args.recipient, `address`),\n      pure(tx, args.message, `vector<u8>`),\n      pure(tx, args.extraGasValue, `u64`),\n    ],\n  });\n}\n\nexport interface TokensSentEventArgs {\n  amount: bigint | TransactionArgument;\n  adminFee: bigint | TransactionArgument;\n  sender: string | TransactionArgument;\n  recipient: TransactionObjectInput;\n  recipientWalletAddress: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n}\n\nexport function tokensSentEvent(tx: Transaction, typeArg: string, args: TokensSentEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::tokens_sent_event`,\n    typeArguments: [typeArg],\n    arguments: [\n      pure(tx, args.amount, `u64`),\n      pure(tx, args.adminFee, `u64`),\n      pure(tx, args.sender, `address`),\n      obj(tx, args.recipient),\n      obj(tx, args.recipientWalletAddress),\n      pure(tx, args.destinationChainId, `u8`),\n      pure(tx, args.nonce, `u64`),\n    ],\n  });\n}\n\nexport interface RecipientReplacedArgs {\n  sender: string | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n  newRecipitne: TransactionObjectInput;\n}\n\nexport function recipientReplaced(tx: Transaction, typeArg: string, args: RecipientReplacedArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::recipient_replaced`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.sender, `address`), pure(tx, args.nonce, `u64`), obj(tx, args.newRecipitne)],\n  });\n}\n"]}