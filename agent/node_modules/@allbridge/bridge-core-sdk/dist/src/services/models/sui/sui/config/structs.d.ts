import { Option } from "../../_dependencies/source/0x1/option/structs";
import { PhantomReified, PhantomToTypeStr, PhantomTypeArgument, Reified, StructClass, ToField, ToPhantomTypeArgument, ToTypeArgument, ToTypeStr, TypeArgument } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { UID } from "../object/structs";
import { BcsType } from "@mysten/sui/bcs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isConfig(type: string): boolean;
export interface ConfigFields<WriteCap extends PhantomTypeArgument> {
    id: ToField<UID>;
}
export type ConfigReified<WriteCap extends PhantomTypeArgument> = Reified<Config<WriteCap>, ConfigFields<WriteCap>>;
export declare class Config<WriteCap extends PhantomTypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [true];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [PhantomToTypeStr<WriteCap>];
    readonly $isPhantom: readonly [true];
    readonly id: ToField<UID>;
    private constructor();
    static reified<WriteCap extends PhantomReified<PhantomTypeArgument>>(WriteCap: WriteCap): ConfigReified<ToPhantomTypeArgument<WriteCap>>;
    static get r(): typeof Config.reified;
    static phantom<WriteCap extends PhantomReified<PhantomTypeArgument>>(WriteCap: WriteCap): PhantomReified<ToTypeStr<Config<ToPhantomTypeArgument<WriteCap>>>>;
    static get p(): typeof Config.phantom;
    static get bcs(): BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
    }>;
    static fromFields<WriteCap extends PhantomReified<PhantomTypeArgument>>(typeArg: WriteCap, fields: Record<string, any>): Config<ToPhantomTypeArgument<WriteCap>>;
    static fromFieldsWithTypes<WriteCap extends PhantomReified<PhantomTypeArgument>>(typeArg: WriteCap, item: FieldsWithTypes): Config<ToPhantomTypeArgument<WriteCap>>;
    static fromBcs<WriteCap extends PhantomReified<PhantomTypeArgument>>(typeArg: WriteCap, data: Uint8Array): Config<ToPhantomTypeArgument<WriteCap>>;
    toJSONField(): {
        id: UID;
    };
    toJSON(): {
        id: UID;
        $typeName: string;
        $typeArgs: [PhantomToTypeStr<WriteCap>];
    };
    static fromJSONField<WriteCap extends PhantomReified<PhantomTypeArgument>>(typeArg: WriteCap, field: any): Config<ToPhantomTypeArgument<WriteCap>>;
    static fromJSON<WriteCap extends PhantomReified<PhantomTypeArgument>>(typeArg: WriteCap, json: Record<string, any>): Config<ToPhantomTypeArgument<WriteCap>>;
    static fromSuiParsedData<WriteCap extends PhantomReified<PhantomTypeArgument>>(typeArg: WriteCap, content: SuiParsedData): Config<ToPhantomTypeArgument<WriteCap>>;
    static fromSuiObjectData<WriteCap extends PhantomReified<PhantomTypeArgument>>(typeArg: WriteCap, data: SuiObjectData): Config<ToPhantomTypeArgument<WriteCap>>;
    static fetch<WriteCap extends PhantomReified<PhantomTypeArgument>>(client: SuiClient, typeArg: WriteCap, id: string): Promise<Config<ToPhantomTypeArgument<WriteCap>>>;
}
export declare function isSetting(type: string): boolean;
export interface SettingFields<Value extends TypeArgument> {
    data: ToField<Option<SettingData<Value>>>;
}
export type SettingReified<Value extends TypeArgument> = Reified<Setting<Value>, SettingFields<Value>>;
export declare class Setting<Value extends TypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [false];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [ToTypeStr<Value>];
    readonly $isPhantom: readonly [false];
    readonly data: ToField<Option<SettingData<Value>>>;
    private constructor();
    static reified<Value extends Reified<TypeArgument, any>>(Value: Value): SettingReified<ToTypeArgument<Value>>;
    static get r(): typeof Setting.reified;
    static phantom<Value extends Reified<TypeArgument, any>>(Value: Value): PhantomReified<ToTypeStr<Setting<ToTypeArgument<Value>>>>;
    static get p(): typeof Setting.phantom;
    static get bcs(): <Value extends BcsType<any>>(Value: Value) => BcsType<{
        data: {
            vec: any[];
        };
    }, {
        data: {
            vec: Iterable<any> & {
                length: number;
            };
        };
    }>;
    static fromFields<Value extends Reified<TypeArgument, any>>(typeArg: Value, fields: Record<string, any>): Setting<ToTypeArgument<Value>>;
    static fromFieldsWithTypes<Value extends Reified<TypeArgument, any>>(typeArg: Value, item: FieldsWithTypes): Setting<ToTypeArgument<Value>>;
    static fromBcs<Value extends Reified<TypeArgument, any>>(typeArg: Value, data: Uint8Array): Setting<ToTypeArgument<Value>>;
    toJSONField(): {
        data: {
            vec: {
                newerValueEpoch: string;
                newerValue: {
                    vec: import("../../_framework/reified").ToJSON<Value>[];
                };
                olderValueOpt: {
                    vec: import("../../_framework/reified").ToJSON<Value>[];
                };
            }[];
        };
    };
    toJSON(): {
        data: {
            vec: {
                newerValueEpoch: string;
                newerValue: {
                    vec: import("../../_framework/reified").ToJSON<Value>[];
                };
                olderValueOpt: {
                    vec: import("../../_framework/reified").ToJSON<Value>[];
                };
            }[];
        };
        $typeName: string;
        $typeArgs: [ToTypeStr<Value>];
    };
    static fromJSONField<Value extends Reified<TypeArgument, any>>(typeArg: Value, field: any): Setting<ToTypeArgument<Value>>;
    static fromJSON<Value extends Reified<TypeArgument, any>>(typeArg: Value, json: Record<string, any>): Setting<ToTypeArgument<Value>>;
    static fromSuiParsedData<Value extends Reified<TypeArgument, any>>(typeArg: Value, content: SuiParsedData): Setting<ToTypeArgument<Value>>;
    static fromSuiObjectData<Value extends Reified<TypeArgument, any>>(typeArg: Value, data: SuiObjectData): Setting<ToTypeArgument<Value>>;
    static fetch<Value extends Reified<TypeArgument, any>>(client: SuiClient, typeArg: Value, id: string): Promise<Setting<ToTypeArgument<Value>>>;
}
export declare function isSettingData(type: string): boolean;
export interface SettingDataFields<Value extends TypeArgument> {
    newerValueEpoch: ToField<"u64">;
    newerValue: ToField<Option<Value>>;
    olderValueOpt: ToField<Option<Value>>;
}
export type SettingDataReified<Value extends TypeArgument> = Reified<SettingData<Value>, SettingDataFields<Value>>;
export declare class SettingData<Value extends TypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [false];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [ToTypeStr<Value>];
    readonly $isPhantom: readonly [false];
    readonly newerValueEpoch: ToField<"u64">;
    readonly newerValue: ToField<Option<Value>>;
    readonly olderValueOpt: ToField<Option<Value>>;
    private constructor();
    static reified<Value extends Reified<TypeArgument, any>>(Value: Value): SettingDataReified<ToTypeArgument<Value>>;
    static get r(): typeof SettingData.reified;
    static phantom<Value extends Reified<TypeArgument, any>>(Value: Value): PhantomReified<ToTypeStr<SettingData<ToTypeArgument<Value>>>>;
    static get p(): typeof SettingData.phantom;
    static get bcs(): <Value extends BcsType<any>>(Value: Value) => BcsType<{
        newer_value_epoch: string;
        newer_value: {
            vec: any[];
        };
        older_value_opt: {
            vec: any[];
        };
    }, {
        newer_value_epoch: string | number | bigint;
        newer_value: {
            vec: Iterable<any> & {
                length: number;
            };
        };
        older_value_opt: {
            vec: Iterable<any> & {
                length: number;
            };
        };
    }>;
    static fromFields<Value extends Reified<TypeArgument, any>>(typeArg: Value, fields: Record<string, any>): SettingData<ToTypeArgument<Value>>;
    static fromFieldsWithTypes<Value extends Reified<TypeArgument, any>>(typeArg: Value, item: FieldsWithTypes): SettingData<ToTypeArgument<Value>>;
    static fromBcs<Value extends Reified<TypeArgument, any>>(typeArg: Value, data: Uint8Array): SettingData<ToTypeArgument<Value>>;
    toJSONField(): {
        newerValueEpoch: string;
        newerValue: {
            vec: import("../../_framework/reified").ToJSON<Value>[];
        };
        olderValueOpt: {
            vec: import("../../_framework/reified").ToJSON<Value>[];
        };
    };
    toJSON(): {
        newerValueEpoch: string;
        newerValue: {
            vec: import("../../_framework/reified").ToJSON<Value>[];
        };
        olderValueOpt: {
            vec: import("../../_framework/reified").ToJSON<Value>[];
        };
        $typeName: string;
        $typeArgs: [ToTypeStr<Value>];
    };
    static fromJSONField<Value extends Reified<TypeArgument, any>>(typeArg: Value, field: any): SettingData<ToTypeArgument<Value>>;
    static fromJSON<Value extends Reified<TypeArgument, any>>(typeArg: Value, json: Record<string, any>): SettingData<ToTypeArgument<Value>>;
    static fromSuiParsedData<Value extends Reified<TypeArgument, any>>(typeArg: Value, content: SuiParsedData): SettingData<ToTypeArgument<Value>>;
    static fromSuiObjectData<Value extends Reified<TypeArgument, any>>(typeArg: Value, data: SuiObjectData): SettingData<ToTypeArgument<Value>>;
    static fetch<Value extends Reified<TypeArgument, any>>(client: SuiClient, typeArg: Value, id: string): Promise<SettingData<ToTypeArgument<Value>>>;
}
