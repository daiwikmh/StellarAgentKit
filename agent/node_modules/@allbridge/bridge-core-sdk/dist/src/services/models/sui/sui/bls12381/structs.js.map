{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/bls12381/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== G1 =============================== */\n\nexport function isG1(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::bls12381::G1`;\n}\n\nexport interface G1Fields {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type G1Reified = Reified<G1, G1Fields>;\n\nexport class G1 implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::bls12381::G1`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = G1.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = G1.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [], fields: G1Fields) {\n    this.$fullTypeName = composeSuiType(G1.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified(): G1Reified {\n    return {\n      typeName: G1.$typeName,\n      fullTypeName: composeSuiType(G1.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: G1.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => G1.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => G1.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => G1.fromBcs(data),\n      bcs: G1.bcs,\n      fromJSONField: (field: any) => G1.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => G1.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => G1.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => G1.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => G1.fetch(client, id),\n      new: (fields: G1Fields) => {\n        return new G1([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return G1.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<G1>> {\n    return phantom(G1.reified());\n  }\n  static get p() {\n    return G1.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"G1\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): G1 {\n    return G1.reified().new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): G1 {\n    if (!isG1(item.type)) {\n      throw new Error(\"not a G1 type\");\n    }\n\n    return G1.reified().new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): G1 {\n    return G1.fromFields(G1.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): G1 {\n    return G1.reified().new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): G1 {\n    if (json.$typeName !== G1.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return G1.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): G1 {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isG1(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a G1 object`);\n    }\n    return G1.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): G1 {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isG1(data.bcs.type)) {\n        throw new Error(`object at is not a G1 object`);\n      }\n\n      return G1.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return G1.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<G1> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching G1 object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isG1(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a G1 object`);\n    }\n\n    return G1.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== G2 =============================== */\n\nexport function isG2(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::bls12381::G2`;\n}\n\nexport interface G2Fields {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type G2Reified = Reified<G2, G2Fields>;\n\nexport class G2 implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::bls12381::G2`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = G2.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = G2.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [], fields: G2Fields) {\n    this.$fullTypeName = composeSuiType(G2.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified(): G2Reified {\n    return {\n      typeName: G2.$typeName,\n      fullTypeName: composeSuiType(G2.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: G2.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => G2.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => G2.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => G2.fromBcs(data),\n      bcs: G2.bcs,\n      fromJSONField: (field: any) => G2.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => G2.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => G2.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => G2.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => G2.fetch(client, id),\n      new: (fields: G2Fields) => {\n        return new G2([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return G2.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<G2>> {\n    return phantom(G2.reified());\n  }\n  static get p() {\n    return G2.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"G2\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): G2 {\n    return G2.reified().new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): G2 {\n    if (!isG2(item.type)) {\n      throw new Error(\"not a G2 type\");\n    }\n\n    return G2.reified().new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): G2 {\n    return G2.fromFields(G2.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): G2 {\n    return G2.reified().new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): G2 {\n    if (json.$typeName !== G2.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return G2.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): G2 {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isG2(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a G2 object`);\n    }\n    return G2.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): G2 {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isG2(data.bcs.type)) {\n        throw new Error(`object at is not a G2 object`);\n      }\n\n      return G2.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return G2.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<G2> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching G2 object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isG2(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a G2 object`);\n    }\n\n    return G2.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== GT =============================== */\n\nexport function isGT(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::bls12381::GT`;\n}\n\nexport interface GTFields {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type GTReified = Reified<GT, GTFields>;\n\nexport class GT implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::bls12381::GT`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = GT.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = GT.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [], fields: GTFields) {\n    this.$fullTypeName = composeSuiType(GT.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified(): GTReified {\n    return {\n      typeName: GT.$typeName,\n      fullTypeName: composeSuiType(GT.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: GT.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => GT.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => GT.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => GT.fromBcs(data),\n      bcs: GT.bcs,\n      fromJSONField: (field: any) => GT.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => GT.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => GT.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => GT.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => GT.fetch(client, id),\n      new: (fields: GTFields) => {\n        return new GT([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return GT.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<GT>> {\n    return phantom(GT.reified());\n  }\n  static get p() {\n    return GT.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"GT\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): GT {\n    return GT.reified().new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): GT {\n    if (!isGT(item.type)) {\n      throw new Error(\"not a GT type\");\n    }\n\n    return GT.reified().new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): GT {\n    return GT.fromFields(GT.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): GT {\n    return GT.reified().new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): GT {\n    if (json.$typeName !== GT.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return GT.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): GT {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isGT(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a GT object`);\n    }\n    return GT.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): GT {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isGT(data.bcs.type)) {\n        throw new Error(`object at is not a GT object`);\n      }\n\n      return GT.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return GT.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<GT> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching GT object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isGT(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a GT object`);\n    }\n\n    return GT.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== Scalar =============================== */\n\nexport function isScalar(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::bls12381::Scalar`;\n}\n\nexport interface ScalarFields {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type ScalarReified = Reified<Scalar, ScalarFields>;\n\nexport class Scalar implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::bls12381::Scalar`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Scalar.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Scalar.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [], fields: ScalarFields) {\n    this.$fullTypeName = composeSuiType(Scalar.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified(): ScalarReified {\n    return {\n      typeName: Scalar.$typeName,\n      fullTypeName: composeSuiType(Scalar.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Scalar.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Scalar.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Scalar.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Scalar.fromBcs(data),\n      bcs: Scalar.bcs,\n      fromJSONField: (field: any) => Scalar.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Scalar.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Scalar.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Scalar.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Scalar.fetch(client, id),\n      new: (fields: ScalarFields) => {\n        return new Scalar([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Scalar.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Scalar>> {\n    return phantom(Scalar.reified());\n  }\n  static get p() {\n    return Scalar.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Scalar\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Scalar {\n    return Scalar.reified().new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Scalar {\n    if (!isScalar(item.type)) {\n      throw new Error(\"not a Scalar type\");\n    }\n\n    return Scalar.reified().new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Scalar {\n    return Scalar.fromFields(Scalar.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Scalar {\n    return Scalar.reified().new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): Scalar {\n    if (json.$typeName !== Scalar.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Scalar.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Scalar {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isScalar(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Scalar object`);\n    }\n    return Scalar.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Scalar {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isScalar(data.bcs.type)) {\n        throw new Error(`object at is not a Scalar object`);\n      }\n\n      return Scalar.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Scalar.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Scalar> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Scalar object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isScalar(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Scalar object`);\n    }\n\n    return Scalar.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== UncompressedG1 =============================== */\n\nexport function isUncompressedG1(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::bls12381::UncompressedG1`;\n}\n\nexport interface UncompressedG1Fields {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type UncompressedG1Reified = Reified<UncompressedG1, UncompressedG1Fields>;\n\nexport class UncompressedG1 implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::bls12381::UncompressedG1`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = UncompressedG1.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = UncompressedG1.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [], fields: UncompressedG1Fields) {\n    this.$fullTypeName = composeSuiType(UncompressedG1.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified(): UncompressedG1Reified {\n    return {\n      typeName: UncompressedG1.$typeName,\n      fullTypeName: composeSuiType(UncompressedG1.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: UncompressedG1.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => UncompressedG1.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => UncompressedG1.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => UncompressedG1.fromBcs(data),\n      bcs: UncompressedG1.bcs,\n      fromJSONField: (field: any) => UncompressedG1.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => UncompressedG1.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => UncompressedG1.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => UncompressedG1.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => UncompressedG1.fetch(client, id),\n      new: (fields: UncompressedG1Fields) => {\n        return new UncompressedG1([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return UncompressedG1.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<UncompressedG1>> {\n    return phantom(UncompressedG1.reified());\n  }\n  static get p() {\n    return UncompressedG1.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"UncompressedG1\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): UncompressedG1 {\n    return UncompressedG1.reified().new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): UncompressedG1 {\n    if (!isUncompressedG1(item.type)) {\n      throw new Error(\"not a UncompressedG1 type\");\n    }\n\n    return UncompressedG1.reified().new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): UncompressedG1 {\n    return UncompressedG1.fromFields(UncompressedG1.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): UncompressedG1 {\n    return UncompressedG1.reified().new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): UncompressedG1 {\n    if (json.$typeName !== UncompressedG1.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return UncompressedG1.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): UncompressedG1 {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isUncompressedG1(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a UncompressedG1 object`);\n    }\n    return UncompressedG1.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): UncompressedG1 {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isUncompressedG1(data.bcs.type)) {\n        throw new Error(`object at is not a UncompressedG1 object`);\n      }\n\n      return UncompressedG1.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return UncompressedG1.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<UncompressedG1> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching UncompressedG1 object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isUncompressedG1(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a UncompressedG1 object`);\n    }\n\n    return UncompressedG1.fromSuiObjectData(res.data);\n  }\n}\n"]}