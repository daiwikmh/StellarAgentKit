"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WormholeMessage = exports.MessageTicket = void 0;
exports.isMessageTicket = isMessageTicket;
exports.isWormholeMessage = isWormholeMessage;
// @ts-nocheck
const reified = __importStar(require("../../../../_framework/reified"));
const reified_1 = require("../../../../_framework/reified");
const util_1 = require("../../../../_framework/util");
const structs_1 = require("../../../../sui/object/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== MessageTicket =============================== */
function isMessageTicket(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::publish_message::MessageTicket`;
}
class MessageTicket {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::publish_message::MessageTicket`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = MessageTicket.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = MessageTicket.$isPhantom;
    sender;
    sequence;
    nonce;
    payload;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(MessageTicket.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.sender = fields.sender;
        this.sequence = fields.sequence;
        this.nonce = fields.nonce;
        this.payload = fields.payload;
    }
    static reified() {
        return {
            typeName: MessageTicket.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(MessageTicket.$typeName, ...[]),
            typeArgs: [],
            isPhantom: MessageTicket.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => MessageTicket.fromFields(fields),
            fromFieldsWithTypes: (item) => MessageTicket.fromFieldsWithTypes(item),
            fromBcs: (data) => MessageTicket.fromBcs(data),
            bcs: MessageTicket.bcs,
            fromJSONField: (field) => MessageTicket.fromJSONField(field),
            fromJSON: (json) => MessageTicket.fromJSON(json),
            fromSuiParsedData: (content) => MessageTicket.fromSuiParsedData(content),
            fromSuiObjectData: (content) => MessageTicket.fromSuiObjectData(content),
            fetch: async (client, id) => MessageTicket.fetch(client, id),
            new: (fields) => {
                return new MessageTicket([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return MessageTicket.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(MessageTicket.reified());
    }
    static get p() {
        return MessageTicket.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("MessageTicket", {
            sender: structs_1.ID.bcs,
            sequence: bcs_1.bcs.u64(),
            nonce: bcs_1.bcs.u32(),
            payload: bcs_1.bcs.vector(bcs_1.bcs.u8()),
        });
    }
    static fromFields(fields) {
        return MessageTicket.reified().new({
            sender: (0, reified_1.decodeFromFields)(structs_1.ID.reified(), fields.sender),
            sequence: (0, reified_1.decodeFromFields)("u64", fields.sequence),
            nonce: (0, reified_1.decodeFromFields)("u32", fields.nonce),
            payload: (0, reified_1.decodeFromFields)(reified.vector("u8"), fields.payload),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isMessageTicket(item.type)) {
            throw new Error("not a MessageTicket type");
        }
        return MessageTicket.reified().new({
            sender: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.ID.reified(), item.fields.sender),
            sequence: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.sequence),
            nonce: (0, reified_1.decodeFromFieldsWithTypes)("u32", item.fields.nonce),
            payload: (0, reified_1.decodeFromFieldsWithTypes)(reified.vector("u8"), item.fields.payload),
        });
    }
    static fromBcs(data) {
        return MessageTicket.fromFields(MessageTicket.bcs.parse(data));
    }
    toJSONField() {
        return {
            sender: this.sender,
            sequence: this.sequence.toString(),
            nonce: this.nonce,
            payload: (0, reified_1.fieldToJSON)(`vector<u8>`, this.payload),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return MessageTicket.reified().new({
            sender: (0, reified_1.decodeFromJSONField)(structs_1.ID.reified(), field.sender),
            sequence: (0, reified_1.decodeFromJSONField)("u64", field.sequence),
            nonce: (0, reified_1.decodeFromJSONField)("u32", field.nonce),
            payload: (0, reified_1.decodeFromJSONField)(reified.vector("u8"), field.payload),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== MessageTicket.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return MessageTicket.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isMessageTicket(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a MessageTicket object`);
        }
        return MessageTicket.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isMessageTicket(data.bcs.type)) {
                throw new Error(`object at is not a MessageTicket object`);
            }
            return MessageTicket.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return MessageTicket.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching MessageTicket object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isMessageTicket(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a MessageTicket object`);
        }
        return MessageTicket.fromSuiObjectData(res.data);
    }
}
exports.MessageTicket = MessageTicket;
/* ============================== WormholeMessage =============================== */
function isWormholeMessage(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::publish_message::WormholeMessage`;
}
class WormholeMessage {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::publish_message::WormholeMessage`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = WormholeMessage.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = WormholeMessage.$isPhantom;
    sender;
    sequence;
    nonce;
    payload;
    consistencyLevel;
    timestamp;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(WormholeMessage.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.sender = fields.sender;
        this.sequence = fields.sequence;
        this.nonce = fields.nonce;
        this.payload = fields.payload;
        this.consistencyLevel = fields.consistencyLevel;
        this.timestamp = fields.timestamp;
    }
    static reified() {
        return {
            typeName: WormholeMessage.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(WormholeMessage.$typeName, ...[]),
            typeArgs: [],
            isPhantom: WormholeMessage.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => WormholeMessage.fromFields(fields),
            fromFieldsWithTypes: (item) => WormholeMessage.fromFieldsWithTypes(item),
            fromBcs: (data) => WormholeMessage.fromBcs(data),
            bcs: WormholeMessage.bcs,
            fromJSONField: (field) => WormholeMessage.fromJSONField(field),
            fromJSON: (json) => WormholeMessage.fromJSON(json),
            fromSuiParsedData: (content) => WormholeMessage.fromSuiParsedData(content),
            fromSuiObjectData: (content) => WormholeMessage.fromSuiObjectData(content),
            fetch: async (client, id) => WormholeMessage.fetch(client, id),
            new: (fields) => {
                return new WormholeMessage([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return WormholeMessage.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(WormholeMessage.reified());
    }
    static get p() {
        return WormholeMessage.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("WormholeMessage", {
            sender: structs_1.ID.bcs,
            sequence: bcs_1.bcs.u64(),
            nonce: bcs_1.bcs.u32(),
            payload: bcs_1.bcs.vector(bcs_1.bcs.u8()),
            consistency_level: bcs_1.bcs.u8(),
            timestamp: bcs_1.bcs.u64(),
        });
    }
    static fromFields(fields) {
        return WormholeMessage.reified().new({
            sender: (0, reified_1.decodeFromFields)(structs_1.ID.reified(), fields.sender),
            sequence: (0, reified_1.decodeFromFields)("u64", fields.sequence),
            nonce: (0, reified_1.decodeFromFields)("u32", fields.nonce),
            payload: (0, reified_1.decodeFromFields)(reified.vector("u8"), fields.payload),
            consistencyLevel: (0, reified_1.decodeFromFields)("u8", fields.consistency_level),
            timestamp: (0, reified_1.decodeFromFields)("u64", fields.timestamp),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isWormholeMessage(item.type)) {
            throw new Error("not a WormholeMessage type");
        }
        return WormholeMessage.reified().new({
            sender: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.ID.reified(), item.fields.sender),
            sequence: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.sequence),
            nonce: (0, reified_1.decodeFromFieldsWithTypes)("u32", item.fields.nonce),
            payload: (0, reified_1.decodeFromFieldsWithTypes)(reified.vector("u8"), item.fields.payload),
            consistencyLevel: (0, reified_1.decodeFromFieldsWithTypes)("u8", item.fields.consistency_level),
            timestamp: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.timestamp),
        });
    }
    static fromBcs(data) {
        return WormholeMessage.fromFields(WormholeMessage.bcs.parse(data));
    }
    toJSONField() {
        return {
            sender: this.sender,
            sequence: this.sequence.toString(),
            nonce: this.nonce,
            payload: (0, reified_1.fieldToJSON)(`vector<u8>`, this.payload),
            consistencyLevel: this.consistencyLevel,
            timestamp: this.timestamp.toString(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return WormholeMessage.reified().new({
            sender: (0, reified_1.decodeFromJSONField)(structs_1.ID.reified(), field.sender),
            sequence: (0, reified_1.decodeFromJSONField)("u64", field.sequence),
            nonce: (0, reified_1.decodeFromJSONField)("u32", field.nonce),
            payload: (0, reified_1.decodeFromJSONField)(reified.vector("u8"), field.payload),
            consistencyLevel: (0, reified_1.decodeFromJSONField)("u8", field.consistencyLevel),
            timestamp: (0, reified_1.decodeFromJSONField)("u64", field.timestamp),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== WormholeMessage.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return WormholeMessage.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isWormholeMessage(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a WormholeMessage object`);
        }
        return WormholeMessage.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isWormholeMessage(data.bcs.type)) {
                throw new Error(`object at is not a WormholeMessage object`);
            }
            return WormholeMessage.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return WormholeMessage.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching WormholeMessage object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isWormholeMessage(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a WormholeMessage object`);
        }
        return WormholeMessage.fromSuiObjectData(res.data);
    }
}
exports.WormholeMessage = WormholeMessage;
//# sourceMappingURL=structs.js.map