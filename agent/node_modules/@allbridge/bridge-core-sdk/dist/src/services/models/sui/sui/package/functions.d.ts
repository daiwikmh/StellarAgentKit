import { GenericArg } from "../../_framework/util";
import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export declare function version(tx: Transaction, cap: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function additivePolicy(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AuthorizeUpgradeArgs {
    cap: TransactionObjectInput;
    policy: number | TransactionArgument;
    digest: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function authorizeUpgrade(tx: Transaction, args: AuthorizeUpgradeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function burnPublisher(tx: Transaction, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function claim(tx: Transaction, typeArg: string, otw: GenericArg): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function claimAndKeep(tx: Transaction, typeArg: string, otw: GenericArg): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface CommitUpgradeArgs {
    cap: TransactionObjectInput;
    receipt: TransactionObjectInput;
}
export declare function commitUpgrade(tx: Transaction, args: CommitUpgradeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function compatiblePolicy(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function depOnlyPolicy(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function fromModule(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function fromPackage(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function makeImmutable(tx: Transaction, cap: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function onlyAdditiveUpgrades(tx: Transaction, cap: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function onlyDepUpgrades(tx: Transaction, cap: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function publishedModule(tx: Transaction, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function publishedPackage(tx: Transaction, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function receiptCap(tx: Transaction, receipt: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function receiptPackage(tx: Transaction, receipt: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RestrictArgs {
    cap: TransactionObjectInput;
    policy: number | TransactionArgument;
}
export declare function restrict(tx: Transaction, args: RestrictArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function ticketDigest(tx: Transaction, ticket: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function ticketPackage(tx: Transaction, ticket: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function ticketPolicy(tx: Transaction, ticket: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function upgradePackage(tx: Transaction, cap: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function upgradePolicy(tx: Transaction, cap: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
