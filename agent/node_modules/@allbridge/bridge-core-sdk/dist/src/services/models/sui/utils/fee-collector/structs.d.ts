import { PhantomReified, PhantomToTypeStr, PhantomTypeArgument, Reified, StructClass, ToField, ToPhantomTypeArgument, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { Bag } from "../../sui/bag/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isFeeCollector(type: string): boolean;
export interface FeeCollectorFields<Cap extends PhantomTypeArgument> {
    balances: ToField<Bag>;
}
export type FeeCollectorReified<Cap extends PhantomTypeArgument> = Reified<FeeCollector<Cap>, FeeCollectorFields<Cap>>;
export declare class FeeCollector<Cap extends PhantomTypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [true];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [PhantomToTypeStr<Cap>];
    readonly $isPhantom: readonly [true];
    readonly balances: ToField<Bag>;
    private constructor();
    static reified<Cap extends PhantomReified<PhantomTypeArgument>>(Cap: Cap): FeeCollectorReified<ToPhantomTypeArgument<Cap>>;
    static get r(): typeof FeeCollector.reified;
    static phantom<Cap extends PhantomReified<PhantomTypeArgument>>(Cap: Cap): PhantomReified<ToTypeStr<FeeCollector<ToPhantomTypeArgument<Cap>>>>;
    static get p(): typeof FeeCollector.phantom;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        balances: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
    }, {
        balances: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
    }>;
    static fromFields<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, fields: Record<string, any>): FeeCollector<ToPhantomTypeArgument<Cap>>;
    static fromFieldsWithTypes<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, item: FieldsWithTypes): FeeCollector<ToPhantomTypeArgument<Cap>>;
    static fromBcs<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, data: Uint8Array): FeeCollector<ToPhantomTypeArgument<Cap>>;
    toJSONField(): {
        balances: {
            id: import("../../sui/object/structs").UID;
            size: string;
        };
    };
    toJSON(): {
        balances: {
            id: import("../../sui/object/structs").UID;
            size: string;
        };
        $typeName: string;
        $typeArgs: [PhantomToTypeStr<Cap>];
    };
    static fromJSONField<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, field: any): FeeCollector<ToPhantomTypeArgument<Cap>>;
    static fromJSON<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, json: Record<string, any>): FeeCollector<ToPhantomTypeArgument<Cap>>;
    static fromSuiParsedData<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, content: SuiParsedData): FeeCollector<ToPhantomTypeArgument<Cap>>;
    static fromSuiObjectData<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, data: SuiObjectData): FeeCollector<ToPhantomTypeArgument<Cap>>;
    static fetch<Cap extends PhantomReified<PhantomTypeArgument>>(client: SuiClient, typeArg: Cap, id: string): Promise<FeeCollector<ToPhantomTypeArgument<Cap>>>;
}
