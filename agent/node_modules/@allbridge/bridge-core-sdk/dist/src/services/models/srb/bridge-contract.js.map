{"version":3,"file":"bridge-contract.js","sourceRoot":"","sources":["../../../../../src/services/models/srb/bridge-contract.ts"],"names":[],"mappings":";;;AAAA,sDAAgD;AAOhD,IAAO,YAAY,GAAG,sBAAQ,CAAC,IAAI,CAAC;AACpC,IAAO,cAAc,GAAG,sBAAQ,CAAC,MAAM,CAAC;AAoE3B,QAAA,MAAM,GAAG;IACpB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,CAAC,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IAClB,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACnB,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACnB,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACnB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACpB,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;CACrB,CAAC;AA4sBF,4EAA4E;AAC5E,MAAa,cAAe,SAAQ,cAAc;IACpB;IAA5B,YAA4B,OAA8B;QACxD,KAAK,CACH,IAAI,YAAY,CAAC;YACf,8LAA8L;YAC9L,kXAAkX;YAClX,0VAA0V;YAC1V,kQAAkQ;YAClQ,kEAAkE;YAClE,kEAAkE;YAClE,0GAA0G;YAC1G,kHAAkH;YAClH,0GAA0G;YAC1G,0GAA0G;YAC1G,kIAAkI;YAClI,8IAA8I;YAC9I,8IAA8I;YAC9I,kJAAkJ;YAClJ,8GAA8G;YAC9G,kIAAkI;YAClI,8JAA8J;YAC9J,8GAA8G;YAC9G,0GAA0G;YAC1G,8GAA8G;YAC9G,8EAA8E;YAC9E,0EAA0E;YAC1E,kGAAkG;YAClG,8FAA8F;YAC9F,8DAA8D;YAC9D,kEAAkE;YAClE,8HAA8H;YAC9H,kGAAkG;YAClG,0GAA0G;YAC1G,0PAA0P;YAC1P,8NAA8N;YAC9N,8KAA8K;YAC9K,8KAA8K;YAC9K,0HAA0H;YAC1H,8HAA8H;YAC9H,8jBAA8jB;YAC9jB,0LAA0L;YAC1L,8DAA8D;YAC9D,0EAA0E;YAC1E,0EAA0E;YAC1E,kEAAkE;YAClE,0EAA0E;YAC1E,kjDAAkjD;SACnjD,CAAC,EACF,OAAO,CACR,CAAC;QAhDwB,YAAO,GAAP,OAAO,CAAuB;IAiD1D,CAAC;IAEe,QAAQ,GAAG;QACzB,UAAU,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACzC,eAAe,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC9C,cAAc,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC7C,IAAI,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACnC,SAAS,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACxC,UAAU,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACzC,cAAc,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC7C,kBAAkB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACjD,cAAc,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC7C,aAAa,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC5C,aAAa,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC5C,eAAe,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC9C,gBAAgB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC/C,mBAAmB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAClD,QAAQ,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACvC,mBAAmB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAClD,+BAA+B,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC9D,qBAAqB,EAAE,CAAA,IAAI,CAAC,UAA2B,CAAA;QACvD,oBAAoB,EAAE,CAAA,IAAI,CAAC,UAA2B,CAAA;QACtD,gBAAgB,EAAE,CAAA,IAAI,CAAC,UAA0B,CAAA;QACjD,UAAU,EAAE,CAAA,IAAI,CAAC,UAA0B,CAAA;QAC3C,kBAAkB,EAAE,CAAA,IAAI,CAAC,UAA0B,CAAA;QACnD,oBAAoB,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACnD,aAAa,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QAC5C,SAAS,EAAE,CAAA,IAAI,CAAC,UAA0B,CAAA;QAC1C,cAAc,EAAE,CAAA,IAAI,CAAC,UAA0B,CAAA;QAC/C,kBAAkB,EAAE,CAAA,IAAI,CAAC,UAAiC,CAAA;QAC1D,SAAS,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;QACxC,OAAO,EAAE,CAAA,IAAI,CAAC,UAAwB,CAAA;KACvC,CAAC;CACH;AAnFD,wCAmFC","sourcesContent":["import { contract } from \"@stellar/stellar-sdk\";\nimport u128 = contract.u128;\nimport u32 = contract.u32;\nimport u256 = contract.u256;\nimport AssembledTransaction = contract.AssembledTransaction;\nimport Result = contract.Result;\nimport Option = contract.Option;\nimport ContractSpec = contract.Spec;\nimport ContractClient = contract.Client;\nimport ContractClientOptions = contract.ClientOptions;\n\nexport interface Swapped {\n  receive_amount: u128;\n  receive_token: Buffer;\n  recipient: string;\n  send_amount: u128;\n  send_token: Buffer;\n  sender: string;\n}\n\nexport interface TokensSent {\n  amount: u128;\n  destination_chain_id: u32;\n  nonce: u256;\n  receive_token: Buffer;\n  recipient: Buffer;\n}\n\nexport interface TokensReceived {\n  amount: u128;\n  message: Buffer;\n  nonce: u256;\n  recipient: Buffer;\n}\n\nexport interface ReceiveFee {\n  bridge_transaction_cost: u128;\n  extra_gas: u128;\n  message_transaction_cost: u128;\n}\n\nexport interface BridgingFeeFromTokens {\n  fee_token_amount: u128;\n  gas: u128;\n}\n\nexport interface AnotherBridge {\n  address: Buffer;\n  tokens: Map<Buffer, boolean>;\n}\n\nexport interface Bridge {\n  /**\n   * precomputed values of the scaling factor required for paying the bridging fee with stable tokens\n   */\n  bridging_fee_conversion_factor: Map<string, u128>;\n  can_swap: boolean;\n  /**\n   * precomputed values to divide by to change the precision from the Gas Oracle precision to the token precision\n   */\n  from_gas_oracle_factor: Map<string, u128>;\n  messenger: string;\n  pools: Map<Buffer, string>;\n  rebalancer: string;\n}\n\nexport type DataKey =\n  | { tag: \"OtherBridge\"; values: readonly [u32] }\n  | { tag: \"SentMessage\"; values: readonly [Buffer] }\n  | { tag: \"ReceivedMessage\"; values: readonly [Buffer] };\n\nexport type Admin = readonly [string];\nexport type GasOracleAddress = readonly [string];\nexport type GasUsage = readonly [Map<u32, u128>];\nexport type NativeToken = readonly [string];\nexport type StopAuthority = readonly [string];\nexport const Errors = {\n  0: { message: \"\" },\n  1: { message: \"\" },\n  2: { message: \"\" },\n  3: { message: \"\" },\n  4: { message: \"\" },\n  5: { message: \"\" },\n  6: { message: \"\" },\n  7: { message: \"\" },\n  8: { message: \"\" },\n  9: { message: \"\" },\n  10: { message: \"\" },\n  11: { message: \"\" },\n  12: { message: \"\" },\n  103: { message: \"\" },\n  104: { message: \"\" },\n  105: { message: \"\" },\n  106: { message: \"\" },\n  107: { message: \"\" },\n  108: { message: \"\" },\n  109: { message: \"\" },\n  203: { message: \"\" },\n  204: { message: \"\" },\n  205: { message: \"\" },\n  206: { message: \"\" },\n  207: { message: \"\" },\n  208: { message: \"\" },\n  209: { message: \"\" },\n  210: { message: \"\" },\n  211: { message: \"\" },\n  212: { message: \"\" },\n  214: { message: \"\" },\n  215: { message: \"\" },\n  216: { message: \"\" },\n  217: { message: \"\" },\n  218: { message: \"\" },\n  300: { message: \"\" },\n  301: { message: \"\" },\n  302: { message: \"\" },\n  303: { message: \"\" },\n  400: { message: \"\" },\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport interface BridgeContract {\n  /**\n   * Construct and simulate a initialize transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  initialize: (\n    {\n      admin,\n      messenger,\n      gas_oracle,\n      native_token,\n    }: {\n      admin: string;\n      messenger: string;\n      gas_oracle: string;\n      native_token: string;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a swap_and_bridge transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  swap_and_bridge: (\n    {\n      sender,\n      token,\n      amount,\n      recipient,\n      destination_chain_id,\n      receive_token,\n      nonce,\n      gas_amount,\n      fee_token_amount,\n    }: {\n      sender: string;\n      token: string;\n      amount: u128;\n      recipient: Buffer;\n      destination_chain_id: u32;\n      receive_token: Buffer;\n      nonce: u256;\n      gas_amount: u128;\n      fee_token_amount: u128;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a receive_tokens transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  receive_tokens: (\n    {\n      sender,\n      amount,\n      recipient,\n      source_chain_id,\n      receive_token,\n      nonce,\n      receive_amount_min,\n      extra_gas,\n    }: {\n      sender: string;\n      amount: u128;\n      recipient: string;\n      source_chain_id: u32;\n      receive_token: Buffer;\n      nonce: u256;\n      receive_amount_min: u128;\n      extra_gas: Option<u128>;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a swap transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  swap: (\n    {\n      sender,\n      amount,\n      token,\n      receive_token,\n      recipient,\n      receive_amount_min,\n    }: {\n      sender: string;\n      amount: u128;\n      token: Buffer;\n      receive_token: Buffer;\n      recipient: string;\n      receive_amount_min: u128;\n    },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a stop_swap transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  stop_swap: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a start_swap transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  start_swap: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_gas_oracle transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_gas_oracle: (\n    { new_address }: { new_address: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_stop_authority transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_stop_authority: (\n    { stop_authority }: { stop_authority: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_rebalancer transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_rebalancer: (\n    { rebalancer }: { rebalancer: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_messenger transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_messenger: (\n    { messenger }: { messenger: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a set_gas_usage transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_gas_usage: (\n    { chain_id, gas_usage }: { chain_id: u32; gas_usage: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a register_bridge transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  register_bridge: (\n    { chain_id, bridge_address }: { chain_id: u32; bridge_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a add_bridge_token transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  add_bridge_token: (\n    { chain_id, token_address }: { chain_id: u32; token_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a remove_bridge_token transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  remove_bridge_token: (\n    { chain_id, token_address }: { chain_id: u32; token_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a add_pool transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  add_pool: (\n    { pool, token }: { pool: string; token: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a withdraw_gas_tokens transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  withdraw_gas_tokens: (\n    { sender, amount }: { sender: string; amount: u128 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a withdraw_bridging_fee_in_tokens transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  withdraw_bridging_fee_in_tokens: (\n    { sender, token_address }: { sender: string; token_address: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a has_processed_message transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  has_processed_message: (\n    { message }: { message: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<boolean>>>;\n\n  /**\n   * Construct and simulate a has_received_message transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  has_received_message: (\n    { message }: { message: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<boolean>>>;\n\n  /**\n   * Construct and simulate a get_pool_address transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_pool_address: (\n    { token_address }: { token_address: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_config transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_config: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<Bridge>>>;\n\n  /**\n   * Construct and simulate a get_stop_authority transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_stop_authority: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_transaction_cost transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_transaction_cost: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_gas_usage transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_gas_usage: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<u128>>>;\n\n  /**\n   * Construct and simulate a get_admin transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_admin: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_gas_oracle transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_gas_oracle: (options?: {\n    /**\n     * The fee to pay for the transaction. Default: BASE_FEE\n     */\n    fee?: number;\n\n    /**\n     * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n     */\n    timeoutInSeconds?: number;\n\n    /**\n     * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n     */\n    simulate?: boolean;\n  }) => Promise<AssembledTransaction<Result<string>>>;\n\n  /**\n   * Construct and simulate a get_another_bridge transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  get_another_bridge: (\n    { chain_id }: { chain_id: u32 },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<AnotherBridge>>>;\n\n  /**\n   * Construct and simulate a set_admin transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  set_admin: (\n    { new_admin }: { new_admin: string },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n\n  /**\n   * Construct and simulate a upgrade transaction. Returns an `AssembledTransaction` object which will have a `Result` field containing the Result of the simulation. If this transaction changes contract state, you will need to call `signAndSend()` on the returned object.\n   */\n  upgrade: (\n    { new_wasm_hash }: { new_wasm_hash: Buffer },\n    options?: {\n      /**\n       * The fee to pay for the transaction. Default: BASE_FEE\n       */\n      fee?: number;\n\n      /**\n       * The maximum amount of time to wait for the transaction to complete. Default: DEFAULT_TIMEOUT\n       */\n      timeoutInSeconds?: number;\n\n      /**\n       * Whether to automatically simulate the transaction when constructing the AssembledTransaction. Default: true\n       */\n      simulate?: boolean;\n    }\n  ) => Promise<AssembledTransaction<Result<void>>>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nexport class BridgeContract extends ContractClient {\n  constructor(public readonly options: ContractClientOptions) {\n    super(\n      new ContractSpec([\n        \"AAAAAAAAAAAAAAAKaW5pdGlhbGl6ZQAAAAAABAAAAAAAAAAFYWRtaW4AAAAAAAATAAAAAAAAAAltZXNzZW5nZXIAAAAAAAATAAAAAAAAAApnYXNfb3JhY2xlAAAAAAATAAAAAAAAAAxuYXRpdmVfdG9rZW4AAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAPc3dhcF9hbmRfYnJpZGdlAAAAAAkAAAAAAAAABnNlbmRlcgAAAAAAEwAAAAAAAAAFdG9rZW4AAAAAAAATAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAACXJlY2lwaWVudAAAAAAAA+4AAAAgAAAAAAAAABRkZXN0aW5hdGlvbl9jaGFpbl9pZAAAAAQAAAAAAAAADXJlY2VpdmVfdG9rZW4AAAAAAAPuAAAAIAAAAAAAAAAFbm9uY2UAAAAAAAAMAAAAAAAAAApnYXNfYW1vdW50AAAAAAAKAAAAAAAAABBmZWVfdG9rZW5fYW1vdW50AAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAOcmVjZWl2ZV90b2tlbnMAAAAAAAgAAAAAAAAABnNlbmRlcgAAAAAAEwAAAAAAAAAGYW1vdW50AAAAAAAKAAAAAAAAAAlyZWNpcGllbnQAAAAAAAATAAAAAAAAAA9zb3VyY2VfY2hhaW5faWQAAAAABAAAAAAAAAANcmVjZWl2ZV90b2tlbgAAAAAAA+4AAAAgAAAAAAAAAAVub25jZQAAAAAAAAwAAAAAAAAAEnJlY2VpdmVfYW1vdW50X21pbgAAAAAACgAAAAAAAAAJZXh0cmFfZ2FzAAAAAAAD6AAAAAoAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAAEc3dhcAAAAAYAAAAAAAAABnNlbmRlcgAAAAAAEwAAAAAAAAAGYW1vdW50AAAAAAAKAAAAAAAAAAV0b2tlbgAAAAAAA+4AAAAgAAAAAAAAAA1yZWNlaXZlX3Rva2VuAAAAAAAD7gAAACAAAAAAAAAACXJlY2lwaWVudAAAAAAAABMAAAAAAAAAEnJlY2VpdmVfYW1vdW50X21pbgAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAJc3RvcF9zd2FwAAAAAAAAAAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAKc3RhcnRfc3dhcAAAAAAAAAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAOc2V0X2dhc19vcmFjbGUAAAAAAAEAAAAAAAAAC25ld19hZGRyZXNzAAAAABMAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAASc2V0X3N0b3BfYXV0aG9yaXR5AAAAAAABAAAAAAAAAA5zdG9wX2F1dGhvcml0eQAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAOc2V0X3JlYmFsYW5jZXIAAAAAAAEAAAAAAAAACnJlYmFsYW5jZXIAAAAAABMAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAANc2V0X21lc3NlbmdlcgAAAAAAAAEAAAAAAAAACW1lc3NlbmdlcgAAAAAAABMAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAAAAAAAAAAANc2V0X2dhc191c2FnZQAAAAAAAAIAAAAAAAAACGNoYWluX2lkAAAABAAAAAAAAAAJZ2FzX3VzYWdlAAAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAPcmVnaXN0ZXJfYnJpZGdlAAAAAAIAAAAAAAAACGNoYWluX2lkAAAABAAAAAAAAAAOYnJpZGdlX2FkZHJlc3MAAAAAA+4AAAAgAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAQYWRkX2JyaWRnZV90b2tlbgAAAAIAAAAAAAAACGNoYWluX2lkAAAABAAAAAAAAAANdG9rZW5fYWRkcmVzcwAAAAAAA+4AAAAgAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAATcmVtb3ZlX2JyaWRnZV90b2tlbgAAAAACAAAAAAAAAAhjaGFpbl9pZAAAAAQAAAAAAAAADXRva2VuX2FkZHJlc3MAAAAAAAPuAAAAIAAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAIYWRkX3Bvb2wAAAACAAAAAAAAAARwb29sAAAAEwAAAAAAAAAFdG9rZW4AAAAAAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAATd2l0aGRyYXdfZ2FzX3Rva2VucwAAAAACAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAABmFtb3VudAAAAAAACgAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAfd2l0aGRyYXdfYnJpZGdpbmdfZmVlX2luX3Rva2VucwAAAAACAAAAAAAAAAZzZW5kZXIAAAAAABMAAAAAAAAADXRva2VuX2FkZHJlc3MAAAAAAAATAAAAAQAAA+kAAAPtAAAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAVaGFzX3Byb2Nlc3NlZF9tZXNzYWdlAAAAAAAAAQAAAAAAAAAHbWVzc2FnZQAAAAPuAAAAIAAAAAEAAAPpAAAAAQAAAAM=\",\n        \"AAAAAAAAAAAAAAAUaGFzX3JlY2VpdmVkX21lc3NhZ2UAAAABAAAAAAAAAAdtZXNzYWdlAAAAA+4AAAAgAAAAAQAAA+kAAAABAAAAAw==\",\n        \"AAAAAAAAAAAAAAAQZ2V0X3Bvb2xfYWRkcmVzcwAAAAEAAAAAAAAADXRva2VuX2FkZHJlc3MAAAAAAAPuAAAAIAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAAKZ2V0X2NvbmZpZwAAAAAAAAAAAAEAAAPpAAAH0AAAAAZCcmlkZ2UAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAASZ2V0X3N0b3BfYXV0aG9yaXR5AAAAAAAAAAAAAQAAA+kAAAATAAAAAw==\",\n        \"AAAAAAAAAAAAAAAUZ2V0X3RyYW5zYWN0aW9uX2Nvc3QAAAABAAAAAAAAAAhjaGFpbl9pZAAAAAQAAAABAAAD6QAAAAoAAAAD\",\n        \"AAAAAAAAAAAAAAANZ2V0X2dhc191c2FnZQAAAAAAAAEAAAAAAAAACGNoYWluX2lkAAAABAAAAAEAAAPpAAAACgAAAAM=\",\n        \"AAAAAAAAAAAAAAAJZ2V0X2FkbWluAAAAAAAAAAAAAAEAAAPpAAAAEwAAAAM=\",\n        \"AAAAAAAAAAAAAAAOZ2V0X2dhc19vcmFjbGUAAAAAAAAAAAABAAAD6QAAABMAAAAD\",\n        \"AAAAAAAAAAAAAAASZ2V0X2Fub3RoZXJfYnJpZGdlAAAAAAABAAAAAAAAAAhjaGFpbl9pZAAAAAQAAAABAAAD6QAAB9AAAAANQW5vdGhlckJyaWRnZQAAAAAAAAM=\",\n        \"AAAAAAAAAAAAAAAJc2V0X2FkbWluAAAAAAAAAQAAAAAAAAAJbmV3X2FkbWluAAAAAAAAEwAAAAEAAAPpAAAD7QAAAAAAAAAD\",\n        \"AAAAAAAAAAAAAAAHdXBncmFkZQAAAAABAAAAAAAAAA1uZXdfd2FzbV9oYXNoAAAAAAAD7gAAACAAAAABAAAD6QAAA+0AAAAAAAAAAw==\",\n        \"AAAAAQAAAAAAAAAAAAAAB1N3YXBwZWQAAAAABgAAAAAAAAAOcmVjZWl2ZV9hbW91bnQAAAAAAAoAAAAAAAAADXJlY2VpdmVfdG9rZW4AAAAAAAPuAAAAIAAAAAAAAAAJcmVjaXBpZW50AAAAAAAAEwAAAAAAAAALc2VuZF9hbW91bnQAAAAACgAAAAAAAAAKc2VuZF90b2tlbgAAAAAD7gAAACAAAAAAAAAABnNlbmRlcgAAAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAAClRva2Vuc1NlbnQAAAAAAAUAAAAAAAAABmFtb3VudAAAAAAACgAAAAAAAAAUZGVzdGluYXRpb25fY2hhaW5faWQAAAAEAAAAAAAAAAVub25jZQAAAAAAAAwAAAAAAAAADXJlY2VpdmVfdG9rZW4AAAAAAAPuAAAAIAAAAAAAAAAJcmVjaXBpZW50AAAAAAAD7gAAACA=\",\n        \"AAAAAQAAAAAAAAAAAAAADlRva2Vuc1JlY2VpdmVkAAAAAAAEAAAAAAAAAAZhbW91bnQAAAAAAAoAAAAAAAAAB21lc3NhZ2UAAAAD7gAAACAAAAAAAAAABW5vbmNlAAAAAAAADAAAAAAAAAAJcmVjaXBpZW50AAAAAAAD7gAAACA=\",\n        \"AAAAAQAAAAAAAAAAAAAAClJlY2VpdmVGZWUAAAAAAAMAAAAAAAAAF2JyaWRnZV90cmFuc2FjdGlvbl9jb3N0AAAAAAoAAAAAAAAACWV4dHJhX2dhcwAAAAAAAAoAAAAAAAAAGG1lc3NhZ2VfdHJhbnNhY3Rpb25fY29zdAAAAAo=\",\n        \"AAAAAQAAAAAAAAAAAAAAFUJyaWRnaW5nRmVlRnJvbVRva2VucwAAAAAAAAIAAAAAAAAAEGZlZV90b2tlbl9hbW91bnQAAAAKAAAAAAAAAANnYXMAAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAADUFub3RoZXJCcmlkZ2UAAAAAAAACAAAAAAAAAAdhZGRyZXNzAAAAA+4AAAAgAAAAAAAAAAZ0b2tlbnMAAAAAA+wAAAPuAAAAIAAAAAE=\",\n        \"AAAAAQAAAAAAAAAAAAAABkJyaWRnZQAAAAAABgAAAGBwcmVjb21wdXRlZCB2YWx1ZXMgb2YgdGhlIHNjYWxpbmcgZmFjdG9yIHJlcXVpcmVkIGZvciBwYXlpbmcgdGhlIGJyaWRnaW5nIGZlZSB3aXRoIHN0YWJsZSB0b2tlbnMAAAAeYnJpZGdpbmdfZmVlX2NvbnZlcnNpb25fZmFjdG9yAAAAAAPsAAAAEwAAAAoAAAAAAAAACGNhbl9zd2FwAAAAAQAAAGxwcmVjb21wdXRlZCB2YWx1ZXMgdG8gZGl2aWRlIGJ5IHRvIGNoYW5nZSB0aGUgcHJlY2lzaW9uIGZyb20gdGhlIEdhcyBPcmFjbGUgcHJlY2lzaW9uIHRvIHRoZSB0b2tlbiBwcmVjaXNpb24AAAAWZnJvbV9nYXNfb3JhY2xlX2ZhY3RvcgAAAAAD7AAAABMAAAAKAAAAAAAAAAltZXNzZW5nZXIAAAAAAAATAAAAAAAAAAVwb29scwAAAAAAA+wAAAPuAAAAIAAAABMAAAAAAAAACnJlYmFsYW5jZXIAAAAAABM=\",\n        \"AAAAAgAAAAAAAAAAAAAAB0RhdGFLZXkAAAAAAwAAAAEAAAAAAAAAC090aGVyQnJpZGdlAAAAAAEAAAAEAAAAAQAAAAAAAAALU2VudE1lc3NhZ2UAAAAAAQAAA+4AAAAgAAAAAQAAAAAAAAAPUmVjZWl2ZWRNZXNzYWdlAAAAAAEAAAPuAAAAIA==\",\n        \"AAAAAQAAAAAAAAAAAAAABUFkbWluAAAAAAAAAQAAAAAAAAABMAAAAAAAABM=\",\n        \"AAAAAQAAAAAAAAAAAAAAEEdhc09yYWNsZUFkZHJlc3MAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAAAQAAAAAAAAAAAAAACEdhc1VzYWdlAAAAAQAAAAAAAAABMAAAAAAAA+wAAAAEAAAACg==\",\n        \"AAAAAQAAAAAAAAAAAAAAC05hdGl2ZVRva2VuAAAAAAEAAAAAAAAAATAAAAAAAAAT\",\n        \"AAAAAQAAAAAAAAAAAAAADVN0b3BBdXRob3JpdHkAAAAAAAABAAAAAAAAAAEwAAAAAAAAEw==\",\n        \"AAAABAAAAAAAAAAAAAAABUVycm9yAAAAAAAAKAAAAAAAAAANVW5pbXBsZW1lbnRlZAAAAAAAAAAAAAAAAAAAC0luaXRpYWxpemVkAAAAAAEAAAAAAAAADVVuaW5pdGlhbGl6ZWQAAAAAAAACAAAAAAAAAAxVbmF1dGhvcml6ZWQAAAADAAAAAAAAAApJbnZhbGlkQXJnAAAAAAAEAAAAAAAAAA5JbnZhbGlkQ2hhaW5JZAAAAAAABQAAAAAAAAATSW52YWxpZE90aGVyQ2hhaW5JZAAAAAAGAAAAAAAAAA5HYXNVc2FnZU5vdFNldAAAAAAABwAAAAAAAAANQnJva2VuQWRkcmVzcwAAAAAAAAgAAAAAAAAACE5vdEZvdW5kAAAACQAAAAAAAAAYVG9rZW5JbnN1ZmZpY2llbnRCYWxhbmNlAAAACgAAAAAAAAAKQ2FzdEZhaWxlZAAAAAAACwAAAAAAAAAMVTI1Nk92ZXJmbG93AAAADAAAAAAAAAAKWmVyb0Ftb3VudAAAAAAAZwAAAAAAAAAMUG9vbE92ZXJmbG93AAAAaAAAAAAAAAALWmVyb0NoYW5nZXMAAAAAaQAAAAAAAAARUmVzZXJ2ZXNFeGhhdXN0ZWQAAAAAAABqAAAAAAAAABpJbnN1ZmZpY2llbnRSZWNlaXZlZEFtb3VudAAAAAAAawAAAAAAAAAUQmFsYW5jZVJhdGlvRXhjZWVkZWQAAABsAAAAAAAAAAlGb3JiaWRkZW4AAAAAAABtAAAAAAAAABlVbmF1dGhvcml6ZWRTdG9wQXV0aG9yaXR5AAAAAAAAywAAAAAAAAAOU3dhcFByb2hpYml0ZWQAAAAAAMwAAAAAAAAAEkFtb3VudFRvb0xvd0ZvckZlZQAAAAAAzQAAAAAAAAAWQnJpZGdlVG9UaGVaZXJvQWRkcmVzcwAAAAAAzgAAAAAAAAAORW1wdHlSZWNpcGllbnQAAAAAAM8AAAAAAAAAE1NvdXJjZU5vdFJlZ2lzdGVyZWQAAAAA0AAAAAAAAAAVV3JvbmdEZXN0aW5hdGlvbkNoYWluAAAAAAAA0QAAAAAAAAATVW5rbm93bkFub3RoZXJDaGFpbgAAAADSAAAAAAAAABFUb2tlbnNBbHJlYWR5U2VudAAAAAAAANMAAAAAAAAAEE1lc3NhZ2VQcm9jZXNzZWQAAADUAAAAAAAAAAxOb3RFbm91Z2hGZWUAAADWAAAAAAAAAAlOb01lc3NhZ2UAAAAAAADXAAAAAAAAAA1Ob1JlY2VpdmVQb29sAAAAAAAA2AAAAAAAAAAGTm9Qb29sAAAAAADZAAAAAAAAABNVbmtub3duQW5vdGhlclRva2VuAAAAANoAAAAAAAAAD1dyb25nQnl0ZUxlbmd0aAAAAAEsAAAAAAAAAApIYXNNZXNzYWdlAAAAAAEtAAAAAAAAABdJbnZhbGlkUHJpbWFyeVNpZ25hdHVyZQAAAAEuAAAAAAAAABlJbnZhbGlkU2Vjb25kYXJ5U2lnbmF0dXJlAAAAAAABLwAAAAAAAAARTm9HYXNEYXRhRm9yQ2hhaW4AAAAAAAGQ\",\n      ]),\n      options\n    );\n  }\n\n  public readonly fromJSON = {\n    initialize: this.txFromJSON<Result<void>>,\n    swap_and_bridge: this.txFromJSON<Result<void>>,\n    receive_tokens: this.txFromJSON<Result<void>>,\n    swap: this.txFromJSON<Result<void>>,\n    stop_swap: this.txFromJSON<Result<void>>,\n    start_swap: this.txFromJSON<Result<void>>,\n    set_gas_oracle: this.txFromJSON<Result<void>>,\n    set_stop_authority: this.txFromJSON<Result<void>>,\n    set_rebalancer: this.txFromJSON<Result<void>>,\n    set_messenger: this.txFromJSON<Result<void>>,\n    set_gas_usage: this.txFromJSON<Result<void>>,\n    register_bridge: this.txFromJSON<Result<void>>,\n    add_bridge_token: this.txFromJSON<Result<void>>,\n    remove_bridge_token: this.txFromJSON<Result<void>>,\n    add_pool: this.txFromJSON<Result<void>>,\n    withdraw_gas_tokens: this.txFromJSON<Result<void>>,\n    withdraw_bridging_fee_in_tokens: this.txFromJSON<Result<void>>,\n    has_processed_message: this.txFromJSON<Result<boolean>>,\n    has_received_message: this.txFromJSON<Result<boolean>>,\n    get_pool_address: this.txFromJSON<Result<string>>,\n    get_config: this.txFromJSON<Result<Bridge>>,\n    get_stop_authority: this.txFromJSON<Result<string>>,\n    get_transaction_cost: this.txFromJSON<Result<u128>>,\n    get_gas_usage: this.txFromJSON<Result<u128>>,\n    get_admin: this.txFromJSON<Result<string>>,\n    get_gas_oracle: this.txFromJSON<Result<string>>,\n    get_another_bridge: this.txFromJSON<Result<AnotherBridge>>,\n    set_admin: this.txFromJSON<Result<void>>,\n    upgrade: this.txFromJSON<Result<void>>,\n  };\n}\n"]}