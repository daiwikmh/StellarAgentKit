{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0x4931e06dce648b3931f890035bd196920770e913e43e45990b383f6486fdd0a5/receive-message/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  fieldToJSON,\n  phantom,\n  toBcs,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../../../_framework/util\";\nimport { Vector } from \"../../../../_framework/vector\";\nimport { VecSet } from \"../../../../sui/vec-set/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { BcsType, bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64, fromHEX, toHEX } from \"@mysten/sui/utils\";\n\n/* ============================== Receipt =============================== */\n\nexport function isReceipt(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::receive_message::Receipt`;\n}\n\nexport interface ReceiptFields {\n  caller: ToField<\"address\">;\n  recipient: ToField<\"address\">;\n  sourceDomain: ToField<\"u32\">;\n  sender: ToField<\"address\">;\n  nonce: ToField<\"u64\">;\n  messageBody: ToField<Vector<\"u8\">>;\n  currentVersion: ToField<VecSet<\"u64\">>;\n}\n\nexport type ReceiptReified = Reified<Receipt, ReceiptFields>;\n\nexport class Receipt implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::receive_message::Receipt`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Receipt.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Receipt.$isPhantom;\n\n  readonly caller: ToField<\"address\">;\n  readonly recipient: ToField<\"address\">;\n  readonly sourceDomain: ToField<\"u32\">;\n  readonly sender: ToField<\"address\">;\n  readonly nonce: ToField<\"u64\">;\n  readonly messageBody: ToField<Vector<\"u8\">>;\n  readonly currentVersion: ToField<VecSet<\"u64\">>;\n\n  private constructor(typeArgs: [], fields: ReceiptFields) {\n    this.$fullTypeName = composeSuiType(Receipt.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.caller = fields.caller;\n    this.recipient = fields.recipient;\n    this.sourceDomain = fields.sourceDomain;\n    this.sender = fields.sender;\n    this.nonce = fields.nonce;\n    this.messageBody = fields.messageBody;\n    this.currentVersion = fields.currentVersion;\n  }\n\n  static reified(): ReceiptReified {\n    return {\n      typeName: Receipt.$typeName,\n      fullTypeName: composeSuiType(Receipt.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Receipt.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Receipt.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Receipt.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Receipt.fromBcs(data),\n      bcs: Receipt.bcs,\n      fromJSONField: (field: any) => Receipt.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Receipt.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Receipt.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Receipt.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Receipt.fetch(client, id),\n      new: (fields: ReceiptFields) => {\n        return new Receipt([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Receipt.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Receipt>> {\n    return phantom(Receipt.reified());\n  }\n  static get p() {\n    return Receipt.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Receipt\", {\n      caller: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      recipient: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      source_domain: bcs.u32(),\n      sender: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      nonce: bcs.u64(),\n      message_body: bcs.vector(bcs.u8()),\n      current_version: VecSet.bcs(bcs.u64()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Receipt {\n    return Receipt.reified().new({\n      caller: decodeFromFields(\"address\", fields.caller),\n      recipient: decodeFromFields(\"address\", fields.recipient),\n      sourceDomain: decodeFromFields(\"u32\", fields.source_domain),\n      sender: decodeFromFields(\"address\", fields.sender),\n      nonce: decodeFromFields(\"u64\", fields.nonce),\n      messageBody: decodeFromFields(reified.vector(\"u8\"), fields.message_body),\n      currentVersion: decodeFromFields(VecSet.reified(\"u64\"), fields.current_version),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Receipt {\n    if (!isReceipt(item.type)) {\n      throw new Error(\"not a Receipt type\");\n    }\n\n    return Receipt.reified().new({\n      caller: decodeFromFieldsWithTypes(\"address\", item.fields.caller),\n      recipient: decodeFromFieldsWithTypes(\"address\", item.fields.recipient),\n      sourceDomain: decodeFromFieldsWithTypes(\"u32\", item.fields.source_domain),\n      sender: decodeFromFieldsWithTypes(\"address\", item.fields.sender),\n      nonce: decodeFromFieldsWithTypes(\"u64\", item.fields.nonce),\n      messageBody: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.message_body),\n      currentVersion: decodeFromFieldsWithTypes(VecSet.reified(\"u64\"), item.fields.current_version),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Receipt {\n    return Receipt.fromFields(Receipt.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      caller: this.caller,\n      recipient: this.recipient,\n      sourceDomain: this.sourceDomain,\n      sender: this.sender,\n      nonce: this.nonce.toString(),\n      messageBody: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.messageBody),\n      currentVersion: this.currentVersion.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Receipt {\n    return Receipt.reified().new({\n      caller: decodeFromJSONField(\"address\", field.caller),\n      recipient: decodeFromJSONField(\"address\", field.recipient),\n      sourceDomain: decodeFromJSONField(\"u32\", field.sourceDomain),\n      sender: decodeFromJSONField(\"address\", field.sender),\n      nonce: decodeFromJSONField(\"u64\", field.nonce),\n      messageBody: decodeFromJSONField(reified.vector(\"u8\"), field.messageBody),\n      currentVersion: decodeFromJSONField(VecSet.reified(\"u64\"), field.currentVersion),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): Receipt {\n    if (json.$typeName !== Receipt.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Receipt.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Receipt {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isReceipt(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Receipt object`);\n    }\n    return Receipt.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Receipt {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isReceipt(data.bcs.type)) {\n        throw new Error(`object at is not a Receipt object`);\n      }\n\n      return Receipt.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Receipt.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Receipt> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Receipt object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isReceipt(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Receipt object`);\n    }\n\n    return Receipt.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== StampReceiptTicket =============================== */\n\nexport function isStampReceiptTicket(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::receive_message::StampReceiptTicket` + \"<\");\n}\n\nexport interface StampReceiptTicketFields<Auth extends TypeArgument> {\n  auth: ToField<Auth>;\n  receipt: ToField<Receipt>;\n}\n\nexport type StampReceiptTicketReified<Auth extends TypeArgument> = Reified<\n  StampReceiptTicket<Auth>,\n  StampReceiptTicketFields<Auth>\n>;\n\nexport class StampReceiptTicket<Auth extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::receive_message::StampReceiptTicket`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [false] as const;\n\n  readonly $typeName = StampReceiptTicket.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<Auth>];\n  readonly $isPhantom = StampReceiptTicket.$isPhantom;\n\n  readonly auth: ToField<Auth>;\n  readonly receipt: ToField<Receipt>;\n\n  private constructor(typeArgs: [ToTypeStr<Auth>], fields: StampReceiptTicketFields<Auth>) {\n    this.$fullTypeName = composeSuiType(StampReceiptTicket.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.auth = fields.auth;\n    this.receipt = fields.receipt;\n  }\n\n  static reified<Auth extends Reified<TypeArgument, any>>(Auth: Auth): StampReceiptTicketReified<ToTypeArgument<Auth>> {\n    return {\n      typeName: StampReceiptTicket.$typeName,\n      fullTypeName: composeSuiType(StampReceiptTicket.$typeName, ...[extractType(Auth)]) as string,\n      typeArgs: [extractType(Auth)] as [ToTypeStr<ToTypeArgument<Auth>>],\n      isPhantom: StampReceiptTicket.$isPhantom,\n      reifiedTypeArgs: [Auth],\n      fromFields: (fields: Record<string, any>) => StampReceiptTicket.fromFields(Auth, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => StampReceiptTicket.fromFieldsWithTypes(Auth, item),\n      fromBcs: (data: Uint8Array) => StampReceiptTicket.fromBcs(Auth, data),\n      bcs: StampReceiptTicket.bcs(toBcs(Auth)),\n      fromJSONField: (field: any) => StampReceiptTicket.fromJSONField(Auth, field),\n      fromJSON: (json: Record<string, any>) => StampReceiptTicket.fromJSON(Auth, json),\n      fromSuiParsedData: (content: SuiParsedData) => StampReceiptTicket.fromSuiParsedData(Auth, content),\n      fromSuiObjectData: (content: SuiObjectData) => StampReceiptTicket.fromSuiObjectData(Auth, content),\n      fetch: async (client: SuiClient, id: string) => StampReceiptTicket.fetch(client, Auth, id),\n      new: (fields: StampReceiptTicketFields<ToTypeArgument<Auth>>) => {\n        return new StampReceiptTicket([extractType(Auth)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return StampReceiptTicket.reified;\n  }\n\n  static phantom<Auth extends Reified<TypeArgument, any>>(\n    Auth: Auth\n  ): PhantomReified<ToTypeStr<StampReceiptTicket<ToTypeArgument<Auth>>>> {\n    return phantom(StampReceiptTicket.reified(Auth));\n  }\n  static get p() {\n    return StampReceiptTicket.phantom;\n  }\n\n  static get bcs() {\n    return <Auth extends BcsType<any>>(Auth: Auth) =>\n      bcs.struct(`StampReceiptTicket<${Auth.name}>`, {\n        auth: Auth,\n        receipt: Receipt.bcs,\n      });\n  }\n\n  static fromFields<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    fields: Record<string, any>\n  ): StampReceiptTicket<ToTypeArgument<Auth>> {\n    return StampReceiptTicket.reified(typeArg).new({\n      auth: decodeFromFields(typeArg, fields.auth),\n      receipt: decodeFromFields(Receipt.reified(), fields.receipt),\n    });\n  }\n\n  static fromFieldsWithTypes<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    item: FieldsWithTypes\n  ): StampReceiptTicket<ToTypeArgument<Auth>> {\n    if (!isStampReceiptTicket(item.type)) {\n      throw new Error(\"not a StampReceiptTicket type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return StampReceiptTicket.reified(typeArg).new({\n      auth: decodeFromFieldsWithTypes(typeArg, item.fields.auth),\n      receipt: decodeFromFieldsWithTypes(Receipt.reified(), item.fields.receipt),\n    });\n  }\n\n  static fromBcs<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    data: Uint8Array\n  ): StampReceiptTicket<ToTypeArgument<Auth>> {\n    const typeArgs = [typeArg];\n\n    return StampReceiptTicket.fromFields(typeArg, StampReceiptTicket.bcs(toBcs(typeArgs[0])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      auth: fieldToJSON<Auth>(this.$typeArgs[0], this.auth),\n      receipt: this.receipt.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    field: any\n  ): StampReceiptTicket<ToTypeArgument<Auth>> {\n    return StampReceiptTicket.reified(typeArg).new({\n      auth: decodeFromJSONField(typeArg, field.auth),\n      receipt: decodeFromJSONField(Receipt.reified(), field.receipt),\n    });\n  }\n\n  static fromJSON<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    json: Record<string, any>\n  ): StampReceiptTicket<ToTypeArgument<Auth>> {\n    if (json.$typeName !== StampReceiptTicket.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(StampReceiptTicket.$typeName, extractType(typeArg)), json.$typeArgs, [\n      typeArg,\n    ]);\n\n    return StampReceiptTicket.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    content: SuiParsedData\n  ): StampReceiptTicket<ToTypeArgument<Auth>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isStampReceiptTicket(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a StampReceiptTicket object`);\n    }\n    return StampReceiptTicket.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    data: SuiObjectData\n  ): StampReceiptTicket<ToTypeArgument<Auth>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isStampReceiptTicket(data.bcs.type)) {\n        throw new Error(`object at is not a StampReceiptTicket object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return StampReceiptTicket.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return StampReceiptTicket.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<Auth extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArg: Auth,\n    id: string\n  ): Promise<StampReceiptTicket<ToTypeArgument<Auth>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching StampReceiptTicket object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isStampReceiptTicket(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a StampReceiptTicket object`);\n    }\n\n    return StampReceiptTicket.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== StampedReceipt =============================== */\n\nexport function isStampedReceipt(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::receive_message::StampedReceipt`;\n}\n\nexport interface StampedReceiptFields {\n  receipt: ToField<Receipt>;\n}\n\nexport type StampedReceiptReified = Reified<StampedReceipt, StampedReceiptFields>;\n\nexport class StampedReceipt implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::receive_message::StampedReceipt`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = StampedReceipt.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = StampedReceipt.$isPhantom;\n\n  readonly receipt: ToField<Receipt>;\n\n  private constructor(typeArgs: [], fields: StampedReceiptFields) {\n    this.$fullTypeName = composeSuiType(StampedReceipt.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.receipt = fields.receipt;\n  }\n\n  static reified(): StampedReceiptReified {\n    return {\n      typeName: StampedReceipt.$typeName,\n      fullTypeName: composeSuiType(StampedReceipt.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: StampedReceipt.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => StampedReceipt.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => StampedReceipt.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => StampedReceipt.fromBcs(data),\n      bcs: StampedReceipt.bcs,\n      fromJSONField: (field: any) => StampedReceipt.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => StampedReceipt.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => StampedReceipt.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => StampedReceipt.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => StampedReceipt.fetch(client, id),\n      new: (fields: StampedReceiptFields) => {\n        return new StampedReceipt([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return StampedReceipt.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<StampedReceipt>> {\n    return phantom(StampedReceipt.reified());\n  }\n  static get p() {\n    return StampedReceipt.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"StampedReceipt\", {\n      receipt: Receipt.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): StampedReceipt {\n    return StampedReceipt.reified().new({\n      receipt: decodeFromFields(Receipt.reified(), fields.receipt),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): StampedReceipt {\n    if (!isStampedReceipt(item.type)) {\n      throw new Error(\"not a StampedReceipt type\");\n    }\n\n    return StampedReceipt.reified().new({\n      receipt: decodeFromFieldsWithTypes(Receipt.reified(), item.fields.receipt),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): StampedReceipt {\n    return StampedReceipt.fromFields(StampedReceipt.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      receipt: this.receipt.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): StampedReceipt {\n    return StampedReceipt.reified().new({\n      receipt: decodeFromJSONField(Receipt.reified(), field.receipt),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): StampedReceipt {\n    if (json.$typeName !== StampedReceipt.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return StampedReceipt.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): StampedReceipt {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isStampedReceipt(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a StampedReceipt object`);\n    }\n    return StampedReceipt.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): StampedReceipt {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isStampedReceipt(data.bcs.type)) {\n        throw new Error(`object at is not a StampedReceipt object`);\n      }\n\n      return StampedReceipt.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return StampedReceipt.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<StampedReceipt> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching StampedReceipt object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isStampedReceipt(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a StampedReceipt object`);\n    }\n\n    return StampedReceipt.fromSuiObjectData(res.data);\n  }\n}\n"]}