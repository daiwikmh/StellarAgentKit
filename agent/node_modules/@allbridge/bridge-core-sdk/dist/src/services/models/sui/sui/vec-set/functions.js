"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contains = contains;
exports.empty = empty;
exports.insert = insert;
exports.isEmpty = isEmpty;
exports.remove = remove;
exports.singleton = singleton;
exports.fromKeys = fromKeys;
exports.keys = keys;
exports.getIdx = getIdx;
exports.getIdxOpt = getIdxOpt;
exports.intoKeys = intoKeys;
exports.size = size;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function contains(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::contains`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArg}`, args.key)],
    });
}
function empty(tx, typeArg) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::empty`,
        typeArguments: [typeArg],
        arguments: [],
    });
}
function insert(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::insert`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArg}`, args.key)],
    });
}
function isEmpty(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::is_empty`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function remove(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::remove`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArg}`, args.key)],
    });
}
function singleton(tx, typeArg, key) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::singleton`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, key)],
    });
}
function fromKeys(tx, typeArg, keys) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::from_keys`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.vector)(tx, `${typeArg}`, keys)],
    });
}
function keys(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::keys`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function getIdx(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::get_idx`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArg}`, args.key)],
    });
}
function getIdxOpt(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::get_idx_opt`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArg}`, args.key)],
    });
}
function intoKeys(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::into_keys`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function size(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_set::size`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
//# sourceMappingURL=functions.js.map