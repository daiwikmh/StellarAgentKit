"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.add = add;
exports.div = div;
exports.mul = mul;
exports.sub = sub;
exports.bytes = bytes;
exports.fromBytes = fromBytes;
exports.internalAdd = internalAdd;
exports.convert = convert;
exports.equal = equal;
exports.hashTo = hashTo;
exports.internalConvert = internalConvert;
exports.internalDiv = internalDiv;
exports.internalHashTo = internalHashTo;
exports.internalMul = internalMul;
exports.internalMultiScalarMul = internalMultiScalarMul;
exports.internalPairing = internalPairing;
exports.internalSub = internalSub;
exports.internalSum = internalSum;
exports.internalValidate = internalValidate;
exports.multiScalarMultiplication = multiScalarMultiplication;
exports.pairing = pairing;
exports.setAsPrefix = setAsPrefix;
exports.sum = sum;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
const structs_1 = require("./structs");
function add(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::add`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function div(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::div`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.obj)(tx, args.scalar), (0, util_1.obj)(tx, args.e)],
    });
}
function mul(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::mul`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.obj)(tx, args.scalar), (0, util_1.obj)(tx, args.e)],
    });
}
function sub(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::sub`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function bytes(tx, typeArg, e) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::bytes`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, e)],
    });
}
function fromBytes(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::from_bytes`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.bytes, `vector<u8>`), (0, util_1.pure)(tx, args.isTrusted, `bool`)],
    });
}
function internalAdd(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_add`,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.e1, `vector<u8>`), (0, util_1.pure)(tx, args.e2, `vector<u8>`)],
    });
}
function convert(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::convert`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.pure)(tx, args.fromType, `u8`), (0, util_1.pure)(tx, args.toType, `u8`), (0, util_1.obj)(tx, args.e)],
    });
}
function equal(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::equal`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function hashTo(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::hash_to`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.m, `vector<u8>`)],
    });
}
function internalConvert(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_convert`,
        arguments: [(0, util_1.pure)(tx, args.fromType, `u8`), (0, util_1.pure)(tx, args.toType, `u8`), (0, util_1.pure)(tx, args.e, `vector<u8>`)],
    });
}
function internalDiv(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_div`,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.e1, `vector<u8>`), (0, util_1.pure)(tx, args.e2, `vector<u8>`)],
    });
}
function internalHashTo(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_hash_to`,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.m, `vector<u8>`)],
    });
}
function internalMul(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_mul`,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.e1, `vector<u8>`), (0, util_1.pure)(tx, args.e2, `vector<u8>`)],
    });
}
function internalMultiScalarMul(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_multi_scalar_mul`,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.scalars, `vector<u8>`), (0, util_1.pure)(tx, args.elements, `vector<u8>`)],
    });
}
function internalPairing(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_pairing`,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.e1, `vector<u8>`), (0, util_1.pure)(tx, args.e2, `vector<u8>`)],
    });
}
function internalSub(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_sub`,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.e1, `vector<u8>`), (0, util_1.pure)(tx, args.e2, `vector<u8>`)],
    });
}
function internalSum(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_sum`,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.e, `vector<vector<u8>>`)],
    });
}
function internalValidate(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::internal_validate`,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.pure)(tx, args.bytes, `vector<u8>`)],
    });
}
function multiScalarMultiplication(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::multi_scalar_multiplication`,
        typeArguments: typeArgs,
        arguments: [
            (0, util_1.pure)(tx, args.type, `u8`),
            (0, util_1.vector)(tx, `${structs_1.Element.$typeName}<${typeArgs[0]}>`, args.scalars),
            (0, util_1.vector)(tx, `${structs_1.Element.$typeName}<${typeArgs[1]}>`, args.elements),
        ],
    });
}
function pairing(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::pairing`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function setAsPrefix(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::set_as_prefix`,
        arguments: [(0, util_1.pure)(tx, args.x, `u64`), (0, util_1.pure)(tx, args.bigEndian, `bool`), (0, util_1.pure)(tx, args.buffer, `vector<u8>`)],
    });
}
function sum(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::group_ops::sum`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, args.type, `u8`), (0, util_1.vector)(tx, `${structs_1.Element.$typeName}<${typeArg}>`, args.terms)],
    });
}
//# sourceMappingURL=functions.js.map