import { GenericArg } from "../../_framework/util";
import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export declare function value(tx: Transaction, typeArg: string, t: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AllowArgs {
    self: TransactionObjectInput;
    cap: TransactionObjectInput;
    action: string | TransactionArgument;
}
export declare function allow(tx: Transaction, typeArg: string, args: AllowArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function sender(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function amount(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function recipient(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface TransferArgs {
    t: TransactionObjectInput;
    recipient: string | TransactionArgument;
}
export declare function transfer(tx: Transaction, typeArg: string, args: TransferArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function key(tx: Transaction, typeArg: string): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function destroyZero(tx: Transaction, typeArg: string, token: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface JoinArgs {
    token: TransactionObjectInput;
    another: TransactionObjectInput;
}
export declare function join(tx: Transaction, typeArg: string, args: JoinArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SplitArgs {
    token: TransactionObjectInput;
    amount: bigint | TransactionArgument;
}
export declare function split(tx: Transaction, typeArg: string, args: SplitArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function zero(tx: Transaction, typeArg: string): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface BurnArgs {
    cap: TransactionObjectInput;
    token: TransactionObjectInput;
}
export declare function burn(tx: Transaction, typeArg: string, args: BurnArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface MintArgs {
    cap: TransactionObjectInput;
    amount: bigint | TransactionArgument;
}
export declare function mint(tx: Transaction, typeArg: string, args: MintArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ConfirmRequestArgs {
    policy: TransactionObjectInput;
    request: TransactionObjectInput;
}
export declare function confirmRequest(tx: Transaction, typeArg: string, args: ConfirmRequestArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface NewRequestArgs {
    name: string | TransactionArgument;
    amount: bigint | TransactionArgument;
    recipient: string | TransactionArgument | TransactionArgument | null;
    spentBalance: TransactionObjectInput | TransactionArgument | null;
}
export declare function newRequest(tx: Transaction, typeArg: string, args: NewRequestArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RulesArgs {
    self: TransactionObjectInput;
    action: string | TransactionArgument;
}
export declare function rules(tx: Transaction, typeArg: string, args: RulesArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function keep(tx: Transaction, typeArg: string, token: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function action(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddApprovalArgs {
    t: GenericArg;
    request: TransactionObjectInput;
}
export declare function addApproval(tx: Transaction, typeArgs: [string, string], args: AddApprovalArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddRuleConfigArgs {
    rule: GenericArg;
    self: TransactionObjectInput;
    cap: TransactionObjectInput;
    config: GenericArg;
}
export declare function addRuleConfig(tx: Transaction, typeArgs: [string, string, string], args: AddRuleConfigArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddRuleForActionArgs {
    self: TransactionObjectInput;
    cap: TransactionObjectInput;
    action: string | TransactionArgument;
}
export declare function addRuleForAction(tx: Transaction, typeArgs: [string, string], args: AddRuleForActionArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function approvals(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ConfirmRequestMutArgs {
    policy: TransactionObjectInput;
    request: TransactionObjectInput;
}
export declare function confirmRequestMut(tx: Transaction, typeArg: string, args: ConfirmRequestMutArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ConfirmWithPolicyCapArgs {
    policyCap: TransactionObjectInput;
    request: TransactionObjectInput;
}
export declare function confirmWithPolicyCap(tx: Transaction, typeArg: string, args: ConfirmWithPolicyCapArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ConfirmWithTreasuryCapArgs {
    treasuryCap: TransactionObjectInput;
    request: TransactionObjectInput;
}
export declare function confirmWithTreasuryCap(tx: Transaction, typeArg: string, args: ConfirmWithTreasuryCapArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface DisallowArgs {
    self: TransactionObjectInput;
    cap: TransactionObjectInput;
    action: string | TransactionArgument;
}
export declare function disallow(tx: Transaction, typeArg: string, args: DisallowArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface FlushArgs {
    self: TransactionObjectInput;
    cap: TransactionObjectInput;
}
export declare function flush(tx: Transaction, typeArg: string, args: FlushArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function fromCoin(tx: Transaction, typeArg: string, coin: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function fromCoinAction(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function hasRuleConfig(tx: Transaction, typeArgs: [string, string], self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function hasRuleConfigWithType(tx: Transaction, typeArgs: [string, string, string], self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface IsAllowedArgs {
    self: TransactionObjectInput;
    action: string | TransactionArgument;
}
export declare function isAllowed(tx: Transaction, typeArg: string, args: IsAllowedArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function newPolicy(tx: Transaction, typeArg: string, treasuryCap: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function spentBalance(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveRuleConfigArgs {
    self: TransactionObjectInput;
    cap: TransactionObjectInput;
}
export declare function removeRuleConfig(tx: Transaction, typeArgs: [string, string, string], args: RemoveRuleConfigArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveRuleForActionArgs {
    self: TransactionObjectInput;
    cap: TransactionObjectInput;
    action: string | TransactionArgument;
}
export declare function removeRuleForAction(tx: Transaction, typeArgs: [string, string], args: RemoveRuleForActionArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RuleConfigArgs {
    rule: GenericArg;
    self: TransactionObjectInput;
}
export declare function ruleConfig(tx: Transaction, typeArgs: [string, string, string], args: RuleConfigArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RuleConfigMutArgs {
    rule: GenericArg;
    self: TransactionObjectInput;
    cap: TransactionObjectInput;
}
export declare function ruleConfigMut(tx: Transaction, typeArgs: [string, string, string], args: RuleConfigMutArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function sharePolicy(tx: Transaction, typeArg: string, policy: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function spend(tx: Transaction, typeArg: string, t: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function spendAction(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function spent(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function toCoin(tx: Transaction, typeArg: string, t: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function toCoinAction(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function transferAction(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
