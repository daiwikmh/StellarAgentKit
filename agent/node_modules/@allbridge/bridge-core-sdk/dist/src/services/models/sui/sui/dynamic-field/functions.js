"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.add = add;
exports.borrow = borrow;
exports.borrowMut = borrowMut;
exports.remove = remove;
exports.addChildObject = addChildObject;
exports.borrowChildObject = borrowChildObject;
exports.borrowChildObjectMut = borrowChildObjectMut;
exports.exists_ = exists_;
exports.existsWithType = existsWithType;
exports.fieldInfo = fieldInfo;
exports.fieldInfoMut = fieldInfoMut;
exports.hasChildObject = hasChildObject;
exports.hasChildObjectWithTy = hasChildObjectWithTy;
exports.hashTypeAndKey = hashTypeAndKey;
exports.removeChildObject = removeChildObject;
exports.removeIfExists = removeIfExists;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function add(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::add`,
        typeArguments: typeArgs,
        arguments: [
            (0, util_1.obj)(tx, args.object),
            (0, util_1.generic)(tx, `${typeArgs[0]}`, args.name),
            (0, util_1.generic)(tx, `${typeArgs[1]}`, args.value),
        ],
    });
}
function borrow(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::borrow`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.name)],
    });
}
function borrowMut(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::borrow_mut`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.name)],
    });
}
function remove(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::remove`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.name)],
    });
}
function addChildObject(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::add_child_object`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, args.parent, `address`), (0, util_1.generic)(tx, `${typeArg}`, args.child)],
    });
}
function borrowChildObject(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::borrow_child_object`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.pure)(tx, args.id, `address`)],
    });
}
function borrowChildObjectMut(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::borrow_child_object_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.pure)(tx, args.id, `address`)],
    });
}
function exists_(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::exists_`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.generic)(tx, `${typeArg}`, args.name)],
    });
}
function existsWithType(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::exists_with_type`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.name)],
    });
}
function fieldInfo(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::field_info`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.generic)(tx, `${typeArg}`, args.name)],
    });
}
function fieldInfoMut(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::field_info_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.generic)(tx, `${typeArg}`, args.name)],
    });
}
function hasChildObject(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::has_child_object`,
        arguments: [(0, util_1.pure)(tx, args.parent, `address`), (0, util_1.pure)(tx, args.id, `address`)],
    });
}
function hasChildObjectWithTy(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::has_child_object_with_ty`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, args.parent, `address`), (0, util_1.pure)(tx, args.id, `address`)],
    });
}
function hashTypeAndKey(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::hash_type_and_key`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, args.parent, `address`), (0, util_1.generic)(tx, `${typeArg}`, args.k)],
    });
}
function removeChildObject(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::remove_child_object`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, args.parent, `address`), (0, util_1.pure)(tx, args.id, `address`)],
    });
}
function removeIfExists(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::dynamic_field::remove_if_exists`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.object), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.name)],
    });
}
//# sourceMappingURL=functions.js.map