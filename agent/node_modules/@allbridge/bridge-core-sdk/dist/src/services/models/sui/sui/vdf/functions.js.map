{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/vdf/functions.ts"],"names":[],"mappings":";;AAKA,kCAKC;AAED,kDAQC;AASD,8BAUC;AASD,8CAUC;AA1DD,cAAc;AACd,0BAAkC;AAClC,gDAA6C;AAG7C,SAAgB,WAAW,CAAC,EAAe,EAAE,OAAkE;IAC7G,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,sBAAsB;QAC7C,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;KAC7C,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,mBAAmB,CACjC,EAAe,EACf,OAAkE;IAElE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+BAA+B;QACtD,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;KAC7C,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,SAAS,CAAC,EAAe,EAAE,IAAmB;IAC5D,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mBAAmB;QAC1C,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC;YAClC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;YACnC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC;YAClC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;SACjC;KACF,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,iBAAiB,CAAC,EAAe,EAAE,IAA2B;IAC5E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,4BAA4B;QACnD,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC;YAClC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;YACnC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC;YAClC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC;SACjC;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument } from \"@mysten/sui/transactions\";\n\nexport function hashToInput(tx: Transaction, message: Array<number | TransactionArgument> | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vdf::hash_to_input`,\n    arguments: [pure(tx, message, `vector<u8>`)],\n  });\n}\n\nexport function hashToInputInternal(\n  tx: Transaction,\n  message: Array<number | TransactionArgument> | TransactionArgument\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vdf::hash_to_input_internal`,\n    arguments: [pure(tx, message, `vector<u8>`)],\n  });\n}\n\nexport interface VdfVerifyArgs {\n  input: Array<number | TransactionArgument> | TransactionArgument;\n  output: Array<number | TransactionArgument> | TransactionArgument;\n  proof: Array<number | TransactionArgument> | TransactionArgument;\n  iterations: bigint | TransactionArgument;\n}\n\nexport function vdfVerify(tx: Transaction, args: VdfVerifyArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vdf::vdf_verify`,\n    arguments: [\n      pure(tx, args.input, `vector<u8>`),\n      pure(tx, args.output, `vector<u8>`),\n      pure(tx, args.proof, `vector<u8>`),\n      pure(tx, args.iterations, `u64`),\n    ],\n  });\n}\n\nexport interface VdfVerifyInternalArgs {\n  input: Array<number | TransactionArgument> | TransactionArgument;\n  output: Array<number | TransactionArgument> | TransactionArgument;\n  proof: Array<number | TransactionArgument> | TransactionArgument;\n  iterations: bigint | TransactionArgument;\n}\n\nexport function vdfVerifyInternal(tx: Transaction, args: VdfVerifyInternalArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vdf::vdf_verify_internal`,\n    arguments: [\n      pure(tx, args.input, `vector<u8>`),\n      pure(tx, args.output, `vector<u8>`),\n      pure(tx, args.proof, `vector<u8>`),\n      pure(tx, args.iterations, `u64`),\n    ],\n  });\n}\n"]}