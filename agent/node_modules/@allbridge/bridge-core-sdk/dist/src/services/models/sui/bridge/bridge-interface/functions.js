"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.destroyEmpty = destroyEmpty;
exports.swap = swap;
exports.deposit = deposit;
exports.withdraw = withdraw;
exports.depositFee = depositFee;
exports.migrate = migrate;
exports.setGasUsage = setGasUsage;
exports.withdrawFee = withdrawFee;
exports.gasUsage = gasUsage;
exports.lpAmount = lpAmount;
exports.rewardDebt = rewardDebt;
exports.claimAdminFee = claimAdminFee;
exports.claimReward = claimReward;
exports.setAdminFeeShareBp = setAdminFeeShareBp;
exports.adminFeeShareBp = adminFeeShareBp;
exports.setBalanceRatioMinBp = setBalanceRatioMinBp;
exports.pool = pool;
exports.adjustTotalLpAmount = adjustTotalLpAmount;
exports.canDeposit = canDeposit;
exports.canWithdraw = canWithdraw;
exports.feeShare = feeShare;
exports.setFeeShare = setFeeShare;
exports.startDeposit = startDeposit;
exports.startWithdraw = startWithdraw;
exports.stopDeposit = stopDeposit;
exports.stopWithdraw = stopWithdraw;
exports.addBridge = addBridge;
exports.addBridgeToken = addBridgeToken;
exports.addPool = addPool;
exports.canSwap = canSwap;
exports.feeValue = feeValue;
exports.getBridgeAllbridgeCost = getBridgeAllbridgeCost;
exports.getBridgeCost = getBridgeCost;
exports.getBridgeWormholeCost = getBridgeWormholeCost;
exports.isProcessedMessage = isProcessedMessage;
exports.receiveTokensWormhole = receiveTokensWormhole;
exports.removeBridge = removeBridge;
exports.removeBridgeToken = removeBridgeToken;
exports.setRebalancer = setRebalancer;
exports.startSwap = startSwap;
exports.stopSwap = stopSwap;
exports.swapAndBridgeWormhole = swapAndBridgeWormhole;
exports.newPool = newPool;
exports.newUserDeposit = newUserDeposit;
exports.poolA = poolA;
exports.poolBalance = poolBalance;
exports.poolD = poolD;
exports.poolDecimals = poolDecimals;
exports.poolLpSupply = poolLpSupply;
exports.poolPendingRewards = poolPendingRewards;
exports.poolTokenBalance = poolTokenBalance;
exports.poolVusdBalance = poolVusdBalance;
exports.receiveTokens = receiveTokens;
exports.swapAndBridge = swapAndBridge;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function destroyEmpty(tx, typeArg, userDeposit) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::destroy_empty`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, userDeposit)],
    });
}
function swap(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::swap`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.coin), (0, util_1.pure)(tx, args.receiveAmountMin, `u64`)],
    });
}
function deposit(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::deposit`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.userDeposit), (0, util_1.obj)(tx, args.coin)],
    });
}
function withdraw(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.userDeposit), (0, util_1.pure)(tx, args.amountLp, `u64`)],
    });
}
function depositFee(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::deposit_fee`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.coin)],
    });
}
function migrate(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::migrate`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge)],
    });
}
function setGasUsage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::set_gas_usage`,
        arguments: [
            (0, util_1.obj)(tx, args.adminCap),
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.pure)(tx, args.chainId, `u8`),
            (0, util_1.pure)(tx, args.value, `u64`),
        ],
    });
}
function withdrawFee(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::withdraw_fee`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function gasUsage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::gas_usage`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function lpAmount(tx, typeArg, userDeposit) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::lp_amount`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, userDeposit)],
    });
}
function rewardDebt(tx, typeArg, userDeposit) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::reward_debt`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, userDeposit)],
    });
}
function claimAdminFee(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::claim_admin_fee`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge)],
    });
}
function claimReward(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::claim_reward`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.userDeposit)],
    });
}
function setAdminFeeShareBp(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::set_admin_fee_share_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.adminFeeShareBp, `u64`)],
    });
}
function adminFeeShareBp(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::admin_fee_share_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function setBalanceRatioMinBp(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::set_balance_ratio_min_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.balanceRatioMinBp, `u64`)],
    });
}
function pool(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::pool`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function adjustTotalLpAmount(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::adjust_total_lp_amount`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.userDeposit)],
    });
}
function canDeposit(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::can_deposit`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function canWithdraw(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::can_withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function feeShare(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::fee_share`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function setFeeShare(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::set_fee_share`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.feeShareBp, `u64`)],
    });
}
function startDeposit(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::start_deposit`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge)],
    });
}
function startWithdraw(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::start_withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge)],
    });
}
function stopDeposit(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::stop_deposit`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.stopCap), (0, util_1.obj)(tx, args.bridge)],
    });
}
function stopWithdraw(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::stop_withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.stopCap), (0, util_1.obj)(tx, args.bridge)],
    });
}
function addBridge(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::add_bridge`,
        arguments: [
            (0, util_1.obj)(tx, args.adminCap),
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.pure)(tx, args.chainId, `u8`),
            (0, util_1.obj)(tx, args.bridgeAddress),
        ],
    });
}
function addBridgeToken(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::add_bridge_token`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`), (0, util_1.obj)(tx, args.tokenAddress)],
    });
}
function addPool(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::add_pool`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.pool)],
    });
}
function canSwap(tx, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::can_swap`,
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function feeValue(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::fee_value`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function getBridgeAllbridgeCost(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::get_bridge_allbridge_cost`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.messenger), (0, util_1.obj)(tx, args.gasOracle), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function getBridgeCost(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::get_bridge_cost`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.gasOracle), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function getBridgeWormholeCost(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::get_bridge_wormhole_cost`,
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.obj)(tx, args.wormholeState),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.pure)(tx, args.chainId, `u8`),
        ],
    });
}
function isProcessedMessage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::is_processed_message`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.message)],
    });
}
function receiveTokensWormhole(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::receive_tokens_wormhole`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.pure)(tx, args.amount, `u64`),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.sourceChainId, `u8`),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.pure)(tx, args.receiveAmountMin, `u64`),
            (0, util_1.obj)(tx, args.extraGasCoin),
        ],
    });
}
function removeBridge(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::remove_bridge`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function removeBridgeToken(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::remove_bridge_token`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`), (0, util_1.obj)(tx, args.tokenAddress)],
    });
}
function setRebalancer(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::set_rebalancer`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.rebalancer, `address`)],
    });
}
function startSwap(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::start_swap`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge)],
    });
}
function stopSwap(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::stop_swap`,
        arguments: [(0, util_1.obj)(tx, args.stopSwapCap), (0, util_1.obj)(tx, args.bridge)],
    });
}
function swapAndBridgeWormhole(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::swap_and_bridge_wormhole`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.obj)(tx, args.wormholeState),
            (0, util_1.obj)(tx, args.theClock),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.obj)(tx, args.amount),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.destinationChainId, `u8`),
            (0, util_1.obj)(tx, args.receiveToken),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.obj)(tx, args.feeSuiCoin),
            (0, util_1.obj)(tx, args.feeTokenCoin),
        ],
    });
}
function newPool(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::new_pool`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.adminCap),
            (0, util_1.obj)(tx, args.coinMetadata),
            (0, util_1.pure)(tx, args.a, `u64`),
            (0, util_1.pure)(tx, args.feeShareBp, `u64`),
        ],
    });
}
function newUserDeposit(tx, typeArg) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::new_user_deposit`,
        typeArguments: [typeArg],
        arguments: [],
    });
}
function poolA(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::pool_a`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function poolBalance(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::pool_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function poolD(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::pool_d`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function poolDecimals(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::pool_decimals`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function poolLpSupply(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::pool_lp_supply`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function poolPendingRewards(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::pool_pending_rewards`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.userDeposit)],
    });
}
function poolTokenBalance(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::pool_token_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function poolVusdBalance(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::pool_vusd_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function receiveTokens(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::receive_tokens`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.pure)(tx, args.amount, `u64`),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.sourceChainId, `u8`),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.pure)(tx, args.receiveAmountMin, `u64`),
            (0, util_1.obj)(tx, args.extraGasCoin),
        ],
    });
}
function swapAndBridge(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge_interface::swap_and_bridge`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.obj)(tx, args.amount),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.destinationChainId, `u8`),
            (0, util_1.obj)(tx, args.receiveToken),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.obj)(tx, args.feeSuiCoin),
            (0, util_1.obj)(tx, args.feeTokenCoin),
        ],
    });
}
//# sourceMappingURL=functions.js.map