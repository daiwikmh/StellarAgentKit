{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/wormhole-messenger/wormhole-messenger/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function getId(tx: Transaction, messenger: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::get_id`,\n    arguments: [obj(tx, messenger)],\n  });\n}\n\nexport function getVersion(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::get_version`,\n    arguments: [],\n  });\n}\n\nexport function init(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::init`,\n    arguments: [],\n  });\n}\n\nexport interface MigrateArgs {\n  adminCap: TransactionObjectInput;\n  wormholeMessenger: TransactionObjectInput;\n}\n\nexport function migrate(tx: Transaction, args: MigrateArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::migrate`,\n    arguments: [obj(tx, args.adminCap), obj(tx, args.wormholeMessenger)],\n  });\n}\n\nexport function gasBalanceValue(tx: Transaction, messenger: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::gas_balance_value`,\n    arguments: [obj(tx, messenger)],\n  });\n}\n\nexport function getGasUsage(tx: Transaction, messenger: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::get_gas_usage`,\n    arguments: [obj(tx, messenger)],\n  });\n}\n\nexport function getOtherChainIds(tx: Transaction, messenger: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::get_other_chain_ids`,\n    arguments: [obj(tx, messenger)],\n  });\n}\n\nexport function getOtherWormholeMessengers(tx: Transaction, messenger: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::get_other_wormhole_messengers`,\n    arguments: [obj(tx, messenger)],\n  });\n}\n\nexport function getReceivedMessages(tx: Transaction, messenger: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::get_received_messages`,\n    arguments: [obj(tx, messenger)],\n  });\n}\n\nexport function getSentMessages(tx: Transaction, messenger: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::get_sent_messages`,\n    arguments: [obj(tx, messenger)],\n  });\n}\n\nexport interface GetTransactionCostArgs {\n  messenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getTransactionCost(tx: Transaction, args: GetTransactionCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::get_transaction_cost`,\n    arguments: [\n      obj(tx, args.messenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.gasOracle),\n      pure(tx, args.chainId, `u8`),\n    ],\n  });\n}\n\nexport interface InitEmitterArgs {\n  whMessenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n}\n\nexport function initEmitter(tx: Transaction, args: InitEmitterArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::init_emitter`,\n    arguments: [obj(tx, args.whMessenger), obj(tx, args.wormholeState)],\n  });\n}\n\nexport interface ReceiveMessageArgs {\n  whMessenger: TransactionObjectInput;\n  encodedMsg: Array<number | TransactionArgument> | TransactionArgument;\n  wormholeState: TransactionObjectInput;\n  theClock: TransactionObjectInput;\n}\n\nexport function receiveMessage(tx: Transaction, args: ReceiveMessageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::receive_message`,\n    arguments: [\n      obj(tx, args.whMessenger),\n      pure(tx, args.encodedMsg, `vector<u8>`),\n      obj(tx, args.wormholeState),\n      obj(tx, args.theClock),\n    ],\n  });\n}\n\nexport interface ReceiveMessageInnerArgs {\n  whMessenger: TransactionObjectInput;\n  sequence: bigint | TransactionArgument;\n  emitterChainId: number | TransactionArgument;\n  emitterAddress: TransactionObjectInput;\n  payload: TransactionObjectInput;\n}\n\nexport function receiveMessageInner(tx: Transaction, args: ReceiveMessageInnerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::receive_message_inner`,\n    arguments: [\n      obj(tx, args.whMessenger),\n      pure(tx, args.sequence, `u64`),\n      pure(tx, args.emitterChainId, `u16`),\n      obj(tx, args.emitterAddress),\n      obj(tx, args.payload),\n    ],\n  });\n}\n\nexport interface RegisterWormholeMessengerArgs {\n  whMessenger: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  whAddress: TransactionObjectInput;\n}\n\nexport function registerWormholeMessenger(tx: Transaction, args: RegisterWormholeMessengerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::register_wormhole_messenger`,\n    arguments: [obj(tx, args.whMessenger), pure(tx, args.chainId, `u16`), obj(tx, args.whAddress)],\n  });\n}\n\nexport interface SendMessageArgs {\n  whMessenger: TransactionObjectInput;\n  wormholeState: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  payload: TransactionObjectInput;\n  sender: TransactionObjectInput;\n  theClock: TransactionObjectInput;\n  coin: TransactionObjectInput;\n}\n\nexport function sendMessage(tx: Transaction, args: SendMessageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::send_message`,\n    arguments: [\n      obj(tx, args.whMessenger),\n      obj(tx, args.wormholeState),\n      obj(tx, args.gasOracle),\n      obj(tx, args.payload),\n      obj(tx, args.sender),\n      obj(tx, args.theClock),\n      obj(tx, args.coin),\n    ],\n  });\n}\n\nexport interface SetGasUsageArgs {\n  whMessenger: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  gasAmount: bigint | TransactionArgument;\n}\n\nexport function setGasUsage(tx: Transaction, args: SetGasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::set_gas_usage`,\n    arguments: [obj(tx, args.whMessenger), pure(tx, args.chainId, `u8`), pure(tx, args.gasAmount, `u64`)],\n  });\n}\n\nexport interface SetOtherChainsArgs {\n  whMessenger: TransactionObjectInput;\n  otherChainIds: Array<boolean | TransactionArgument> | TransactionArgument;\n}\n\nexport function setOtherChains(tx: Transaction, args: SetOtherChainsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::set_other_chains`,\n    arguments: [obj(tx, args.whMessenger), pure(tx, args.otherChainIds, `vector<bool>`)],\n  });\n}\n\nexport interface UnregisterWormholeMessengerArgs {\n  whMessenger: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function unregisterWormholeMessenger(tx: Transaction, args: UnregisterWormholeMessengerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::unregister_wormhole_messenger`,\n    arguments: [obj(tx, args.whMessenger), pure(tx, args.chainId, `u16`)],\n  });\n}\n\nexport interface WithdrawFeeArgs {\n  whMessenger: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function withdrawFee(tx: Transaction, args: WithdrawFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::wormhole_messenger::withdraw_fee`,\n    arguments: [obj(tx, args.whMessenger), pure(tx, args.amount, `u64`)],\n  });\n}\n"]}