"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.value = value;
exports.take = take;
exports.balance = balance;
exports.destroyZero = destroyZero;
exports.join = join;
exports.split = split;
exports.supply = supply;
exports.zero = zero;
exports.balanceMut = balanceMut;
exports.burn = burn;
exports.createCurrency = createCurrency;
exports.createRegulatedCurrency = createRegulatedCurrency;
exports.createRegulatedCurrencyV2 = createRegulatedCurrencyV2;
exports.denyListAdd = denyListAdd;
exports.denyListContains = denyListContains;
exports.denyListRemove = denyListRemove;
exports.denyListV2Add = denyListV2Add;
exports.denyListV2ContainsCurrentEpoch = denyListV2ContainsCurrentEpoch;
exports.denyListV2ContainsNextEpoch = denyListV2ContainsNextEpoch;
exports.denyListV2DisableGlobalPause = denyListV2DisableGlobalPause;
exports.denyListV2EnableGlobalPause = denyListV2EnableGlobalPause;
exports.denyListV2IsGlobalPauseEnabledCurrentEpoch = denyListV2IsGlobalPauseEnabledCurrentEpoch;
exports.denyListV2IsGlobalPauseEnabledNextEpoch = denyListV2IsGlobalPauseEnabledNextEpoch;
exports.denyListV2Remove = denyListV2Remove;
exports.divideIntoN = divideIntoN;
exports.fromBalance = fromBalance;
exports.getDecimals = getDecimals;
exports.getDescription = getDescription;
exports.getIconUrl = getIconUrl;
exports.getName = getName;
exports.getSymbol = getSymbol;
exports.intoBalance = intoBalance;
exports.migrateRegulatedCurrencyToV2 = migrateRegulatedCurrencyToV2;
exports.mint = mint;
exports.mintAndTransfer = mintAndTransfer;
exports.mintBalance = mintBalance;
exports.put = put;
exports.supplyImmut = supplyImmut;
exports.supplyMut = supplyMut;
exports.totalSupply = totalSupply;
exports.treasuryIntoSupply = treasuryIntoSupply;
exports.updateDescription = updateDescription;
exports.updateIconUrl = updateIconUrl;
exports.updateName = updateName;
exports.updateSymbol = updateSymbol;
// @ts-nocheck
const __1 = require("..");
const structs_1 = require("../../_dependencies/source/0x1/ascii/structs");
const structs_2 = require("../../_dependencies/source/0x1/string/structs");
const util_1 = require("../../_framework/util");
const structs_3 = require("../url/structs");
function value(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::value`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function take(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::take`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.balance), (0, util_1.pure)(tx, args.value, `u64`)],
    });
}
function balance(tx, typeArg, coin) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, coin)],
    });
}
function destroyZero(tx, typeArg, c) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::destroy_zero`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, c)],
    });
}
function join(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::join`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.c)],
    });
}
function split(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::split`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.splitAmount, `u64`)],
    });
}
function supply(tx, typeArg, treasury) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::supply`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, treasury)],
    });
}
function zero(tx, typeArg) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::zero`,
        typeArguments: [typeArg],
        arguments: [],
    });
}
function balanceMut(tx, typeArg, coin) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::balance_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, coin)],
    });
}
function burn(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::burn`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.c)],
    });
}
function createCurrency(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::create_currency`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.generic)(tx, `${typeArg}`, args.witness),
            (0, util_1.pure)(tx, args.decimals, `u8`),
            (0, util_1.pure)(tx, args.symbol, `vector<u8>`),
            (0, util_1.pure)(tx, args.name, `vector<u8>`),
            (0, util_1.pure)(tx, args.description, `vector<u8>`),
            (0, util_1.option)(tx, `${structs_3.Url.$typeName}`, args.iconUrl),
        ],
    });
}
function createRegulatedCurrency(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::create_regulated_currency`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.generic)(tx, `${typeArg}`, args.witness),
            (0, util_1.pure)(tx, args.decimals, `u8`),
            (0, util_1.pure)(tx, args.symbol, `vector<u8>`),
            (0, util_1.pure)(tx, args.name, `vector<u8>`),
            (0, util_1.pure)(tx, args.description, `vector<u8>`),
            (0, util_1.option)(tx, `${structs_3.Url.$typeName}`, args.iconUrl),
        ],
    });
}
function createRegulatedCurrencyV2(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::create_regulated_currency_v2`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.generic)(tx, `${typeArg}`, args.witness),
            (0, util_1.pure)(tx, args.decimals, `u8`),
            (0, util_1.pure)(tx, args.symbol, `vector<u8>`),
            (0, util_1.pure)(tx, args.name, `vector<u8>`),
            (0, util_1.pure)(tx, args.description, `vector<u8>`),
            (0, util_1.option)(tx, `${structs_3.Url.$typeName}`, args.iconUrl),
            (0, util_1.pure)(tx, args.allowGlobalPause, `bool`),
        ],
    });
}
function denyListAdd(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_add`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.obj)(tx, args.denyCap), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function denyListContains(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_contains`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function denyListRemove(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_remove`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.obj)(tx, args.denyCap), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function denyListV2Add(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_v2_add`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.obj)(tx, args.denyCap), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function denyListV2ContainsCurrentEpoch(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_v2_contains_current_epoch`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function denyListV2ContainsNextEpoch(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_v2_contains_next_epoch`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function denyListV2DisableGlobalPause(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_v2_disable_global_pause`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.obj)(tx, args.denyCap)],
    });
}
function denyListV2EnableGlobalPause(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_v2_enable_global_pause`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.obj)(tx, args.denyCap)],
    });
}
function denyListV2IsGlobalPauseEnabledCurrentEpoch(tx, typeArg, denyList) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_v2_is_global_pause_enabled_current_epoch`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, denyList)],
    });
}
function denyListV2IsGlobalPauseEnabledNextEpoch(tx, typeArg, denyList) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_v2_is_global_pause_enabled_next_epoch`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, denyList)],
    });
}
function denyListV2Remove(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::deny_list_v2_remove`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.obj)(tx, args.denyCap), (0, util_1.pure)(tx, args.addr, `address`)],
    });
}
function divideIntoN(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::divide_into_n`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.n, `u64`)],
    });
}
function fromBalance(tx, typeArg, balance) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::from_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, balance)],
    });
}
function getDecimals(tx, typeArg, metadata) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::get_decimals`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, metadata)],
    });
}
function getDescription(tx, typeArg, metadata) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::get_description`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, metadata)],
    });
}
function getIconUrl(tx, typeArg, metadata) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::get_icon_url`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, metadata)],
    });
}
function getName(tx, typeArg, metadata) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::get_name`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, metadata)],
    });
}
function getSymbol(tx, typeArg, metadata) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::get_symbol`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, metadata)],
    });
}
function intoBalance(tx, typeArg, coin) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::into_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, coin)],
    });
}
function migrateRegulatedCurrencyToV2(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::migrate_regulated_currency_to_v2`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.denyList), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.allowGlobalPause, `bool`)],
    });
}
function mint(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::mint`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.value, `u64`)],
    });
}
function mintAndTransfer(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::mint_and_transfer`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.c), (0, util_1.pure)(tx, args.amount, `u64`), (0, util_1.pure)(tx, args.recipient, `address`)],
    });
}
function mintBalance(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::mint_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.value, `u64`)],
    });
}
function put(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::put`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.balance), (0, util_1.obj)(tx, args.coin)],
    });
}
function supplyImmut(tx, typeArg, treasury) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::supply_immut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, treasury)],
    });
}
function supplyMut(tx, typeArg, treasury) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::supply_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, treasury)],
    });
}
function totalSupply(tx, typeArg, cap) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::total_supply`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, cap)],
    });
}
function treasuryIntoSupply(tx, typeArg, treasury) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::treasury_into_supply`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, treasury)],
    });
}
function updateDescription(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::update_description`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.treasury), (0, util_1.obj)(tx, args.metadata), (0, util_1.pure)(tx, args.description, `${structs_2.String.$typeName}`)],
    });
}
function updateIconUrl(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::update_icon_url`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.treasury), (0, util_1.obj)(tx, args.metadata), (0, util_1.pure)(tx, args.url, `${structs_1.String.$typeName}`)],
    });
}
function updateName(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::update_name`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.treasury), (0, util_1.obj)(tx, args.metadata), (0, util_1.pure)(tx, args.name, `${structs_2.String.$typeName}`)],
    });
}
function updateSymbol(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::coin::update_symbol`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.treasury), (0, util_1.obj)(tx, args.metadata), (0, util_1.pure)(tx, args.symbol, `${structs_1.String.$typeName}`)],
    });
}
//# sourceMappingURL=functions.js.map