{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/groth16/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  fieldToJSON,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { Vector } from \"../../_framework/vector\";\nimport { PKG_V26 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Curve =============================== */\n\nexport function isCurve(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::groth16::Curve`;\n}\n\nexport interface CurveFields {\n  id: ToField<\"u8\">;\n}\n\nexport type CurveReified = Reified<Curve, CurveFields>;\n\nexport class Curve implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::groth16::Curve`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Curve.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Curve.$isPhantom;\n\n  readonly id: ToField<\"u8\">;\n\n  private constructor(typeArgs: [], fields: CurveFields) {\n    this.$fullTypeName = composeSuiType(Curve.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified(): CurveReified {\n    return {\n      typeName: Curve.$typeName,\n      fullTypeName: composeSuiType(Curve.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Curve.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Curve.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Curve.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Curve.fromBcs(data),\n      bcs: Curve.bcs,\n      fromJSONField: (field: any) => Curve.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Curve.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Curve.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Curve.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Curve.fetch(client, id),\n      new: (fields: CurveFields) => {\n        return new Curve([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Curve.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Curve>> {\n    return phantom(Curve.reified());\n  }\n  static get p() {\n    return Curve.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Curve\", {\n      id: bcs.u8(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Curve {\n    return Curve.reified().new({ id: decodeFromFields(\"u8\", fields.id) });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Curve {\n    if (!isCurve(item.type)) {\n      throw new Error(\"not a Curve type\");\n    }\n\n    return Curve.reified().new({\n      id: decodeFromFieldsWithTypes(\"u8\", item.fields.id),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Curve {\n    return Curve.fromFields(Curve.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Curve {\n    return Curve.reified().new({ id: decodeFromJSONField(\"u8\", field.id) });\n  }\n\n  static fromJSON(json: Record<string, any>): Curve {\n    if (json.$typeName !== Curve.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Curve.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Curve {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isCurve(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Curve object`);\n    }\n    return Curve.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Curve {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isCurve(data.bcs.type)) {\n        throw new Error(`object at is not a Curve object`);\n      }\n\n      return Curve.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Curve.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Curve> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Curve object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isCurve(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Curve object`);\n    }\n\n    return Curve.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== PreparedVerifyingKey =============================== */\n\nexport function isPreparedVerifyingKey(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::groth16::PreparedVerifyingKey`;\n}\n\nexport interface PreparedVerifyingKeyFields {\n  vkGammaAbcG1Bytes: ToField<Vector<\"u8\">>;\n  alphaG1BetaG2Bytes: ToField<Vector<\"u8\">>;\n  gammaG2NegPcBytes: ToField<Vector<\"u8\">>;\n  deltaG2NegPcBytes: ToField<Vector<\"u8\">>;\n}\n\nexport type PreparedVerifyingKeyReified = Reified<PreparedVerifyingKey, PreparedVerifyingKeyFields>;\n\nexport class PreparedVerifyingKey implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::groth16::PreparedVerifyingKey`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = PreparedVerifyingKey.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = PreparedVerifyingKey.$isPhantom;\n\n  readonly vkGammaAbcG1Bytes: ToField<Vector<\"u8\">>;\n  readonly alphaG1BetaG2Bytes: ToField<Vector<\"u8\">>;\n  readonly gammaG2NegPcBytes: ToField<Vector<\"u8\">>;\n  readonly deltaG2NegPcBytes: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: PreparedVerifyingKeyFields) {\n    this.$fullTypeName = composeSuiType(PreparedVerifyingKey.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.vkGammaAbcG1Bytes = fields.vkGammaAbcG1Bytes;\n    this.alphaG1BetaG2Bytes = fields.alphaG1BetaG2Bytes;\n    this.gammaG2NegPcBytes = fields.gammaG2NegPcBytes;\n    this.deltaG2NegPcBytes = fields.deltaG2NegPcBytes;\n  }\n\n  static reified(): PreparedVerifyingKeyReified {\n    return {\n      typeName: PreparedVerifyingKey.$typeName,\n      fullTypeName: composeSuiType(PreparedVerifyingKey.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: PreparedVerifyingKey.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => PreparedVerifyingKey.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => PreparedVerifyingKey.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => PreparedVerifyingKey.fromBcs(data),\n      bcs: PreparedVerifyingKey.bcs,\n      fromJSONField: (field: any) => PreparedVerifyingKey.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => PreparedVerifyingKey.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => PreparedVerifyingKey.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => PreparedVerifyingKey.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => PreparedVerifyingKey.fetch(client, id),\n      new: (fields: PreparedVerifyingKeyFields) => {\n        return new PreparedVerifyingKey([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return PreparedVerifyingKey.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<PreparedVerifyingKey>> {\n    return phantom(PreparedVerifyingKey.reified());\n  }\n  static get p() {\n    return PreparedVerifyingKey.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"PreparedVerifyingKey\", {\n      vk_gamma_abc_g1_bytes: bcs.vector(bcs.u8()),\n      alpha_g1_beta_g2_bytes: bcs.vector(bcs.u8()),\n      gamma_g2_neg_pc_bytes: bcs.vector(bcs.u8()),\n      delta_g2_neg_pc_bytes: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): PreparedVerifyingKey {\n    return PreparedVerifyingKey.reified().new({\n      vkGammaAbcG1Bytes: decodeFromFields(reified.vector(\"u8\"), fields.vk_gamma_abc_g1_bytes),\n      alphaG1BetaG2Bytes: decodeFromFields(reified.vector(\"u8\"), fields.alpha_g1_beta_g2_bytes),\n      gammaG2NegPcBytes: decodeFromFields(reified.vector(\"u8\"), fields.gamma_g2_neg_pc_bytes),\n      deltaG2NegPcBytes: decodeFromFields(reified.vector(\"u8\"), fields.delta_g2_neg_pc_bytes),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): PreparedVerifyingKey {\n    if (!isPreparedVerifyingKey(item.type)) {\n      throw new Error(\"not a PreparedVerifyingKey type\");\n    }\n\n    return PreparedVerifyingKey.reified().new({\n      vkGammaAbcG1Bytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.vk_gamma_abc_g1_bytes),\n      alphaG1BetaG2Bytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.alpha_g1_beta_g2_bytes),\n      gammaG2NegPcBytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.gamma_g2_neg_pc_bytes),\n      deltaG2NegPcBytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.delta_g2_neg_pc_bytes),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): PreparedVerifyingKey {\n    return PreparedVerifyingKey.fromFields(PreparedVerifyingKey.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      vkGammaAbcG1Bytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.vkGammaAbcG1Bytes),\n      alphaG1BetaG2Bytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.alphaG1BetaG2Bytes),\n      gammaG2NegPcBytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.gammaG2NegPcBytes),\n      deltaG2NegPcBytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.deltaG2NegPcBytes),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): PreparedVerifyingKey {\n    return PreparedVerifyingKey.reified().new({\n      vkGammaAbcG1Bytes: decodeFromJSONField(reified.vector(\"u8\"), field.vkGammaAbcG1Bytes),\n      alphaG1BetaG2Bytes: decodeFromJSONField(reified.vector(\"u8\"), field.alphaG1BetaG2Bytes),\n      gammaG2NegPcBytes: decodeFromJSONField(reified.vector(\"u8\"), field.gammaG2NegPcBytes),\n      deltaG2NegPcBytes: decodeFromJSONField(reified.vector(\"u8\"), field.deltaG2NegPcBytes),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): PreparedVerifyingKey {\n    if (json.$typeName !== PreparedVerifyingKey.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return PreparedVerifyingKey.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): PreparedVerifyingKey {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isPreparedVerifyingKey(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a PreparedVerifyingKey object`);\n    }\n    return PreparedVerifyingKey.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): PreparedVerifyingKey {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isPreparedVerifyingKey(data.bcs.type)) {\n        throw new Error(`object at is not a PreparedVerifyingKey object`);\n      }\n\n      return PreparedVerifyingKey.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return PreparedVerifyingKey.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<PreparedVerifyingKey> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching PreparedVerifyingKey object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isPreparedVerifyingKey(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a PreparedVerifyingKey object`);\n    }\n\n    return PreparedVerifyingKey.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== ProofPoints =============================== */\n\nexport function isProofPoints(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::groth16::ProofPoints`;\n}\n\nexport interface ProofPointsFields {\n  bytes: ToField<Vector<\"u8\">>;\n}\n\nexport type ProofPointsReified = Reified<ProofPoints, ProofPointsFields>;\n\nexport class ProofPoints implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::groth16::ProofPoints`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = ProofPoints.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = ProofPoints.$isPhantom;\n\n  readonly bytes: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: ProofPointsFields) {\n    this.$fullTypeName = composeSuiType(ProofPoints.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.bytes = fields.bytes;\n  }\n\n  static reified(): ProofPointsReified {\n    return {\n      typeName: ProofPoints.$typeName,\n      fullTypeName: composeSuiType(ProofPoints.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: ProofPoints.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => ProofPoints.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => ProofPoints.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => ProofPoints.fromBcs(data),\n      bcs: ProofPoints.bcs,\n      fromJSONField: (field: any) => ProofPoints.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => ProofPoints.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => ProofPoints.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => ProofPoints.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => ProofPoints.fetch(client, id),\n      new: (fields: ProofPointsFields) => {\n        return new ProofPoints([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return ProofPoints.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<ProofPoints>> {\n    return phantom(ProofPoints.reified());\n  }\n  static get p() {\n    return ProofPoints.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"ProofPoints\", {\n      bytes: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): ProofPoints {\n    return ProofPoints.reified().new({\n      bytes: decodeFromFields(reified.vector(\"u8\"), fields.bytes),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): ProofPoints {\n    if (!isProofPoints(item.type)) {\n      throw new Error(\"not a ProofPoints type\");\n    }\n\n    return ProofPoints.reified().new({\n      bytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.bytes),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): ProofPoints {\n    return ProofPoints.fromFields(ProofPoints.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      bytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.bytes),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): ProofPoints {\n    return ProofPoints.reified().new({\n      bytes: decodeFromJSONField(reified.vector(\"u8\"), field.bytes),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): ProofPoints {\n    if (json.$typeName !== ProofPoints.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return ProofPoints.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): ProofPoints {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isProofPoints(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a ProofPoints object`);\n    }\n    return ProofPoints.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): ProofPoints {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isProofPoints(data.bcs.type)) {\n        throw new Error(`object at is not a ProofPoints object`);\n      }\n\n      return ProofPoints.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return ProofPoints.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<ProofPoints> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching ProofPoints object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isProofPoints(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a ProofPoints object`);\n    }\n\n    return ProofPoints.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== PublicProofInputs =============================== */\n\nexport function isPublicProofInputs(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::groth16::PublicProofInputs`;\n}\n\nexport interface PublicProofInputsFields {\n  bytes: ToField<Vector<\"u8\">>;\n}\n\nexport type PublicProofInputsReified = Reified<PublicProofInputs, PublicProofInputsFields>;\n\nexport class PublicProofInputs implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::groth16::PublicProofInputs`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = PublicProofInputs.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = PublicProofInputs.$isPhantom;\n\n  readonly bytes: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: PublicProofInputsFields) {\n    this.$fullTypeName = composeSuiType(PublicProofInputs.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.bytes = fields.bytes;\n  }\n\n  static reified(): PublicProofInputsReified {\n    return {\n      typeName: PublicProofInputs.$typeName,\n      fullTypeName: composeSuiType(PublicProofInputs.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: PublicProofInputs.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => PublicProofInputs.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => PublicProofInputs.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => PublicProofInputs.fromBcs(data),\n      bcs: PublicProofInputs.bcs,\n      fromJSONField: (field: any) => PublicProofInputs.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => PublicProofInputs.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => PublicProofInputs.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => PublicProofInputs.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => PublicProofInputs.fetch(client, id),\n      new: (fields: PublicProofInputsFields) => {\n        return new PublicProofInputs([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return PublicProofInputs.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<PublicProofInputs>> {\n    return phantom(PublicProofInputs.reified());\n  }\n  static get p() {\n    return PublicProofInputs.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"PublicProofInputs\", {\n      bytes: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): PublicProofInputs {\n    return PublicProofInputs.reified().new({\n      bytes: decodeFromFields(reified.vector(\"u8\"), fields.bytes),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): PublicProofInputs {\n    if (!isPublicProofInputs(item.type)) {\n      throw new Error(\"not a PublicProofInputs type\");\n    }\n\n    return PublicProofInputs.reified().new({\n      bytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.bytes),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): PublicProofInputs {\n    return PublicProofInputs.fromFields(PublicProofInputs.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      bytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.bytes),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): PublicProofInputs {\n    return PublicProofInputs.reified().new({\n      bytes: decodeFromJSONField(reified.vector(\"u8\"), field.bytes),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): PublicProofInputs {\n    if (json.$typeName !== PublicProofInputs.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return PublicProofInputs.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): PublicProofInputs {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isPublicProofInputs(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a PublicProofInputs object`);\n    }\n    return PublicProofInputs.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): PublicProofInputs {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isPublicProofInputs(data.bcs.type)) {\n        throw new Error(`object at is not a PublicProofInputs object`);\n      }\n\n      return PublicProofInputs.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return PublicProofInputs.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<PublicProofInputs> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching PublicProofInputs object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isPublicProofInputs(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a PublicProofInputs object`);\n    }\n\n    return PublicProofInputs.fromSuiObjectData(res.data);\n  }\n}\n"]}