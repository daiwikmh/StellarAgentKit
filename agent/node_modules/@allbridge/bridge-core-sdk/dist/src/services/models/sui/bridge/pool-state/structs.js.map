{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/bridge/pool-state/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== PoolState =============================== */\n\nexport function isPoolState(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::pool_state::PoolState` + \"<\");\n}\n\nexport interface PoolStateFields<T extends PhantomTypeArgument> {\n  tokenBalance: ToField<\"u64\">;\n  vusdBalance: ToField<\"u64\">;\n  d: ToField<\"u64\">;\n  a: ToField<\"u64\">;\n  balanceRatioMinBp: ToField<\"u64\">;\n}\n\nexport type PoolStateReified<T extends PhantomTypeArgument> = Reified<PoolState<T>, PoolStateFields<T>>;\n\nexport class PoolState<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::pool_state::PoolState`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = PoolState.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = PoolState.$isPhantom;\n\n  readonly tokenBalance: ToField<\"u64\">;\n  readonly vusdBalance: ToField<\"u64\">;\n  readonly d: ToField<\"u64\">;\n  readonly a: ToField<\"u64\">;\n  readonly balanceRatioMinBp: ToField<\"u64\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: PoolStateFields<T>) {\n    this.$fullTypeName = composeSuiType(PoolState.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.tokenBalance = fields.tokenBalance;\n    this.vusdBalance = fields.vusdBalance;\n    this.d = fields.d;\n    this.a = fields.a;\n    this.balanceRatioMinBp = fields.balanceRatioMinBp;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): PoolStateReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: PoolState.$typeName,\n      fullTypeName: composeSuiType(PoolState.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: PoolState.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => PoolState.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => PoolState.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => PoolState.fromBcs(T, data),\n      bcs: PoolState.bcs,\n      fromJSONField: (field: any) => PoolState.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => PoolState.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => PoolState.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => PoolState.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => PoolState.fetch(client, T, id),\n      new: (fields: PoolStateFields<ToPhantomTypeArgument<T>>) => {\n        return new PoolState([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return PoolState.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<PoolState<ToPhantomTypeArgument<T>>>> {\n    return phantom(PoolState.reified(T));\n  }\n  static get p() {\n    return PoolState.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"PoolState\", {\n      token_balance: bcs.u64(),\n      vusd_balance: bcs.u64(),\n      d: bcs.u64(),\n      a: bcs.u64(),\n      balance_ratio_min_bp: bcs.u64(),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    return PoolState.reified(typeArg).new({\n      tokenBalance: decodeFromFields(\"u64\", fields.token_balance),\n      vusdBalance: decodeFromFields(\"u64\", fields.vusd_balance),\n      d: decodeFromFields(\"u64\", fields.d),\n      a: decodeFromFields(\"u64\", fields.a),\n      balanceRatioMinBp: decodeFromFields(\"u64\", fields.balance_ratio_min_bp),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    if (!isPoolState(item.type)) {\n      throw new Error(\"not a PoolState type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return PoolState.reified(typeArg).new({\n      tokenBalance: decodeFromFieldsWithTypes(\"u64\", item.fields.token_balance),\n      vusdBalance: decodeFromFieldsWithTypes(\"u64\", item.fields.vusd_balance),\n      d: decodeFromFieldsWithTypes(\"u64\", item.fields.d),\n      a: decodeFromFieldsWithTypes(\"u64\", item.fields.a),\n      balanceRatioMinBp: decodeFromFieldsWithTypes(\"u64\", item.fields.balance_ratio_min_bp),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    return PoolState.fromFields(typeArg, PoolState.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      tokenBalance: this.tokenBalance.toString(),\n      vusdBalance: this.vusdBalance.toString(),\n      d: this.d.toString(),\n      a: this.a.toString(),\n      balanceRatioMinBp: this.balanceRatioMinBp.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    return PoolState.reified(typeArg).new({\n      tokenBalance: decodeFromJSONField(\"u64\", field.tokenBalance),\n      vusdBalance: decodeFromJSONField(\"u64\", field.vusdBalance),\n      d: decodeFromJSONField(\"u64\", field.d),\n      a: decodeFromJSONField(\"u64\", field.a),\n      balanceRatioMinBp: decodeFromJSONField(\"u64\", field.balanceRatioMinBp),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== PoolState.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(PoolState.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return PoolState.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isPoolState(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a PoolState object`);\n    }\n    return PoolState.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): PoolState<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isPoolState(data.bcs.type)) {\n        throw new Error(`object at is not a PoolState object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return PoolState.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return PoolState.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<PoolState<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching PoolState object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isPoolState(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a PoolState object`);\n    }\n\n    return PoolState.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}