import * as reified from "../../_framework/reified";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr, ToTypeStr as ToPhantom } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { ObjectBag } from "../../sui/object-bag/structs";
import { UID } from "../../sui/object/structs";
import { Table } from "../../sui/table/structs";
import { FeeCollector } from "../../utils/fee-collector/structs";
import { Message } from "../../utils/message/structs";
import { Set } from "../../utils/set/structs";
import { AnotherBridge } from "../another-bridge/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isAdminCap(type: string): boolean;
export interface AdminCapFields {
    id: ToField<UID>;
}
export type AdminCapReified = Reified<AdminCap, AdminCapFields>;
export declare class AdminCap implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    private constructor();
    static reified(): AdminCapReified;
    static get r(): reified.StructClassReified<AdminCap, AdminCapFields>;
    static phantom(): PhantomReified<ToTypeStr<AdminCap>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): AdminCap;
    static fromFieldsWithTypes(item: FieldsWithTypes): AdminCap;
    static fromBcs(data: Uint8Array): AdminCap;
    toJSONField(): {
        id: UID;
    };
    toJSON(): {
        id: UID;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): AdminCap;
    static fromJSON(json: Record<string, any>): AdminCap;
    static fromSuiParsedData(content: SuiParsedData): AdminCap;
    static fromSuiObjectData(data: SuiObjectData): AdminCap;
    static fetch(client: SuiClient, id: string): Promise<AdminCap>;
}
export declare function isBridge(type: string): boolean;
export interface BridgeFields {
    id: ToField<UID>;
    pools: ToField<ObjectBag>;
    otherBridges: ToField<Table<"u8", ToPhantom<AnotherBridge>>>;
    processedMessages: ToField<Set<ToPhantom<Message>>>;
    sentMessages: ToField<Set<ToPhantom<Message>>>;
    feeCollector: ToField<FeeCollector<ToPhantom<FeeCollectorCap>>>;
    feeCollectorCap: ToField<FeeCollectorCap>;
    rebalancer: ToField<"address">;
    canSwap: ToField<"bool">;
}
export type BridgeReified = Reified<Bridge, BridgeFields>;
export declare class Bridge implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    readonly pools: ToField<ObjectBag>;
    readonly otherBridges: ToField<Table<"u8", ToPhantom<AnotherBridge>>>;
    readonly processedMessages: ToField<Set<ToPhantom<Message>>>;
    readonly sentMessages: ToField<Set<ToPhantom<Message>>>;
    readonly feeCollector: ToField<FeeCollector<ToPhantom<FeeCollectorCap>>>;
    readonly feeCollectorCap: ToField<FeeCollectorCap>;
    readonly rebalancer: ToField<"address">;
    readonly canSwap: ToField<"bool">;
    private constructor();
    static reified(): BridgeReified;
    static get r(): reified.StructClassReified<Bridge, BridgeFields>;
    static phantom(): PhantomReified<ToTypeStr<Bridge>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
        pools: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
        other_bridges: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
        processed_messages: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string;
            };
        };
        sent_messages: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string;
            };
        };
        fee_collector: {
            balances: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string;
            };
        };
        fee_collector_cap: {
            dummy_field: boolean;
        };
        rebalancer: string;
        can_swap: boolean;
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
        pools: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
        other_bridges: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
        processed_messages: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string | number | bigint;
            };
        };
        sent_messages: {
            items: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string | number | bigint;
            };
        };
        fee_collector: {
            balances: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string | number | bigint;
            };
        };
        fee_collector_cap: {
            dummy_field: boolean;
        };
        rebalancer: string;
        can_swap: boolean;
    }>;
    static fromFields(fields: Record<string, any>): Bridge;
    static fromFieldsWithTypes(item: FieldsWithTypes): Bridge;
    static fromBcs(data: Uint8Array): Bridge;
    toJSONField(): {
        id: UID;
        pools: {
            id: UID;
            size: string;
        };
        otherBridges: {
            id: UID;
            size: string;
        };
        processedMessages: {
            items: {
                id: UID;
                size: string;
            };
        };
        sentMessages: {
            items: {
                id: UID;
                size: string;
            };
        };
        feeCollector: {
            balances: {
                id: UID;
                size: string;
            };
        };
        feeCollectorCap: {
            dummyField: boolean;
        };
        rebalancer: string;
        canSwap: boolean;
    };
    toJSON(): {
        id: UID;
        pools: {
            id: UID;
            size: string;
        };
        otherBridges: {
            id: UID;
            size: string;
        };
        processedMessages: {
            items: {
                id: UID;
                size: string;
            };
        };
        sentMessages: {
            items: {
                id: UID;
                size: string;
            };
        };
        feeCollector: {
            balances: {
                id: UID;
                size: string;
            };
        };
        feeCollectorCap: {
            dummyField: boolean;
        };
        rebalancer: string;
        canSwap: boolean;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): Bridge;
    static fromJSON(json: Record<string, any>): Bridge;
    static fromSuiParsedData(content: SuiParsedData): Bridge;
    static fromSuiObjectData(data: SuiObjectData): Bridge;
    static fetch(client: SuiClient, id: string): Promise<Bridge>;
}
export declare function isFeeCollectorCap(type: string): boolean;
export interface FeeCollectorCapFields {
    dummyField: ToField<"bool">;
}
export type FeeCollectorCapReified = Reified<FeeCollectorCap, FeeCollectorCapFields>;
export declare class FeeCollectorCap implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly dummyField: ToField<"bool">;
    private constructor();
    static reified(): FeeCollectorCapReified;
    static get r(): reified.StructClassReified<FeeCollectorCap, FeeCollectorCapFields>;
    static phantom(): PhantomReified<ToTypeStr<FeeCollectorCap>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        dummy_field: boolean;
    }, {
        dummy_field: boolean;
    }>;
    static fromFields(fields: Record<string, any>): FeeCollectorCap;
    static fromFieldsWithTypes(item: FieldsWithTypes): FeeCollectorCap;
    static fromBcs(data: Uint8Array): FeeCollectorCap;
    toJSONField(): {
        dummyField: boolean;
    };
    toJSON(): {
        dummyField: boolean;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): FeeCollectorCap;
    static fromJSON(json: Record<string, any>): FeeCollectorCap;
    static fromSuiParsedData(content: SuiParsedData): FeeCollectorCap;
    static fromSuiObjectData(data: SuiObjectData): FeeCollectorCap;
    static fetch(client: SuiClient, id: string): Promise<FeeCollectorCap>;
}
export declare function isStopSwapCap(type: string): boolean;
export interface StopSwapCapFields {
    id: ToField<UID>;
}
export type StopSwapCapReified = Reified<StopSwapCap, StopSwapCapFields>;
export declare class StopSwapCap implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    private constructor();
    static reified(): StopSwapCapReified;
    static get r(): reified.StructClassReified<StopSwapCap, StopSwapCapFields>;
    static phantom(): PhantomReified<ToTypeStr<StopSwapCap>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): StopSwapCap;
    static fromFieldsWithTypes(item: FieldsWithTypes): StopSwapCap;
    static fromBcs(data: Uint8Array): StopSwapCap;
    toJSONField(): {
        id: UID;
    };
    toJSON(): {
        id: UID;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): StopSwapCap;
    static fromJSON(json: Record<string, any>): StopSwapCap;
    static fromSuiParsedData(content: SuiParsedData): StopSwapCap;
    static fromSuiObjectData(data: SuiObjectData): StopSwapCap;
    static fetch(client: SuiClient, id: string): Promise<StopSwapCap>;
}
