{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/transfer-policy/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { Option } from \"../../_dependencies/source/0x1/option/structs\";\nimport { GenericArg, generic, obj, pure } from \"../../_framework/util\";\nimport { ID } from \"../object/structs\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function default_(tx: Transaction, typeArg: string, pub: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::default`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pub)],\n  });\n}\n\nexport function new_(tx: Transaction, typeArg: string, pub: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::new`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, pub)],\n  });\n}\n\nexport function uid(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::uid`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface WithdrawArgs {\n  self: TransactionObjectInput;\n  cap: TransactionObjectInput;\n  amount: bigint | TransactionArgument | TransactionArgument | null;\n}\n\nexport function withdraw(tx: Transaction, typeArg: string, args: WithdrawArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), obj(tx, args.cap), pure(tx, args.amount, `${Option.$typeName}<u64>`)],\n  });\n}\n\nexport interface AddReceiptArgs {\n  rule: GenericArg;\n  request: TransactionObjectInput;\n}\n\nexport function addReceipt(tx: Transaction, typeArgs: [string, string], args: AddReceiptArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::add_receipt`,\n    typeArguments: typeArgs,\n    arguments: [generic(tx, `${typeArgs[1]}`, args.rule), obj(tx, args.request)],\n  });\n}\n\nexport interface AddRuleArgs {\n  rule: GenericArg;\n  policy: TransactionObjectInput;\n  cap: TransactionObjectInput;\n  cfg: GenericArg;\n}\n\nexport function addRule(tx: Transaction, typeArgs: [string, string, string], args: AddRuleArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::add_rule`,\n    typeArguments: typeArgs,\n    arguments: [\n      generic(tx, `${typeArgs[1]}`, args.rule),\n      obj(tx, args.policy),\n      obj(tx, args.cap),\n      generic(tx, `${typeArgs[2]}`, args.cfg),\n    ],\n  });\n}\n\nexport interface AddToBalanceArgs {\n  rule: GenericArg;\n  policy: TransactionObjectInput;\n  coin: TransactionObjectInput;\n}\n\nexport function addToBalance(tx: Transaction, typeArgs: [string, string], args: AddToBalanceArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::add_to_balance`,\n    typeArguments: typeArgs,\n    arguments: [generic(tx, `${typeArgs[1]}`, args.rule), obj(tx, args.policy), obj(tx, args.coin)],\n  });\n}\n\nexport interface ConfirmRequestArgs {\n  self: TransactionObjectInput;\n  request: TransactionObjectInput;\n}\n\nexport function confirmRequest(tx: Transaction, typeArg: string, args: ConfirmRequestArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::confirm_request`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), obj(tx, args.request)],\n  });\n}\n\nexport interface DestroyAndWithdrawArgs {\n  self: TransactionObjectInput;\n  cap: TransactionObjectInput;\n}\n\nexport function destroyAndWithdraw(tx: Transaction, typeArg: string, args: DestroyAndWithdrawArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::destroy_and_withdraw`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), obj(tx, args.cap)],\n  });\n}\n\nexport function from(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::from`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface GetRuleArgs {\n  rule: GenericArg;\n  policy: TransactionObjectInput;\n}\n\nexport function getRule(tx: Transaction, typeArgs: [string, string, string], args: GetRuleArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::get_rule`,\n    typeArguments: typeArgs,\n    arguments: [generic(tx, `${typeArgs[1]}`, args.rule), obj(tx, args.policy)],\n  });\n}\n\nexport function hasRule(tx: Transaction, typeArgs: [string, string], policy: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::has_rule`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, policy)],\n  });\n}\n\nexport function item(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::item`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface NewRequestArgs {\n  item: string | TransactionArgument;\n  paid: bigint | TransactionArgument;\n  from: string | TransactionArgument;\n}\n\nexport function newRequest(tx: Transaction, typeArg: string, args: NewRequestArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::new_request`,\n    typeArguments: [typeArg],\n    arguments: [\n      pure(tx, args.item, `${ID.$typeName}`),\n      pure(tx, args.paid, `u64`),\n      pure(tx, args.from, `${ID.$typeName}`),\n    ],\n  });\n}\n\nexport function paid(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::paid`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface RemoveRuleArgs {\n  policy: TransactionObjectInput;\n  cap: TransactionObjectInput;\n}\n\nexport function removeRule(tx: Transaction, typeArgs: [string, string, string], args: RemoveRuleArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::remove_rule`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.policy), obj(tx, args.cap)],\n  });\n}\n\nexport function rules(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::rules`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface UidMutAsOwnerArgs {\n  self: TransactionObjectInput;\n  cap: TransactionObjectInput;\n}\n\nexport function uidMutAsOwner(tx: Transaction, typeArg: string, args: UidMutAsOwnerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer_policy::uid_mut_as_owner`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), obj(tx, args.cap)],\n  });\n}\n"]}