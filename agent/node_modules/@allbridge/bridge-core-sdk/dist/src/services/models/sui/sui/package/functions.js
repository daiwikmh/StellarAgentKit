"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.version = version;
exports.additivePolicy = additivePolicy;
exports.authorizeUpgrade = authorizeUpgrade;
exports.burnPublisher = burnPublisher;
exports.claim = claim;
exports.claimAndKeep = claimAndKeep;
exports.commitUpgrade = commitUpgrade;
exports.compatiblePolicy = compatiblePolicy;
exports.depOnlyPolicy = depOnlyPolicy;
exports.fromModule = fromModule;
exports.fromPackage = fromPackage;
exports.makeImmutable = makeImmutable;
exports.onlyAdditiveUpgrades = onlyAdditiveUpgrades;
exports.onlyDepUpgrades = onlyDepUpgrades;
exports.publishedModule = publishedModule;
exports.publishedPackage = publishedPackage;
exports.receiptCap = receiptCap;
exports.receiptPackage = receiptPackage;
exports.restrict = restrict;
exports.ticketDigest = ticketDigest;
exports.ticketPackage = ticketPackage;
exports.ticketPolicy = ticketPolicy;
exports.upgradePackage = upgradePackage;
exports.upgradePolicy = upgradePolicy;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function version(tx, cap) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::version`,
        arguments: [(0, util_1.obj)(tx, cap)],
    });
}
function additivePolicy(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::additive_policy`,
        arguments: [],
    });
}
function authorizeUpgrade(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::authorize_upgrade`,
        arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.policy, `u8`), (0, util_1.pure)(tx, args.digest, `vector<u8>`)],
    });
}
function burnPublisher(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::burn_publisher`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function claim(tx, typeArg, otw) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::claim`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, otw)],
    });
}
function claimAndKeep(tx, typeArg, otw) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::claim_and_keep`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, otw)],
    });
}
function commitUpgrade(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::commit_upgrade`,
        arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.receipt)],
    });
}
function compatiblePolicy(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::compatible_policy`,
        arguments: [],
    });
}
function depOnlyPolicy(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::dep_only_policy`,
        arguments: [],
    });
}
function fromModule(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::from_module`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function fromPackage(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::from_package`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function makeImmutable(tx, cap) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::make_immutable`,
        arguments: [(0, util_1.obj)(tx, cap)],
    });
}
function onlyAdditiveUpgrades(tx, cap) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::only_additive_upgrades`,
        arguments: [(0, util_1.obj)(tx, cap)],
    });
}
function onlyDepUpgrades(tx, cap) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::only_dep_upgrades`,
        arguments: [(0, util_1.obj)(tx, cap)],
    });
}
function publishedModule(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::published_module`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function publishedPackage(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::published_package`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function receiptCap(tx, receipt) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::receipt_cap`,
        arguments: [(0, util_1.obj)(tx, receipt)],
    });
}
function receiptPackage(tx, receipt) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::receipt_package`,
        arguments: [(0, util_1.obj)(tx, receipt)],
    });
}
function restrict(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::restrict`,
        arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.policy, `u8`)],
    });
}
function ticketDigest(tx, ticket) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::ticket_digest`,
        arguments: [(0, util_1.obj)(tx, ticket)],
    });
}
function ticketPackage(tx, ticket) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::ticket_package`,
        arguments: [(0, util_1.obj)(tx, ticket)],
    });
}
function ticketPolicy(tx, ticket) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::ticket_policy`,
        arguments: [(0, util_1.obj)(tx, ticket)],
    });
}
function upgradePackage(tx, cap) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::upgrade_package`,
        arguments: [(0, util_1.obj)(tx, cap)],
    });
}
function upgradePolicy(tx, cap) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::package::upgrade_policy`,
        arguments: [(0, util_1.obj)(tx, cap)],
    });
}
//# sourceMappingURL=functions.js.map