"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = create;
exports.activeJwkEqual = activeJwkEqual;
exports.checkSorted = checkSorted;
exports.deduplicate = deduplicate;
exports.expireJwks = expireJwks;
exports.getActiveJwks = getActiveJwks;
exports.jwkEqual = jwkEqual;
exports.jwkIdEqual = jwkIdEqual;
exports.jwkLt = jwkLt;
exports.loadInner = loadInner;
exports.loadInnerMut = loadInnerMut;
exports.stringBytesLt = stringBytesLt;
exports.updateAuthenticatorState = updateAuthenticatorState;
// @ts-nocheck
const __1 = require("..");
const structs_1 = require("../../_dependencies/source/0x1/string/structs");
const util_1 = require("../../_framework/util");
const structs_2 = require("./structs");
function create(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::create`,
        arguments: [],
    });
}
function activeJwkEqual(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::active_jwk_equal`,
        arguments: [(0, util_1.obj)(tx, args.a), (0, util_1.obj)(tx, args.b)],
    });
}
function checkSorted(tx, newActiveJwks) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::check_sorted`,
        arguments: [(0, util_1.vector)(tx, `${structs_2.ActiveJwk.$typeName}`, newActiveJwks)],
    });
}
function deduplicate(tx, jwks) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::deduplicate`,
        arguments: [(0, util_1.vector)(tx, `${structs_2.ActiveJwk.$typeName}`, jwks)],
    });
}
function expireJwks(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::expire_jwks`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.minEpoch, `u64`)],
    });
}
function getActiveJwks(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::get_active_jwks`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function jwkEqual(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::jwk_equal`,
        arguments: [(0, util_1.obj)(tx, args.a), (0, util_1.obj)(tx, args.b)],
    });
}
function jwkIdEqual(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::jwk_id_equal`,
        arguments: [(0, util_1.obj)(tx, args.a), (0, util_1.obj)(tx, args.b)],
    });
}
function jwkLt(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::jwk_lt`,
        arguments: [(0, util_1.obj)(tx, args.a), (0, util_1.obj)(tx, args.b)],
    });
}
function loadInner(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::load_inner`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function loadInnerMut(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::load_inner_mut`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function stringBytesLt(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::string_bytes_lt`,
        arguments: [(0, util_1.pure)(tx, args.a, `${structs_1.String.$typeName}`), (0, util_1.pure)(tx, args.b, `${structs_1.String.$typeName}`)],
    });
}
function updateAuthenticatorState(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::authenticator_state::update_authenticator_state`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.vector)(tx, `${structs_2.ActiveJwk.$typeName}`, args.newActiveJwks)],
    });
}
//# sourceMappingURL=functions.js.map