"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.add = add;
exports.borrow = borrow;
exports.borrowMut = borrowMut;
exports.contains = contains;
exports.destroyEmpty = destroyEmpty;
exports.isEmpty = isEmpty;
exports.length = length;
exports.remove = remove;
exports.new_ = new_;
exports.containsWithType = containsWithType;
exports.valueId = valueId;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function add(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::add`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.bag), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k), (0, util_1.generic)(tx, `${typeArgs[1]}`, args.v)],
    });
}
function borrow(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::borrow`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.bag), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function borrowMut(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::borrow_mut`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.bag), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function contains(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::contains`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.bag), (0, util_1.generic)(tx, `${typeArg}`, args.k)],
    });
}
function destroyEmpty(tx, bag) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::destroy_empty`,
        arguments: [(0, util_1.obj)(tx, bag)],
    });
}
function isEmpty(tx, bag) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::is_empty`,
        arguments: [(0, util_1.obj)(tx, bag)],
    });
}
function length(tx, bag) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::length`,
        arguments: [(0, util_1.obj)(tx, bag)],
    });
}
function remove(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::remove`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.bag), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function new_(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::new`,
        arguments: [],
    });
}
function containsWithType(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::contains_with_type`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.bag), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function valueId(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object_bag::value_id`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.bag), (0, util_1.generic)(tx, `${typeArg}`, args.k)],
    });
}
//# sourceMappingURL=functions.js.map