{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/cctp-bridge/cctp-bridge/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n  ToTypeStr as ToPhantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { UID } from \"../../sui/object/structs\";\nimport { Table } from \"../../sui/table/structs\";\nimport { FeeCollector } from \"../../utils/fee-collector/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== AdminCap =============================== */\n\nexport function isAdminCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::cctp_bridge::AdminCap`;\n}\n\nexport interface AdminCapFields {\n  id: ToField<UID>;\n}\n\nexport type AdminCapReified = Reified<AdminCap, AdminCapFields>;\n\nexport class AdminCap implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::cctp_bridge::AdminCap`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = AdminCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = AdminCap.$isPhantom;\n\n  readonly id: ToField<UID>;\n\n  private constructor(typeArgs: [], fields: AdminCapFields) {\n    this.$fullTypeName = composeSuiType(AdminCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified(): AdminCapReified {\n    return {\n      typeName: AdminCap.$typeName,\n      fullTypeName: composeSuiType(AdminCap.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: AdminCap.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => AdminCap.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => AdminCap.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => AdminCap.fromBcs(data),\n      bcs: AdminCap.bcs,\n      fromJSONField: (field: any) => AdminCap.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => AdminCap.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => AdminCap.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => AdminCap.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => AdminCap.fetch(client, id),\n      new: (fields: AdminCapFields) => {\n        return new AdminCap([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return AdminCap.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<AdminCap>> {\n    return phantom(AdminCap.reified());\n  }\n  static get p() {\n    return AdminCap.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"AdminCap\", {\n      id: UID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): AdminCap {\n    return AdminCap.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): AdminCap {\n    if (!isAdminCap(item.type)) {\n      throw new Error(\"not a AdminCap type\");\n    }\n\n    return AdminCap.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): AdminCap {\n    return AdminCap.fromFields(AdminCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): AdminCap {\n    return AdminCap.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): AdminCap {\n    if (json.$typeName !== AdminCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return AdminCap.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): AdminCap {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isAdminCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a AdminCap object`);\n    }\n    return AdminCap.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): AdminCap {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isAdminCap(data.bcs.type)) {\n        throw new Error(`object at is not a AdminCap object`);\n      }\n\n      return AdminCap.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return AdminCap.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<AdminCap> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching AdminCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isAdminCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a AdminCap object`);\n    }\n\n    return AdminCap.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== FeeCollectorCap =============================== */\n\nexport function isFeeCollectorCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::cctp_bridge::FeeCollectorCap`;\n}\n\nexport interface FeeCollectorCapFields {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type FeeCollectorCapReified = Reified<FeeCollectorCap, FeeCollectorCapFields>;\n\nexport class FeeCollectorCap implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::cctp_bridge::FeeCollectorCap`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = FeeCollectorCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = FeeCollectorCap.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [], fields: FeeCollectorCapFields) {\n    this.$fullTypeName = composeSuiType(FeeCollectorCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified(): FeeCollectorCapReified {\n    return {\n      typeName: FeeCollectorCap.$typeName,\n      fullTypeName: composeSuiType(FeeCollectorCap.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: FeeCollectorCap.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => FeeCollectorCap.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => FeeCollectorCap.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => FeeCollectorCap.fromBcs(data),\n      bcs: FeeCollectorCap.bcs,\n      fromJSONField: (field: any) => FeeCollectorCap.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => FeeCollectorCap.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => FeeCollectorCap.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => FeeCollectorCap.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => FeeCollectorCap.fetch(client, id),\n      new: (fields: FeeCollectorCapFields) => {\n        return new FeeCollectorCap([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return FeeCollectorCap.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<FeeCollectorCap>> {\n    return phantom(FeeCollectorCap.reified());\n  }\n  static get p() {\n    return FeeCollectorCap.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"FeeCollectorCap\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): FeeCollectorCap {\n    return FeeCollectorCap.reified().new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): FeeCollectorCap {\n    if (!isFeeCollectorCap(item.type)) {\n      throw new Error(\"not a FeeCollectorCap type\");\n    }\n\n    return FeeCollectorCap.reified().new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): FeeCollectorCap {\n    return FeeCollectorCap.fromFields(FeeCollectorCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): FeeCollectorCap {\n    return FeeCollectorCap.reified().new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): FeeCollectorCap {\n    if (json.$typeName !== FeeCollectorCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return FeeCollectorCap.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): FeeCollectorCap {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isFeeCollectorCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a FeeCollectorCap object`);\n    }\n    return FeeCollectorCap.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): FeeCollectorCap {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isFeeCollectorCap(data.bcs.type)) {\n        throw new Error(`object at is not a FeeCollectorCap object`);\n      }\n\n      return FeeCollectorCap.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return FeeCollectorCap.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<FeeCollectorCap> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching FeeCollectorCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isFeeCollectorCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a FeeCollectorCap object`);\n    }\n\n    return FeeCollectorCap.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== CctpBridge =============================== */\n\nexport function isCctpBridge(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::cctp_bridge::CctpBridge`;\n}\n\nexport interface CctpBridgeFields {\n  id: ToField<UID>;\n  chainIdDomainMap: ToField<Table<\"u8\", \"u32\">>;\n  senders: ToField<Table<\"u64\", \"address\">>;\n  feeCollector: ToField<FeeCollector<ToPhantom<FeeCollectorCap>>>;\n  feeCollectorCap: ToField<FeeCollectorCap>;\n  adminFeeShareBp: ToField<\"u64\">;\n  gasUsage: ToField<Table<\"u8\", \"u64\">>;\n}\n\nexport type CctpBridgeReified = Reified<CctpBridge, CctpBridgeFields>;\n\nexport class CctpBridge implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::cctp_bridge::CctpBridge`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = CctpBridge.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = CctpBridge.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly chainIdDomainMap: ToField<Table<\"u8\", \"u32\">>;\n  readonly senders: ToField<Table<\"u64\", \"address\">>;\n  readonly feeCollector: ToField<FeeCollector<ToPhantom<FeeCollectorCap>>>;\n  readonly feeCollectorCap: ToField<FeeCollectorCap>;\n  readonly adminFeeShareBp: ToField<\"u64\">;\n  readonly gasUsage: ToField<Table<\"u8\", \"u64\">>;\n\n  private constructor(typeArgs: [], fields: CctpBridgeFields) {\n    this.$fullTypeName = composeSuiType(CctpBridge.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.chainIdDomainMap = fields.chainIdDomainMap;\n    this.senders = fields.senders;\n    this.feeCollector = fields.feeCollector;\n    this.feeCollectorCap = fields.feeCollectorCap;\n    this.adminFeeShareBp = fields.adminFeeShareBp;\n    this.gasUsage = fields.gasUsage;\n  }\n\n  static reified(): CctpBridgeReified {\n    return {\n      typeName: CctpBridge.$typeName,\n      fullTypeName: composeSuiType(CctpBridge.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: CctpBridge.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => CctpBridge.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => CctpBridge.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => CctpBridge.fromBcs(data),\n      bcs: CctpBridge.bcs,\n      fromJSONField: (field: any) => CctpBridge.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => CctpBridge.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => CctpBridge.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => CctpBridge.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => CctpBridge.fetch(client, id),\n      new: (fields: CctpBridgeFields) => {\n        return new CctpBridge([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return CctpBridge.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<CctpBridge>> {\n    return phantom(CctpBridge.reified());\n  }\n  static get p() {\n    return CctpBridge.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"CctpBridge\", {\n      id: UID.bcs,\n      chain_id_domain_map: Table.bcs,\n      senders: Table.bcs,\n      fee_collector: FeeCollector.bcs,\n      fee_collector_cap: FeeCollectorCap.bcs,\n      admin_fee_share_bp: bcs.u64(),\n      gas_usage: Table.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): CctpBridge {\n    return CctpBridge.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      chainIdDomainMap: decodeFromFields(\n        Table.reified(reified.phantom(\"u8\"), reified.phantom(\"u32\")),\n        fields.chain_id_domain_map\n      ),\n      senders: decodeFromFields(Table.reified(reified.phantom(\"u64\"), reified.phantom(\"address\")), fields.senders),\n      feeCollector: decodeFromFields(\n        FeeCollector.reified(reified.phantom(FeeCollectorCap.reified())),\n        fields.fee_collector\n      ),\n      feeCollectorCap: decodeFromFields(FeeCollectorCap.reified(), fields.fee_collector_cap),\n      adminFeeShareBp: decodeFromFields(\"u64\", fields.admin_fee_share_bp),\n      gasUsage: decodeFromFields(Table.reified(reified.phantom(\"u8\"), reified.phantom(\"u64\")), fields.gas_usage),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): CctpBridge {\n    if (!isCctpBridge(item.type)) {\n      throw new Error(\"not a CctpBridge type\");\n    }\n\n    return CctpBridge.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      chainIdDomainMap: decodeFromFieldsWithTypes(\n        Table.reified(reified.phantom(\"u8\"), reified.phantom(\"u32\")),\n        item.fields.chain_id_domain_map\n      ),\n      senders: decodeFromFieldsWithTypes(\n        Table.reified(reified.phantom(\"u64\"), reified.phantom(\"address\")),\n        item.fields.senders\n      ),\n      feeCollector: decodeFromFieldsWithTypes(\n        FeeCollector.reified(reified.phantom(FeeCollectorCap.reified())),\n        item.fields.fee_collector\n      ),\n      feeCollectorCap: decodeFromFieldsWithTypes(FeeCollectorCap.reified(), item.fields.fee_collector_cap),\n      adminFeeShareBp: decodeFromFieldsWithTypes(\"u64\", item.fields.admin_fee_share_bp),\n      gasUsage: decodeFromFieldsWithTypes(\n        Table.reified(reified.phantom(\"u8\"), reified.phantom(\"u64\")),\n        item.fields.gas_usage\n      ),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): CctpBridge {\n    return CctpBridge.fromFields(CctpBridge.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      chainIdDomainMap: this.chainIdDomainMap.toJSONField(),\n      senders: this.senders.toJSONField(),\n      feeCollector: this.feeCollector.toJSONField(),\n      feeCollectorCap: this.feeCollectorCap.toJSONField(),\n      adminFeeShareBp: this.adminFeeShareBp.toString(),\n      gasUsage: this.gasUsage.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): CctpBridge {\n    return CctpBridge.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      chainIdDomainMap: decodeFromJSONField(\n        Table.reified(reified.phantom(\"u8\"), reified.phantom(\"u32\")),\n        field.chainIdDomainMap\n      ),\n      senders: decodeFromJSONField(Table.reified(reified.phantom(\"u64\"), reified.phantom(\"address\")), field.senders),\n      feeCollector: decodeFromJSONField(\n        FeeCollector.reified(reified.phantom(FeeCollectorCap.reified())),\n        field.feeCollector\n      ),\n      feeCollectorCap: decodeFromJSONField(FeeCollectorCap.reified(), field.feeCollectorCap),\n      adminFeeShareBp: decodeFromJSONField(\"u64\", field.adminFeeShareBp),\n      gasUsage: decodeFromJSONField(Table.reified(reified.phantom(\"u8\"), reified.phantom(\"u64\")), field.gasUsage),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): CctpBridge {\n    if (json.$typeName !== CctpBridge.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return CctpBridge.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): CctpBridge {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isCctpBridge(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a CctpBridge object`);\n    }\n    return CctpBridge.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): CctpBridge {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isCctpBridge(data.bcs.type)) {\n        throw new Error(`object at is not a CctpBridge object`);\n      }\n\n      return CctpBridge.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return CctpBridge.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<CctpBridge> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching CctpBridge object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isCctpBridge(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a CctpBridge object`);\n    }\n\n    return CctpBridge.fromSuiObjectData(res.data);\n  }\n}\n"]}