import { String } from "../../_dependencies/source/0x1/ascii/structs";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isDepositEvent(type: string): boolean;
export interface DepositEventFields {
    token: ToField<String>;
    amount: ToField<"u64">;
    lpAmount: ToField<"u64">;
}
export type DepositEventReified = Reified<DepositEvent, DepositEventFields>;
export declare class DepositEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly amount: ToField<"u64">;
    readonly lpAmount: ToField<"u64">;
    private constructor();
    static reified(): DepositEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<DepositEvent, DepositEventFields>;
    static phantom(): PhantomReified<ToTypeStr<DepositEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        amount: string;
        lp_amount: string;
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        amount: string | number | bigint;
        lp_amount: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): DepositEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): DepositEvent;
    static fromBcs(data: Uint8Array): DepositEvent;
    toJSONField(): {
        token: String;
        amount: string;
        lpAmount: string;
    };
    toJSON(): {
        token: String;
        amount: string;
        lpAmount: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): DepositEvent;
    static fromJSON(json: Record<string, any>): DepositEvent;
    static fromSuiParsedData(content: SuiParsedData): DepositEvent;
    static fromSuiObjectData(data: SuiObjectData): DepositEvent;
    static fetch(client: SuiClient, id: string): Promise<DepositEvent>;
}
export declare function isReceiveFeeEvent(type: string): boolean;
export interface ReceiveFeeEventFields {
    userPaySui: ToField<"u64">;
    userPayStable: ToField<"u64">;
    totalPaySui: ToField<"u64">;
    bridgeFeeSui: ToField<"u64">;
    messengerFeeSui: ToField<"u64">;
    totalFeeSui: ToField<"u64">;
}
export type ReceiveFeeEventReified = Reified<ReceiveFeeEvent, ReceiveFeeEventFields>;
export declare class ReceiveFeeEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly userPaySui: ToField<"u64">;
    readonly userPayStable: ToField<"u64">;
    readonly totalPaySui: ToField<"u64">;
    readonly bridgeFeeSui: ToField<"u64">;
    readonly messengerFeeSui: ToField<"u64">;
    readonly totalFeeSui: ToField<"u64">;
    private constructor();
    static reified(): ReceiveFeeEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<ReceiveFeeEvent, ReceiveFeeEventFields>;
    static phantom(): PhantomReified<ToTypeStr<ReceiveFeeEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        user_pay_sui: string;
        user_pay_stable: string;
        total_pay_sui: string;
        bridge_fee_sui: string;
        messenger_fee_sui: string;
        total_fee_sui: string;
    }, {
        user_pay_sui: string | number | bigint;
        user_pay_stable: string | number | bigint;
        total_pay_sui: string | number | bigint;
        bridge_fee_sui: string | number | bigint;
        messenger_fee_sui: string | number | bigint;
        total_fee_sui: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): ReceiveFeeEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): ReceiveFeeEvent;
    static fromBcs(data: Uint8Array): ReceiveFeeEvent;
    toJSONField(): {
        userPaySui: string;
        userPayStable: string;
        totalPaySui: string;
        bridgeFeeSui: string;
        messengerFeeSui: string;
        totalFeeSui: string;
    };
    toJSON(): {
        userPaySui: string;
        userPayStable: string;
        totalPaySui: string;
        bridgeFeeSui: string;
        messengerFeeSui: string;
        totalFeeSui: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): ReceiveFeeEvent;
    static fromJSON(json: Record<string, any>): ReceiveFeeEvent;
    static fromSuiParsedData(content: SuiParsedData): ReceiveFeeEvent;
    static fromSuiObjectData(data: SuiObjectData): ReceiveFeeEvent;
    static fetch(client: SuiClient, id: string): Promise<ReceiveFeeEvent>;
}
export declare function isRewardsClaimedEvent(type: string): boolean;
export interface RewardsClaimedEventFields {
    token: ToField<String>;
    amount: ToField<"u64">;
}
export type RewardsClaimedEventReified = Reified<RewardsClaimedEvent, RewardsClaimedEventFields>;
export declare class RewardsClaimedEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly amount: ToField<"u64">;
    private constructor();
    static reified(): RewardsClaimedEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<RewardsClaimedEvent, RewardsClaimedEventFields>;
    static phantom(): PhantomReified<ToTypeStr<RewardsClaimedEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        amount: string;
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        amount: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): RewardsClaimedEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): RewardsClaimedEvent;
    static fromBcs(data: Uint8Array): RewardsClaimedEvent;
    toJSONField(): {
        token: String;
        amount: string;
    };
    toJSON(): {
        token: String;
        amount: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): RewardsClaimedEvent;
    static fromJSON(json: Record<string, any>): RewardsClaimedEvent;
    static fromSuiParsedData(content: SuiParsedData): RewardsClaimedEvent;
    static fromSuiObjectData(data: SuiObjectData): RewardsClaimedEvent;
    static fetch(client: SuiClient, id: string): Promise<RewardsClaimedEvent>;
}
export declare function isSwappedEvent(type: string): boolean;
export interface SwappedEventFields {
    tokenFrom: ToField<String>;
    tokenTo: ToField<String>;
    sentAmount: ToField<"u64">;
    receivedAmount: ToField<"u64">;
    sender: ToField<"address">;
}
export type SwappedEventReified = Reified<SwappedEvent, SwappedEventFields>;
export declare class SwappedEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly tokenFrom: ToField<String>;
    readonly tokenTo: ToField<String>;
    readonly sentAmount: ToField<"u64">;
    readonly receivedAmount: ToField<"u64">;
    readonly sender: ToField<"address">;
    private constructor();
    static reified(): SwappedEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<SwappedEvent, SwappedEventFields>;
    static phantom(): PhantomReified<ToTypeStr<SwappedEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token_from: {
            bytes: number[];
        };
        token_to: {
            bytes: number[];
        };
        sent_amount: string;
        received_amount: string;
        sender: string;
    }, {
        token_from: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        token_to: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        sent_amount: string | number | bigint;
        received_amount: string | number | bigint;
        sender: string;
    }>;
    static fromFields(fields: Record<string, any>): SwappedEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): SwappedEvent;
    static fromBcs(data: Uint8Array): SwappedEvent;
    toJSONField(): {
        tokenFrom: String;
        tokenTo: String;
        sentAmount: string;
        receivedAmount: string;
        sender: string;
    };
    toJSON(): {
        tokenFrom: String;
        tokenTo: String;
        sentAmount: string;
        receivedAmount: string;
        sender: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): SwappedEvent;
    static fromJSON(json: Record<string, any>): SwappedEvent;
    static fromSuiParsedData(content: SuiParsedData): SwappedEvent;
    static fromSuiObjectData(data: SuiObjectData): SwappedEvent;
    static fetch(client: SuiClient, id: string): Promise<SwappedEvent>;
}
export declare function isSwappedFromVUsdEvent(type: string): boolean;
export interface SwappedFromVUsdEventFields {
    token: ToField<String>;
    amount: ToField<"u64">;
    vusdAmount: ToField<"u64">;
    fee: ToField<"u64">;
}
export type SwappedFromVUsdEventReified = Reified<SwappedFromVUsdEvent, SwappedFromVUsdEventFields>;
export declare class SwappedFromVUsdEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly amount: ToField<"u64">;
    readonly vusdAmount: ToField<"u64">;
    readonly fee: ToField<"u64">;
    private constructor();
    static reified(): SwappedFromVUsdEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<SwappedFromVUsdEvent, SwappedFromVUsdEventFields>;
    static phantom(): PhantomReified<ToTypeStr<SwappedFromVUsdEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        amount: string;
        vusd_amount: string;
        fee: string;
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        amount: string | number | bigint;
        vusd_amount: string | number | bigint;
        fee: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): SwappedFromVUsdEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): SwappedFromVUsdEvent;
    static fromBcs(data: Uint8Array): SwappedFromVUsdEvent;
    toJSONField(): {
        token: String;
        amount: string;
        vusdAmount: string;
        fee: string;
    };
    toJSON(): {
        token: String;
        amount: string;
        vusdAmount: string;
        fee: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): SwappedFromVUsdEvent;
    static fromJSON(json: Record<string, any>): SwappedFromVUsdEvent;
    static fromSuiParsedData(content: SuiParsedData): SwappedFromVUsdEvent;
    static fromSuiObjectData(data: SuiObjectData): SwappedFromVUsdEvent;
    static fetch(client: SuiClient, id: string): Promise<SwappedFromVUsdEvent>;
}
export declare function isSwappedToVUsdEvent(type: string): boolean;
export interface SwappedToVUsdEventFields {
    token: ToField<String>;
    amount: ToField<"u64">;
    vusdAmount: ToField<"u64">;
    fee: ToField<"u64">;
}
export type SwappedToVUsdEventReified = Reified<SwappedToVUsdEvent, SwappedToVUsdEventFields>;
export declare class SwappedToVUsdEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly amount: ToField<"u64">;
    readonly vusdAmount: ToField<"u64">;
    readonly fee: ToField<"u64">;
    private constructor();
    static reified(): SwappedToVUsdEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<SwappedToVUsdEvent, SwappedToVUsdEventFields>;
    static phantom(): PhantomReified<ToTypeStr<SwappedToVUsdEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        amount: string;
        vusd_amount: string;
        fee: string;
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        amount: string | number | bigint;
        vusd_amount: string | number | bigint;
        fee: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): SwappedToVUsdEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): SwappedToVUsdEvent;
    static fromBcs(data: Uint8Array): SwappedToVUsdEvent;
    toJSONField(): {
        token: String;
        amount: string;
        vusdAmount: string;
        fee: string;
    };
    toJSON(): {
        token: String;
        amount: string;
        vusdAmount: string;
        fee: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): SwappedToVUsdEvent;
    static fromJSON(json: Record<string, any>): SwappedToVUsdEvent;
    static fromSuiParsedData(content: SuiParsedData): SwappedToVUsdEvent;
    static fromSuiObjectData(data: SuiObjectData): SwappedToVUsdEvent;
    static fetch(client: SuiClient, id: string): Promise<SwappedToVUsdEvent>;
}
export declare function isTokensReceivedEvent(type: string): boolean;
export interface TokensReceivedEventFields {
    token: ToField<String>;
    amount: ToField<"u64">;
    extraGasAmount: ToField<"u64">;
    recipient: ToField<"address">;
    nonce: ToField<"u256">;
    messenger: ToField<"u8">;
    message: ToField<String>;
}
export type TokensReceivedEventReified = Reified<TokensReceivedEvent, TokensReceivedEventFields>;
export declare class TokensReceivedEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly amount: ToField<"u64">;
    readonly extraGasAmount: ToField<"u64">;
    readonly recipient: ToField<"address">;
    readonly nonce: ToField<"u256">;
    readonly messenger: ToField<"u8">;
    readonly message: ToField<String>;
    private constructor();
    static reified(): TokensReceivedEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<TokensReceivedEvent, TokensReceivedEventFields>;
    static phantom(): PhantomReified<ToTypeStr<TokensReceivedEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        amount: string;
        extra_gas_amount: string;
        recipient: string;
        nonce: string;
        messenger: number;
        message: {
            bytes: number[];
        };
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        amount: string | number | bigint;
        extra_gas_amount: string | number | bigint;
        recipient: string;
        nonce: string | number | bigint;
        messenger: number;
        message: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): TokensReceivedEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): TokensReceivedEvent;
    static fromBcs(data: Uint8Array): TokensReceivedEvent;
    toJSONField(): {
        token: String;
        amount: string;
        extraGasAmount: string;
        recipient: string;
        nonce: string;
        messenger: number;
        message: String;
    };
    toJSON(): {
        token: String;
        amount: string;
        extraGasAmount: string;
        recipient: string;
        nonce: string;
        messenger: number;
        message: String;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): TokensReceivedEvent;
    static fromJSON(json: Record<string, any>): TokensReceivedEvent;
    static fromSuiParsedData(content: SuiParsedData): TokensReceivedEvent;
    static fromSuiObjectData(data: SuiObjectData): TokensReceivedEvent;
    static fetch(client: SuiClient, id: string): Promise<TokensReceivedEvent>;
}
export declare function isTokensSentEvent(type: string): boolean;
export interface TokensSentEventFields {
    token: ToField<String>;
    vusdAmount: ToField<"u64">;
    sender: ToField<"address">;
    recipient: ToField<String>;
    destinationChainId: ToField<"u8">;
    receiveToken: ToField<String>;
    nonce: ToField<"u256">;
    messenger: ToField<"u8">;
}
export type TokensSentEventReified = Reified<TokensSentEvent, TokensSentEventFields>;
export declare class TokensSentEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly vusdAmount: ToField<"u64">;
    readonly sender: ToField<"address">;
    readonly recipient: ToField<String>;
    readonly destinationChainId: ToField<"u8">;
    readonly receiveToken: ToField<String>;
    readonly nonce: ToField<"u256">;
    readonly messenger: ToField<"u8">;
    private constructor();
    static reified(): TokensSentEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<TokensSentEvent, TokensSentEventFields>;
    static phantom(): PhantomReified<ToTypeStr<TokensSentEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        vusd_amount: string;
        sender: string;
        recipient: {
            bytes: number[];
        };
        destination_chain_id: number;
        receive_token: {
            bytes: number[];
        };
        nonce: string;
        messenger: number;
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        vusd_amount: string | number | bigint;
        sender: string;
        recipient: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        destination_chain_id: number;
        receive_token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        nonce: string | number | bigint;
        messenger: number;
    }>;
    static fromFields(fields: Record<string, any>): TokensSentEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): TokensSentEvent;
    static fromBcs(data: Uint8Array): TokensSentEvent;
    toJSONField(): {
        token: String;
        vusdAmount: string;
        sender: string;
        recipient: String;
        destinationChainId: number;
        receiveToken: String;
        nonce: string;
        messenger: number;
    };
    toJSON(): {
        token: String;
        vusdAmount: string;
        sender: string;
        recipient: String;
        destinationChainId: number;
        receiveToken: String;
        nonce: string;
        messenger: number;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): TokensSentEvent;
    static fromJSON(json: Record<string, any>): TokensSentEvent;
    static fromSuiParsedData(content: SuiParsedData): TokensSentEvent;
    static fromSuiObjectData(data: SuiObjectData): TokensSentEvent;
    static fetch(client: SuiClient, id: string): Promise<TokensSentEvent>;
}
export declare function isWithdrawEvent(type: string): boolean;
export interface WithdrawEventFields {
    token: ToField<String>;
    amount: ToField<"u64">;
    lpAmount: ToField<"u64">;
}
export type WithdrawEventReified = Reified<WithdrawEvent, WithdrawEventFields>;
export declare class WithdrawEvent implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly token: ToField<String>;
    readonly amount: ToField<"u64">;
    readonly lpAmount: ToField<"u64">;
    private constructor();
    static reified(): WithdrawEventReified;
    static get r(): import("../../_framework/reified").StructClassReified<WithdrawEvent, WithdrawEventFields>;
    static phantom(): PhantomReified<ToTypeStr<WithdrawEvent>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        token: {
            bytes: number[];
        };
        amount: string;
        lp_amount: string;
    }, {
        token: {
            bytes: Iterable<number> & {
                length: number;
            };
        };
        amount: string | number | bigint;
        lp_amount: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): WithdrawEvent;
    static fromFieldsWithTypes(item: FieldsWithTypes): WithdrawEvent;
    static fromBcs(data: Uint8Array): WithdrawEvent;
    toJSONField(): {
        token: String;
        amount: string;
        lpAmount: string;
    };
    toJSON(): {
        token: String;
        amount: string;
        lpAmount: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): WithdrawEvent;
    static fromJSON(json: Record<string, any>): WithdrawEvent;
    static fromSuiParsedData(content: SuiParsedData): WithdrawEvent;
    static fromSuiObjectData(data: SuiObjectData): WithdrawEvent;
    static fetch(client: SuiClient, id: string): Promise<WithdrawEvent>;
}
