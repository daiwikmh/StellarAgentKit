{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/versioned/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { ID, UID } from \"../object/structs\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== VersionChangeCap =============================== */\n\nexport function isVersionChangeCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::versioned::VersionChangeCap`;\n}\n\nexport interface VersionChangeCapFields {\n  versionedId: ToField<ID>;\n  oldVersion: ToField<\"u64\">;\n}\n\nexport type VersionChangeCapReified = Reified<VersionChangeCap, VersionChangeCapFields>;\n\nexport class VersionChangeCap implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::versioned::VersionChangeCap`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = VersionChangeCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = VersionChangeCap.$isPhantom;\n\n  readonly versionedId: ToField<ID>;\n  readonly oldVersion: ToField<\"u64\">;\n\n  private constructor(typeArgs: [], fields: VersionChangeCapFields) {\n    this.$fullTypeName = composeSuiType(VersionChangeCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.versionedId = fields.versionedId;\n    this.oldVersion = fields.oldVersion;\n  }\n\n  static reified(): VersionChangeCapReified {\n    return {\n      typeName: VersionChangeCap.$typeName,\n      fullTypeName: composeSuiType(VersionChangeCap.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: VersionChangeCap.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => VersionChangeCap.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => VersionChangeCap.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => VersionChangeCap.fromBcs(data),\n      bcs: VersionChangeCap.bcs,\n      fromJSONField: (field: any) => VersionChangeCap.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => VersionChangeCap.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => VersionChangeCap.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => VersionChangeCap.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => VersionChangeCap.fetch(client, id),\n      new: (fields: VersionChangeCapFields) => {\n        return new VersionChangeCap([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return VersionChangeCap.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<VersionChangeCap>> {\n    return phantom(VersionChangeCap.reified());\n  }\n  static get p() {\n    return VersionChangeCap.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"VersionChangeCap\", {\n      versioned_id: ID.bcs,\n      old_version: bcs.u64(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): VersionChangeCap {\n    return VersionChangeCap.reified().new({\n      versionedId: decodeFromFields(ID.reified(), fields.versioned_id),\n      oldVersion: decodeFromFields(\"u64\", fields.old_version),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): VersionChangeCap {\n    if (!isVersionChangeCap(item.type)) {\n      throw new Error(\"not a VersionChangeCap type\");\n    }\n\n    return VersionChangeCap.reified().new({\n      versionedId: decodeFromFieldsWithTypes(ID.reified(), item.fields.versioned_id),\n      oldVersion: decodeFromFieldsWithTypes(\"u64\", item.fields.old_version),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): VersionChangeCap {\n    return VersionChangeCap.fromFields(VersionChangeCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      versionedId: this.versionedId,\n      oldVersion: this.oldVersion.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): VersionChangeCap {\n    return VersionChangeCap.reified().new({\n      versionedId: decodeFromJSONField(ID.reified(), field.versionedId),\n      oldVersion: decodeFromJSONField(\"u64\", field.oldVersion),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): VersionChangeCap {\n    if (json.$typeName !== VersionChangeCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return VersionChangeCap.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): VersionChangeCap {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isVersionChangeCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a VersionChangeCap object`);\n    }\n    return VersionChangeCap.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): VersionChangeCap {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isVersionChangeCap(data.bcs.type)) {\n        throw new Error(`object at is not a VersionChangeCap object`);\n      }\n\n      return VersionChangeCap.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return VersionChangeCap.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<VersionChangeCap> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching VersionChangeCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isVersionChangeCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a VersionChangeCap object`);\n    }\n\n    return VersionChangeCap.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== Versioned =============================== */\n\nexport function isVersioned(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::versioned::Versioned`;\n}\n\nexport interface VersionedFields {\n  id: ToField<UID>;\n  version: ToField<\"u64\">;\n}\n\nexport type VersionedReified = Reified<Versioned, VersionedFields>;\n\nexport class Versioned implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::versioned::Versioned`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Versioned.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Versioned.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly version: ToField<\"u64\">;\n\n  private constructor(typeArgs: [], fields: VersionedFields) {\n    this.$fullTypeName = composeSuiType(Versioned.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.version = fields.version;\n  }\n\n  static reified(): VersionedReified {\n    return {\n      typeName: Versioned.$typeName,\n      fullTypeName: composeSuiType(Versioned.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Versioned.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Versioned.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Versioned.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Versioned.fromBcs(data),\n      bcs: Versioned.bcs,\n      fromJSONField: (field: any) => Versioned.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Versioned.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Versioned.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Versioned.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Versioned.fetch(client, id),\n      new: (fields: VersionedFields) => {\n        return new Versioned([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Versioned.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Versioned>> {\n    return phantom(Versioned.reified());\n  }\n  static get p() {\n    return Versioned.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Versioned\", {\n      id: UID.bcs,\n      version: bcs.u64(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Versioned {\n    return Versioned.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      version: decodeFromFields(\"u64\", fields.version),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Versioned {\n    if (!isVersioned(item.type)) {\n      throw new Error(\"not a Versioned type\");\n    }\n\n    return Versioned.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      version: decodeFromFieldsWithTypes(\"u64\", item.fields.version),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Versioned {\n    return Versioned.fromFields(Versioned.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      version: this.version.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Versioned {\n    return Versioned.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      version: decodeFromJSONField(\"u64\", field.version),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): Versioned {\n    if (json.$typeName !== Versioned.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Versioned.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Versioned {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isVersioned(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Versioned object`);\n    }\n    return Versioned.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Versioned {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isVersioned(data.bcs.type)) {\n        throw new Error(`object at is not a Versioned object`);\n      }\n\n      return Versioned.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Versioned.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Versioned> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Versioned object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isVersioned(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Versioned object`);\n    }\n\n    return Versioned.fromSuiObjectData(res.data);\n  }\n}\n"]}