import * as reified from "../../_framework/reified";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr, ToTypeStr as ToPhantom } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { UID } from "../../sui/object/structs";
import { Table } from "../../sui/table/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isAdminCap(type: string): boolean;
export interface AdminCapFields {
    id: ToField<UID>;
}
export type AdminCapReified = Reified<AdminCap, AdminCapFields>;
export declare class AdminCap implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    private constructor();
    static reified(): AdminCapReified;
    static get r(): reified.StructClassReified<AdminCap, AdminCapFields>;
    static phantom(): PhantomReified<ToTypeStr<AdminCap>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): AdminCap;
    static fromFieldsWithTypes(item: FieldsWithTypes): AdminCap;
    static fromBcs(data: Uint8Array): AdminCap;
    toJSONField(): {
        id: UID;
    };
    toJSON(): {
        id: UID;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): AdminCap;
    static fromJSON(json: Record<string, any>): AdminCap;
    static fromSuiParsedData(content: SuiParsedData): AdminCap;
    static fromSuiObjectData(data: SuiObjectData): AdminCap;
    static fetch(client: SuiClient, id: string): Promise<AdminCap>;
}
export declare function isChainData(type: string): boolean;
export interface ChainDataFields {
    gasPrice: ToField<"u128">;
    price: ToField<"u128">;
}
export type ChainDataReified = Reified<ChainData, ChainDataFields>;
export declare class ChainData implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly gasPrice: ToField<"u128">;
    readonly price: ToField<"u128">;
    private constructor();
    static reified(): ChainDataReified;
    static get r(): reified.StructClassReified<ChainData, ChainDataFields>;
    static phantom(): PhantomReified<ToTypeStr<ChainData>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        gas_price: string;
        price: string;
    }, {
        gas_price: string | number | bigint;
        price: string | number | bigint;
    }>;
    static fromFields(fields: Record<string, any>): ChainData;
    static fromFieldsWithTypes(item: FieldsWithTypes): ChainData;
    static fromBcs(data: Uint8Array): ChainData;
    toJSONField(): {
        gasPrice: string;
        price: string;
    };
    toJSON(): {
        gasPrice: string;
        price: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): ChainData;
    static fromJSON(json: Record<string, any>): ChainData;
    static fromSuiParsedData(content: SuiParsedData): ChainData;
    static fromSuiObjectData(data: SuiObjectData): ChainData;
    static fetch(client: SuiClient, id: string): Promise<ChainData>;
}
export declare function isGasOracle(type: string): boolean;
export interface GasOracleFields {
    id: ToField<UID>;
    data: ToField<Table<"u8", ToPhantom<ChainData>>>;
}
export type GasOracleReified = Reified<GasOracle, GasOracleFields>;
export declare class GasOracle implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    readonly data: ToField<Table<"u8", ToPhantom<ChainData>>>;
    private constructor();
    static reified(): GasOracleReified;
    static get r(): reified.StructClassReified<GasOracle, GasOracleFields>;
    static phantom(): PhantomReified<ToTypeStr<GasOracle>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
        data: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
        data: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
    }>;
    static fromFields(fields: Record<string, any>): GasOracle;
    static fromFieldsWithTypes(item: FieldsWithTypes): GasOracle;
    static fromBcs(data: Uint8Array): GasOracle;
    toJSONField(): {
        id: UID;
        data: {
            id: UID;
            size: string;
        };
    };
    toJSON(): {
        id: UID;
        data: {
            id: UID;
            size: string;
        };
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): GasOracle;
    static fromJSON(json: Record<string, any>): GasOracle;
    static fromSuiParsedData(content: SuiParsedData): GasOracle;
    static fromSuiObjectData(data: SuiObjectData): GasOracle;
    static fetch(client: SuiClient, id: string): Promise<GasOracle>;
}
