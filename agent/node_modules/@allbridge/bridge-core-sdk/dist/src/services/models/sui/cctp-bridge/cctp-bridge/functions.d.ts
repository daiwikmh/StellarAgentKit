import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export interface BridgeArgs {
    cctpBridge: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    tokenMessengerMinterState: TransactionObjectInput;
    messageTransmitterState: TransactionObjectInput;
    treasury: TransactionObjectInput;
    denyList: TransactionObjectInput;
    amount: TransactionObjectInput;
    feeSuiCoin: TransactionObjectInput;
    feeTokenCoin: TransactionObjectInput;
    destinationChainId: number | TransactionArgument;
    recipient: TransactionObjectInput;
    recipientWalletAddress: TransactionObjectInput;
}
export declare function bridge(tx: Transaction, typeArg: string, args: BridgeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getId(tx: Transaction, cctpBridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getVersion(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function init(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface MigrateArgs {
    admin: TransactionObjectInput;
    cctpBridge: TransactionObjectInput;
}
export declare function migrate(tx: Transaction, args: MigrateArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetTransactionCostArgs {
    cctpBridge: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getTransactionCost(tx: Transaction, args: GetTransactionCostArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetGasUsageArgs {
    cctpBridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    value: bigint | TransactionArgument;
}
export declare function setGasUsage(tx: Transaction, args: SetGasUsageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface WithdrawFeeArgs {
    cctpBridge: TransactionObjectInput;
    amount: bigint | TransactionArgument;
}
export declare function withdrawFee(tx: Transaction, typeArg: string, args: WithdrawFeeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GasUsageArgs {
    cctpBridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function gasUsage(tx: Transaction, args: GasUsageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function feeValue(tx: Transaction, typeArg: string, cctpBridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReceiveTokensArgs {
    tokenMessengerMinterState: TransactionObjectInput;
    messageTransmitterState: TransactionObjectInput;
    denyList: TransactionObjectInput;
    treasury: TransactionObjectInput;
    recipient: string | TransactionArgument;
    message: Array<number | TransactionArgument> | TransactionArgument;
    signature: Array<number | TransactionArgument> | TransactionArgument;
    extraGasCoin: TransactionObjectInput;
}
export declare function receiveTokens(tx: Transaction, typeArg: string, args: ReceiveTokensArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ChangeRecipientArgs {
    cctpBridge: TransactionObjectInput;
    originalMessage: Array<number | TransactionArgument> | TransactionArgument;
    originalAttestation: Array<number | TransactionArgument> | TransactionArgument;
    newRecipient: TransactionObjectInput;
    tokenMessengerMinterState: TransactionObjectInput;
    messageTransmitterState: TransactionObjectInput;
}
export declare function changeRecipient(tx: Transaction, typeArg: string, args: ChangeRecipientArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function deserializeNonce(tx: Transaction, data: Array<number | TransactionArgument> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetBridgingCostInTokensArgs {
    cctpBridge: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getBridgingCostInTokens(tx: Transaction, args: GetBridgingCostInTokensArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetDomainByChainIdArgs {
    cctpBridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getDomainByChainId(tx: Transaction, args: GetDomainByChainIdArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface IsMessageProcessedArgs {
    cctpBridge: TransactionObjectInput;
    messageTransmitterState: TransactionObjectInput;
    sourceChainId: number | TransactionArgument;
    nonce: bigint | TransactionArgument;
}
export declare function isMessageProcessed(tx: Transaction, args: IsMessageProcessedArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RegisterBridgeDestinationArgs {
    cctpBridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    domain: number | TransactionArgument;
}
export declare function registerBridgeDestination(tx: Transaction, args: RegisterBridgeDestinationArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetAdminFeeShareArgs {
    cctpBridge: TransactionObjectInput;
    adminFeeShareBp: bigint | TransactionArgument;
}
export declare function setAdminFeeShare(tx: Transaction, args: SetAdminFeeShareArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface UnregisterBridgeDestinationArgs {
    cctpBridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function unregisterBridgeDestination(tx: Transaction, args: UnregisterBridgeDestinationArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
