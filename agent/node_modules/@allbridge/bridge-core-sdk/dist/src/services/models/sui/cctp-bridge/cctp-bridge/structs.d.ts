import * as reified from "../../_framework/reified";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr, ToTypeStr as ToPhantom } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { UID } from "../../sui/object/structs";
import { Table } from "../../sui/table/structs";
import { FeeCollector } from "../../utils/fee-collector/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isAdminCap(type: string): boolean;
export interface AdminCapFields {
    id: ToField<UID>;
}
export type AdminCapReified = Reified<AdminCap, AdminCapFields>;
export declare class AdminCap implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    private constructor();
    static reified(): AdminCapReified;
    static get r(): reified.StructClassReified<AdminCap, AdminCapFields>;
    static phantom(): PhantomReified<ToTypeStr<AdminCap>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): AdminCap;
    static fromFieldsWithTypes(item: FieldsWithTypes): AdminCap;
    static fromBcs(data: Uint8Array): AdminCap;
    toJSONField(): {
        id: UID;
    };
    toJSON(): {
        id: UID;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): AdminCap;
    static fromJSON(json: Record<string, any>): AdminCap;
    static fromSuiParsedData(content: SuiParsedData): AdminCap;
    static fromSuiObjectData(data: SuiObjectData): AdminCap;
    static fetch(client: SuiClient, id: string): Promise<AdminCap>;
}
export declare function isFeeCollectorCap(type: string): boolean;
export interface FeeCollectorCapFields {
    dummyField: ToField<"bool">;
}
export type FeeCollectorCapReified = Reified<FeeCollectorCap, FeeCollectorCapFields>;
export declare class FeeCollectorCap implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly dummyField: ToField<"bool">;
    private constructor();
    static reified(): FeeCollectorCapReified;
    static get r(): reified.StructClassReified<FeeCollectorCap, FeeCollectorCapFields>;
    static phantom(): PhantomReified<ToTypeStr<FeeCollectorCap>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        dummy_field: boolean;
    }, {
        dummy_field: boolean;
    }>;
    static fromFields(fields: Record<string, any>): FeeCollectorCap;
    static fromFieldsWithTypes(item: FieldsWithTypes): FeeCollectorCap;
    static fromBcs(data: Uint8Array): FeeCollectorCap;
    toJSONField(): {
        dummyField: boolean;
    };
    toJSON(): {
        dummyField: boolean;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): FeeCollectorCap;
    static fromJSON(json: Record<string, any>): FeeCollectorCap;
    static fromSuiParsedData(content: SuiParsedData): FeeCollectorCap;
    static fromSuiObjectData(data: SuiObjectData): FeeCollectorCap;
    static fetch(client: SuiClient, id: string): Promise<FeeCollectorCap>;
}
export declare function isCctpBridge(type: string): boolean;
export interface CctpBridgeFields {
    id: ToField<UID>;
    chainIdDomainMap: ToField<Table<"u8", "u32">>;
    senders: ToField<Table<"u64", "address">>;
    feeCollector: ToField<FeeCollector<ToPhantom<FeeCollectorCap>>>;
    feeCollectorCap: ToField<FeeCollectorCap>;
    adminFeeShareBp: ToField<"u64">;
    gasUsage: ToField<Table<"u8", "u64">>;
}
export type CctpBridgeReified = Reified<CctpBridge, CctpBridgeFields>;
export declare class CctpBridge implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    readonly chainIdDomainMap: ToField<Table<"u8", "u32">>;
    readonly senders: ToField<Table<"u64", "address">>;
    readonly feeCollector: ToField<FeeCollector<ToPhantom<FeeCollectorCap>>>;
    readonly feeCollectorCap: ToField<FeeCollectorCap>;
    readonly adminFeeShareBp: ToField<"u64">;
    readonly gasUsage: ToField<Table<"u8", "u64">>;
    private constructor();
    static reified(): CctpBridgeReified;
    static get r(): reified.StructClassReified<CctpBridge, CctpBridgeFields>;
    static phantom(): PhantomReified<ToTypeStr<CctpBridge>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
        chain_id_domain_map: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
        senders: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
        fee_collector: {
            balances: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string;
            };
        };
        fee_collector_cap: {
            dummy_field: boolean;
        };
        admin_fee_share_bp: string;
        gas_usage: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
        chain_id_domain_map: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
        senders: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
        fee_collector: {
            balances: {
                id: {
                    id: {
                        bytes: string;
                    };
                };
                size: string | number | bigint;
            };
        };
        fee_collector_cap: {
            dummy_field: boolean;
        };
        admin_fee_share_bp: string | number | bigint;
        gas_usage: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
    }>;
    static fromFields(fields: Record<string, any>): CctpBridge;
    static fromFieldsWithTypes(item: FieldsWithTypes): CctpBridge;
    static fromBcs(data: Uint8Array): CctpBridge;
    toJSONField(): {
        id: UID;
        chainIdDomainMap: {
            id: UID;
            size: string;
        };
        senders: {
            id: UID;
            size: string;
        };
        feeCollector: {
            balances: {
                id: UID;
                size: string;
            };
        };
        feeCollectorCap: {
            dummyField: boolean;
        };
        adminFeeShareBp: string;
        gasUsage: {
            id: UID;
            size: string;
        };
    };
    toJSON(): {
        id: UID;
        chainIdDomainMap: {
            id: UID;
            size: string;
        };
        senders: {
            id: UID;
            size: string;
        };
        feeCollector: {
            balances: {
                id: UID;
                size: string;
            };
        };
        feeCollectorCap: {
            dummyField: boolean;
        };
        adminFeeShareBp: string;
        gasUsage: {
            id: UID;
            size: string;
        };
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): CctpBridge;
    static fromJSON(json: Record<string, any>): CctpBridge;
    static fromSuiParsedData(content: SuiParsedData): CctpBridge;
    static fromSuiObjectData(data: SuiObjectData): CctpBridge;
    static fetch(client: SuiClient, id: string): Promise<CctpBridge>;
}
