{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0x1/type-name/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { String } from \"../ascii/structs\";\nimport { PKG_V13 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== TypeName =============================== */\n\nexport function isTypeName(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V13}::type_name::TypeName`;\n}\n\nexport interface TypeNameFields {\n  name: ToField<String>;\n}\n\nexport type TypeNameReified = Reified<TypeName, TypeNameFields>;\n\nexport class TypeName implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V13}::type_name::TypeName`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = TypeName.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = TypeName.$isPhantom;\n\n  readonly name: ToField<String>;\n\n  private constructor(typeArgs: [], fields: TypeNameFields) {\n    this.$fullTypeName = composeSuiType(TypeName.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.name = fields.name;\n  }\n\n  static reified(): TypeNameReified {\n    return {\n      typeName: TypeName.$typeName,\n      fullTypeName: composeSuiType(TypeName.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: TypeName.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => TypeName.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => TypeName.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => TypeName.fromBcs(data),\n      bcs: TypeName.bcs,\n      fromJSONField: (field: any) => TypeName.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => TypeName.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => TypeName.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => TypeName.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => TypeName.fetch(client, id),\n      new: (fields: TypeNameFields) => {\n        return new TypeName([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return TypeName.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<TypeName>> {\n    return phantom(TypeName.reified());\n  }\n  static get p() {\n    return TypeName.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"TypeName\", {\n      name: String.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): TypeName {\n    return TypeName.reified().new({\n      name: decodeFromFields(String.reified(), fields.name),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): TypeName {\n    if (!isTypeName(item.type)) {\n      throw new Error(\"not a TypeName type\");\n    }\n\n    return TypeName.reified().new({\n      name: decodeFromFieldsWithTypes(String.reified(), item.fields.name),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): TypeName {\n    return TypeName.fromFields(TypeName.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      name: this.name,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): TypeName {\n    return TypeName.reified().new({\n      name: decodeFromJSONField(String.reified(), field.name),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): TypeName {\n    if (json.$typeName !== TypeName.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return TypeName.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): TypeName {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isTypeName(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a TypeName object`);\n    }\n    return TypeName.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): TypeName {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isTypeName(data.bcs.type)) {\n        throw new Error(`object at is not a TypeName object`);\n      }\n\n      return TypeName.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return TypeName.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<TypeName> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching TypeName object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isTypeName(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a TypeName object`);\n    }\n\n    return TypeName.fromSuiObjectData(res.data);\n  }\n}\n"]}