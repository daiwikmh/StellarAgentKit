{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/config/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { Option } from \"../../_dependencies/source/0x1/option/structs\";\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  fieldToJSON,\n  phantom,\n  toBcs,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { UID } from \"../object/structs\";\nimport { BcsType, bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Config =============================== */\n\nexport function isConfig(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::config::Config` + \"<\");\n}\n\nexport interface ConfigFields<WriteCap extends PhantomTypeArgument> {\n  id: ToField<UID>;\n}\n\nexport type ConfigReified<WriteCap extends PhantomTypeArgument> = Reified<Config<WriteCap>, ConfigFields<WriteCap>>;\n\nexport class Config<WriteCap extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::config::Config`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = Config.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<WriteCap>];\n  readonly $isPhantom = Config.$isPhantom;\n\n  readonly id: ToField<UID>;\n\n  private constructor(typeArgs: [PhantomToTypeStr<WriteCap>], fields: ConfigFields<WriteCap>) {\n    this.$fullTypeName = composeSuiType(Config.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    WriteCap: WriteCap\n  ): ConfigReified<ToPhantomTypeArgument<WriteCap>> {\n    return {\n      typeName: Config.$typeName,\n      fullTypeName: composeSuiType(Config.$typeName, ...[extractType(WriteCap)]) as string,\n      typeArgs: [extractType(WriteCap)] as [PhantomToTypeStr<ToPhantomTypeArgument<WriteCap>>],\n      isPhantom: Config.$isPhantom,\n      reifiedTypeArgs: [WriteCap],\n      fromFields: (fields: Record<string, any>) => Config.fromFields(WriteCap, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Config.fromFieldsWithTypes(WriteCap, item),\n      fromBcs: (data: Uint8Array) => Config.fromBcs(WriteCap, data),\n      bcs: Config.bcs,\n      fromJSONField: (field: any) => Config.fromJSONField(WriteCap, field),\n      fromJSON: (json: Record<string, any>) => Config.fromJSON(WriteCap, json),\n      fromSuiParsedData: (content: SuiParsedData) => Config.fromSuiParsedData(WriteCap, content),\n      fromSuiObjectData: (content: SuiObjectData) => Config.fromSuiObjectData(WriteCap, content),\n      fetch: async (client: SuiClient, id: string) => Config.fetch(client, WriteCap, id),\n      new: (fields: ConfigFields<ToPhantomTypeArgument<WriteCap>>) => {\n        return new Config([extractType(WriteCap)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Config.reified;\n  }\n\n  static phantom<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    WriteCap: WriteCap\n  ): PhantomReified<ToTypeStr<Config<ToPhantomTypeArgument<WriteCap>>>> {\n    return phantom(Config.reified(WriteCap));\n  }\n  static get p() {\n    return Config.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Config\", {\n      id: UID.bcs,\n    });\n  }\n\n  static fromFields<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: WriteCap,\n    fields: Record<string, any>\n  ): Config<ToPhantomTypeArgument<WriteCap>> {\n    return Config.reified(typeArg).new({\n      id: decodeFromFields(UID.reified(), fields.id),\n    });\n  }\n\n  static fromFieldsWithTypes<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: WriteCap,\n    item: FieldsWithTypes\n  ): Config<ToPhantomTypeArgument<WriteCap>> {\n    if (!isConfig(item.type)) {\n      throw new Error(\"not a Config type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Config.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: WriteCap,\n    data: Uint8Array\n  ): Config<ToPhantomTypeArgument<WriteCap>> {\n    return Config.fromFields(typeArg, Config.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: WriteCap,\n    field: any\n  ): Config<ToPhantomTypeArgument<WriteCap>> {\n    return Config.reified(typeArg).new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n    });\n  }\n\n  static fromJSON<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: WriteCap,\n    json: Record<string, any>\n  ): Config<ToPhantomTypeArgument<WriteCap>> {\n    if (json.$typeName !== Config.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Config.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Config.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: WriteCap,\n    content: SuiParsedData\n  ): Config<ToPhantomTypeArgument<WriteCap>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isConfig(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Config object`);\n    }\n    return Config.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: WriteCap,\n    data: SuiObjectData\n  ): Config<ToPhantomTypeArgument<WriteCap>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isConfig(data.bcs.type)) {\n        throw new Error(`object at is not a Config object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Config.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Config.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<WriteCap extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: WriteCap,\n    id: string\n  ): Promise<Config<ToPhantomTypeArgument<WriteCap>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Config object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isConfig(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Config object`);\n    }\n\n    return Config.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== Setting =============================== */\n\nexport function isSetting(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::config::Setting` + \"<\");\n}\n\nexport interface SettingFields<Value extends TypeArgument> {\n  data: ToField<Option<SettingData<Value>>>;\n}\n\nexport type SettingReified<Value extends TypeArgument> = Reified<Setting<Value>, SettingFields<Value>>;\n\nexport class Setting<Value extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::config::Setting`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [false] as const;\n\n  readonly $typeName = Setting.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<Value>];\n  readonly $isPhantom = Setting.$isPhantom;\n\n  readonly data: ToField<Option<SettingData<Value>>>;\n\n  private constructor(typeArgs: [ToTypeStr<Value>], fields: SettingFields<Value>) {\n    this.$fullTypeName = composeSuiType(Setting.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.data = fields.data;\n  }\n\n  static reified<Value extends Reified<TypeArgument, any>>(Value: Value): SettingReified<ToTypeArgument<Value>> {\n    return {\n      typeName: Setting.$typeName,\n      fullTypeName: composeSuiType(Setting.$typeName, ...[extractType(Value)]) as string,\n      typeArgs: [extractType(Value)] as [ToTypeStr<ToTypeArgument<Value>>],\n      isPhantom: Setting.$isPhantom,\n      reifiedTypeArgs: [Value],\n      fromFields: (fields: Record<string, any>) => Setting.fromFields(Value, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Setting.fromFieldsWithTypes(Value, item),\n      fromBcs: (data: Uint8Array) => Setting.fromBcs(Value, data),\n      bcs: Setting.bcs(toBcs(Value)),\n      fromJSONField: (field: any) => Setting.fromJSONField(Value, field),\n      fromJSON: (json: Record<string, any>) => Setting.fromJSON(Value, json),\n      fromSuiParsedData: (content: SuiParsedData) => Setting.fromSuiParsedData(Value, content),\n      fromSuiObjectData: (content: SuiObjectData) => Setting.fromSuiObjectData(Value, content),\n      fetch: async (client: SuiClient, id: string) => Setting.fetch(client, Value, id),\n      new: (fields: SettingFields<ToTypeArgument<Value>>) => {\n        return new Setting([extractType(Value)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Setting.reified;\n  }\n\n  static phantom<Value extends Reified<TypeArgument, any>>(\n    Value: Value\n  ): PhantomReified<ToTypeStr<Setting<ToTypeArgument<Value>>>> {\n    return phantom(Setting.reified(Value));\n  }\n  static get p() {\n    return Setting.phantom;\n  }\n\n  static get bcs() {\n    return <Value extends BcsType<any>>(Value: Value) =>\n      bcs.struct(`Setting<${Value.name}>`, {\n        data: Option.bcs(SettingData.bcs(Value)),\n      });\n  }\n\n  static fromFields<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    fields: Record<string, any>\n  ): Setting<ToTypeArgument<Value>> {\n    return Setting.reified(typeArg).new({\n      data: decodeFromFields(Option.reified(SettingData.reified(typeArg)), fields.data),\n    });\n  }\n\n  static fromFieldsWithTypes<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    item: FieldsWithTypes\n  ): Setting<ToTypeArgument<Value>> {\n    if (!isSetting(item.type)) {\n      throw new Error(\"not a Setting type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Setting.reified(typeArg).new({\n      data: decodeFromFieldsWithTypes(Option.reified(SettingData.reified(typeArg)), item.fields.data),\n    });\n  }\n\n  static fromBcs<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    data: Uint8Array\n  ): Setting<ToTypeArgument<Value>> {\n    const typeArgs = [typeArg];\n\n    return Setting.fromFields(typeArg, Setting.bcs(toBcs(typeArgs[0])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      data: fieldToJSON<Option<SettingData<Value>>>(\n        `${Option.$typeName}<${SettingData.$typeName}<${this.$typeArgs[0]}>>`,\n        this.data\n      ),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    field: any\n  ): Setting<ToTypeArgument<Value>> {\n    return Setting.reified(typeArg).new({\n      data: decodeFromJSONField(Option.reified(SettingData.reified(typeArg)), field.data),\n    });\n  }\n\n  static fromJSON<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    json: Record<string, any>\n  ): Setting<ToTypeArgument<Value>> {\n    if (json.$typeName !== Setting.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Setting.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Setting.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    content: SuiParsedData\n  ): Setting<ToTypeArgument<Value>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isSetting(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Setting object`);\n    }\n    return Setting.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    data: SuiObjectData\n  ): Setting<ToTypeArgument<Value>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isSetting(data.bcs.type)) {\n        throw new Error(`object at is not a Setting object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Setting.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Setting.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<Value extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArg: Value,\n    id: string\n  ): Promise<Setting<ToTypeArgument<Value>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Setting object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isSetting(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Setting object`);\n    }\n\n    return Setting.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== SettingData =============================== */\n\nexport function isSettingData(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::config::SettingData` + \"<\");\n}\n\nexport interface SettingDataFields<Value extends TypeArgument> {\n  newerValueEpoch: ToField<\"u64\">;\n  newerValue: ToField<Option<Value>>;\n  olderValueOpt: ToField<Option<Value>>;\n}\n\nexport type SettingDataReified<Value extends TypeArgument> = Reified<SettingData<Value>, SettingDataFields<Value>>;\n\nexport class SettingData<Value extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::config::SettingData`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [false] as const;\n\n  readonly $typeName = SettingData.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<Value>];\n  readonly $isPhantom = SettingData.$isPhantom;\n\n  readonly newerValueEpoch: ToField<\"u64\">;\n  readonly newerValue: ToField<Option<Value>>;\n  readonly olderValueOpt: ToField<Option<Value>>;\n\n  private constructor(typeArgs: [ToTypeStr<Value>], fields: SettingDataFields<Value>) {\n    this.$fullTypeName = composeSuiType(SettingData.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.newerValueEpoch = fields.newerValueEpoch;\n    this.newerValue = fields.newerValue;\n    this.olderValueOpt = fields.olderValueOpt;\n  }\n\n  static reified<Value extends Reified<TypeArgument, any>>(Value: Value): SettingDataReified<ToTypeArgument<Value>> {\n    return {\n      typeName: SettingData.$typeName,\n      fullTypeName: composeSuiType(SettingData.$typeName, ...[extractType(Value)]) as string,\n      typeArgs: [extractType(Value)] as [ToTypeStr<ToTypeArgument<Value>>],\n      isPhantom: SettingData.$isPhantom,\n      reifiedTypeArgs: [Value],\n      fromFields: (fields: Record<string, any>) => SettingData.fromFields(Value, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => SettingData.fromFieldsWithTypes(Value, item),\n      fromBcs: (data: Uint8Array) => SettingData.fromBcs(Value, data),\n      bcs: SettingData.bcs(toBcs(Value)),\n      fromJSONField: (field: any) => SettingData.fromJSONField(Value, field),\n      fromJSON: (json: Record<string, any>) => SettingData.fromJSON(Value, json),\n      fromSuiParsedData: (content: SuiParsedData) => SettingData.fromSuiParsedData(Value, content),\n      fromSuiObjectData: (content: SuiObjectData) => SettingData.fromSuiObjectData(Value, content),\n      fetch: async (client: SuiClient, id: string) => SettingData.fetch(client, Value, id),\n      new: (fields: SettingDataFields<ToTypeArgument<Value>>) => {\n        return new SettingData([extractType(Value)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return SettingData.reified;\n  }\n\n  static phantom<Value extends Reified<TypeArgument, any>>(\n    Value: Value\n  ): PhantomReified<ToTypeStr<SettingData<ToTypeArgument<Value>>>> {\n    return phantom(SettingData.reified(Value));\n  }\n  static get p() {\n    return SettingData.phantom;\n  }\n\n  static get bcs() {\n    return <Value extends BcsType<any>>(Value: Value) =>\n      bcs.struct(`SettingData<${Value.name}>`, {\n        newer_value_epoch: bcs.u64(),\n        newer_value: Option.bcs(Value),\n        older_value_opt: Option.bcs(Value),\n      });\n  }\n\n  static fromFields<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    fields: Record<string, any>\n  ): SettingData<ToTypeArgument<Value>> {\n    return SettingData.reified(typeArg).new({\n      newerValueEpoch: decodeFromFields(\"u64\", fields.newer_value_epoch),\n      newerValue: decodeFromFields(Option.reified(typeArg), fields.newer_value),\n      olderValueOpt: decodeFromFields(Option.reified(typeArg), fields.older_value_opt),\n    });\n  }\n\n  static fromFieldsWithTypes<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    item: FieldsWithTypes\n  ): SettingData<ToTypeArgument<Value>> {\n    if (!isSettingData(item.type)) {\n      throw new Error(\"not a SettingData type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return SettingData.reified(typeArg).new({\n      newerValueEpoch: decodeFromFieldsWithTypes(\"u64\", item.fields.newer_value_epoch),\n      newerValue: decodeFromFieldsWithTypes(Option.reified(typeArg), item.fields.newer_value),\n      olderValueOpt: decodeFromFieldsWithTypes(Option.reified(typeArg), item.fields.older_value_opt),\n    });\n  }\n\n  static fromBcs<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    data: Uint8Array\n  ): SettingData<ToTypeArgument<Value>> {\n    const typeArgs = [typeArg];\n\n    return SettingData.fromFields(typeArg, SettingData.bcs(toBcs(typeArgs[0])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      newerValueEpoch: this.newerValueEpoch.toString(),\n      newerValue: fieldToJSON<Option<Value>>(`${Option.$typeName}<${this.$typeArgs[0]}>`, this.newerValue),\n      olderValueOpt: fieldToJSON<Option<Value>>(`${Option.$typeName}<${this.$typeArgs[0]}>`, this.olderValueOpt),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    field: any\n  ): SettingData<ToTypeArgument<Value>> {\n    return SettingData.reified(typeArg).new({\n      newerValueEpoch: decodeFromJSONField(\"u64\", field.newerValueEpoch),\n      newerValue: decodeFromJSONField(Option.reified(typeArg), field.newerValue),\n      olderValueOpt: decodeFromJSONField(Option.reified(typeArg), field.olderValueOpt),\n    });\n  }\n\n  static fromJSON<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    json: Record<string, any>\n  ): SettingData<ToTypeArgument<Value>> {\n    if (json.$typeName !== SettingData.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(SettingData.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return SettingData.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    content: SuiParsedData\n  ): SettingData<ToTypeArgument<Value>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isSettingData(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a SettingData object`);\n    }\n    return SettingData.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<Value extends Reified<TypeArgument, any>>(\n    typeArg: Value,\n    data: SuiObjectData\n  ): SettingData<ToTypeArgument<Value>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isSettingData(data.bcs.type)) {\n        throw new Error(`object at is not a SettingData object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return SettingData.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return SettingData.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<Value extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArg: Value,\n    id: string\n  ): Promise<SettingData<ToTypeArgument<Value>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching SettingData object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isSettingData(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a SettingData object`);\n    }\n\n    return SettingData.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}