"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contains = contains;
exports.destroyEmpty = destroyEmpty;
exports.empty = empty;
exports.insert = insert;
exports.isEmpty = isEmpty;
exports.remove = remove;
exports.keys = keys;
exports.getIdx = getIdx;
exports.getIdxOpt = getIdxOpt;
exports.size = size;
exports.get = get;
exports.fromKeysValues = fromKeysValues;
exports.getEntryByIdx = getEntryByIdx;
exports.getEntryByIdxMut = getEntryByIdxMut;
exports.getMut = getMut;
exports.intoKeysValues = intoKeysValues;
exports.pop = pop;
exports.removeEntryByIdx = removeEntryByIdx;
exports.tryGet = tryGet;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function contains(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::contains`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.key)],
    });
}
function destroyEmpty(tx, typeArgs, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::destroy_empty`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function empty(tx, typeArgs) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::empty`,
        typeArguments: typeArgs,
        arguments: [],
    });
}
function insert(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::insert`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.key), (0, util_1.generic)(tx, `${typeArgs[1]}`, args.value)],
    });
}
function isEmpty(tx, typeArgs, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::is_empty`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function remove(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::remove`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.key)],
    });
}
function keys(tx, typeArgs, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::keys`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function getIdx(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::get_idx`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.key)],
    });
}
function getIdxOpt(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::get_idx_opt`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.key)],
    });
}
function size(tx, typeArgs, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::size`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function get(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::get`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.key)],
    });
}
function fromKeysValues(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::from_keys_values`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.vector)(tx, `${typeArgs[0]}`, args.keys), (0, util_1.vector)(tx, `${typeArgs[1]}`, args.values)],
    });
}
function getEntryByIdx(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::get_entry_by_idx`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.idx, `u64`)],
    });
}
function getEntryByIdxMut(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::get_entry_by_idx_mut`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.idx, `u64`)],
    });
}
function getMut(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::get_mut`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.key)],
    });
}
function intoKeysValues(tx, typeArgs, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::into_keys_values`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function pop(tx, typeArgs, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::pop`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function removeEntryByIdx(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::remove_entry_by_idx`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.idx, `u64`)],
    });
}
function tryGet(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::vec_map::try_get`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.key)],
    });
}
//# sourceMappingURL=functions.js.map