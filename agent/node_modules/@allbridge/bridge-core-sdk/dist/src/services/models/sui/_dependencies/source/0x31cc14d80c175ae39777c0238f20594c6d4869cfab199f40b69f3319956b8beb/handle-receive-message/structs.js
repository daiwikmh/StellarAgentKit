"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StampReceiptTicketWithBurnMessage = void 0;
exports.isStampReceiptTicketWithBurnMessage = isStampReceiptTicketWithBurnMessage;
// @ts-nocheck
const reified_1 = require("../../../../_framework/reified");
const util_1 = require("../../../../_framework/util");
const structs_1 = require("../../0x4931e06dce648b3931f890035bd196920770e913e43e45990b383f6486fdd0a5/receive-message/structs");
const structs_2 = require("../burn-message/structs");
const index_1 = require("../index");
const structs_3 = require("../message-transmitter-authenticator/structs");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== StampReceiptTicketWithBurnMessage =============================== */
function isStampReceiptTicketWithBurnMessage(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::handle_receive_message::StampReceiptTicketWithBurnMessage`;
}
class StampReceiptTicketWithBurnMessage {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::handle_receive_message::StampReceiptTicketWithBurnMessage`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = StampReceiptTicketWithBurnMessage.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = StampReceiptTicketWithBurnMessage.$isPhantom;
    stampReceiptTicket;
    burnMessage;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(StampReceiptTicketWithBurnMessage.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.stampReceiptTicket = fields.stampReceiptTicket;
        this.burnMessage = fields.burnMessage;
    }
    static reified() {
        return {
            typeName: StampReceiptTicketWithBurnMessage.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(StampReceiptTicketWithBurnMessage.$typeName, ...[]),
            typeArgs: [],
            isPhantom: StampReceiptTicketWithBurnMessage.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => StampReceiptTicketWithBurnMessage.fromFields(fields),
            fromFieldsWithTypes: (item) => StampReceiptTicketWithBurnMessage.fromFieldsWithTypes(item),
            fromBcs: (data) => StampReceiptTicketWithBurnMessage.fromBcs(data),
            bcs: StampReceiptTicketWithBurnMessage.bcs,
            fromJSONField: (field) => StampReceiptTicketWithBurnMessage.fromJSONField(field),
            fromJSON: (json) => StampReceiptTicketWithBurnMessage.fromJSON(json),
            fromSuiParsedData: (content) => StampReceiptTicketWithBurnMessage.fromSuiParsedData(content),
            fromSuiObjectData: (content) => StampReceiptTicketWithBurnMessage.fromSuiObjectData(content),
            fetch: async (client, id) => StampReceiptTicketWithBurnMessage.fetch(client, id),
            new: (fields) => {
                return new StampReceiptTicketWithBurnMessage([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return StampReceiptTicketWithBurnMessage.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(StampReceiptTicketWithBurnMessage.reified());
    }
    static get p() {
        return StampReceiptTicketWithBurnMessage.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("StampReceiptTicketWithBurnMessage", {
            stamp_receipt_ticket: structs_1.StampReceiptTicket.bcs(structs_3.MessageTransmitterAuthenticator.bcs),
            burn_message: structs_2.BurnMessage.bcs,
        });
    }
    static fromFields(fields) {
        return StampReceiptTicketWithBurnMessage.reified().new({
            stampReceiptTicket: (0, reified_1.decodeFromFields)(structs_1.StampReceiptTicket.reified(structs_3.MessageTransmitterAuthenticator.reified()), fields.stamp_receipt_ticket),
            burnMessage: (0, reified_1.decodeFromFields)(structs_2.BurnMessage.reified(), fields.burn_message),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isStampReceiptTicketWithBurnMessage(item.type)) {
            throw new Error("not a StampReceiptTicketWithBurnMessage type");
        }
        return StampReceiptTicketWithBurnMessage.reified().new({
            stampReceiptTicket: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.StampReceiptTicket.reified(structs_3.MessageTransmitterAuthenticator.reified()), item.fields.stamp_receipt_ticket),
            burnMessage: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.BurnMessage.reified(), item.fields.burn_message),
        });
    }
    static fromBcs(data) {
        return StampReceiptTicketWithBurnMessage.fromFields(StampReceiptTicketWithBurnMessage.bcs.parse(data));
    }
    toJSONField() {
        return {
            stampReceiptTicket: this.stampReceiptTicket.toJSONField(),
            burnMessage: this.burnMessage.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return StampReceiptTicketWithBurnMessage.reified().new({
            stampReceiptTicket: (0, reified_1.decodeFromJSONField)(structs_1.StampReceiptTicket.reified(structs_3.MessageTransmitterAuthenticator.reified()), field.stampReceiptTicket),
            burnMessage: (0, reified_1.decodeFromJSONField)(structs_2.BurnMessage.reified(), field.burnMessage),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== StampReceiptTicketWithBurnMessage.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return StampReceiptTicketWithBurnMessage.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isStampReceiptTicketWithBurnMessage(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a StampReceiptTicketWithBurnMessage object`);
        }
        return StampReceiptTicketWithBurnMessage.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isStampReceiptTicketWithBurnMessage(data.bcs.type)) {
                throw new Error(`object at is not a StampReceiptTicketWithBurnMessage object`);
            }
            return StampReceiptTicketWithBurnMessage.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return StampReceiptTicketWithBurnMessage.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching StampReceiptTicketWithBurnMessage object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isStampReceiptTicketWithBurnMessage(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a StampReceiptTicketWithBurnMessage object`);
        }
        return StampReceiptTicketWithBurnMessage.fromSuiObjectData(res.data);
    }
}
exports.StampReceiptTicketWithBurnMessage = StampReceiptTicketWithBurnMessage;
//# sourceMappingURL=structs.js.map