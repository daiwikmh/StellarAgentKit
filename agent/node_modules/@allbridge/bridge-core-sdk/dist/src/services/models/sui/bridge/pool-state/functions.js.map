{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/bridge/pool-state/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function a(tx: Transaction, typeArg: string, poolState: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::a`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolState)],\n  });\n}\n\nexport function new_(tx: Transaction, typeArg: string, a: bigint | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::new`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, a, `u64`)],\n  });\n}\n\nexport function sqrt(tx: Transaction, n: bigint | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::sqrt`,\n    arguments: [pure(tx, n, `u256`)],\n  });\n}\n\nexport function d(tx: Transaction, typeArg: string, poolState: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::d`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolState)],\n  });\n}\n\nexport interface AddTokenBalanceArgs {\n  poolState: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function addTokenBalance(tx: Transaction, typeArg: string, args: AddTokenBalanceArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::add_token_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolState), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport interface AddVusdBalanceArgs {\n  poolState: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function addVusdBalance(tx: Transaction, typeArg: string, args: AddVusdBalanceArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::add_vusd_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolState), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport function cbrt(tx: Transaction, n: bigint | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::cbrt`,\n    arguments: [pure(tx, n, `u256`)],\n  });\n}\n\nexport function getBalanceRatioMinBp(tx: Transaction, typeArg: string, poolState: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::get_balance_ratio_min_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolState)],\n  });\n}\n\nexport interface GetDArgs {\n  a: bigint | TransactionArgument;\n  x: bigint | TransactionArgument;\n  y: bigint | TransactionArgument;\n}\n\nexport function getD(tx: Transaction, args: GetDArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::get_d`,\n    arguments: [pure(tx, args.a, `u64`), pure(tx, args.x, `u64`), pure(tx, args.y, `u64`)],\n  });\n}\n\nexport interface GetYArgs {\n  poolState: TransactionObjectInput;\n  nativeX: bigint | TransactionArgument;\n}\n\nexport function getY(tx: Transaction, typeArg: string, args: GetYArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::get_y`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolState), pure(tx, args.nativeX, `u64`)],\n  });\n}\n\nexport interface SetBalanceRatioMinBpArgs {\n  poolState: TransactionObjectInput;\n  balanceRatioMinBp: bigint | TransactionArgument;\n}\n\nexport function setBalanceRatioMinBp(tx: Transaction, typeArg: string, args: SetBalanceRatioMinBpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::set_balance_ratio_min_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolState), pure(tx, args.balanceRatioMinBp, `u64`)],\n  });\n}\n\nexport interface SetTokenBalanceArgs {\n  poolState: TransactionObjectInput;\n  tokenBalance: bigint | TransactionArgument;\n}\n\nexport function setTokenBalance(tx: Transaction, typeArg: string, args: SetTokenBalanceArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::set_token_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolState), pure(tx, args.tokenBalance, `u64`)],\n  });\n}\n\nexport function tokenBalance(tx: Transaction, typeArg: string, poolState: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::token_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolState)],\n  });\n}\n\nexport interface SetVusdBalanceArgs {\n  poolState: TransactionObjectInput;\n  vusdBalance: bigint | TransactionArgument;\n}\n\nexport function setVusdBalance(tx: Transaction, typeArg: string, args: SetVusdBalanceArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::set_vusd_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolState), pure(tx, args.vusdBalance, `u64`)],\n  });\n}\n\nexport function vusdBalance(tx: Transaction, typeArg: string, poolState: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::vusd_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolState)],\n  });\n}\n\nexport interface SubTokenBalanceArgs {\n  poolState: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function subTokenBalance(tx: Transaction, typeArg: string, args: SubTokenBalanceArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::sub_token_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolState), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport interface SubVusdBalanceArgs {\n  poolState: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function subVusdBalance(tx: Transaction, typeArg: string, args: SubVusdBalanceArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::sub_vusd_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolState), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport function updateD(tx: Transaction, typeArg: string, poolState: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::update_d`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolState)],\n  });\n}\n\nexport function updateTokenBalance(tx: Transaction, typeArg: string, poolState: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::update_token_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolState)],\n  });\n}\n\nexport function updateVusdBalance(tx: Transaction, typeArg: string, poolState: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::update_vusd_balance`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolState)],\n  });\n}\n\nexport function validateBalanceRatio(tx: Transaction, typeArg: string, poolState: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_state::validate_balance_ratio`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolState)],\n  });\n}\n"]}