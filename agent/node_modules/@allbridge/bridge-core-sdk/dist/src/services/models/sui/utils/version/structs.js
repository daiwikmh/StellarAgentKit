"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CurrentVersion = void 0;
exports.isCurrentVersion = isCurrentVersion;
// @ts-nocheck
const reified_1 = require("../../_framework/reified");
const util_1 = require("../../_framework/util");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== CurrentVersion =============================== */
function isCurrentVersion(type) {
    type = (0, util_1.compressSuiType)(type);
    return type.startsWith(`${index_1.PKG_V1}::version::CurrentVersion` + "<");
}
class CurrentVersion {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::version::CurrentVersion`;
    }
    static $numTypeParams = 1;
    static $isPhantom = [true];
    $typeName = CurrentVersion.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = CurrentVersion.$isPhantom;
    version;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(CurrentVersion.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.version = fields.version;
    }
    static reified(Cap) {
        return {
            typeName: CurrentVersion.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(CurrentVersion.$typeName, ...[(0, reified_1.extractType)(Cap)]),
            typeArgs: [(0, reified_1.extractType)(Cap)],
            isPhantom: CurrentVersion.$isPhantom,
            reifiedTypeArgs: [Cap],
            fromFields: (fields) => CurrentVersion.fromFields(Cap, fields),
            fromFieldsWithTypes: (item) => CurrentVersion.fromFieldsWithTypes(Cap, item),
            fromBcs: (data) => CurrentVersion.fromBcs(Cap, data),
            bcs: CurrentVersion.bcs,
            fromJSONField: (field) => CurrentVersion.fromJSONField(Cap, field),
            fromJSON: (json) => CurrentVersion.fromJSON(Cap, json),
            fromSuiParsedData: (content) => CurrentVersion.fromSuiParsedData(Cap, content),
            fromSuiObjectData: (content) => CurrentVersion.fromSuiObjectData(Cap, content),
            fetch: async (client, id) => CurrentVersion.fetch(client, Cap, id),
            new: (fields) => {
                return new CurrentVersion([(0, reified_1.extractType)(Cap)], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return CurrentVersion.reified;
    }
    static phantom(Cap) {
        return (0, reified_1.phantom)(CurrentVersion.reified(Cap));
    }
    static get p() {
        return CurrentVersion.phantom;
    }
    static get bcs() {
        return bcs_1.bcs.struct("CurrentVersion", {
            version: bcs_1.bcs.u64(),
        });
    }
    static fromFields(typeArg, fields) {
        return CurrentVersion.reified(typeArg).new({
            version: (0, reified_1.decodeFromFields)("u64", fields.version),
        });
    }
    static fromFieldsWithTypes(typeArg, item) {
        if (!isCurrentVersion(item.type)) {
            throw new Error("not a CurrentVersion type");
        }
        (0, reified_1.assertFieldsWithTypesArgsMatch)(item, [typeArg]);
        return CurrentVersion.reified(typeArg).new({
            version: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.version),
        });
    }
    static fromBcs(typeArg, data) {
        return CurrentVersion.fromFields(typeArg, CurrentVersion.bcs.parse(data));
    }
    toJSONField() {
        return {
            version: this.version.toString(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(typeArg, field) {
        return CurrentVersion.reified(typeArg).new({
            version: (0, reified_1.decodeFromJSONField)("u64", field.version),
        });
    }
    static fromJSON(typeArg, json) {
        if (json.$typeName !== CurrentVersion.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        (0, reified_1.assertReifiedTypeArgsMatch)((0, util_1.composeSuiType)(CurrentVersion.$typeName, (0, reified_1.extractType)(typeArg)), json.$typeArgs, [
            typeArg,
        ]);
        return CurrentVersion.fromJSONField(typeArg, json);
    }
    static fromSuiParsedData(typeArg, content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isCurrentVersion(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a CurrentVersion object`);
        }
        return CurrentVersion.fromFieldsWithTypes(typeArg, content);
    }
    static fromSuiObjectData(typeArg, data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isCurrentVersion(data.bcs.type)) {
                throw new Error(`object at is not a CurrentVersion object`);
            }
            const gotTypeArgs = (0, util_1.parseTypeName)(data.bcs.type).typeArgs;
            if (gotTypeArgs.length !== 1) {
                throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);
            }
            const gotTypeArg = (0, util_1.compressSuiType)(gotTypeArgs[0]);
            const expectedTypeArg = (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg));
            if (gotTypeArg !== (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg))) {
                throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);
            }
            return CurrentVersion.fromBcs(typeArg, (0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return CurrentVersion.fromSuiParsedData(typeArg, data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, typeArg, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching CurrentVersion object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isCurrentVersion(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a CurrentVersion object`);
        }
        return CurrentVersion.fromSuiObjectData(typeArg, res.data);
    }
}
exports.CurrentVersion = CurrentVersion;
//# sourceMappingURL=structs.js.map