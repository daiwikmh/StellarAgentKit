"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WormholeMessenger = exports.AdminCap = void 0;
exports.isAdminCap = isAdminCap;
exports.isWormholeMessenger = isWormholeMessenger;
// @ts-nocheck
const reified = __importStar(require("../../_framework/reified"));
const structs_1 = require("../../_dependencies/source/0x1/option/structs");
const structs_2 = require("../../_dependencies/source/0xf47329f4344f3bf0f8e436e2f7b485466cff300f12a166563995d3888c296a94/emitter/structs");
const reified_1 = require("../../_framework/reified");
const util_1 = require("../../_framework/util");
const structs_3 = require("../../sui/balance/structs");
const structs_4 = require("../../sui/object/structs");
const structs_5 = require("../../sui/sui/structs");
const structs_6 = require("../../sui/table/structs");
const structs_7 = require("../../utils/bytes32/structs");
const structs_8 = require("../../utils/message/structs");
const structs_9 = require("../../utils/set/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== AdminCap =============================== */
function isAdminCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::wormhole_messenger::AdminCap`;
}
class AdminCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::wormhole_messenger::AdminCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = AdminCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = AdminCap.$isPhantom;
    id;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(AdminCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
    }
    static reified() {
        return {
            typeName: AdminCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(AdminCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: AdminCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => AdminCap.fromFields(fields),
            fromFieldsWithTypes: (item) => AdminCap.fromFieldsWithTypes(item),
            fromBcs: (data) => AdminCap.fromBcs(data),
            bcs: AdminCap.bcs,
            fromJSONField: (field) => AdminCap.fromJSONField(field),
            fromJSON: (json) => AdminCap.fromJSON(json),
            fromSuiParsedData: (content) => AdminCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => AdminCap.fromSuiObjectData(content),
            fetch: async (client, id) => AdminCap.fetch(client, id),
            new: (fields) => {
                return new AdminCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return AdminCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(AdminCap.reified());
    }
    static get p() {
        return AdminCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("AdminCap", {
            id: structs_4.UID.bcs,
        });
    }
    static fromFields(fields) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_4.UID.reified(), fields.id),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isAdminCap(item.type)) {
            throw new Error("not a AdminCap type");
        }
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_4.UID.reified(), item.fields.id),
        });
    }
    static fromBcs(data) {
        return AdminCap.fromFields(AdminCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_4.UID.reified(), field.id),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== AdminCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return AdminCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isAdminCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a AdminCap object`);
        }
        return AdminCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isAdminCap(data.bcs.type)) {
                throw new Error(`object at is not a AdminCap object`);
            }
            return AdminCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return AdminCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching AdminCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isAdminCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a AdminCap object`);
        }
        return AdminCap.fromSuiObjectData(res.data);
    }
}
exports.AdminCap = AdminCap;
/* ============================== WormholeMessenger =============================== */
function isWormholeMessenger(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::wormhole_messenger::WormholeMessenger`;
}
class WormholeMessenger {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::wormhole_messenger::WormholeMessenger`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = WormholeMessenger.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = WormholeMessenger.$isPhantom;
    id;
    emitterCap;
    receivedMessages;
    sentMessages;
    otherWormholeMessengers;
    otherChainIds;
    gasUsage;
    gasBalance;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(WormholeMessenger.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
        this.emitterCap = fields.emitterCap;
        this.receivedMessages = fields.receivedMessages;
        this.sentMessages = fields.sentMessages;
        this.otherWormholeMessengers = fields.otherWormholeMessengers;
        this.otherChainIds = fields.otherChainIds;
        this.gasUsage = fields.gasUsage;
        this.gasBalance = fields.gasBalance;
    }
    static reified() {
        return {
            typeName: WormholeMessenger.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(WormholeMessenger.$typeName, ...[]),
            typeArgs: [],
            isPhantom: WormholeMessenger.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => WormholeMessenger.fromFields(fields),
            fromFieldsWithTypes: (item) => WormholeMessenger.fromFieldsWithTypes(item),
            fromBcs: (data) => WormholeMessenger.fromBcs(data),
            bcs: WormholeMessenger.bcs,
            fromJSONField: (field) => WormholeMessenger.fromJSONField(field),
            fromJSON: (json) => WormholeMessenger.fromJSON(json),
            fromSuiParsedData: (content) => WormholeMessenger.fromSuiParsedData(content),
            fromSuiObjectData: (content) => WormholeMessenger.fromSuiObjectData(content),
            fetch: async (client, id) => WormholeMessenger.fetch(client, id),
            new: (fields) => {
                return new WormholeMessenger([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return WormholeMessenger.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(WormholeMessenger.reified());
    }
    static get p() {
        return WormholeMessenger.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("WormholeMessenger", {
            id: structs_4.UID.bcs,
            emitter_cap: structs_1.Option.bcs(structs_2.EmitterCap.bcs),
            received_messages: structs_9.Set.bcs,
            sent_messages: structs_9.Set.bcs,
            other_wormhole_messengers: structs_6.Table.bcs,
            other_chain_ids: bcs_1.bcs.vector(bcs_1.bcs.bool()),
            gas_usage: structs_6.Table.bcs,
            gas_balance: structs_3.Balance.bcs,
        });
    }
    static fromFields(fields) {
        return WormholeMessenger.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_4.UID.reified(), fields.id),
            emitterCap: (0, reified_1.decodeFromFields)(structs_1.Option.reified(structs_2.EmitterCap.reified()), fields.emitter_cap),
            receivedMessages: (0, reified_1.decodeFromFields)(structs_9.Set.reified(reified.phantom(structs_8.Message.reified())), fields.received_messages),
            sentMessages: (0, reified_1.decodeFromFields)(structs_9.Set.reified(reified.phantom(structs_8.Message.reified())), fields.sent_messages),
            otherWormholeMessengers: (0, reified_1.decodeFromFields)(structs_6.Table.reified(reified.phantom("u16"), reified.phantom(structs_7.Bytes32.reified())), fields.other_wormhole_messengers),
            otherChainIds: (0, reified_1.decodeFromFields)(reified.vector("bool"), fields.other_chain_ids),
            gasUsage: (0, reified_1.decodeFromFields)(structs_6.Table.reified(reified.phantom("u8"), reified.phantom("u64")), fields.gas_usage),
            gasBalance: (0, reified_1.decodeFromFields)(structs_3.Balance.reified(reified.phantom(structs_5.SUI.reified())), fields.gas_balance),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isWormholeMessenger(item.type)) {
            throw new Error("not a WormholeMessenger type");
        }
        return WormholeMessenger.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_4.UID.reified(), item.fields.id),
            emitterCap: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.Option.reified(structs_2.EmitterCap.reified()), item.fields.emitter_cap),
            receivedMessages: (0, reified_1.decodeFromFieldsWithTypes)(structs_9.Set.reified(reified.phantom(structs_8.Message.reified())), item.fields.received_messages),
            sentMessages: (0, reified_1.decodeFromFieldsWithTypes)(structs_9.Set.reified(reified.phantom(structs_8.Message.reified())), item.fields.sent_messages),
            otherWormholeMessengers: (0, reified_1.decodeFromFieldsWithTypes)(structs_6.Table.reified(reified.phantom("u16"), reified.phantom(structs_7.Bytes32.reified())), item.fields.other_wormhole_messengers),
            otherChainIds: (0, reified_1.decodeFromFieldsWithTypes)(reified.vector("bool"), item.fields.other_chain_ids),
            gasUsage: (0, reified_1.decodeFromFieldsWithTypes)(structs_6.Table.reified(reified.phantom("u8"), reified.phantom("u64")), item.fields.gas_usage),
            gasBalance: (0, reified_1.decodeFromFieldsWithTypes)(structs_3.Balance.reified(reified.phantom(structs_5.SUI.reified())), item.fields.gas_balance),
        });
    }
    static fromBcs(data) {
        return WormholeMessenger.fromFields(WormholeMessenger.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
            emitterCap: (0, reified_1.fieldToJSON)(`${structs_1.Option.$typeName}<${structs_2.EmitterCap.$typeName}>`, this.emitterCap),
            receivedMessages: this.receivedMessages.toJSONField(),
            sentMessages: this.sentMessages.toJSONField(),
            otherWormholeMessengers: this.otherWormholeMessengers.toJSONField(),
            otherChainIds: (0, reified_1.fieldToJSON)(`vector<bool>`, this.otherChainIds),
            gasUsage: this.gasUsage.toJSONField(),
            gasBalance: this.gasBalance.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return WormholeMessenger.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_4.UID.reified(), field.id),
            emitterCap: (0, reified_1.decodeFromJSONField)(structs_1.Option.reified(structs_2.EmitterCap.reified()), field.emitterCap),
            receivedMessages: (0, reified_1.decodeFromJSONField)(structs_9.Set.reified(reified.phantom(structs_8.Message.reified())), field.receivedMessages),
            sentMessages: (0, reified_1.decodeFromJSONField)(structs_9.Set.reified(reified.phantom(structs_8.Message.reified())), field.sentMessages),
            otherWormholeMessengers: (0, reified_1.decodeFromJSONField)(structs_6.Table.reified(reified.phantom("u16"), reified.phantom(structs_7.Bytes32.reified())), field.otherWormholeMessengers),
            otherChainIds: (0, reified_1.decodeFromJSONField)(reified.vector("bool"), field.otherChainIds),
            gasUsage: (0, reified_1.decodeFromJSONField)(structs_6.Table.reified(reified.phantom("u8"), reified.phantom("u64")), field.gasUsage),
            gasBalance: (0, reified_1.decodeFromJSONField)(structs_3.Balance.reified(reified.phantom(structs_5.SUI.reified())), field.gasBalance),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== WormholeMessenger.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return WormholeMessenger.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isWormholeMessenger(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a WormholeMessenger object`);
        }
        return WormholeMessenger.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isWormholeMessenger(data.bcs.type)) {
                throw new Error(`object at is not a WormholeMessenger object`);
            }
            return WormholeMessenger.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return WormholeMessenger.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching WormholeMessenger object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isWormholeMessenger(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a WormholeMessenger object`);
        }
        return WormholeMessenger.fromSuiObjectData(res.data);
    }
}
exports.WormholeMessenger = WormholeMessenger;
//# sourceMappingURL=structs.js.map