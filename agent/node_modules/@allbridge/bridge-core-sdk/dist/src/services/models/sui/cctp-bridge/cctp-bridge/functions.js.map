{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/cctp-bridge/cctp-bridge/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface BridgeArgs {\n  cctpBridge: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  tokenMessengerMinterState: TransactionObjectInput;\n  messageTransmitterState: TransactionObjectInput;\n  treasury: TransactionObjectInput;\n  denyList: TransactionObjectInput;\n  amount: TransactionObjectInput;\n  feeSuiCoin: TransactionObjectInput;\n  feeTokenCoin: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  recipient: TransactionObjectInput;\n  recipientWalletAddress: TransactionObjectInput;\n}\n\nexport function bridge(tx: Transaction, typeArg: string, args: BridgeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::bridge`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.cctpBridge),\n      obj(tx, args.gasOracle),\n      obj(tx, args.tokenMessengerMinterState),\n      obj(tx, args.messageTransmitterState),\n      obj(tx, args.treasury),\n      obj(tx, args.denyList),\n      obj(tx, args.amount),\n      obj(tx, args.feeSuiCoin),\n      obj(tx, args.feeTokenCoin),\n      pure(tx, args.destinationChainId, `u8`),\n      obj(tx, args.recipient),\n      obj(tx, args.recipientWalletAddress),\n    ],\n  });\n}\n\nexport function getId(tx: Transaction, cctpBridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::get_id`,\n    arguments: [obj(tx, cctpBridge)],\n  });\n}\n\nexport function getVersion(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::get_version`,\n    arguments: [],\n  });\n}\n\nexport function init(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::init`,\n    arguments: [],\n  });\n}\n\nexport interface MigrateArgs {\n  admin: TransactionObjectInput;\n  cctpBridge: TransactionObjectInput;\n}\n\nexport function migrate(tx: Transaction, args: MigrateArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::migrate`,\n    arguments: [obj(tx, args.admin), obj(tx, args.cctpBridge)],\n  });\n}\n\nexport interface GetTransactionCostArgs {\n  cctpBridge: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getTransactionCost(tx: Transaction, args: GetTransactionCostArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::get_transaction_cost`,\n    arguments: [obj(tx, args.cctpBridge), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface SetGasUsageArgs {\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  value: bigint | TransactionArgument;\n}\n\nexport function setGasUsage(tx: Transaction, args: SetGasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::set_gas_usage`,\n    arguments: [obj(tx, args.cctpBridge), pure(tx, args.chainId, `u8`), pure(tx, args.value, `u64`)],\n  });\n}\n\nexport interface WithdrawFeeArgs {\n  cctpBridge: TransactionObjectInput;\n  amount: bigint | TransactionArgument;\n}\n\nexport function withdrawFee(tx: Transaction, typeArg: string, args: WithdrawFeeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::withdraw_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.cctpBridge), pure(tx, args.amount, `u64`)],\n  });\n}\n\nexport interface GasUsageArgs {\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function gasUsage(tx: Transaction, args: GasUsageArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::gas_usage`,\n    arguments: [obj(tx, args.cctpBridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport function feeValue(tx: Transaction, typeArg: string, cctpBridge: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::fee_value`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, cctpBridge)],\n  });\n}\n\nexport interface ReceiveTokensArgs {\n  tokenMessengerMinterState: TransactionObjectInput;\n  messageTransmitterState: TransactionObjectInput;\n  denyList: TransactionObjectInput;\n  treasury: TransactionObjectInput;\n  recipient: string | TransactionArgument;\n  message: Array<number | TransactionArgument> | TransactionArgument;\n  signature: Array<number | TransactionArgument> | TransactionArgument;\n  extraGasCoin: TransactionObjectInput;\n}\n\nexport function receiveTokens(tx: Transaction, typeArg: string, args: ReceiveTokensArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::receive_tokens`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.tokenMessengerMinterState),\n      obj(tx, args.messageTransmitterState),\n      obj(tx, args.denyList),\n      obj(tx, args.treasury),\n      pure(tx, args.recipient, `address`),\n      pure(tx, args.message, `vector<u8>`),\n      pure(tx, args.signature, `vector<u8>`),\n      obj(tx, args.extraGasCoin),\n    ],\n  });\n}\n\nexport interface ChangeRecipientArgs {\n  cctpBridge: TransactionObjectInput;\n  originalMessage: Array<number | TransactionArgument> | TransactionArgument;\n  originalAttestation: Array<number | TransactionArgument> | TransactionArgument;\n  newRecipient: TransactionObjectInput;\n  tokenMessengerMinterState: TransactionObjectInput;\n  messageTransmitterState: TransactionObjectInput;\n}\n\nexport function changeRecipient(tx: Transaction, typeArg: string, args: ChangeRecipientArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::change_recipient`,\n    typeArguments: [typeArg],\n    arguments: [\n      obj(tx, args.cctpBridge),\n      pure(tx, args.originalMessage, `vector<u8>`),\n      pure(tx, args.originalAttestation, `vector<u8>`),\n      obj(tx, args.newRecipient),\n      obj(tx, args.tokenMessengerMinterState),\n      obj(tx, args.messageTransmitterState),\n    ],\n  });\n}\n\nexport function deserializeNonce(tx: Transaction, data: Array<number | TransactionArgument> | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::deserialize_nonce`,\n    arguments: [pure(tx, data, `vector<u8>`)],\n  });\n}\n\nexport interface GetBridgingCostInTokensArgs {\n  cctpBridge: TransactionObjectInput;\n  gasOracle: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getBridgingCostInTokens(tx: Transaction, args: GetBridgingCostInTokensArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::get_bridging_cost_in_tokens`,\n    arguments: [obj(tx, args.cctpBridge), obj(tx, args.gasOracle), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface GetDomainByChainIdArgs {\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function getDomainByChainId(tx: Transaction, args: GetDomainByChainIdArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::get_domain_by_chain_id`,\n    arguments: [obj(tx, args.cctpBridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n\nexport interface IsMessageProcessedArgs {\n  cctpBridge: TransactionObjectInput;\n  messageTransmitterState: TransactionObjectInput;\n  sourceChainId: number | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n}\n\nexport function isMessageProcessed(tx: Transaction, args: IsMessageProcessedArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::is_message_processed`,\n    arguments: [\n      obj(tx, args.cctpBridge),\n      obj(tx, args.messageTransmitterState),\n      pure(tx, args.sourceChainId, `u8`),\n      pure(tx, args.nonce, `u64`),\n    ],\n  });\n}\n\nexport interface RegisterBridgeDestinationArgs {\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n  domain: number | TransactionArgument;\n}\n\nexport function registerBridgeDestination(tx: Transaction, args: RegisterBridgeDestinationArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::register_bridge_destination`,\n    arguments: [obj(tx, args.cctpBridge), pure(tx, args.chainId, `u8`), pure(tx, args.domain, `u32`)],\n  });\n}\n\nexport interface SetAdminFeeShareArgs {\n  cctpBridge: TransactionObjectInput;\n  adminFeeShareBp: bigint | TransactionArgument;\n}\n\nexport function setAdminFeeShare(tx: Transaction, args: SetAdminFeeShareArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::set_admin_fee_share`,\n    arguments: [obj(tx, args.cctpBridge), pure(tx, args.adminFeeShareBp, `u64`)],\n  });\n}\n\nexport interface UnregisterBridgeDestinationArgs {\n  cctpBridge: TransactionObjectInput;\n  chainId: number | TransactionArgument;\n}\n\nexport function unregisterBridgeDestination(tx: Transaction, args: UnregisterBridgeDestinationArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::cctp_bridge::unregister_bridge_destination`,\n    arguments: [obj(tx, args.cctpBridge), pure(tx, args.chainId, `u8`)],\n  });\n}\n"]}