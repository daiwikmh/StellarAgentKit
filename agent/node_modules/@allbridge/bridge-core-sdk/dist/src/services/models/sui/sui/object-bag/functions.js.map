{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/object-bag/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { GenericArg, generic, obj } from \"../../_framework/util\";\nimport { Transaction, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface AddArgs {\n  bag: TransactionObjectInput;\n  k: GenericArg;\n  v: GenericArg;\n}\n\nexport function add(tx: Transaction, typeArgs: [string, string], args: AddArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::add`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.bag), generic(tx, `${typeArgs[0]}`, args.k), generic(tx, `${typeArgs[1]}`, args.v)],\n  });\n}\n\nexport interface BorrowArgs {\n  bag: TransactionObjectInput;\n  k: GenericArg;\n}\n\nexport function borrow(tx: Transaction, typeArgs: [string, string], args: BorrowArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::borrow`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.bag), generic(tx, `${typeArgs[0]}`, args.k)],\n  });\n}\n\nexport interface BorrowMutArgs {\n  bag: TransactionObjectInput;\n  k: GenericArg;\n}\n\nexport function borrowMut(tx: Transaction, typeArgs: [string, string], args: BorrowMutArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::borrow_mut`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.bag), generic(tx, `${typeArgs[0]}`, args.k)],\n  });\n}\n\nexport interface ContainsArgs {\n  bag: TransactionObjectInput;\n  k: GenericArg;\n}\n\nexport function contains(tx: Transaction, typeArg: string, args: ContainsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::contains`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bag), generic(tx, `${typeArg}`, args.k)],\n  });\n}\n\nexport function destroyEmpty(tx: Transaction, bag: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::destroy_empty`,\n    arguments: [obj(tx, bag)],\n  });\n}\n\nexport function isEmpty(tx: Transaction, bag: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::is_empty`,\n    arguments: [obj(tx, bag)],\n  });\n}\n\nexport function length(tx: Transaction, bag: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::length`,\n    arguments: [obj(tx, bag)],\n  });\n}\n\nexport interface RemoveArgs {\n  bag: TransactionObjectInput;\n  k: GenericArg;\n}\n\nexport function remove(tx: Transaction, typeArgs: [string, string], args: RemoveArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::remove`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.bag), generic(tx, `${typeArgs[0]}`, args.k)],\n  });\n}\n\nexport function new_(tx: Transaction) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::new`,\n    arguments: [],\n  });\n}\n\nexport interface ContainsWithTypeArgs {\n  bag: TransactionObjectInput;\n  k: GenericArg;\n}\n\nexport function containsWithType(tx: Transaction, typeArgs: [string, string], args: ContainsWithTypeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::contains_with_type`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.bag), generic(tx, `${typeArgs[0]}`, args.k)],\n  });\n}\n\nexport interface ValueIdArgs {\n  bag: TransactionObjectInput;\n  k: GenericArg;\n}\n\nexport function valueId(tx: Transaction, typeArg: string, args: ValueIdArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::object_bag::value_id`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.bag), generic(tx, `${typeArg}`, args.k)],\n  });\n}\n"]}