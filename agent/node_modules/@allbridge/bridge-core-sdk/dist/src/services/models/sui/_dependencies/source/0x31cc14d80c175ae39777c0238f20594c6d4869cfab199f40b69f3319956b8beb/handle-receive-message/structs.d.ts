import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../../../_framework/reified";
import { FieldsWithTypes } from "../../../../_framework/util";
import { StampReceiptTicket } from "../../0x4931e06dce648b3931f890035bd196920770e913e43e45990b383f6486fdd0a5/receive-message/structs";
import { BurnMessage } from "../burn-message/structs";
import { MessageTransmitterAuthenticator } from "../message-transmitter-authenticator/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isStampReceiptTicketWithBurnMessage(type: string): boolean;
export interface StampReceiptTicketWithBurnMessageFields {
    stampReceiptTicket: ToField<StampReceiptTicket<MessageTransmitterAuthenticator>>;
    burnMessage: ToField<BurnMessage>;
}
export type StampReceiptTicketWithBurnMessageReified = Reified<StampReceiptTicketWithBurnMessage, StampReceiptTicketWithBurnMessageFields>;
export declare class StampReceiptTicketWithBurnMessage implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly stampReceiptTicket: ToField<StampReceiptTicket<MessageTransmitterAuthenticator>>;
    readonly burnMessage: ToField<BurnMessage>;
    private constructor();
    static reified(): StampReceiptTicketWithBurnMessageReified;
    static get r(): import("../../../../_framework/reified").StructClassReified<StampReceiptTicketWithBurnMessage, StampReceiptTicketWithBurnMessageFields>;
    static phantom(): PhantomReified<ToTypeStr<StampReceiptTicketWithBurnMessage>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        stamp_receipt_ticket: {
            auth: {
                dummy_field: boolean;
            };
            receipt: {
                caller: string;
                recipient: string;
                source_domain: number;
                sender: string;
                nonce: string;
                message_body: number[];
                current_version: {
                    contents: any[];
                };
            };
        };
        burn_message: {
            version: number;
            burn_token: string;
            mint_recipient: string;
            amount: string;
            message_sender: string;
        };
    }, {
        stamp_receipt_ticket: {
            auth: {
                dummy_field: boolean;
            };
            receipt: {
                caller: string;
                recipient: string;
                source_domain: number;
                sender: string;
                nonce: string | number | bigint;
                message_body: Iterable<number> & {
                    length: number;
                };
                current_version: {
                    contents: Iterable<any> & {
                        length: number;
                    };
                };
            };
        };
        burn_message: {
            version: number;
            burn_token: string;
            mint_recipient: string;
            amount: string | number | bigint;
            message_sender: string;
        };
    }>;
    static fromFields(fields: Record<string, any>): StampReceiptTicketWithBurnMessage;
    static fromFieldsWithTypes(item: FieldsWithTypes): StampReceiptTicketWithBurnMessage;
    static fromBcs(data: Uint8Array): StampReceiptTicketWithBurnMessage;
    toJSONField(): {
        stampReceiptTicket: {
            auth: {
                dummyField: boolean;
            };
            receipt: {
                caller: string;
                recipient: string;
                sourceDomain: number;
                sender: string;
                nonce: string;
                messageBody: number[];
                currentVersion: {
                    contents: string[];
                };
            };
        };
        burnMessage: {
            version: number;
            burnToken: string;
            mintRecipient: string;
            amount: string;
            messageSender: string;
        };
    };
    toJSON(): {
        stampReceiptTicket: {
            auth: {
                dummyField: boolean;
            };
            receipt: {
                caller: string;
                recipient: string;
                sourceDomain: number;
                sender: string;
                nonce: string;
                messageBody: number[];
                currentVersion: {
                    contents: string[];
                };
            };
        };
        burnMessage: {
            version: number;
            burnToken: string;
            mintRecipient: string;
            amount: string;
            messageSender: string;
        };
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): StampReceiptTicketWithBurnMessage;
    static fromJSON(json: Record<string, any>): StampReceiptTicketWithBurnMessage;
    static fromSuiParsedData(content: SuiParsedData): StampReceiptTicketWithBurnMessage;
    static fromSuiObjectData(data: SuiObjectData): StampReceiptTicketWithBurnMessage;
    static fetch(client: SuiClient, id: string): Promise<StampReceiptTicketWithBurnMessage>;
}
