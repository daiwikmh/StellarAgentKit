"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.borrow = borrow;
exports.borrowMut = borrowMut;
exports.default_ = default_;
exports.new_ = new_;
exports.uid = uid;
exports.take = take;
exports.owner = owner;
exports.list = list;
exports.withdraw = withdraw;
exports.uidMutAsOwner = uidMutAsOwner;
exports.borrowVal = borrowVal;
exports.closeAndWithdraw = closeAndWithdraw;
exports.delist = delist;
exports.hasAccess = hasAccess;
exports.hasItem = hasItem;
exports.hasItemWithType = hasItemWithType;
exports.isListed = isListed;
exports.isListedExclusively = isListedExclusively;
exports.isLocked = isLocked;
exports.itemCount = itemCount;
exports.kioskOwnerCapFor = kioskOwnerCapFor;
exports.listWithPurchaseCap = listWithPurchaseCap;
exports.lock = lock;
exports.lockInternal = lockInternal;
exports.place = place;
exports.placeAndList = placeAndList;
exports.placeInternal = placeInternal;
exports.profitsAmount = profitsAmount;
exports.profitsMut = profitsMut;
exports.purchase = purchase;
exports.purchaseCapItem = purchaseCapItem;
exports.purchaseCapKiosk = purchaseCapKiosk;
exports.purchaseCapMinPrice = purchaseCapMinPrice;
exports.purchaseWithCap = purchaseWithCap;
exports.returnPurchaseCap = returnPurchaseCap;
exports.returnVal = returnVal;
exports.setAllowExtensions = setAllowExtensions;
exports.setOwner = setOwner;
exports.setOwnerCustom = setOwnerCustom;
exports.uidMut = uidMut;
exports.uidMutInternal = uidMutInternal;
// @ts-nocheck
const __1 = require("..");
const structs_1 = require("../../_dependencies/source/0x1/option/structs");
const util_1 = require("../../_framework/util");
const structs_2 = require("../object/structs");
function borrow(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::borrow`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function borrowMut(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::borrow_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function default_(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::default`,
        arguments: [],
    });
}
function new_(tx) {
    return tx.moveCall({ target: `${__1.PUBLISHED_AT}::kiosk::new`, arguments: [] });
}
function uid(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::uid`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function take(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::take`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function owner(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::owner`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function list(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::list`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.self),
            (0, util_1.obj)(tx, args.cap),
            (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`),
            (0, util_1.pure)(tx, args.price, `u64`),
        ],
    });
}
function withdraw(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::withdraw`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.amount, `${structs_1.Option.$typeName}<u64>`)],
    });
}
function uidMutAsOwner(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::uid_mut_as_owner`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function borrowVal(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::borrow_val`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function closeAndWithdraw(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::close_and_withdraw`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function delist(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::delist`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function hasAccess(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::has_access`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function hasItem(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::has_item`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function hasItemWithType(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::has_item_with_type`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function isListed(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::is_listed`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function isListedExclusively(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::is_listed_exclusively`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function isLocked(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::is_locked`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`)],
    });
}
function itemCount(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::item_count`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function kioskOwnerCapFor(tx, cap) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::kiosk_owner_cap_for`,
        arguments: [(0, util_1.obj)(tx, cap)],
    });
}
function listWithPurchaseCap(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::list_with_purchase_cap`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.self),
            (0, util_1.obj)(tx, args.cap),
            (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`),
            (0, util_1.pure)(tx, args.minPrice, `u64`),
        ],
    });
}
function lock(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::lock`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.policy), (0, util_1.generic)(tx, `${typeArg}`, args.item)],
    });
}
function lockInternal(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::lock_internal`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArg}`, args.item)],
    });
}
function place(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::place`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.generic)(tx, `${typeArg}`, args.item)],
    });
}
function placeAndList(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::place_and_list`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.self),
            (0, util_1.obj)(tx, args.cap),
            (0, util_1.generic)(tx, `${typeArg}`, args.item),
            (0, util_1.pure)(tx, args.price, `u64`),
        ],
    });
}
function placeInternal(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::place_internal`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArg}`, args.item)],
    });
}
function profitsAmount(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::profits_amount`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function profitsMut(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::profits_mut`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function purchase(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::purchase`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.id, `${structs_2.ID.$typeName}`), (0, util_1.obj)(tx, args.payment)],
    });
}
function purchaseCapItem(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::purchase_cap_item`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function purchaseCapKiosk(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::purchase_cap_kiosk`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function purchaseCapMinPrice(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::purchase_cap_min_price`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function purchaseWithCap(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::purchase_with_cap`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.purchaseCap), (0, util_1.obj)(tx, args.payment)],
    });
}
function returnPurchaseCap(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::return_purchase_cap`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.purchaseCap)],
    });
}
function returnVal(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::return_val`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.generic)(tx, `${typeArg}`, args.item), (0, util_1.obj)(tx, args.borrow)],
    });
}
function setAllowExtensions(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::set_allow_extensions`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.allowExtensions, `bool`)],
    });
}
function setOwner(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::set_owner`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function setOwnerCustom(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::set_owner_custom`,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.owner, `address`)],
    });
}
function uidMut(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::uid_mut`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function uidMutInternal(tx, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::kiosk::uid_mut_internal`,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
//# sourceMappingURL=functions.js.map