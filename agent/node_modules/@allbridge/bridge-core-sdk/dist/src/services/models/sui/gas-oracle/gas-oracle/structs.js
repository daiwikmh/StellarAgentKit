"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasOracle = exports.ChainData = exports.AdminCap = void 0;
exports.isAdminCap = isAdminCap;
exports.isChainData = isChainData;
exports.isGasOracle = isGasOracle;
// @ts-nocheck
const reified = __importStar(require("../../_framework/reified"));
const reified_1 = require("../../_framework/reified");
const util_1 = require("../../_framework/util");
const structs_1 = require("../../sui/object/structs");
const structs_2 = require("../../sui/table/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== AdminCap =============================== */
function isAdminCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::gas_oracle::AdminCap`;
}
class AdminCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::gas_oracle::AdminCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = AdminCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = AdminCap.$isPhantom;
    id;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(AdminCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
    }
    static reified() {
        return {
            typeName: AdminCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(AdminCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: AdminCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => AdminCap.fromFields(fields),
            fromFieldsWithTypes: (item) => AdminCap.fromFieldsWithTypes(item),
            fromBcs: (data) => AdminCap.fromBcs(data),
            bcs: AdminCap.bcs,
            fromJSONField: (field) => AdminCap.fromJSONField(field),
            fromJSON: (json) => AdminCap.fromJSON(json),
            fromSuiParsedData: (content) => AdminCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => AdminCap.fromSuiObjectData(content),
            fetch: async (client, id) => AdminCap.fetch(client, id),
            new: (fields) => {
                return new AdminCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return AdminCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(AdminCap.reified());
    }
    static get p() {
        return AdminCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("AdminCap", {
            id: structs_1.UID.bcs,
        });
    }
    static fromFields(fields) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_1.UID.reified(), fields.id),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isAdminCap(item.type)) {
            throw new Error("not a AdminCap type");
        }
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.UID.reified(), item.fields.id),
        });
    }
    static fromBcs(data) {
        return AdminCap.fromFields(AdminCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_1.UID.reified(), field.id),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== AdminCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return AdminCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isAdminCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a AdminCap object`);
        }
        return AdminCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isAdminCap(data.bcs.type)) {
                throw new Error(`object at is not a AdminCap object`);
            }
            return AdminCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return AdminCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching AdminCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isAdminCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a AdminCap object`);
        }
        return AdminCap.fromSuiObjectData(res.data);
    }
}
exports.AdminCap = AdminCap;
/* ============================== ChainData =============================== */
function isChainData(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::gas_oracle::ChainData`;
}
class ChainData {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::gas_oracle::ChainData`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = ChainData.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = ChainData.$isPhantom;
    gasPrice;
    price;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(ChainData.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.gasPrice = fields.gasPrice;
        this.price = fields.price;
    }
    static reified() {
        return {
            typeName: ChainData.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(ChainData.$typeName, ...[]),
            typeArgs: [],
            isPhantom: ChainData.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => ChainData.fromFields(fields),
            fromFieldsWithTypes: (item) => ChainData.fromFieldsWithTypes(item),
            fromBcs: (data) => ChainData.fromBcs(data),
            bcs: ChainData.bcs,
            fromJSONField: (field) => ChainData.fromJSONField(field),
            fromJSON: (json) => ChainData.fromJSON(json),
            fromSuiParsedData: (content) => ChainData.fromSuiParsedData(content),
            fromSuiObjectData: (content) => ChainData.fromSuiObjectData(content),
            fetch: async (client, id) => ChainData.fetch(client, id),
            new: (fields) => {
                return new ChainData([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return ChainData.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(ChainData.reified());
    }
    static get p() {
        return ChainData.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("ChainData", {
            gas_price: bcs_1.bcs.u128(),
            price: bcs_1.bcs.u128(),
        });
    }
    static fromFields(fields) {
        return ChainData.reified().new({
            gasPrice: (0, reified_1.decodeFromFields)("u128", fields.gas_price),
            price: (0, reified_1.decodeFromFields)("u128", fields.price),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isChainData(item.type)) {
            throw new Error("not a ChainData type");
        }
        return ChainData.reified().new({
            gasPrice: (0, reified_1.decodeFromFieldsWithTypes)("u128", item.fields.gas_price),
            price: (0, reified_1.decodeFromFieldsWithTypes)("u128", item.fields.price),
        });
    }
    static fromBcs(data) {
        return ChainData.fromFields(ChainData.bcs.parse(data));
    }
    toJSONField() {
        return {
            gasPrice: this.gasPrice.toString(),
            price: this.price.toString(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return ChainData.reified().new({
            gasPrice: (0, reified_1.decodeFromJSONField)("u128", field.gasPrice),
            price: (0, reified_1.decodeFromJSONField)("u128", field.price),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== ChainData.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return ChainData.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isChainData(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a ChainData object`);
        }
        return ChainData.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isChainData(data.bcs.type)) {
                throw new Error(`object at is not a ChainData object`);
            }
            return ChainData.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return ChainData.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching ChainData object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isChainData(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a ChainData object`);
        }
        return ChainData.fromSuiObjectData(res.data);
    }
}
exports.ChainData = ChainData;
/* ============================== GasOracle =============================== */
function isGasOracle(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::gas_oracle::GasOracle`;
}
class GasOracle {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::gas_oracle::GasOracle`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = GasOracle.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = GasOracle.$isPhantom;
    id;
    data;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(GasOracle.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
        this.data = fields.data;
    }
    static reified() {
        return {
            typeName: GasOracle.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(GasOracle.$typeName, ...[]),
            typeArgs: [],
            isPhantom: GasOracle.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => GasOracle.fromFields(fields),
            fromFieldsWithTypes: (item) => GasOracle.fromFieldsWithTypes(item),
            fromBcs: (data) => GasOracle.fromBcs(data),
            bcs: GasOracle.bcs,
            fromJSONField: (field) => GasOracle.fromJSONField(field),
            fromJSON: (json) => GasOracle.fromJSON(json),
            fromSuiParsedData: (content) => GasOracle.fromSuiParsedData(content),
            fromSuiObjectData: (content) => GasOracle.fromSuiObjectData(content),
            fetch: async (client, id) => GasOracle.fetch(client, id),
            new: (fields) => {
                return new GasOracle([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return GasOracle.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(GasOracle.reified());
    }
    static get p() {
        return GasOracle.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("GasOracle", {
            id: structs_1.UID.bcs,
            data: structs_2.Table.bcs,
        });
    }
    static fromFields(fields) {
        return GasOracle.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_1.UID.reified(), fields.id),
            data: (0, reified_1.decodeFromFields)(structs_2.Table.reified(reified.phantom("u8"), reified.phantom(ChainData.reified())), fields.data),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isGasOracle(item.type)) {
            throw new Error("not a GasOracle type");
        }
        return GasOracle.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.UID.reified(), item.fields.id),
            data: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.Table.reified(reified.phantom("u8"), reified.phantom(ChainData.reified())), item.fields.data),
        });
    }
    static fromBcs(data) {
        return GasOracle.fromFields(GasOracle.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
            data: this.data.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return GasOracle.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_1.UID.reified(), field.id),
            data: (0, reified_1.decodeFromJSONField)(structs_2.Table.reified(reified.phantom("u8"), reified.phantom(ChainData.reified())), field.data),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== GasOracle.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return GasOracle.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isGasOracle(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a GasOracle object`);
        }
        return GasOracle.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isGasOracle(data.bcs.type)) {
                throw new Error(`object at is not a GasOracle object`);
            }
            return GasOracle.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return GasOracle.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching GasOracle object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isGasOracle(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a GasOracle object`);
        }
        return GasOracle.fromSuiObjectData(res.data);
    }
}
exports.GasOracle = GasOracle;
//# sourceMappingURL=structs.js.map