"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.delete_ = delete_;
exports.owner = owner;
exports.audience = audience;
exports.checkZkloginId = checkZkloginId;
exports.checkZkloginIdInternal = checkZkloginIdInternal;
exports.keyClaimName = keyClaimName;
exports.keyClaimValue = keyClaimValue;
exports.issuer = issuer;
exports.verifyZkloginId = verifyZkloginId;
// @ts-nocheck
const __1 = require("..");
const structs_1 = require("../../_dependencies/source/0x1/string/structs");
const util_1 = require("../../_framework/util");
function delete_(tx, verifiedId) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::zklogin_verified_id::delete`,
        arguments: [(0, util_1.obj)(tx, verifiedId)],
    });
}
function owner(tx, verifiedId) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::zklogin_verified_id::owner`,
        arguments: [(0, util_1.obj)(tx, verifiedId)],
    });
}
function audience(tx, verifiedId) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::zklogin_verified_id::audience`,
        arguments: [(0, util_1.obj)(tx, verifiedId)],
    });
}
function checkZkloginId(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::zklogin_verified_id::check_zklogin_id`,
        arguments: [
            (0, util_1.pure)(tx, args.address, `address`),
            (0, util_1.pure)(tx, args.keyClaimName, `${structs_1.String.$typeName}`),
            (0, util_1.pure)(tx, args.keyClaimValue, `${structs_1.String.$typeName}`),
            (0, util_1.pure)(tx, args.issuer, `${structs_1.String.$typeName}`),
            (0, util_1.pure)(tx, args.audience, `${structs_1.String.$typeName}`),
            (0, util_1.pure)(tx, args.pinHash, `u256`),
        ],
    });
}
function checkZkloginIdInternal(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::zklogin_verified_id::check_zklogin_id_internal`,
        arguments: [
            (0, util_1.pure)(tx, args.address, `address`),
            (0, util_1.pure)(tx, args.keyClaimName, `vector<u8>`),
            (0, util_1.pure)(tx, args.keyClaimValue, `vector<u8>`),
            (0, util_1.pure)(tx, args.issuer, `vector<u8>`),
            (0, util_1.pure)(tx, args.audience, `vector<u8>`),
            (0, util_1.pure)(tx, args.pinHash, `u256`),
        ],
    });
}
function keyClaimName(tx, verifiedId) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::zklogin_verified_id::key_claim_name`,
        arguments: [(0, util_1.obj)(tx, verifiedId)],
    });
}
function keyClaimValue(tx, verifiedId) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::zklogin_verified_id::key_claim_value`,
        arguments: [(0, util_1.obj)(tx, verifiedId)],
    });
}
function issuer(tx, verifiedId) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::zklogin_verified_id::issuer`,
        arguments: [(0, util_1.obj)(tx, verifiedId)],
    });
}
function verifyZkloginId(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::zklogin_verified_id::verify_zklogin_id`,
        arguments: [
            (0, util_1.pure)(tx, args.keyClaimName, `${structs_1.String.$typeName}`),
            (0, util_1.pure)(tx, args.keyClaimValue, `${structs_1.String.$typeName}`),
            (0, util_1.pure)(tx, args.issuer, `${structs_1.String.$typeName}`),
            (0, util_1.pure)(tx, args.audience, `${structs_1.String.$typeName}`),
            (0, util_1.pure)(tx, args.pinHash, `u256`),
        ],
    });
}
//# sourceMappingURL=functions.js.map