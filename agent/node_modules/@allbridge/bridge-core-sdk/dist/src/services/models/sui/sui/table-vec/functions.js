"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.borrow = borrow;
exports.borrowMut = borrowMut;
exports.destroyEmpty = destroyEmpty;
exports.empty = empty;
exports.isEmpty = isEmpty;
exports.length = length;
exports.popBack = popBack;
exports.pushBack = pushBack;
exports.singleton = singleton;
exports.swap = swap;
exports.swapRemove = swapRemove;
exports.drop = drop;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function borrow(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::borrow`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.t), (0, util_1.pure)(tx, args.i, `u64`)],
    });
}
function borrowMut(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::borrow_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.t), (0, util_1.pure)(tx, args.i, `u64`)],
    });
}
function destroyEmpty(tx, typeArg, t) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::destroy_empty`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, t)],
    });
}
function empty(tx, typeArg) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::empty`,
        typeArguments: [typeArg],
        arguments: [],
    });
}
function isEmpty(tx, typeArg, t) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::is_empty`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, t)],
    });
}
function length(tx, typeArg, t) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::length`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, t)],
    });
}
function popBack(tx, typeArg, t) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::pop_back`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, t)],
    });
}
function pushBack(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::push_back`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.t), (0, util_1.generic)(tx, `${typeArg}`, args.e)],
    });
}
function singleton(tx, typeArg, e) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::singleton`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, e)],
    });
}
function swap(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::swap`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.t), (0, util_1.pure)(tx, args.i, `u64`), (0, util_1.pure)(tx, args.j, `u64`)],
    });
}
function swapRemove(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::swap_remove`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.t), (0, util_1.pure)(tx, args.i, `u64`)],
    });
}
function drop(tx, typeArg, t) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::table_vec::drop`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, t)],
    });
}
//# sourceMappingURL=functions.js.map