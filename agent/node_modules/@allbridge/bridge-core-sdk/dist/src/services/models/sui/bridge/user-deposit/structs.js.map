{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/bridge/user-deposit/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { UID } from \"../../sui/object/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== UserDeposit =============================== */\n\nexport function isUserDeposit(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::user_deposit::UserDeposit` + \"<\");\n}\n\nexport interface UserDepositFields<T extends PhantomTypeArgument> {\n  id: ToField<UID>;\n  lpAmount: ToField<\"u64\">;\n  rewardDebt: ToField<\"u64\">;\n}\n\nexport type UserDepositReified<T extends PhantomTypeArgument> = Reified<UserDeposit<T>, UserDepositFields<T>>;\n\nexport class UserDeposit<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::user_deposit::UserDeposit`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = UserDeposit.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = UserDeposit.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly lpAmount: ToField<\"u64\">;\n  readonly rewardDebt: ToField<\"u64\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: UserDepositFields<T>) {\n    this.$fullTypeName = composeSuiType(UserDeposit.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.lpAmount = fields.lpAmount;\n    this.rewardDebt = fields.rewardDebt;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): UserDepositReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: UserDeposit.$typeName,\n      fullTypeName: composeSuiType(UserDeposit.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: UserDeposit.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => UserDeposit.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => UserDeposit.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => UserDeposit.fromBcs(T, data),\n      bcs: UserDeposit.bcs,\n      fromJSONField: (field: any) => UserDeposit.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => UserDeposit.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => UserDeposit.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => UserDeposit.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => UserDeposit.fetch(client, T, id),\n      new: (fields: UserDepositFields<ToPhantomTypeArgument<T>>) => {\n        return new UserDeposit([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return UserDeposit.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<UserDeposit<ToPhantomTypeArgument<T>>>> {\n    return phantom(UserDeposit.reified(T));\n  }\n  static get p() {\n    return UserDeposit.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"UserDeposit\", {\n      id: UID.bcs,\n      lp_amount: bcs.u64(),\n      reward_debt: bcs.u64(),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    return UserDeposit.reified(typeArg).new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      lpAmount: decodeFromFields(\"u64\", fields.lp_amount),\n      rewardDebt: decodeFromFields(\"u64\", fields.reward_debt),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    if (!isUserDeposit(item.type)) {\n      throw new Error(\"not a UserDeposit type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return UserDeposit.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      lpAmount: decodeFromFieldsWithTypes(\"u64\", item.fields.lp_amount),\n      rewardDebt: decodeFromFieldsWithTypes(\"u64\", item.fields.reward_debt),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    return UserDeposit.fromFields(typeArg, UserDeposit.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      lpAmount: this.lpAmount.toString(),\n      rewardDebt: this.rewardDebt.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    return UserDeposit.reified(typeArg).new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      lpAmount: decodeFromJSONField(\"u64\", field.lpAmount),\n      rewardDebt: decodeFromJSONField(\"u64\", field.rewardDebt),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== UserDeposit.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(UserDeposit.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return UserDeposit.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isUserDeposit(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a UserDeposit object`);\n    }\n    return UserDeposit.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): UserDeposit<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isUserDeposit(data.bcs.type)) {\n        throw new Error(`object at is not a UserDeposit object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return UserDeposit.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return UserDeposit.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<UserDeposit<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching UserDeposit object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isUserDeposit(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a UserDeposit object`);\n    }\n\n    return UserDeposit.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}