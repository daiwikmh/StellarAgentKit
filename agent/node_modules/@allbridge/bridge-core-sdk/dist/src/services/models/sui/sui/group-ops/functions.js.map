{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/group-ops/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure, vector } from \"../../_framework/util\";\nimport { Element } from \"./structs\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface AddArgs {\n  type: number | TransactionArgument;\n  e1: TransactionObjectInput;\n  e2: TransactionObjectInput;\n}\n\nexport function add(tx: Transaction, typeArg: string, args: AddArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::add`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.type, `u8`), obj(tx, args.e1), obj(tx, args.e2)],\n  });\n}\n\nexport interface DivArgs {\n  type: number | TransactionArgument;\n  scalar: TransactionObjectInput;\n  e: TransactionObjectInput;\n}\n\nexport function div(tx: Transaction, typeArgs: [string, string], args: DivArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::div`,\n    typeArguments: typeArgs,\n    arguments: [pure(tx, args.type, `u8`), obj(tx, args.scalar), obj(tx, args.e)],\n  });\n}\n\nexport interface MulArgs {\n  type: number | TransactionArgument;\n  scalar: TransactionObjectInput;\n  e: TransactionObjectInput;\n}\n\nexport function mul(tx: Transaction, typeArgs: [string, string], args: MulArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::mul`,\n    typeArguments: typeArgs,\n    arguments: [pure(tx, args.type, `u8`), obj(tx, args.scalar), obj(tx, args.e)],\n  });\n}\n\nexport interface SubArgs {\n  type: number | TransactionArgument;\n  e1: TransactionObjectInput;\n  e2: TransactionObjectInput;\n}\n\nexport function sub(tx: Transaction, typeArg: string, args: SubArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::sub`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.type, `u8`), obj(tx, args.e1), obj(tx, args.e2)],\n  });\n}\n\nexport function bytes(tx: Transaction, typeArg: string, e: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::bytes`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, e)],\n  });\n}\n\nexport interface FromBytesArgs {\n  type: number | TransactionArgument;\n  bytes: Array<number | TransactionArgument> | TransactionArgument;\n  isTrusted: boolean | TransactionArgument;\n}\n\nexport function fromBytes(tx: Transaction, typeArg: string, args: FromBytesArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::from_bytes`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.bytes, `vector<u8>`), pure(tx, args.isTrusted, `bool`)],\n  });\n}\n\nexport interface InternalAddArgs {\n  type: number | TransactionArgument;\n  e1: Array<number | TransactionArgument> | TransactionArgument;\n  e2: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalAdd(tx: Transaction, args: InternalAddArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_add`,\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.e1, `vector<u8>`), pure(tx, args.e2, `vector<u8>`)],\n  });\n}\n\nexport interface ConvertArgs {\n  fromType: number | TransactionArgument;\n  toType: number | TransactionArgument;\n  e: TransactionObjectInput;\n}\n\nexport function convert(tx: Transaction, typeArgs: [string, string], args: ConvertArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::convert`,\n    typeArguments: typeArgs,\n    arguments: [pure(tx, args.fromType, `u8`), pure(tx, args.toType, `u8`), obj(tx, args.e)],\n  });\n}\n\nexport interface EqualArgs {\n  e1: TransactionObjectInput;\n  e2: TransactionObjectInput;\n}\n\nexport function equal(tx: Transaction, typeArg: string, args: EqualArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::equal`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.e1), obj(tx, args.e2)],\n  });\n}\n\nexport interface HashToArgs {\n  type: number | TransactionArgument;\n  m: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function hashTo(tx: Transaction, typeArg: string, args: HashToArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::hash_to`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.m, `vector<u8>`)],\n  });\n}\n\nexport interface InternalConvertArgs {\n  fromType: number | TransactionArgument;\n  toType: number | TransactionArgument;\n  e: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalConvert(tx: Transaction, args: InternalConvertArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_convert`,\n    arguments: [pure(tx, args.fromType, `u8`), pure(tx, args.toType, `u8`), pure(tx, args.e, `vector<u8>`)],\n  });\n}\n\nexport interface InternalDivArgs {\n  type: number | TransactionArgument;\n  e1: Array<number | TransactionArgument> | TransactionArgument;\n  e2: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalDiv(tx: Transaction, args: InternalDivArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_div`,\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.e1, `vector<u8>`), pure(tx, args.e2, `vector<u8>`)],\n  });\n}\n\nexport interface InternalHashToArgs {\n  type: number | TransactionArgument;\n  m: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalHashTo(tx: Transaction, args: InternalHashToArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_hash_to`,\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.m, `vector<u8>`)],\n  });\n}\n\nexport interface InternalMulArgs {\n  type: number | TransactionArgument;\n  e1: Array<number | TransactionArgument> | TransactionArgument;\n  e2: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalMul(tx: Transaction, args: InternalMulArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_mul`,\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.e1, `vector<u8>`), pure(tx, args.e2, `vector<u8>`)],\n  });\n}\n\nexport interface InternalMultiScalarMulArgs {\n  type: number | TransactionArgument;\n  scalars: Array<number | TransactionArgument> | TransactionArgument;\n  elements: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalMultiScalarMul(tx: Transaction, args: InternalMultiScalarMulArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_multi_scalar_mul`,\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.scalars, `vector<u8>`), pure(tx, args.elements, `vector<u8>`)],\n  });\n}\n\nexport interface InternalPairingArgs {\n  type: number | TransactionArgument;\n  e1: Array<number | TransactionArgument> | TransactionArgument;\n  e2: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalPairing(tx: Transaction, args: InternalPairingArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_pairing`,\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.e1, `vector<u8>`), pure(tx, args.e2, `vector<u8>`)],\n  });\n}\n\nexport interface InternalSubArgs {\n  type: number | TransactionArgument;\n  e1: Array<number | TransactionArgument> | TransactionArgument;\n  e2: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalSub(tx: Transaction, args: InternalSubArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_sub`,\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.e1, `vector<u8>`), pure(tx, args.e2, `vector<u8>`)],\n  });\n}\n\nexport interface InternalSumArgs {\n  type: number | TransactionArgument;\n  e: Array<Array<number | TransactionArgument> | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalSum(tx: Transaction, args: InternalSumArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_sum`,\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.e, `vector<vector<u8>>`)],\n  });\n}\n\nexport interface InternalValidateArgs {\n  type: number | TransactionArgument;\n  bytes: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function internalValidate(tx: Transaction, args: InternalValidateArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::internal_validate`,\n    arguments: [pure(tx, args.type, `u8`), pure(tx, args.bytes, `vector<u8>`)],\n  });\n}\n\nexport interface MultiScalarMultiplicationArgs {\n  type: number | TransactionArgument;\n  scalars: Array<TransactionObjectInput> | TransactionArgument;\n  elements: Array<TransactionObjectInput> | TransactionArgument;\n}\n\nexport function multiScalarMultiplication(\n  tx: Transaction,\n  typeArgs: [string, string],\n  args: MultiScalarMultiplicationArgs\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::multi_scalar_multiplication`,\n    typeArguments: typeArgs,\n    arguments: [\n      pure(tx, args.type, `u8`),\n      vector(tx, `${Element.$typeName}<${typeArgs[0]}>`, args.scalars),\n      vector(tx, `${Element.$typeName}<${typeArgs[1]}>`, args.elements),\n    ],\n  });\n}\n\nexport interface PairingArgs {\n  type: number | TransactionArgument;\n  e1: TransactionObjectInput;\n  e2: TransactionObjectInput;\n}\n\nexport function pairing(tx: Transaction, typeArgs: [string, string, string], args: PairingArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::pairing`,\n    typeArguments: typeArgs,\n    arguments: [pure(tx, args.type, `u8`), obj(tx, args.e1), obj(tx, args.e2)],\n  });\n}\n\nexport interface SetAsPrefixArgs {\n  x: bigint | TransactionArgument;\n  bigEndian: boolean | TransactionArgument;\n  buffer: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function setAsPrefix(tx: Transaction, args: SetAsPrefixArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::set_as_prefix`,\n    arguments: [pure(tx, args.x, `u64`), pure(tx, args.bigEndian, `bool`), pure(tx, args.buffer, `vector<u8>`)],\n  });\n}\n\nexport interface SumArgs {\n  type: number | TransactionArgument;\n  terms: Array<TransactionObjectInput> | TransactionArgument;\n}\n\nexport function sum(tx: Transaction, typeArg: string, args: SumArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::group_ops::sum`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.type, `u8`), vector(tx, `${Element.$typeName}<${typeArg}>`, args.terms)],\n  });\n}\n"]}