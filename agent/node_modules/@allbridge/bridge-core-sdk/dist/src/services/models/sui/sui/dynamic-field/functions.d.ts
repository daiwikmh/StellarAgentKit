import { GenericArg } from "../../_framework/util";
import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export interface AddArgs {
    object: TransactionObjectInput;
    name: GenericArg;
    value: GenericArg;
}
export declare function add(tx: Transaction, typeArgs: [string, string], args: AddArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface BorrowArgs {
    object: TransactionObjectInput;
    name: GenericArg;
}
export declare function borrow(tx: Transaction, typeArgs: [string, string], args: BorrowArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface BorrowMutArgs {
    object: TransactionObjectInput;
    name: GenericArg;
}
export declare function borrowMut(tx: Transaction, typeArgs: [string, string], args: BorrowMutArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveArgs {
    object: TransactionObjectInput;
    name: GenericArg;
}
export declare function remove(tx: Transaction, typeArgs: [string, string], args: RemoveArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddChildObjectArgs {
    parent: string | TransactionArgument;
    child: GenericArg;
}
export declare function addChildObject(tx: Transaction, typeArg: string, args: AddChildObjectArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface BorrowChildObjectArgs {
    object: TransactionObjectInput;
    id: string | TransactionArgument;
}
export declare function borrowChildObject(tx: Transaction, typeArg: string, args: BorrowChildObjectArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface BorrowChildObjectMutArgs {
    object: TransactionObjectInput;
    id: string | TransactionArgument;
}
export declare function borrowChildObjectMut(tx: Transaction, typeArg: string, args: BorrowChildObjectMutArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface Exists_Args {
    object: TransactionObjectInput;
    name: GenericArg;
}
export declare function exists_(tx: Transaction, typeArg: string, args: Exists_Args): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ExistsWithTypeArgs {
    object: TransactionObjectInput;
    name: GenericArg;
}
export declare function existsWithType(tx: Transaction, typeArgs: [string, string], args: ExistsWithTypeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface FieldInfoArgs {
    object: TransactionObjectInput;
    name: GenericArg;
}
export declare function fieldInfo(tx: Transaction, typeArg: string, args: FieldInfoArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface FieldInfoMutArgs {
    object: TransactionObjectInput;
    name: GenericArg;
}
export declare function fieldInfoMut(tx: Transaction, typeArg: string, args: FieldInfoMutArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface HasChildObjectArgs {
    parent: string | TransactionArgument;
    id: string | TransactionArgument;
}
export declare function hasChildObject(tx: Transaction, args: HasChildObjectArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface HasChildObjectWithTyArgs {
    parent: string | TransactionArgument;
    id: string | TransactionArgument;
}
export declare function hasChildObjectWithTy(tx: Transaction, typeArg: string, args: HasChildObjectWithTyArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface HashTypeAndKeyArgs {
    parent: string | TransactionArgument;
    k: GenericArg;
}
export declare function hashTypeAndKey(tx: Transaction, typeArg: string, args: HashTypeAndKeyArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveChildObjectArgs {
    parent: string | TransactionArgument;
    id: string | TransactionArgument;
}
export declare function removeChildObject(tx: Transaction, typeArg: string, args: RemoveChildObjectArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveIfExistsArgs {
    object: TransactionObjectInput;
    name: GenericArg;
}
export declare function removeIfExists(tx: Transaction, typeArgs: [string, string], args: RemoveIfExistsArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
