{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/transfer/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { GenericArg, generic, obj, pure } from \"../../_framework/util\";\nimport { ID } from \"../object/structs\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface TransferArgs {\n  obj: GenericArg;\n  recipient: string | TransactionArgument;\n}\n\nexport function transfer(tx: Transaction, typeArg: string, args: TransferArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::transfer`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, args.obj), pure(tx, args.recipient, `address`)],\n  });\n}\n\nexport function freezeObject(tx: Transaction, typeArg: string, obj: GenericArg) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::freeze_object`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, obj)],\n  });\n}\n\nexport function freezeObjectImpl(tx: Transaction, typeArg: string, obj: GenericArg) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::freeze_object_impl`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, obj)],\n  });\n}\n\nexport function publicFreezeObject(tx: Transaction, typeArg: string, obj: GenericArg) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::public_freeze_object`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, obj)],\n  });\n}\n\nexport interface PublicReceiveArgs {\n  parent: TransactionObjectInput;\n  toReceive: TransactionObjectInput;\n}\n\nexport function publicReceive(tx: Transaction, typeArg: string, args: PublicReceiveArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::public_receive`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.parent), obj(tx, args.toReceive)],\n  });\n}\n\nexport function publicShareObject(tx: Transaction, typeArg: string, obj: GenericArg) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::public_share_object`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, obj)],\n  });\n}\n\nexport interface PublicTransferArgs {\n  obj: GenericArg;\n  recipient: string | TransactionArgument;\n}\n\nexport function publicTransfer(tx: Transaction, typeArg: string, args: PublicTransferArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::public_transfer`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, args.obj), pure(tx, args.recipient, `address`)],\n  });\n}\n\nexport interface ReceiveArgs {\n  parent: TransactionObjectInput;\n  toReceive: TransactionObjectInput;\n}\n\nexport function receive(tx: Transaction, typeArg: string, args: ReceiveArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::receive`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.parent), obj(tx, args.toReceive)],\n  });\n}\n\nexport interface ReceiveImplArgs {\n  parent: string | TransactionArgument;\n  toReceive: string | TransactionArgument;\n  version: bigint | TransactionArgument;\n}\n\nexport function receiveImpl(tx: Transaction, typeArg: string, args: ReceiveImplArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::receive_impl`,\n    typeArguments: [typeArg],\n    arguments: [\n      pure(tx, args.parent, `address`),\n      pure(tx, args.toReceive, `${ID.$typeName}`),\n      pure(tx, args.version, `u64`),\n    ],\n  });\n}\n\nexport function receivingObjectId(tx: Transaction, typeArg: string, receiving: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::receiving_object_id`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, receiving)],\n  });\n}\n\nexport function shareObject(tx: Transaction, typeArg: string, obj: GenericArg) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::share_object`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, obj)],\n  });\n}\n\nexport function shareObjectImpl(tx: Transaction, typeArg: string, obj: GenericArg) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::share_object_impl`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, obj)],\n  });\n}\n\nexport interface TransferImplArgs {\n  obj: GenericArg;\n  recipient: string | TransactionArgument;\n}\n\nexport function transferImpl(tx: Transaction, typeArg: string, args: TransferImplArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::transfer::transfer_impl`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, args.obj), pure(tx, args.recipient, `address`)],\n  });\n}\n"]}