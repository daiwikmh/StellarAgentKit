{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/dynamic-object-field/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  fieldToJSON,\n  phantom,\n  toBcs,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { BcsType, bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Wrapper =============================== */\n\nexport function isWrapper(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::dynamic_object_field::Wrapper` + \"<\");\n}\n\nexport interface WrapperFields<Name extends TypeArgument> {\n  name: ToField<Name>;\n}\n\nexport type WrapperReified<Name extends TypeArgument> = Reified<Wrapper<Name>, WrapperFields<Name>>;\n\nexport class Wrapper<Name extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::dynamic_object_field::Wrapper`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [false] as const;\n\n  readonly $typeName = Wrapper.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<Name>];\n  readonly $isPhantom = Wrapper.$isPhantom;\n\n  readonly name: ToField<Name>;\n\n  private constructor(typeArgs: [ToTypeStr<Name>], fields: WrapperFields<Name>) {\n    this.$fullTypeName = composeSuiType(Wrapper.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.name = fields.name;\n  }\n\n  static reified<Name extends Reified<TypeArgument, any>>(Name: Name): WrapperReified<ToTypeArgument<Name>> {\n    return {\n      typeName: Wrapper.$typeName,\n      fullTypeName: composeSuiType(Wrapper.$typeName, ...[extractType(Name)]) as string,\n      typeArgs: [extractType(Name)] as [ToTypeStr<ToTypeArgument<Name>>],\n      isPhantom: Wrapper.$isPhantom,\n      reifiedTypeArgs: [Name],\n      fromFields: (fields: Record<string, any>) => Wrapper.fromFields(Name, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Wrapper.fromFieldsWithTypes(Name, item),\n      fromBcs: (data: Uint8Array) => Wrapper.fromBcs(Name, data),\n      bcs: Wrapper.bcs(toBcs(Name)),\n      fromJSONField: (field: any) => Wrapper.fromJSONField(Name, field),\n      fromJSON: (json: Record<string, any>) => Wrapper.fromJSON(Name, json),\n      fromSuiParsedData: (content: SuiParsedData) => Wrapper.fromSuiParsedData(Name, content),\n      fromSuiObjectData: (content: SuiObjectData) => Wrapper.fromSuiObjectData(Name, content),\n      fetch: async (client: SuiClient, id: string) => Wrapper.fetch(client, Name, id),\n      new: (fields: WrapperFields<ToTypeArgument<Name>>) => {\n        return new Wrapper([extractType(Name)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Wrapper.reified;\n  }\n\n  static phantom<Name extends Reified<TypeArgument, any>>(\n    Name: Name\n  ): PhantomReified<ToTypeStr<Wrapper<ToTypeArgument<Name>>>> {\n    return phantom(Wrapper.reified(Name));\n  }\n  static get p() {\n    return Wrapper.phantom;\n  }\n\n  static get bcs() {\n    return <Name extends BcsType<any>>(Name: Name) =>\n      bcs.struct(`Wrapper<${Name.name}>`, {\n        name: Name,\n      });\n  }\n\n  static fromFields<Name extends Reified<TypeArgument, any>>(\n    typeArg: Name,\n    fields: Record<string, any>\n  ): Wrapper<ToTypeArgument<Name>> {\n    return Wrapper.reified(typeArg).new({\n      name: decodeFromFields(typeArg, fields.name),\n    });\n  }\n\n  static fromFieldsWithTypes<Name extends Reified<TypeArgument, any>>(\n    typeArg: Name,\n    item: FieldsWithTypes\n  ): Wrapper<ToTypeArgument<Name>> {\n    if (!isWrapper(item.type)) {\n      throw new Error(\"not a Wrapper type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Wrapper.reified(typeArg).new({\n      name: decodeFromFieldsWithTypes(typeArg, item.fields.name),\n    });\n  }\n\n  static fromBcs<Name extends Reified<TypeArgument, any>>(\n    typeArg: Name,\n    data: Uint8Array\n  ): Wrapper<ToTypeArgument<Name>> {\n    const typeArgs = [typeArg];\n\n    return Wrapper.fromFields(typeArg, Wrapper.bcs(toBcs(typeArgs[0])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      name: fieldToJSON<Name>(this.$typeArgs[0], this.name),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<Name extends Reified<TypeArgument, any>>(\n    typeArg: Name,\n    field: any\n  ): Wrapper<ToTypeArgument<Name>> {\n    return Wrapper.reified(typeArg).new({\n      name: decodeFromJSONField(typeArg, field.name),\n    });\n  }\n\n  static fromJSON<Name extends Reified<TypeArgument, any>>(\n    typeArg: Name,\n    json: Record<string, any>\n  ): Wrapper<ToTypeArgument<Name>> {\n    if (json.$typeName !== Wrapper.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Wrapper.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Wrapper.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<Name extends Reified<TypeArgument, any>>(\n    typeArg: Name,\n    content: SuiParsedData\n  ): Wrapper<ToTypeArgument<Name>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isWrapper(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Wrapper object`);\n    }\n    return Wrapper.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<Name extends Reified<TypeArgument, any>>(\n    typeArg: Name,\n    data: SuiObjectData\n  ): Wrapper<ToTypeArgument<Name>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isWrapper(data.bcs.type)) {\n        throw new Error(`object at is not a Wrapper object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Wrapper.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Wrapper.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<Name extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArg: Name,\n    id: string\n  ): Promise<Wrapper<ToTypeArgument<Name>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Wrapper object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isWrapper(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Wrapper object`);\n    }\n\n    return Wrapper.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}