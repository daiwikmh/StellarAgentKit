"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StopSwapCap = exports.FeeCollectorCap = exports.Bridge = exports.AdminCap = void 0;
exports.isAdminCap = isAdminCap;
exports.isBridge = isBridge;
exports.isFeeCollectorCap = isFeeCollectorCap;
exports.isStopSwapCap = isStopSwapCap;
// @ts-nocheck
const reified = __importStar(require("../../_framework/reified"));
const reified_1 = require("../../_framework/reified");
const util_1 = require("../../_framework/util");
const structs_1 = require("../../sui/object-bag/structs");
const structs_2 = require("../../sui/object/structs");
const structs_3 = require("../../sui/table/structs");
const structs_4 = require("../../utils/fee-collector/structs");
const structs_5 = require("../../utils/message/structs");
const structs_6 = require("../../utils/set/structs");
const structs_7 = require("../another-bridge/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== AdminCap =============================== */
function isAdminCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::bridge::AdminCap`;
}
class AdminCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::bridge::AdminCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = AdminCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = AdminCap.$isPhantom;
    id;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(AdminCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
    }
    static reified() {
        return {
            typeName: AdminCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(AdminCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: AdminCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => AdminCap.fromFields(fields),
            fromFieldsWithTypes: (item) => AdminCap.fromFieldsWithTypes(item),
            fromBcs: (data) => AdminCap.fromBcs(data),
            bcs: AdminCap.bcs,
            fromJSONField: (field) => AdminCap.fromJSONField(field),
            fromJSON: (json) => AdminCap.fromJSON(json),
            fromSuiParsedData: (content) => AdminCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => AdminCap.fromSuiObjectData(content),
            fetch: async (client, id) => AdminCap.fetch(client, id),
            new: (fields) => {
                return new AdminCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return AdminCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(AdminCap.reified());
    }
    static get p() {
        return AdminCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("AdminCap", {
            id: structs_2.UID.bcs,
        });
    }
    static fromFields(fields) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_2.UID.reified(), fields.id),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isAdminCap(item.type)) {
            throw new Error("not a AdminCap type");
        }
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.UID.reified(), item.fields.id),
        });
    }
    static fromBcs(data) {
        return AdminCap.fromFields(AdminCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_2.UID.reified(), field.id),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== AdminCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return AdminCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isAdminCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a AdminCap object`);
        }
        return AdminCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isAdminCap(data.bcs.type)) {
                throw new Error(`object at is not a AdminCap object`);
            }
            return AdminCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return AdminCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching AdminCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isAdminCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a AdminCap object`);
        }
        return AdminCap.fromSuiObjectData(res.data);
    }
}
exports.AdminCap = AdminCap;
/* ============================== Bridge =============================== */
function isBridge(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::bridge::Bridge`;
}
class Bridge {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::bridge::Bridge`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = Bridge.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = Bridge.$isPhantom;
    id;
    pools;
    otherBridges;
    processedMessages;
    sentMessages;
    feeCollector;
    feeCollectorCap;
    rebalancer;
    canSwap;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(Bridge.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
        this.pools = fields.pools;
        this.otherBridges = fields.otherBridges;
        this.processedMessages = fields.processedMessages;
        this.sentMessages = fields.sentMessages;
        this.feeCollector = fields.feeCollector;
        this.feeCollectorCap = fields.feeCollectorCap;
        this.rebalancer = fields.rebalancer;
        this.canSwap = fields.canSwap;
    }
    static reified() {
        return {
            typeName: Bridge.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(Bridge.$typeName, ...[]),
            typeArgs: [],
            isPhantom: Bridge.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => Bridge.fromFields(fields),
            fromFieldsWithTypes: (item) => Bridge.fromFieldsWithTypes(item),
            fromBcs: (data) => Bridge.fromBcs(data),
            bcs: Bridge.bcs,
            fromJSONField: (field) => Bridge.fromJSONField(field),
            fromJSON: (json) => Bridge.fromJSON(json),
            fromSuiParsedData: (content) => Bridge.fromSuiParsedData(content),
            fromSuiObjectData: (content) => Bridge.fromSuiObjectData(content),
            fetch: async (client, id) => Bridge.fetch(client, id),
            new: (fields) => {
                return new Bridge([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return Bridge.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(Bridge.reified());
    }
    static get p() {
        return Bridge.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("Bridge", {
            id: structs_2.UID.bcs,
            pools: structs_1.ObjectBag.bcs,
            other_bridges: structs_3.Table.bcs,
            processed_messages: structs_6.Set.bcs,
            sent_messages: structs_6.Set.bcs,
            fee_collector: structs_4.FeeCollector.bcs,
            fee_collector_cap: FeeCollectorCap.bcs,
            rebalancer: bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            }),
            can_swap: bcs_1.bcs.bool(),
        });
    }
    static fromFields(fields) {
        return Bridge.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_2.UID.reified(), fields.id),
            pools: (0, reified_1.decodeFromFields)(structs_1.ObjectBag.reified(), fields.pools),
            otherBridges: (0, reified_1.decodeFromFields)(structs_3.Table.reified(reified.phantom("u8"), reified.phantom(structs_7.AnotherBridge.reified())), fields.other_bridges),
            processedMessages: (0, reified_1.decodeFromFields)(structs_6.Set.reified(reified.phantom(structs_5.Message.reified())), fields.processed_messages),
            sentMessages: (0, reified_1.decodeFromFields)(structs_6.Set.reified(reified.phantom(structs_5.Message.reified())), fields.sent_messages),
            feeCollector: (0, reified_1.decodeFromFields)(structs_4.FeeCollector.reified(reified.phantom(FeeCollectorCap.reified())), fields.fee_collector),
            feeCollectorCap: (0, reified_1.decodeFromFields)(FeeCollectorCap.reified(), fields.fee_collector_cap),
            rebalancer: (0, reified_1.decodeFromFields)("address", fields.rebalancer),
            canSwap: (0, reified_1.decodeFromFields)("bool", fields.can_swap),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isBridge(item.type)) {
            throw new Error("not a Bridge type");
        }
        return Bridge.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.UID.reified(), item.fields.id),
            pools: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.ObjectBag.reified(), item.fields.pools),
            otherBridges: (0, reified_1.decodeFromFieldsWithTypes)(structs_3.Table.reified(reified.phantom("u8"), reified.phantom(structs_7.AnotherBridge.reified())), item.fields.other_bridges),
            processedMessages: (0, reified_1.decodeFromFieldsWithTypes)(structs_6.Set.reified(reified.phantom(structs_5.Message.reified())), item.fields.processed_messages),
            sentMessages: (0, reified_1.decodeFromFieldsWithTypes)(structs_6.Set.reified(reified.phantom(structs_5.Message.reified())), item.fields.sent_messages),
            feeCollector: (0, reified_1.decodeFromFieldsWithTypes)(structs_4.FeeCollector.reified(reified.phantom(FeeCollectorCap.reified())), item.fields.fee_collector),
            feeCollectorCap: (0, reified_1.decodeFromFieldsWithTypes)(FeeCollectorCap.reified(), item.fields.fee_collector_cap),
            rebalancer: (0, reified_1.decodeFromFieldsWithTypes)("address", item.fields.rebalancer),
            canSwap: (0, reified_1.decodeFromFieldsWithTypes)("bool", item.fields.can_swap),
        });
    }
    static fromBcs(data) {
        return Bridge.fromFields(Bridge.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
            pools: this.pools.toJSONField(),
            otherBridges: this.otherBridges.toJSONField(),
            processedMessages: this.processedMessages.toJSONField(),
            sentMessages: this.sentMessages.toJSONField(),
            feeCollector: this.feeCollector.toJSONField(),
            feeCollectorCap: this.feeCollectorCap.toJSONField(),
            rebalancer: this.rebalancer,
            canSwap: this.canSwap,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return Bridge.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_2.UID.reified(), field.id),
            pools: (0, reified_1.decodeFromJSONField)(structs_1.ObjectBag.reified(), field.pools),
            otherBridges: (0, reified_1.decodeFromJSONField)(structs_3.Table.reified(reified.phantom("u8"), reified.phantom(structs_7.AnotherBridge.reified())), field.otherBridges),
            processedMessages: (0, reified_1.decodeFromJSONField)(structs_6.Set.reified(reified.phantom(structs_5.Message.reified())), field.processedMessages),
            sentMessages: (0, reified_1.decodeFromJSONField)(structs_6.Set.reified(reified.phantom(structs_5.Message.reified())), field.sentMessages),
            feeCollector: (0, reified_1.decodeFromJSONField)(structs_4.FeeCollector.reified(reified.phantom(FeeCollectorCap.reified())), field.feeCollector),
            feeCollectorCap: (0, reified_1.decodeFromJSONField)(FeeCollectorCap.reified(), field.feeCollectorCap),
            rebalancer: (0, reified_1.decodeFromJSONField)("address", field.rebalancer),
            canSwap: (0, reified_1.decodeFromJSONField)("bool", field.canSwap),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== Bridge.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return Bridge.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isBridge(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a Bridge object`);
        }
        return Bridge.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isBridge(data.bcs.type)) {
                throw new Error(`object at is not a Bridge object`);
            }
            return Bridge.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return Bridge.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching Bridge object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isBridge(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a Bridge object`);
        }
        return Bridge.fromSuiObjectData(res.data);
    }
}
exports.Bridge = Bridge;
/* ============================== FeeCollectorCap =============================== */
function isFeeCollectorCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::bridge::FeeCollectorCap`;
}
class FeeCollectorCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::bridge::FeeCollectorCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = FeeCollectorCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = FeeCollectorCap.$isPhantom;
    dummyField;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(FeeCollectorCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.dummyField = fields.dummyField;
    }
    static reified() {
        return {
            typeName: FeeCollectorCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(FeeCollectorCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: FeeCollectorCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => FeeCollectorCap.fromFields(fields),
            fromFieldsWithTypes: (item) => FeeCollectorCap.fromFieldsWithTypes(item),
            fromBcs: (data) => FeeCollectorCap.fromBcs(data),
            bcs: FeeCollectorCap.bcs,
            fromJSONField: (field) => FeeCollectorCap.fromJSONField(field),
            fromJSON: (json) => FeeCollectorCap.fromJSON(json),
            fromSuiParsedData: (content) => FeeCollectorCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => FeeCollectorCap.fromSuiObjectData(content),
            fetch: async (client, id) => FeeCollectorCap.fetch(client, id),
            new: (fields) => {
                return new FeeCollectorCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return FeeCollectorCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(FeeCollectorCap.reified());
    }
    static get p() {
        return FeeCollectorCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("FeeCollectorCap", {
            dummy_field: bcs_1.bcs.bool(),
        });
    }
    static fromFields(fields) {
        return FeeCollectorCap.reified().new({
            dummyField: (0, reified_1.decodeFromFields)("bool", fields.dummy_field),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isFeeCollectorCap(item.type)) {
            throw new Error("not a FeeCollectorCap type");
        }
        return FeeCollectorCap.reified().new({
            dummyField: (0, reified_1.decodeFromFieldsWithTypes)("bool", item.fields.dummy_field),
        });
    }
    static fromBcs(data) {
        return FeeCollectorCap.fromFields(FeeCollectorCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            dummyField: this.dummyField,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return FeeCollectorCap.reified().new({
            dummyField: (0, reified_1.decodeFromJSONField)("bool", field.dummyField),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== FeeCollectorCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return FeeCollectorCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isFeeCollectorCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a FeeCollectorCap object`);
        }
        return FeeCollectorCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isFeeCollectorCap(data.bcs.type)) {
                throw new Error(`object at is not a FeeCollectorCap object`);
            }
            return FeeCollectorCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return FeeCollectorCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching FeeCollectorCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isFeeCollectorCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a FeeCollectorCap object`);
        }
        return FeeCollectorCap.fromSuiObjectData(res.data);
    }
}
exports.FeeCollectorCap = FeeCollectorCap;
/* ============================== StopSwapCap =============================== */
function isStopSwapCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::bridge::StopSwapCap`;
}
class StopSwapCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::bridge::StopSwapCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = StopSwapCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = StopSwapCap.$isPhantom;
    id;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(StopSwapCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
    }
    static reified() {
        return {
            typeName: StopSwapCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(StopSwapCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: StopSwapCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => StopSwapCap.fromFields(fields),
            fromFieldsWithTypes: (item) => StopSwapCap.fromFieldsWithTypes(item),
            fromBcs: (data) => StopSwapCap.fromBcs(data),
            bcs: StopSwapCap.bcs,
            fromJSONField: (field) => StopSwapCap.fromJSONField(field),
            fromJSON: (json) => StopSwapCap.fromJSON(json),
            fromSuiParsedData: (content) => StopSwapCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => StopSwapCap.fromSuiObjectData(content),
            fetch: async (client, id) => StopSwapCap.fetch(client, id),
            new: (fields) => {
                return new StopSwapCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return StopSwapCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(StopSwapCap.reified());
    }
    static get p() {
        return StopSwapCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("StopSwapCap", {
            id: structs_2.UID.bcs,
        });
    }
    static fromFields(fields) {
        return StopSwapCap.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_2.UID.reified(), fields.id),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isStopSwapCap(item.type)) {
            throw new Error("not a StopSwapCap type");
        }
        return StopSwapCap.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.UID.reified(), item.fields.id),
        });
    }
    static fromBcs(data) {
        return StopSwapCap.fromFields(StopSwapCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return StopSwapCap.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_2.UID.reified(), field.id),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== StopSwapCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return StopSwapCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isStopSwapCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a StopSwapCap object`);
        }
        return StopSwapCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isStopSwapCap(data.bcs.type)) {
                throw new Error(`object at is not a StopSwapCap object`);
            }
            return StopSwapCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return StopSwapCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching StopSwapCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isStopSwapCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a StopSwapCap object`);
        }
        return StopSwapCap.fromSuiObjectData(res.data);
    }
}
exports.StopSwapCap = StopSwapCap;
//# sourceMappingURL=structs.js.map