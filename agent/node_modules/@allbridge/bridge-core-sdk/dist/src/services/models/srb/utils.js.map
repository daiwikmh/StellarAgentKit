{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../src/services/models/srb/utils.ts"],"names":[],"mappings":";;AAKA,oDAcC;AAED,oDAMC;AAED,gDAGC;AAhCD,sDAAqD;AACrD,IAAO,GAAG,GAAG,iBAAG,CAAC,GAAG,CAAC;AAIrB,SAAgB,oBAAoB,CAAI,WAAoC;IAC1E,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC;IAC5C,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;IAC5E,CAAC;IAED,IAAI,GAAG,CAAC,mBAAmB,CAAC,UAAU,CAAC,EAAE,CAAC;QACxC,IAAI,UAAU,CAAC,MAAM,IAAI,IAAI,EAAE,CAAC;YAC9B,OAAO;QACT,CAAC;QACD,OAAO,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC;SAAM,CAAC;QACN,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;AACH,CAAC;AAED,SAAgB,oBAAoB,CAAI,WAAoC;IAC1E,MAAM,EAAE,UAAU,EAAE,GAAG,WAAW,CAAC;IACnC,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;IAC5E,CAAC;IACD,OAAO,GAAG,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;AAC3C,CAAC;AAEM,KAAK,UAAU,kBAAkB,CAAI,WAAoC;IAC9E,MAAM,WAAW,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9C,OAAO,WAAW,CAAC,WAAW,EAAE,CAAC;AACnC,CAAC","sourcesContent":["import { contract, rpc } from \"@stellar/stellar-sdk\";\nimport Api = rpc.Api;\nimport AssembledTransaction = contract.AssembledTransaction;\nimport SentTransaction = contract.SentTransaction;\n\nexport function getViewResultSoroban<T>(assembledTx: AssembledTransaction<T>): T | undefined {\n  const { simulation, options } = assembledTx;\n  if (!simulation) {\n    throw new Error(\"Soroban assembled transaction does not have simulation\");\n  }\n\n  if (Api.isSimulationSuccess(simulation)) {\n    if (simulation.result == null) {\n      return;\n    }\n    return options.parseResultXdr(simulation.result.retval);\n  } else {\n    throw new Error(simulation.error);\n  }\n}\n\nexport function isErrorSorobanResult<T>(assembledTx: AssembledTransaction<T>): boolean {\n  const { simulation } = assembledTx;\n  if (!simulation) {\n    throw new Error(\"Soroban assembled transaction does not have simulation\");\n  }\n  return Api.isSimulationError(simulation);\n}\n\nexport async function signAndSendSoroban<T>(assembledTx: AssembledTransaction<T>): Promise<SentTransaction<T>> {\n  await assembledTx.simulate({ restore: true });\n  return assembledTx.signAndSend();\n}\n"]}