"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transfer = transfer;
exports.freezeObject = freezeObject;
exports.freezeObjectImpl = freezeObjectImpl;
exports.publicFreezeObject = publicFreezeObject;
exports.publicReceive = publicReceive;
exports.publicShareObject = publicShareObject;
exports.publicTransfer = publicTransfer;
exports.receive = receive;
exports.receiveImpl = receiveImpl;
exports.receivingObjectId = receivingObjectId;
exports.shareObject = shareObject;
exports.shareObjectImpl = shareObjectImpl;
exports.transferImpl = transferImpl;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
const structs_1 = require("../object/structs");
function transfer(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::transfer`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, args.obj), (0, util_1.pure)(tx, args.recipient, `address`)],
    });
}
function freezeObject(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::freeze_object`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function freezeObjectImpl(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::freeze_object_impl`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function publicFreezeObject(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::public_freeze_object`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function publicReceive(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::public_receive`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.parent), (0, util_1.obj)(tx, args.toReceive)],
    });
}
function publicShareObject(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::public_share_object`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function publicTransfer(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::public_transfer`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, args.obj), (0, util_1.pure)(tx, args.recipient, `address`)],
    });
}
function receive(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::receive`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.parent), (0, util_1.obj)(tx, args.toReceive)],
    });
}
function receiveImpl(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::receive_impl`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.pure)(tx, args.parent, `address`),
            (0, util_1.pure)(tx, args.toReceive, `${structs_1.ID.$typeName}`),
            (0, util_1.pure)(tx, args.version, `u64`),
        ],
    });
}
function receivingObjectId(tx, typeArg, receiving) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::receiving_object_id`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, receiving)],
    });
}
function shareObject(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::share_object`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function shareObjectImpl(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::share_object_impl`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function transferImpl(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::transfer::transfer_impl`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, args.obj), (0, util_1.pure)(tx, args.recipient, `address`)],
    });
}
//# sourceMappingURL=functions.js.map