{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/vec-set/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { GenericArg, generic, obj, vector } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface ContainsArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function contains(tx: Transaction, typeArg: string, args: ContainsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::contains`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), generic(tx, `${typeArg}`, args.key)],\n  });\n}\n\nexport function empty(tx: Transaction, typeArg: string) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::empty`,\n    typeArguments: [typeArg],\n    arguments: [],\n  });\n}\n\nexport interface InsertArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function insert(tx: Transaction, typeArg: string, args: InsertArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::insert`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), generic(tx, `${typeArg}`, args.key)],\n  });\n}\n\nexport function isEmpty(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::is_empty`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface RemoveArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function remove(tx: Transaction, typeArg: string, args: RemoveArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::remove`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), generic(tx, `${typeArg}`, args.key)],\n  });\n}\n\nexport function singleton(tx: Transaction, typeArg: string, key: GenericArg) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::singleton`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, key)],\n  });\n}\n\nexport function fromKeys(tx: Transaction, typeArg: string, keys: Array<GenericArg> | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::from_keys`,\n    typeArguments: [typeArg],\n    arguments: [vector(tx, `${typeArg}`, keys)],\n  });\n}\n\nexport function keys(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::keys`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport interface GetIdxArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function getIdx(tx: Transaction, typeArg: string, args: GetIdxArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::get_idx`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), generic(tx, `${typeArg}`, args.key)],\n  });\n}\n\nexport interface GetIdxOptArgs {\n  self: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function getIdxOpt(tx: Transaction, typeArg: string, args: GetIdxOptArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::get_idx_opt`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), generic(tx, `${typeArg}`, args.key)],\n  });\n}\n\nexport function intoKeys(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::into_keys`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport function size(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::vec_set::size`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n"]}