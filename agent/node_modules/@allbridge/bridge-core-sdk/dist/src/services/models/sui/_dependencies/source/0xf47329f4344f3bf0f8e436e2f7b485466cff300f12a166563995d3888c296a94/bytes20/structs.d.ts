import * as reified from "../../../../_framework/reified";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../../../_framework/reified";
import { FieldsWithTypes } from "../../../../_framework/util";
import { Vector } from "../../../../_framework/vector";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isBytes20(type: string): boolean;
export interface Bytes20Fields {
    data: ToField<Vector<"u8">>;
}
export type Bytes20Reified = Reified<Bytes20, Bytes20Fields>;
export declare class Bytes20 implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly data: ToField<Vector<"u8">>;
    private constructor();
    static reified(): Bytes20Reified;
    static get r(): reified.StructClassReified<Bytes20, Bytes20Fields>;
    static phantom(): PhantomReified<ToTypeStr<Bytes20>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        data: number[];
    }, {
        data: Iterable<number> & {
            length: number;
        };
    }>;
    static fromFields(fields: Record<string, any>): Bytes20;
    static fromFieldsWithTypes(item: FieldsWithTypes): Bytes20;
    static fromBcs(data: Uint8Array): Bytes20;
    toJSONField(): {
        data: number[];
    };
    toJSON(): {
        data: number[];
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): Bytes20;
    static fromJSON(json: Record<string, any>): Bytes20;
    static fromSuiParsedData(content: SuiParsedData): Bytes20;
    static fromSuiObjectData(data: SuiObjectData): Bytes20;
    static fetch(client: SuiClient, id: string): Promise<Bytes20>;
}
