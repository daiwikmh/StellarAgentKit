{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/zklogin-verified-issuer/structs.ts"],"names":[],"mappings":";;;AAsBA,4CAGC;AAzBD,cAAc;AACd,2EAAuE;AACvE,sDAUkC;AAClC,gDAAyF;AACzF,oCAAmC;AACnC,+CAAwC;AACxC,yCAAsC;AAEtC,6CAA4D;AAE5D,mFAAmF;AAEnF,SAAgB,gBAAgB,CAAC,IAAY;IAC3C,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,KAAK,GAAG,eAAO,2CAA2C,CAAC;AACxE,CAAC;AAUD,MAAa,cAAc;IACzB,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,eAAO,2CAA2C,CAAC;IAC/D,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,EAAW,CAAC;IAEhC,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;IACrC,aAAa,CAAS;IACtB,SAAS,CAAK;IACd,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;IAEvC,EAAE,CAAe;IACjB,KAAK,CAAqB;IAC1B,MAAM,CAAkB;IAEjC,YAAoB,QAAY,EAAE,MAA4B;QAC5D,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,cAAc,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QACrF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,cAAc,CAAC,SAAS;YAClC,YAAY,EAAE,IAAA,qBAAc,EAAC,cAAc,CAAC,SAAS,EAAE,GAAG,EAAE,CAAW;YACvE,QAAQ,EAAE,EAAQ;YAClB,SAAS,EAAE,cAAc,CAAC,UAAU;YACpC,eAAe,EAAE,EAAE;YACnB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC;YAC9E,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC;YACxF,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC;YAC3D,GAAG,EAAE,cAAc,CAAC,GAAG;YACvB,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,cAAc,CAAC,aAAa,CAAC,KAAK,CAAC;YAClE,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC;YACtE,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,cAAc,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACxF,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,cAAc,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACxF,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YAChF,GAAG,EAAE,CAAC,MAA4B,EAAE,EAAE;gBACpC,OAAO,IAAI,cAAc,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YACxC,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,cAAc,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO,IAAA,iBAAO,EAAC,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC;IAC3C,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,cAAc,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,SAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE;YAClC,EAAE,EAAE,aAAG,CAAC,GAAG;YACX,KAAK,EAAE,SAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC;gBAC7B,KAAK,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAA,eAAO,EAAC,GAAG,CAAC;gBACpC,MAAM,EAAE,CAAC,GAAe,EAAE,EAAE,CAAC,IAAA,aAAK,EAAC,GAAG,CAAC;aACxC,CAAC;YACF,MAAM,EAAE,gBAAM,CAAC,GAAG;SACnB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAA2B;QAC3C,OAAO,cAAc,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAClC,EAAE,EAAE,IAAA,0BAAgB,EAAC,aAAG,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC;YAC9C,KAAK,EAAE,IAAA,0BAAgB,EAAC,SAAS,EAAE,MAAM,CAAC,KAAK,CAAC;YAChD,MAAM,EAAE,IAAA,0BAAgB,EAAC,gBAAM,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC;SAC1D,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAqB;QAC9C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QAED,OAAO,cAAc,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAClC,EAAE,EAAE,IAAA,mCAAyB,EAAC,aAAG,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5D,KAAK,EAAE,IAAA,mCAAyB,EAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAC9D,MAAM,EAAE,IAAA,mCAAyB,EAAC,gBAAM,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;SACxE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAgB;QAC7B,OAAO,cAAc,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACnE,CAAC;IAED,WAAW;QACT,OAAO;YACL,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,KAAU;QAC7B,OAAO,cAAc,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAClC,EAAE,EAAE,IAAA,6BAAmB,EAAC,aAAG,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC;YAChD,KAAK,EAAE,IAAA,6BAAmB,EAAC,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC;YAClD,MAAM,EAAE,IAAA,6BAAmB,EAAC,gBAAM,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,MAAM,CAAC;SAC5D,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAyB;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS,EAAE,CAAC;YAChD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAsB;QAC7C,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,iCAAiC,CAAC,CAAC;QAC5F,CAAC;QACD,OAAO,cAAc,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACrD,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC3E,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;YAC9D,CAAC;YAED,OAAO,cAAc,CAAC,OAAO,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,cAAc,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACxD,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAiB,EAAE,EAAU;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,8CAA8C,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACzF,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACrF,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,iCAAiC,CAAC,CAAC;QACvE,CAAC;QAED,OAAO,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;;AApKH,wCAqKC","sourcesContent":["// @ts-nocheck\nimport { String } from \"../../_dependencies/source/0x1/string/structs\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { UID } from \"../object/structs\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64, fromHEX, toHEX } from \"@mysten/sui/utils\";\n\n/* ============================== VerifiedIssuer =============================== */\n\nexport function isVerifiedIssuer(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::zklogin_verified_issuer::VerifiedIssuer`;\n}\n\nexport interface VerifiedIssuerFields {\n  id: ToField<UID>;\n  owner: ToField<\"address\">;\n  issuer: ToField<String>;\n}\n\nexport type VerifiedIssuerReified = Reified<VerifiedIssuer, VerifiedIssuerFields>;\n\nexport class VerifiedIssuer implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::zklogin_verified_issuer::VerifiedIssuer`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = VerifiedIssuer.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = VerifiedIssuer.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly owner: ToField<\"address\">;\n  readonly issuer: ToField<String>;\n\n  private constructor(typeArgs: [], fields: VerifiedIssuerFields) {\n    this.$fullTypeName = composeSuiType(VerifiedIssuer.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.owner = fields.owner;\n    this.issuer = fields.issuer;\n  }\n\n  static reified(): VerifiedIssuerReified {\n    return {\n      typeName: VerifiedIssuer.$typeName,\n      fullTypeName: composeSuiType(VerifiedIssuer.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: VerifiedIssuer.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => VerifiedIssuer.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => VerifiedIssuer.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => VerifiedIssuer.fromBcs(data),\n      bcs: VerifiedIssuer.bcs,\n      fromJSONField: (field: any) => VerifiedIssuer.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => VerifiedIssuer.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => VerifiedIssuer.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => VerifiedIssuer.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => VerifiedIssuer.fetch(client, id),\n      new: (fields: VerifiedIssuerFields) => {\n        return new VerifiedIssuer([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return VerifiedIssuer.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<VerifiedIssuer>> {\n    return phantom(VerifiedIssuer.reified());\n  }\n  static get p() {\n    return VerifiedIssuer.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"VerifiedIssuer\", {\n      id: UID.bcs,\n      owner: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      issuer: String.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): VerifiedIssuer {\n    return VerifiedIssuer.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      owner: decodeFromFields(\"address\", fields.owner),\n      issuer: decodeFromFields(String.reified(), fields.issuer),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): VerifiedIssuer {\n    if (!isVerifiedIssuer(item.type)) {\n      throw new Error(\"not a VerifiedIssuer type\");\n    }\n\n    return VerifiedIssuer.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      owner: decodeFromFieldsWithTypes(\"address\", item.fields.owner),\n      issuer: decodeFromFieldsWithTypes(String.reified(), item.fields.issuer),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): VerifiedIssuer {\n    return VerifiedIssuer.fromFields(VerifiedIssuer.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      owner: this.owner,\n      issuer: this.issuer,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): VerifiedIssuer {\n    return VerifiedIssuer.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      owner: decodeFromJSONField(\"address\", field.owner),\n      issuer: decodeFromJSONField(String.reified(), field.issuer),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): VerifiedIssuer {\n    if (json.$typeName !== VerifiedIssuer.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return VerifiedIssuer.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): VerifiedIssuer {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isVerifiedIssuer(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a VerifiedIssuer object`);\n    }\n    return VerifiedIssuer.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): VerifiedIssuer {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isVerifiedIssuer(data.bcs.type)) {\n        throw new Error(`object at is not a VerifiedIssuer object`);\n      }\n\n      return VerifiedIssuer.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return VerifiedIssuer.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<VerifiedIssuer> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching VerifiedIssuer object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isVerifiedIssuer(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a VerifiedIssuer object`);\n    }\n\n    return VerifiedIssuer.fromSuiObjectData(res.data);\n  }\n}\n"]}