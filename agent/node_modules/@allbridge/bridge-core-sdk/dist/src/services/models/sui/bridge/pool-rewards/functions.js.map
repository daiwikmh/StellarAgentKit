{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/bridge/pool-rewards/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function new_(tx: Transaction, typeArg: string) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::new`,\n    typeArguments: [typeArg],\n    arguments: [],\n  });\n}\n\nexport interface AddRewardsArgs {\n  poolRewards: TransactionObjectInput;\n  rewards: TransactionObjectInput;\n}\n\nexport function addRewards(tx: Transaction, typeArg: string, args: AddRewardsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::add_rewards`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolRewards), obj(tx, args.rewards)],\n  });\n}\n\nexport function claimAdminFee(tx: Transaction, typeArg: string, poolRewards: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::claim_admin_fee`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolRewards)],\n  });\n}\n\nexport interface ClaimRewardArgs {\n  poolRewards: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function claimReward(tx: Transaction, typeArg: string, args: ClaimRewardArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::claim_reward`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolRewards), obj(tx, args.userDeposit)],\n  });\n}\n\nexport interface DepositLpArgs {\n  poolRewards: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n  lpAmount: bigint | TransactionArgument;\n}\n\nexport function depositLp(tx: Transaction, typeArg: string, args: DepositLpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::deposit_lp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolRewards), obj(tx, args.userDeposit), pure(tx, args.lpAmount, `u64`)],\n  });\n}\n\nexport function getAdminFeeShareBp(tx: Transaction, typeArg: string, poolRewards: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::get_admin_fee_share_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolRewards)],\n  });\n}\n\nexport function lpSupply(tx: Transaction, typeArg: string, poolRewards: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::lp_supply`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, poolRewards)],\n  });\n}\n\nexport interface PendingRewardsArgs {\n  poolRewards: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n}\n\nexport function pendingRewards(tx: Transaction, typeArg: string, args: PendingRewardsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::pending_rewards`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolRewards), obj(tx, args.userDeposit)],\n  });\n}\n\nexport interface SetAdminFeeShareBpArgs {\n  poolRewards: TransactionObjectInput;\n  adminFeeShareBp: bigint | TransactionArgument;\n}\n\nexport function setAdminFeeShareBp(tx: Transaction, typeArg: string, args: SetAdminFeeShareBpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::set_admin_fee_share_bp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolRewards), pure(tx, args.adminFeeShareBp, `u64`)],\n  });\n}\n\nexport interface WithdrawLpArgs {\n  poolRewards: TransactionObjectInput;\n  userDeposit: TransactionObjectInput;\n  lpAmount: bigint | TransactionArgument;\n}\n\nexport function withdrawLp(tx: Transaction, typeArg: string, args: WithdrawLpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::pool_rewards::withdraw_lp`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.poolRewards), obj(tx, args.userDeposit), pure(tx, args.lpAmount, `u64`)],\n  });\n}\n"]}