{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/balance/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { GenericArg, generic, obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function value(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::value`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport function createStakingRewards(tx: Transaction, typeArg: string, value: bigint | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::create_staking_rewards`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, value, `u64`)],\n  });\n}\n\nexport function createSupply(tx: Transaction, typeArg: string, t: GenericArg) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::create_supply`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, t)],\n  });\n}\n\nexport interface DecreaseSupplyArgs {\n  self: TransactionObjectInput;\n  balance: TransactionObjectInput;\n}\n\nexport function decreaseSupply(tx: Transaction, typeArg: string, args: DecreaseSupplyArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::decrease_supply`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), obj(tx, args.balance)],\n  });\n}\n\nexport function destroyStorageRebates(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::destroy_storage_rebates`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport function destroySupply(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::destroy_supply`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport function destroyZero(tx: Transaction, typeArg: string, balance: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::destroy_zero`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, balance)],\n  });\n}\n\nexport interface IncreaseSupplyArgs {\n  self: TransactionObjectInput;\n  value: bigint | TransactionArgument;\n}\n\nexport function increaseSupply(tx: Transaction, typeArg: string, args: IncreaseSupplyArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::increase_supply`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), pure(tx, args.value, `u64`)],\n  });\n}\n\nexport interface JoinArgs {\n  self: TransactionObjectInput;\n  balance: TransactionObjectInput;\n}\n\nexport function join(tx: Transaction, typeArg: string, args: JoinArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::join`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), obj(tx, args.balance)],\n  });\n}\n\nexport interface SplitArgs {\n  self: TransactionObjectInput;\n  value: bigint | TransactionArgument;\n}\n\nexport function split(tx: Transaction, typeArg: string, args: SplitArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::split`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.self), pure(tx, args.value, `u64`)],\n  });\n}\n\nexport function supplyValue(tx: Transaction, typeArg: string, supply: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::supply_value`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, supply)],\n  });\n}\n\nexport function withdrawAll(tx: Transaction, typeArg: string, self: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::withdraw_all`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, self)],\n  });\n}\n\nexport function zero(tx: Transaction, typeArg: string) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::balance::zero`,\n    typeArguments: [typeArg],\n    arguments: [],\n  });\n}\n"]}