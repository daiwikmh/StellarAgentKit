import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export declare function getId(tx: Transaction, messenger: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getVersion(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function init(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface MigrateArgs {
    adminCap: TransactionObjectInput;
    wormholeMessenger: TransactionObjectInput;
}
export declare function migrate(tx: Transaction, args: MigrateArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function gasBalanceValue(tx: Transaction, messenger: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getGasUsage(tx: Transaction, messenger: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getOtherChainIds(tx: Transaction, messenger: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getOtherWormholeMessengers(tx: Transaction, messenger: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getReceivedMessages(tx: Transaction, messenger: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getSentMessages(tx: Transaction, messenger: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetTransactionCostArgs {
    messenger: TransactionObjectInput;
    wormholeState: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getTransactionCost(tx: Transaction, args: GetTransactionCostArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface InitEmitterArgs {
    whMessenger: TransactionObjectInput;
    wormholeState: TransactionObjectInput;
}
export declare function initEmitter(tx: Transaction, args: InitEmitterArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReceiveMessageArgs {
    whMessenger: TransactionObjectInput;
    encodedMsg: Array<number | TransactionArgument> | TransactionArgument;
    wormholeState: TransactionObjectInput;
    theClock: TransactionObjectInput;
}
export declare function receiveMessage(tx: Transaction, args: ReceiveMessageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReceiveMessageInnerArgs {
    whMessenger: TransactionObjectInput;
    sequence: bigint | TransactionArgument;
    emitterChainId: number | TransactionArgument;
    emitterAddress: TransactionObjectInput;
    payload: TransactionObjectInput;
}
export declare function receiveMessageInner(tx: Transaction, args: ReceiveMessageInnerArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RegisterWormholeMessengerArgs {
    whMessenger: TransactionObjectInput;
    chainId: number | TransactionArgument;
    whAddress: TransactionObjectInput;
}
export declare function registerWormholeMessenger(tx: Transaction, args: RegisterWormholeMessengerArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SendMessageArgs {
    whMessenger: TransactionObjectInput;
    wormholeState: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    payload: TransactionObjectInput;
    sender: TransactionObjectInput;
    theClock: TransactionObjectInput;
    coin: TransactionObjectInput;
}
export declare function sendMessage(tx: Transaction, args: SendMessageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetGasUsageArgs {
    whMessenger: TransactionObjectInput;
    chainId: number | TransactionArgument;
    gasAmount: bigint | TransactionArgument;
}
export declare function setGasUsage(tx: Transaction, args: SetGasUsageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetOtherChainsArgs {
    whMessenger: TransactionObjectInput;
    otherChainIds: Array<boolean | TransactionArgument> | TransactionArgument;
}
export declare function setOtherChains(tx: Transaction, args: SetOtherChainsArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface UnregisterWormholeMessengerArgs {
    whMessenger: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function unregisterWormholeMessenger(tx: Transaction, args: UnregisterWormholeMessengerArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface WithdrawFeeArgs {
    whMessenger: TransactionObjectInput;
    amount: bigint | TransactionArgument;
}
export declare function withdrawFee(tx: Transaction, args: WithdrawFeeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
