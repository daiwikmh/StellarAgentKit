import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../../../_framework/reified";
import { FieldsWithTypes } from "../../../../_framework/util";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isBurnMessage(type: string): boolean;
export interface BurnMessageFields {
    version: ToField<"u32">;
    burnToken: ToField<"address">;
    mintRecipient: ToField<"address">;
    amount: ToField<"u256">;
    messageSender: ToField<"address">;
}
export type BurnMessageReified = Reified<BurnMessage, BurnMessageFields>;
export declare class BurnMessage implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly version: ToField<"u32">;
    readonly burnToken: ToField<"address">;
    readonly mintRecipient: ToField<"address">;
    readonly amount: ToField<"u256">;
    readonly messageSender: ToField<"address">;
    private constructor();
    static reified(): BurnMessageReified;
    static get r(): import("../../../../_framework/reified").StructClassReified<BurnMessage, BurnMessageFields>;
    static phantom(): PhantomReified<ToTypeStr<BurnMessage>>;
    static get p(): PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        version: number;
        burn_token: string;
        mint_recipient: string;
        amount: string;
        message_sender: string;
    }, {
        version: number;
        burn_token: string;
        mint_recipient: string;
        amount: string | number | bigint;
        message_sender: string;
    }>;
    static fromFields(fields: Record<string, any>): BurnMessage;
    static fromFieldsWithTypes(item: FieldsWithTypes): BurnMessage;
    static fromBcs(data: Uint8Array): BurnMessage;
    toJSONField(): {
        version: number;
        burnToken: string;
        mintRecipient: string;
        amount: string;
        messageSender: string;
    };
    toJSON(): {
        version: number;
        burnToken: string;
        mintRecipient: string;
        amount: string;
        messageSender: string;
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): BurnMessage;
    static fromJSON(json: Record<string, any>): BurnMessage;
    static fromSuiParsedData(content: SuiParsedData): BurnMessage;
    static fromSuiObjectData(data: SuiObjectData): BurnMessage;
    static fetch(client: SuiClient, id: string): Promise<BurnMessage>;
}
