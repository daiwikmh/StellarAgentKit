{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/kiosk-extension/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { Bag } from \"../bag/structs\";\nimport { PKG_V26 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Extension =============================== */\n\nexport function isExtension(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::kiosk_extension::Extension`;\n}\n\nexport interface ExtensionFields {\n  storage: ToField<Bag>;\n  permissions: ToField<\"u128\">;\n  isEnabled: ToField<\"bool\">;\n}\n\nexport type ExtensionReified = Reified<Extension, ExtensionFields>;\n\nexport class Extension implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::kiosk_extension::Extension`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Extension.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Extension.$isPhantom;\n\n  readonly storage: ToField<Bag>;\n  readonly permissions: ToField<\"u128\">;\n  readonly isEnabled: ToField<\"bool\">;\n\n  private constructor(typeArgs: [], fields: ExtensionFields) {\n    this.$fullTypeName = composeSuiType(Extension.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.storage = fields.storage;\n    this.permissions = fields.permissions;\n    this.isEnabled = fields.isEnabled;\n  }\n\n  static reified(): ExtensionReified {\n    return {\n      typeName: Extension.$typeName,\n      fullTypeName: composeSuiType(Extension.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Extension.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Extension.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Extension.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Extension.fromBcs(data),\n      bcs: Extension.bcs,\n      fromJSONField: (field: any) => Extension.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Extension.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Extension.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Extension.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Extension.fetch(client, id),\n      new: (fields: ExtensionFields) => {\n        return new Extension([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Extension.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Extension>> {\n    return phantom(Extension.reified());\n  }\n  static get p() {\n    return Extension.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Extension\", {\n      storage: Bag.bcs,\n      permissions: bcs.u128(),\n      is_enabled: bcs.bool(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Extension {\n    return Extension.reified().new({\n      storage: decodeFromFields(Bag.reified(), fields.storage),\n      permissions: decodeFromFields(\"u128\", fields.permissions),\n      isEnabled: decodeFromFields(\"bool\", fields.is_enabled),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Extension {\n    if (!isExtension(item.type)) {\n      throw new Error(\"not a Extension type\");\n    }\n\n    return Extension.reified().new({\n      storage: decodeFromFieldsWithTypes(Bag.reified(), item.fields.storage),\n      permissions: decodeFromFieldsWithTypes(\"u128\", item.fields.permissions),\n      isEnabled: decodeFromFieldsWithTypes(\"bool\", item.fields.is_enabled),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Extension {\n    return Extension.fromFields(Extension.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      storage: this.storage.toJSONField(),\n      permissions: this.permissions.toString(),\n      isEnabled: this.isEnabled,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Extension {\n    return Extension.reified().new({\n      storage: decodeFromJSONField(Bag.reified(), field.storage),\n      permissions: decodeFromJSONField(\"u128\", field.permissions),\n      isEnabled: decodeFromJSONField(\"bool\", field.isEnabled),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): Extension {\n    if (json.$typeName !== Extension.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Extension.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Extension {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isExtension(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Extension object`);\n    }\n    return Extension.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Extension {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isExtension(data.bcs.type)) {\n        throw new Error(`object at is not a Extension object`);\n      }\n\n      return Extension.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Extension.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Extension> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Extension object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isExtension(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Extension object`);\n    }\n\n    return Extension.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== ExtensionKey =============================== */\n\nexport function isExtensionKey(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::kiosk_extension::ExtensionKey` + \"<\");\n}\n\nexport interface ExtensionKeyFields<Ext extends PhantomTypeArgument> {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type ExtensionKeyReified<Ext extends PhantomTypeArgument> = Reified<ExtensionKey<Ext>, ExtensionKeyFields<Ext>>;\n\nexport class ExtensionKey<Ext extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::kiosk_extension::ExtensionKey`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = ExtensionKey.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<Ext>];\n  readonly $isPhantom = ExtensionKey.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<Ext>], fields: ExtensionKeyFields<Ext>) {\n    this.$fullTypeName = composeSuiType(ExtensionKey.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified<Ext extends PhantomReified<PhantomTypeArgument>>(\n    Ext: Ext\n  ): ExtensionKeyReified<ToPhantomTypeArgument<Ext>> {\n    return {\n      typeName: ExtensionKey.$typeName,\n      fullTypeName: composeSuiType(ExtensionKey.$typeName, ...[extractType(Ext)]) as string,\n      typeArgs: [extractType(Ext)] as [PhantomToTypeStr<ToPhantomTypeArgument<Ext>>],\n      isPhantom: ExtensionKey.$isPhantom,\n      reifiedTypeArgs: [Ext],\n      fromFields: (fields: Record<string, any>) => ExtensionKey.fromFields(Ext, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => ExtensionKey.fromFieldsWithTypes(Ext, item),\n      fromBcs: (data: Uint8Array) => ExtensionKey.fromBcs(Ext, data),\n      bcs: ExtensionKey.bcs,\n      fromJSONField: (field: any) => ExtensionKey.fromJSONField(Ext, field),\n      fromJSON: (json: Record<string, any>) => ExtensionKey.fromJSON(Ext, json),\n      fromSuiParsedData: (content: SuiParsedData) => ExtensionKey.fromSuiParsedData(Ext, content),\n      fromSuiObjectData: (content: SuiObjectData) => ExtensionKey.fromSuiObjectData(Ext, content),\n      fetch: async (client: SuiClient, id: string) => ExtensionKey.fetch(client, Ext, id),\n      new: (fields: ExtensionKeyFields<ToPhantomTypeArgument<Ext>>) => {\n        return new ExtensionKey([extractType(Ext)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return ExtensionKey.reified;\n  }\n\n  static phantom<Ext extends PhantomReified<PhantomTypeArgument>>(\n    Ext: Ext\n  ): PhantomReified<ToTypeStr<ExtensionKey<ToPhantomTypeArgument<Ext>>>> {\n    return phantom(ExtensionKey.reified(Ext));\n  }\n  static get p() {\n    return ExtensionKey.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"ExtensionKey\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields<Ext extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Ext,\n    fields: Record<string, any>\n  ): ExtensionKey<ToPhantomTypeArgument<Ext>> {\n    return ExtensionKey.reified(typeArg).new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes<Ext extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Ext,\n    item: FieldsWithTypes\n  ): ExtensionKey<ToPhantomTypeArgument<Ext>> {\n    if (!isExtensionKey(item.type)) {\n      throw new Error(\"not a ExtensionKey type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return ExtensionKey.reified(typeArg).new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs<Ext extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Ext,\n    data: Uint8Array\n  ): ExtensionKey<ToPhantomTypeArgument<Ext>> {\n    return ExtensionKey.fromFields(typeArg, ExtensionKey.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<Ext extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Ext,\n    field: any\n  ): ExtensionKey<ToPhantomTypeArgument<Ext>> {\n    return ExtensionKey.reified(typeArg).new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON<Ext extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Ext,\n    json: Record<string, any>\n  ): ExtensionKey<ToPhantomTypeArgument<Ext>> {\n    if (json.$typeName !== ExtensionKey.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(ExtensionKey.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return ExtensionKey.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<Ext extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Ext,\n    content: SuiParsedData\n  ): ExtensionKey<ToPhantomTypeArgument<Ext>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isExtensionKey(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a ExtensionKey object`);\n    }\n    return ExtensionKey.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<Ext extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: Ext,\n    data: SuiObjectData\n  ): ExtensionKey<ToPhantomTypeArgument<Ext>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isExtensionKey(data.bcs.type)) {\n        throw new Error(`object at is not a ExtensionKey object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return ExtensionKey.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return ExtensionKey.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<Ext extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: Ext,\n    id: string\n  ): Promise<ExtensionKey<ToPhantomTypeArgument<Ext>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching ExtensionKey object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isExtensionKey(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a ExtensionKey object`);\n    }\n\n    return ExtensionKey.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}