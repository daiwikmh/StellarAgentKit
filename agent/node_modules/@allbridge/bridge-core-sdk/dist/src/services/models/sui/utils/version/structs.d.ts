import { PhantomReified, PhantomToTypeStr, PhantomTypeArgument, Reified, StructClass, ToField, ToPhantomTypeArgument, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isCurrentVersion(type: string): boolean;
export interface CurrentVersionFields<Cap extends PhantomTypeArgument> {
    version: ToField<"u64">;
}
export type CurrentVersionReified<Cap extends PhantomTypeArgument> = Reified<CurrentVersion<Cap>, CurrentVersionFields<Cap>>;
export declare class CurrentVersion<Cap extends PhantomTypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [true];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [PhantomToTypeStr<Cap>];
    readonly $isPhantom: readonly [true];
    readonly version: ToField<"u64">;
    private constructor();
    static reified<Cap extends PhantomReified<PhantomTypeArgument>>(Cap: Cap): CurrentVersionReified<ToPhantomTypeArgument<Cap>>;
    static get r(): typeof CurrentVersion.reified;
    static phantom<Cap extends PhantomReified<PhantomTypeArgument>>(Cap: Cap): PhantomReified<ToTypeStr<CurrentVersion<ToPhantomTypeArgument<Cap>>>>;
    static get p(): typeof CurrentVersion.phantom;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        version: string;
    }, {
        version: string | number | bigint;
    }>;
    static fromFields<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, fields: Record<string, any>): CurrentVersion<ToPhantomTypeArgument<Cap>>;
    static fromFieldsWithTypes<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, item: FieldsWithTypes): CurrentVersion<ToPhantomTypeArgument<Cap>>;
    static fromBcs<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, data: Uint8Array): CurrentVersion<ToPhantomTypeArgument<Cap>>;
    toJSONField(): {
        version: string;
    };
    toJSON(): {
        version: string;
        $typeName: string;
        $typeArgs: [PhantomToTypeStr<Cap>];
    };
    static fromJSONField<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, field: any): CurrentVersion<ToPhantomTypeArgument<Cap>>;
    static fromJSON<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, json: Record<string, any>): CurrentVersion<ToPhantomTypeArgument<Cap>>;
    static fromSuiParsedData<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, content: SuiParsedData): CurrentVersion<ToPhantomTypeArgument<Cap>>;
    static fromSuiObjectData<Cap extends PhantomReified<PhantomTypeArgument>>(typeArg: Cap, data: SuiObjectData): CurrentVersion<ToPhantomTypeArgument<Cap>>;
    static fetch<Cap extends PhantomReified<PhantomTypeArgument>>(client: SuiClient, typeArg: Cap, id: string): Promise<CurrentVersion<ToPhantomTypeArgument<Cap>>>;
}
