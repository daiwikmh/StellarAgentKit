{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0x31cc14d80c175ae39777c0238f20594c6d4869cfab199f40b69f3319956b8beb/deposit-for-burn/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../../../_framework/reified\";\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  fieldToJSON,\n  phantom,\n  toBcs,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../../../_framework/util\";\nimport { Vector } from \"../../../../_framework/vector\";\nimport { Coin } from \"../../../../sui/coin/structs\";\nimport { Option } from \"../../0x1/option/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { BcsType, bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64, fromHEX, toHEX } from \"@mysten/sui/utils\";\n\n/* ============================== DepositForBurnTicket =============================== */\n\nexport function isDepositForBurnTicket(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::deposit_for_burn::DepositForBurnTicket` + \"<\");\n}\n\nexport interface DepositForBurnTicketFields<T extends PhantomTypeArgument, Auth extends TypeArgument> {\n  auth: ToField<Auth>;\n  coins: ToField<Coin<T>>;\n  destinationDomain: ToField<\"u32\">;\n  mintRecipient: ToField<\"address\">;\n}\n\nexport type DepositForBurnTicketReified<T extends PhantomTypeArgument, Auth extends TypeArgument> = Reified<\n  DepositForBurnTicket<T, Auth>,\n  DepositForBurnTicketFields<T, Auth>\n>;\n\nexport class DepositForBurnTicket<T extends PhantomTypeArgument, Auth extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::deposit_for_burn::DepositForBurnTicket`;\n  }\n  static readonly $numTypeParams = 2;\n  static readonly $isPhantom = [true, false] as const;\n\n  readonly $typeName = DepositForBurnTicket.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>, ToTypeStr<Auth>];\n  readonly $isPhantom = DepositForBurnTicket.$isPhantom;\n\n  readonly auth: ToField<Auth>;\n  readonly coins: ToField<Coin<T>>;\n  readonly destinationDomain: ToField<\"u32\">;\n  readonly mintRecipient: ToField<\"address\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>, ToTypeStr<Auth>], fields: DepositForBurnTicketFields<T, Auth>) {\n    this.$fullTypeName = composeSuiType(DepositForBurnTicket.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.auth = fields.auth;\n    this.coins = fields.coins;\n    this.destinationDomain = fields.destinationDomain;\n    this.mintRecipient = fields.mintRecipient;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    T: T,\n    Auth: Auth\n  ): DepositForBurnTicketReified<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>> {\n    return {\n      typeName: DepositForBurnTicket.$typeName,\n      fullTypeName: composeSuiType(DepositForBurnTicket.$typeName, ...[extractType(T), extractType(Auth)]) as string,\n      typeArgs: [extractType(T), extractType(Auth)] as [\n        PhantomToTypeStr<ToPhantomTypeArgument<T>>,\n        ToTypeStr<ToTypeArgument<Auth>>,\n      ],\n      isPhantom: DepositForBurnTicket.$isPhantom,\n      reifiedTypeArgs: [T, Auth],\n      fromFields: (fields: Record<string, any>) => DepositForBurnTicket.fromFields([T, Auth], fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => DepositForBurnTicket.fromFieldsWithTypes([T, Auth], item),\n      fromBcs: (data: Uint8Array) => DepositForBurnTicket.fromBcs([T, Auth], data),\n      bcs: DepositForBurnTicket.bcs(toBcs(Auth)),\n      fromJSONField: (field: any) => DepositForBurnTicket.fromJSONField([T, Auth], field),\n      fromJSON: (json: Record<string, any>) => DepositForBurnTicket.fromJSON([T, Auth], json),\n      fromSuiParsedData: (content: SuiParsedData) => DepositForBurnTicket.fromSuiParsedData([T, Auth], content),\n      fromSuiObjectData: (content: SuiObjectData) => DepositForBurnTicket.fromSuiObjectData([T, Auth], content),\n      fetch: async (client: SuiClient, id: string) => DepositForBurnTicket.fetch(client, [T, Auth], id),\n      new: (fields: DepositForBurnTicketFields<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>>) => {\n        return new DepositForBurnTicket([extractType(T), extractType(Auth)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return DepositForBurnTicket.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    T: T,\n    Auth: Auth\n  ): PhantomReified<ToTypeStr<DepositForBurnTicket<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>>>> {\n    return phantom(DepositForBurnTicket.reified(T, Auth));\n  }\n  static get p() {\n    return DepositForBurnTicket.phantom;\n  }\n\n  static get bcs() {\n    return <Auth extends BcsType<any>>(Auth: Auth) =>\n      bcs.struct(`DepositForBurnTicket<${Auth.name}>`, {\n        auth: Auth,\n        coins: Coin.bcs,\n        destination_domain: bcs.u32(),\n        mint_recipient: bcs.bytes(32).transform({\n          input: (val: string) => fromHEX(val),\n          output: (val: Uint8Array) => toHEX(val),\n        }),\n      });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    typeArgs: [T, Auth],\n    fields: Record<string, any>\n  ): DepositForBurnTicket<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>> {\n    return DepositForBurnTicket.reified(typeArgs[0], typeArgs[1]).new({\n      auth: decodeFromFields(typeArgs[1], fields.auth),\n      coins: decodeFromFields(Coin.reified(typeArgs[0]), fields.coins),\n      destinationDomain: decodeFromFields(\"u32\", fields.destination_domain),\n      mintRecipient: decodeFromFields(\"address\", fields.mint_recipient),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    typeArgs: [T, Auth],\n    item: FieldsWithTypes\n  ): DepositForBurnTicket<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>> {\n    if (!isDepositForBurnTicket(item.type)) {\n      throw new Error(\"not a DepositForBurnTicket type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, typeArgs);\n\n    return DepositForBurnTicket.reified(typeArgs[0], typeArgs[1]).new({\n      auth: decodeFromFieldsWithTypes(typeArgs[1], item.fields.auth),\n      coins: decodeFromFieldsWithTypes(Coin.reified(typeArgs[0]), item.fields.coins),\n      destinationDomain: decodeFromFieldsWithTypes(\"u32\", item.fields.destination_domain),\n      mintRecipient: decodeFromFieldsWithTypes(\"address\", item.fields.mint_recipient),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    typeArgs: [T, Auth],\n    data: Uint8Array\n  ): DepositForBurnTicket<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>> {\n    return DepositForBurnTicket.fromFields(typeArgs, DepositForBurnTicket.bcs(toBcs(typeArgs[1])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      auth: fieldToJSON<Auth>(this.$typeArgs[1], this.auth),\n      coins: this.coins.toJSONField(),\n      destinationDomain: this.destinationDomain,\n      mintRecipient: this.mintRecipient,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    typeArgs: [T, Auth],\n    field: any\n  ): DepositForBurnTicket<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>> {\n    return DepositForBurnTicket.reified(typeArgs[0], typeArgs[1]).new({\n      auth: decodeFromJSONField(typeArgs[1], field.auth),\n      coins: decodeFromJSONField(Coin.reified(typeArgs[0]), field.coins),\n      destinationDomain: decodeFromJSONField(\"u32\", field.destinationDomain),\n      mintRecipient: decodeFromJSONField(\"address\", field.mintRecipient),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    typeArgs: [T, Auth],\n    json: Record<string, any>\n  ): DepositForBurnTicket<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>> {\n    if (json.$typeName !== DepositForBurnTicket.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(\n      composeSuiType(DepositForBurnTicket.$typeName, ...typeArgs.map(extractType)),\n      json.$typeArgs,\n      typeArgs\n    );\n\n    return DepositForBurnTicket.fromJSONField(typeArgs, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    typeArgs: [T, Auth],\n    content: SuiParsedData\n  ): DepositForBurnTicket<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isDepositForBurnTicket(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a DepositForBurnTicket object`);\n    }\n    return DepositForBurnTicket.fromFieldsWithTypes(typeArgs, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    typeArgs: [T, Auth],\n    data: SuiObjectData\n  ): DepositForBurnTicket<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isDepositForBurnTicket(data.bcs.type)) {\n        throw new Error(`object at is not a DepositForBurnTicket object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 2) {\n        throw new Error(`type argument mismatch: expected 2 type arguments but got ${gotTypeArgs.length}`);\n      }\n      for (let i = 0; i < 2; i++) {\n        const gotTypeArg = compressSuiType(gotTypeArgs[i]);\n        const expectedTypeArg = compressSuiType(extractType(typeArgs[i]));\n        if (gotTypeArg !== expectedTypeArg) {\n          throw new Error(\n            `type argument mismatch at position ${i}: expected '${expectedTypeArg}' but got '${gotTypeArg}'`\n          );\n        }\n      }\n\n      return DepositForBurnTicket.fromBcs(typeArgs, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return DepositForBurnTicket.fromSuiParsedData(typeArgs, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>, Auth extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArgs: [T, Auth],\n    id: string\n  ): Promise<DepositForBurnTicket<ToPhantomTypeArgument<T>, ToTypeArgument<Auth>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching DepositForBurnTicket object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isDepositForBurnTicket(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a DepositForBurnTicket object`);\n    }\n\n    return DepositForBurnTicket.fromSuiObjectData(typeArgs, res.data);\n  }\n}\n\n/* ============================== ReplaceDepositForBurnTicket =============================== */\n\nexport function isReplaceDepositForBurnTicket(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::deposit_for_burn::ReplaceDepositForBurnTicket` + \"<\");\n}\n\nexport interface ReplaceDepositForBurnTicketFields<Auth extends TypeArgument> {\n  auth: ToField<Auth>;\n  originalRawMessage: ToField<Vector<\"u8\">>;\n  originalAttestation: ToField<Vector<\"u8\">>;\n  newDestinationCaller: ToField<Option<\"address\">>;\n  newMintRecipient: ToField<Option<\"address\">>;\n}\n\nexport type ReplaceDepositForBurnTicketReified<Auth extends TypeArgument> = Reified<\n  ReplaceDepositForBurnTicket<Auth>,\n  ReplaceDepositForBurnTicketFields<Auth>\n>;\n\nexport class ReplaceDepositForBurnTicket<Auth extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::deposit_for_burn::ReplaceDepositForBurnTicket`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [false] as const;\n\n  readonly $typeName = ReplaceDepositForBurnTicket.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<Auth>];\n  readonly $isPhantom = ReplaceDepositForBurnTicket.$isPhantom;\n\n  readonly auth: ToField<Auth>;\n  readonly originalRawMessage: ToField<Vector<\"u8\">>;\n  readonly originalAttestation: ToField<Vector<\"u8\">>;\n  readonly newDestinationCaller: ToField<Option<\"address\">>;\n  readonly newMintRecipient: ToField<Option<\"address\">>;\n\n  private constructor(typeArgs: [ToTypeStr<Auth>], fields: ReplaceDepositForBurnTicketFields<Auth>) {\n    this.$fullTypeName = composeSuiType(ReplaceDepositForBurnTicket.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.auth = fields.auth;\n    this.originalRawMessage = fields.originalRawMessage;\n    this.originalAttestation = fields.originalAttestation;\n    this.newDestinationCaller = fields.newDestinationCaller;\n    this.newMintRecipient = fields.newMintRecipient;\n  }\n\n  static reified<Auth extends Reified<TypeArgument, any>>(\n    Auth: Auth\n  ): ReplaceDepositForBurnTicketReified<ToTypeArgument<Auth>> {\n    return {\n      typeName: ReplaceDepositForBurnTicket.$typeName,\n      fullTypeName: composeSuiType(ReplaceDepositForBurnTicket.$typeName, ...[extractType(Auth)]) as string,\n      typeArgs: [extractType(Auth)] as [ToTypeStr<ToTypeArgument<Auth>>],\n      isPhantom: ReplaceDepositForBurnTicket.$isPhantom,\n      reifiedTypeArgs: [Auth],\n      fromFields: (fields: Record<string, any>) => ReplaceDepositForBurnTicket.fromFields(Auth, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => ReplaceDepositForBurnTicket.fromFieldsWithTypes(Auth, item),\n      fromBcs: (data: Uint8Array) => ReplaceDepositForBurnTicket.fromBcs(Auth, data),\n      bcs: ReplaceDepositForBurnTicket.bcs(toBcs(Auth)),\n      fromJSONField: (field: any) => ReplaceDepositForBurnTicket.fromJSONField(Auth, field),\n      fromJSON: (json: Record<string, any>) => ReplaceDepositForBurnTicket.fromJSON(Auth, json),\n      fromSuiParsedData: (content: SuiParsedData) => ReplaceDepositForBurnTicket.fromSuiParsedData(Auth, content),\n      fromSuiObjectData: (content: SuiObjectData) => ReplaceDepositForBurnTicket.fromSuiObjectData(Auth, content),\n      fetch: async (client: SuiClient, id: string) => ReplaceDepositForBurnTicket.fetch(client, Auth, id),\n      new: (fields: ReplaceDepositForBurnTicketFields<ToTypeArgument<Auth>>) => {\n        return new ReplaceDepositForBurnTicket([extractType(Auth)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return ReplaceDepositForBurnTicket.reified;\n  }\n\n  static phantom<Auth extends Reified<TypeArgument, any>>(\n    Auth: Auth\n  ): PhantomReified<ToTypeStr<ReplaceDepositForBurnTicket<ToTypeArgument<Auth>>>> {\n    return phantom(ReplaceDepositForBurnTicket.reified(Auth));\n  }\n  static get p() {\n    return ReplaceDepositForBurnTicket.phantom;\n  }\n\n  static get bcs() {\n    return <Auth extends BcsType<any>>(Auth: Auth) =>\n      bcs.struct(`ReplaceDepositForBurnTicket<${Auth.name}>`, {\n        auth: Auth,\n        original_raw_message: bcs.vector(bcs.u8()),\n        original_attestation: bcs.vector(bcs.u8()),\n        new_destination_caller: Option.bcs(\n          bcs.bytes(32).transform({\n            input: (val: string) => fromHEX(val),\n            output: (val: Uint8Array) => toHEX(val),\n          })\n        ),\n        new_mint_recipient: Option.bcs(\n          bcs.bytes(32).transform({\n            input: (val: string) => fromHEX(val),\n            output: (val: Uint8Array) => toHEX(val),\n          })\n        ),\n      });\n  }\n\n  static fromFields<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    fields: Record<string, any>\n  ): ReplaceDepositForBurnTicket<ToTypeArgument<Auth>> {\n    return ReplaceDepositForBurnTicket.reified(typeArg).new({\n      auth: decodeFromFields(typeArg, fields.auth),\n      originalRawMessage: decodeFromFields(reified.vector(\"u8\"), fields.original_raw_message),\n      originalAttestation: decodeFromFields(reified.vector(\"u8\"), fields.original_attestation),\n      newDestinationCaller: decodeFromFields(Option.reified(\"address\"), fields.new_destination_caller),\n      newMintRecipient: decodeFromFields(Option.reified(\"address\"), fields.new_mint_recipient),\n    });\n  }\n\n  static fromFieldsWithTypes<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    item: FieldsWithTypes\n  ): ReplaceDepositForBurnTicket<ToTypeArgument<Auth>> {\n    if (!isReplaceDepositForBurnTicket(item.type)) {\n      throw new Error(\"not a ReplaceDepositForBurnTicket type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return ReplaceDepositForBurnTicket.reified(typeArg).new({\n      auth: decodeFromFieldsWithTypes(typeArg, item.fields.auth),\n      originalRawMessage: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.original_raw_message),\n      originalAttestation: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.original_attestation),\n      newDestinationCaller: decodeFromFieldsWithTypes(Option.reified(\"address\"), item.fields.new_destination_caller),\n      newMintRecipient: decodeFromFieldsWithTypes(Option.reified(\"address\"), item.fields.new_mint_recipient),\n    });\n  }\n\n  static fromBcs<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    data: Uint8Array\n  ): ReplaceDepositForBurnTicket<ToTypeArgument<Auth>> {\n    const typeArgs = [typeArg];\n\n    return ReplaceDepositForBurnTicket.fromFields(\n      typeArg,\n      ReplaceDepositForBurnTicket.bcs(toBcs(typeArgs[0])).parse(data)\n    );\n  }\n\n  toJSONField() {\n    return {\n      auth: fieldToJSON<Auth>(this.$typeArgs[0], this.auth),\n      originalRawMessage: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.originalRawMessage),\n      originalAttestation: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.originalAttestation),\n      newDestinationCaller: fieldToJSON<Option<\"address\">>(`${Option.$typeName}<address>`, this.newDestinationCaller),\n      newMintRecipient: fieldToJSON<Option<\"address\">>(`${Option.$typeName}<address>`, this.newMintRecipient),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    field: any\n  ): ReplaceDepositForBurnTicket<ToTypeArgument<Auth>> {\n    return ReplaceDepositForBurnTicket.reified(typeArg).new({\n      auth: decodeFromJSONField(typeArg, field.auth),\n      originalRawMessage: decodeFromJSONField(reified.vector(\"u8\"), field.originalRawMessage),\n      originalAttestation: decodeFromJSONField(reified.vector(\"u8\"), field.originalAttestation),\n      newDestinationCaller: decodeFromJSONField(Option.reified(\"address\"), field.newDestinationCaller),\n      newMintRecipient: decodeFromJSONField(Option.reified(\"address\"), field.newMintRecipient),\n    });\n  }\n\n  static fromJSON<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    json: Record<string, any>\n  ): ReplaceDepositForBurnTicket<ToTypeArgument<Auth>> {\n    if (json.$typeName !== ReplaceDepositForBurnTicket.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(\n      composeSuiType(ReplaceDepositForBurnTicket.$typeName, extractType(typeArg)),\n      json.$typeArgs,\n      [typeArg]\n    );\n\n    return ReplaceDepositForBurnTicket.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    content: SuiParsedData\n  ): ReplaceDepositForBurnTicket<ToTypeArgument<Auth>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isReplaceDepositForBurnTicket(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a ReplaceDepositForBurnTicket object`);\n    }\n    return ReplaceDepositForBurnTicket.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<Auth extends Reified<TypeArgument, any>>(\n    typeArg: Auth,\n    data: SuiObjectData\n  ): ReplaceDepositForBurnTicket<ToTypeArgument<Auth>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isReplaceDepositForBurnTicket(data.bcs.type)) {\n        throw new Error(`object at is not a ReplaceDepositForBurnTicket object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return ReplaceDepositForBurnTicket.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return ReplaceDepositForBurnTicket.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<Auth extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArg: Auth,\n    id: string\n  ): Promise<ReplaceDepositForBurnTicket<ToTypeArgument<Auth>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching ReplaceDepositForBurnTicket object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isReplaceDepositForBurnTicket(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a ReplaceDepositForBurnTicket object`);\n    }\n\n    return ReplaceDepositForBurnTicket.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}