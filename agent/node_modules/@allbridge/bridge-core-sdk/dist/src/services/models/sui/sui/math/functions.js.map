{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/math/functions.ts"],"names":[],"mappings":";;AAUA,kBAKC;AAOD,oBAKC;AAOD,4CAKC;AAOD,kBAKC;AAOD,kBAKC;AAED,oBAKC;AAED,4BAKC;AA7ED,cAAc;AACd,0BAAkC;AAClC,gDAA6C;AAQ7C,SAAgB,GAAG,CAAC,EAAe,EAAE,IAAa;IAChD,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,aAAa;QACpC,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;KAC9D,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,IAAI,CAAC,EAAe,EAAE,IAAc;IAClD,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,cAAc;QACrC,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;KAC9D,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,gBAAgB,CAAC,EAAe,EAAE,IAA0B;IAC1E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,6BAA6B;QACpD,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;KAC9D,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,GAAG,CAAC,EAAe,EAAE,IAAa;IAChD,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,aAAa;QACpC,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;KAC9D,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,GAAG,CAAC,EAAe,EAAE,IAAa;IAChD,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,aAAa;QACpC,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;KACvE,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,IAAI,CAAC,EAAe,EAAE,CAA+B;IACnE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,cAAc;QACrC,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;KAChC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,QAAQ,CAAC,EAAe,EAAE,CAA+B;IACvE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mBAAmB;QAC1C,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;KACjC,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument } from \"@mysten/sui/transactions\";\n\nexport interface MaxArgs {\n  x: bigint | TransactionArgument;\n  y: bigint | TransactionArgument;\n}\n\nexport function max(tx: Transaction, args: MaxArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::math::max`,\n    arguments: [pure(tx, args.x, `u64`), pure(tx, args.y, `u64`)],\n  });\n}\n\nexport interface DiffArgs {\n  x: bigint | TransactionArgument;\n  y: bigint | TransactionArgument;\n}\n\nexport function diff(tx: Transaction, args: DiffArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::math::diff`,\n    arguments: [pure(tx, args.x, `u64`), pure(tx, args.y, `u64`)],\n  });\n}\n\nexport interface DivideAndRoundUpArgs {\n  x: bigint | TransactionArgument;\n  y: bigint | TransactionArgument;\n}\n\nexport function divideAndRoundUp(tx: Transaction, args: DivideAndRoundUpArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::math::divide_and_round_up`,\n    arguments: [pure(tx, args.x, `u64`), pure(tx, args.y, `u64`)],\n  });\n}\n\nexport interface MinArgs {\n  x: bigint | TransactionArgument;\n  y: bigint | TransactionArgument;\n}\n\nexport function min(tx: Transaction, args: MinArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::math::min`,\n    arguments: [pure(tx, args.x, `u64`), pure(tx, args.y, `u64`)],\n  });\n}\n\nexport interface PowArgs {\n  base: bigint | TransactionArgument;\n  exponent: number | TransactionArgument;\n}\n\nexport function pow(tx: Transaction, args: PowArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::math::pow`,\n    arguments: [pure(tx, args.base, `u64`), pure(tx, args.exponent, `u8`)],\n  });\n}\n\nexport function sqrt(tx: Transaction, x: bigint | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::math::sqrt`,\n    arguments: [pure(tx, x, `u64`)],\n  });\n}\n\nexport function sqrtU128(tx: Transaction, x: bigint | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::math::sqrt_u128`,\n    arguments: [pure(tx, x, `u128`)],\n  });\n}\n"]}