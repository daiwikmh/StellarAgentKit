{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0x1/ascii/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  fieldToJSON,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { Vector } from \"../../../../_framework/vector\";\nimport { PKG_V13 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Char =============================== */\n\nexport function isChar(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V13}::ascii::Char`;\n}\n\nexport interface CharFields {\n  byte: ToField<\"u8\">;\n}\n\nexport type CharReified = Reified<Char, CharFields>;\n\nexport class Char implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V13}::ascii::Char`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Char.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Char.$isPhantom;\n\n  readonly byte: ToField<\"u8\">;\n\n  private constructor(typeArgs: [], fields: CharFields) {\n    this.$fullTypeName = composeSuiType(Char.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.byte = fields.byte;\n  }\n\n  static reified(): CharReified {\n    return {\n      typeName: Char.$typeName,\n      fullTypeName: composeSuiType(Char.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Char.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Char.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Char.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Char.fromBcs(data),\n      bcs: Char.bcs,\n      fromJSONField: (field: any) => Char.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Char.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Char.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Char.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Char.fetch(client, id),\n      new: (fields: CharFields) => {\n        return new Char([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Char.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Char>> {\n    return phantom(Char.reified());\n  }\n  static get p() {\n    return Char.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Char\", {\n      byte: bcs.u8(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Char {\n    return Char.reified().new({ byte: decodeFromFields(\"u8\", fields.byte) });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Char {\n    if (!isChar(item.type)) {\n      throw new Error(\"not a Char type\");\n    }\n\n    return Char.reified().new({\n      byte: decodeFromFieldsWithTypes(\"u8\", item.fields.byte),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Char {\n    return Char.fromFields(Char.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      byte: this.byte,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Char {\n    return Char.reified().new({ byte: decodeFromJSONField(\"u8\", field.byte) });\n  }\n\n  static fromJSON(json: Record<string, any>): Char {\n    if (json.$typeName !== Char.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Char.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Char {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isChar(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Char object`);\n    }\n    return Char.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Char {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isChar(data.bcs.type)) {\n        throw new Error(`object at is not a Char object`);\n      }\n\n      return Char.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Char.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Char> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Char object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isChar(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Char object`);\n    }\n\n    return Char.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== String =============================== */\n\nexport function isString(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V13}::ascii::String`;\n}\n\nexport interface StringFields {\n  bytes: ToField<Vector<\"u8\">>;\n}\n\nexport type StringReified = Reified<String, StringFields>;\n\nexport class String implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V13}::ascii::String`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = String.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = String.$isPhantom;\n\n  readonly bytes: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: StringFields) {\n    this.$fullTypeName = composeSuiType(String.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.bytes = fields.bytes;\n  }\n\n  static reified(): StringReified {\n    return {\n      typeName: String.$typeName,\n      fullTypeName: composeSuiType(String.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: String.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => String.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => String.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => String.fromBcs(data),\n      bcs: String.bcs,\n      fromJSONField: (field: any) => String.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => String.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => String.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => String.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => String.fetch(client, id),\n      new: (fields: StringFields) => {\n        return new String([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return String.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<String>> {\n    return phantom(String.reified());\n  }\n  static get p() {\n    return String.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"String\", {\n      bytes: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): String {\n    return String.reified().new({\n      bytes: decodeFromFields(reified.vector(\"u8\"), fields.bytes),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): String {\n    if (!isString(item.type)) {\n      throw new Error(\"not a String type\");\n    }\n\n    return String.reified().new({\n      bytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.bytes),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): String {\n    return String.fromFields(String.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      bytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.bytes),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): String {\n    return String.reified().new({\n      bytes: decodeFromJSONField(reified.vector(\"u8\"), field.bytes),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): String {\n    if (json.$typeName !== String.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return String.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): String {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isString(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a String object`);\n    }\n    return String.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): String {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isString(data.bcs.type)) {\n        throw new Error(`object at is not a String object`);\n      }\n\n      return String.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return String.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<String> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching String object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isString(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a String object`);\n    }\n\n    return String.fromSuiObjectData(res.data);\n  }\n}\n"]}