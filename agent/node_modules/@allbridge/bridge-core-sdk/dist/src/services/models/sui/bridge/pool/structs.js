"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StopCap = exports.Pool = exports.AdminCap = void 0;
exports.isAdminCap = isAdminCap;
exports.isPool = isPool;
exports.isStopCap = isStopCap;
// @ts-nocheck
const reified_1 = require("../../_framework/reified");
const util_1 = require("../../_framework/util");
const structs_1 = require("../../sui/balance/structs");
const structs_2 = require("../../sui/object/structs");
const index_1 = require("../index");
const structs_3 = require("../pool-rewards/structs");
const structs_4 = require("../pool-state/structs");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== AdminCap =============================== */
function isAdminCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::pool::AdminCap`;
}
class AdminCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::pool::AdminCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = AdminCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = AdminCap.$isPhantom;
    id;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(AdminCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
    }
    static reified() {
        return {
            typeName: AdminCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(AdminCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: AdminCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => AdminCap.fromFields(fields),
            fromFieldsWithTypes: (item) => AdminCap.fromFieldsWithTypes(item),
            fromBcs: (data) => AdminCap.fromBcs(data),
            bcs: AdminCap.bcs,
            fromJSONField: (field) => AdminCap.fromJSONField(field),
            fromJSON: (json) => AdminCap.fromJSON(json),
            fromSuiParsedData: (content) => AdminCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => AdminCap.fromSuiObjectData(content),
            fetch: async (client, id) => AdminCap.fetch(client, id),
            new: (fields) => {
                return new AdminCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return AdminCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(AdminCap.reified());
    }
    static get p() {
        return AdminCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("AdminCap", {
            id: structs_2.UID.bcs,
        });
    }
    static fromFields(fields) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_2.UID.reified(), fields.id),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isAdminCap(item.type)) {
            throw new Error("not a AdminCap type");
        }
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.UID.reified(), item.fields.id),
        });
    }
    static fromBcs(data) {
        return AdminCap.fromFields(AdminCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return AdminCap.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_2.UID.reified(), field.id),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== AdminCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return AdminCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isAdminCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a AdminCap object`);
        }
        return AdminCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isAdminCap(data.bcs.type)) {
                throw new Error(`object at is not a AdminCap object`);
            }
            return AdminCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return AdminCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching AdminCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isAdminCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a AdminCap object`);
        }
        return AdminCap.fromSuiObjectData(res.data);
    }
}
exports.AdminCap = AdminCap;
/* ============================== Pool =============================== */
function isPool(type) {
    type = (0, util_1.compressSuiType)(type);
    return type.startsWith(`${index_1.PKG_V1}::pool::Pool` + "<");
}
class Pool {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::pool::Pool`;
    }
    static $numTypeParams = 1;
    static $isPhantom = [true];
    $typeName = Pool.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = Pool.$isPhantom;
    id;
    state;
    rewards;
    feeShareBp;
    canDeposit;
    canWithdraw;
    decimals;
    balance;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(Pool.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
        this.state = fields.state;
        this.rewards = fields.rewards;
        this.feeShareBp = fields.feeShareBp;
        this.canDeposit = fields.canDeposit;
        this.canWithdraw = fields.canWithdraw;
        this.decimals = fields.decimals;
        this.balance = fields.balance;
    }
    static reified(T) {
        return {
            typeName: Pool.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(Pool.$typeName, ...[(0, reified_1.extractType)(T)]),
            typeArgs: [(0, reified_1.extractType)(T)],
            isPhantom: Pool.$isPhantom,
            reifiedTypeArgs: [T],
            fromFields: (fields) => Pool.fromFields(T, fields),
            fromFieldsWithTypes: (item) => Pool.fromFieldsWithTypes(T, item),
            fromBcs: (data) => Pool.fromBcs(T, data),
            bcs: Pool.bcs,
            fromJSONField: (field) => Pool.fromJSONField(T, field),
            fromJSON: (json) => Pool.fromJSON(T, json),
            fromSuiParsedData: (content) => Pool.fromSuiParsedData(T, content),
            fromSuiObjectData: (content) => Pool.fromSuiObjectData(T, content),
            fetch: async (client, id) => Pool.fetch(client, T, id),
            new: (fields) => {
                return new Pool([(0, reified_1.extractType)(T)], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return Pool.reified;
    }
    static phantom(T) {
        return (0, reified_1.phantom)(Pool.reified(T));
    }
    static get p() {
        return Pool.phantom;
    }
    static get bcs() {
        return bcs_1.bcs.struct("Pool", {
            id: structs_2.UID.bcs,
            state: structs_4.PoolState.bcs,
            rewards: structs_3.PoolRewards.bcs,
            fee_share_bp: bcs_1.bcs.u64(),
            can_deposit: bcs_1.bcs.bool(),
            can_withdraw: bcs_1.bcs.bool(),
            decimals: bcs_1.bcs.u8(),
            balance: structs_1.Balance.bcs,
        });
    }
    static fromFields(typeArg, fields) {
        return Pool.reified(typeArg).new({
            id: (0, reified_1.decodeFromFields)(structs_2.UID.reified(), fields.id),
            state: (0, reified_1.decodeFromFields)(structs_4.PoolState.reified(typeArg), fields.state),
            rewards: (0, reified_1.decodeFromFields)(structs_3.PoolRewards.reified(typeArg), fields.rewards),
            feeShareBp: (0, reified_1.decodeFromFields)("u64", fields.fee_share_bp),
            canDeposit: (0, reified_1.decodeFromFields)("bool", fields.can_deposit),
            canWithdraw: (0, reified_1.decodeFromFields)("bool", fields.can_withdraw),
            decimals: (0, reified_1.decodeFromFields)("u8", fields.decimals),
            balance: (0, reified_1.decodeFromFields)(structs_1.Balance.reified(typeArg), fields.balance),
        });
    }
    static fromFieldsWithTypes(typeArg, item) {
        if (!isPool(item.type)) {
            throw new Error("not a Pool type");
        }
        (0, reified_1.assertFieldsWithTypesArgsMatch)(item, [typeArg]);
        return Pool.reified(typeArg).new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.UID.reified(), item.fields.id),
            state: (0, reified_1.decodeFromFieldsWithTypes)(structs_4.PoolState.reified(typeArg), item.fields.state),
            rewards: (0, reified_1.decodeFromFieldsWithTypes)(structs_3.PoolRewards.reified(typeArg), item.fields.rewards),
            feeShareBp: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.fee_share_bp),
            canDeposit: (0, reified_1.decodeFromFieldsWithTypes)("bool", item.fields.can_deposit),
            canWithdraw: (0, reified_1.decodeFromFieldsWithTypes)("bool", item.fields.can_withdraw),
            decimals: (0, reified_1.decodeFromFieldsWithTypes)("u8", item.fields.decimals),
            balance: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.Balance.reified(typeArg), item.fields.balance),
        });
    }
    static fromBcs(typeArg, data) {
        return Pool.fromFields(typeArg, Pool.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
            state: this.state.toJSONField(),
            rewards: this.rewards.toJSONField(),
            feeShareBp: this.feeShareBp.toString(),
            canDeposit: this.canDeposit,
            canWithdraw: this.canWithdraw,
            decimals: this.decimals,
            balance: this.balance.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(typeArg, field) {
        return Pool.reified(typeArg).new({
            id: (0, reified_1.decodeFromJSONField)(structs_2.UID.reified(), field.id),
            state: (0, reified_1.decodeFromJSONField)(structs_4.PoolState.reified(typeArg), field.state),
            rewards: (0, reified_1.decodeFromJSONField)(structs_3.PoolRewards.reified(typeArg), field.rewards),
            feeShareBp: (0, reified_1.decodeFromJSONField)("u64", field.feeShareBp),
            canDeposit: (0, reified_1.decodeFromJSONField)("bool", field.canDeposit),
            canWithdraw: (0, reified_1.decodeFromJSONField)("bool", field.canWithdraw),
            decimals: (0, reified_1.decodeFromJSONField)("u8", field.decimals),
            balance: (0, reified_1.decodeFromJSONField)(structs_1.Balance.reified(typeArg), field.balance),
        });
    }
    static fromJSON(typeArg, json) {
        if (json.$typeName !== Pool.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        (0, reified_1.assertReifiedTypeArgsMatch)((0, util_1.composeSuiType)(Pool.$typeName, (0, reified_1.extractType)(typeArg)), json.$typeArgs, [typeArg]);
        return Pool.fromJSONField(typeArg, json);
    }
    static fromSuiParsedData(typeArg, content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isPool(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a Pool object`);
        }
        return Pool.fromFieldsWithTypes(typeArg, content);
    }
    static fromSuiObjectData(typeArg, data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isPool(data.bcs.type)) {
                throw new Error(`object at is not a Pool object`);
            }
            const gotTypeArgs = (0, util_1.parseTypeName)(data.bcs.type).typeArgs;
            if (gotTypeArgs.length !== 1) {
                throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);
            }
            const gotTypeArg = (0, util_1.compressSuiType)(gotTypeArgs[0]);
            const expectedTypeArg = (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg));
            if (gotTypeArg !== (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg))) {
                throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);
            }
            return Pool.fromBcs(typeArg, (0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return Pool.fromSuiParsedData(typeArg, data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, typeArg, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching Pool object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isPool(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a Pool object`);
        }
        return Pool.fromSuiObjectData(typeArg, res.data);
    }
}
exports.Pool = Pool;
/* ============================== StopCap =============================== */
function isStopCap(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::pool::StopCap`;
}
class StopCap {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::pool::StopCap`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = StopCap.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = StopCap.$isPhantom;
    id;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(StopCap.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
    }
    static reified() {
        return {
            typeName: StopCap.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(StopCap.$typeName, ...[]),
            typeArgs: [],
            isPhantom: StopCap.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => StopCap.fromFields(fields),
            fromFieldsWithTypes: (item) => StopCap.fromFieldsWithTypes(item),
            fromBcs: (data) => StopCap.fromBcs(data),
            bcs: StopCap.bcs,
            fromJSONField: (field) => StopCap.fromJSONField(field),
            fromJSON: (json) => StopCap.fromJSON(json),
            fromSuiParsedData: (content) => StopCap.fromSuiParsedData(content),
            fromSuiObjectData: (content) => StopCap.fromSuiObjectData(content),
            fetch: async (client, id) => StopCap.fetch(client, id),
            new: (fields) => {
                return new StopCap([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return StopCap.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(StopCap.reified());
    }
    static get p() {
        return StopCap.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("StopCap", {
            id: structs_2.UID.bcs,
        });
    }
    static fromFields(fields) {
        return StopCap.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_2.UID.reified(), fields.id),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isStopCap(item.type)) {
            throw new Error("not a StopCap type");
        }
        return StopCap.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.UID.reified(), item.fields.id),
        });
    }
    static fromBcs(data) {
        return StopCap.fromFields(StopCap.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return StopCap.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_2.UID.reified(), field.id),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== StopCap.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return StopCap.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isStopCap(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a StopCap object`);
        }
        return StopCap.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isStopCap(data.bcs.type)) {
                throw new Error(`object at is not a StopCap object`);
            }
            return StopCap.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return StopCap.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching StopCap object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isStopCap(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a StopCap object`);
        }
        return StopCap.fromSuiObjectData(res.data);
    }
}
exports.StopCap = StopCap;
//# sourceMappingURL=structs.js.map