import * as reified from "../../../../_framework/reified";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../../../_framework/reified";
import { FieldsWithTypes } from "../../../../_framework/util";
import { UID } from "../../../../sui/object/structs";
import { Table } from "../../../../sui/table/structs";
import { VecSet } from "../../../../sui/vec-set/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isState(type: string): boolean;
export interface StateFields {
    id: ToField<UID>;
    localDomain: ToField<"u32">;
    messageVersion: ToField<"u32">;
    maxMessageBodySize: ToField<"u64">;
    enabledAttesters: ToField<VecSet<"address">>;
    nextAvailableNonce: ToField<"u64">;
    usedNonces: ToField<Table<"address", "bool">>;
    signatureThreshold: ToField<"u64">;
    paused: ToField<"bool">;
    compatibleVersions: ToField<VecSet<"u64">>;
}
export type StateReified = Reified<State, StateFields>;
export declare class State implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly id: ToField<UID>;
    readonly localDomain: ToField<"u32">;
    readonly messageVersion: ToField<"u32">;
    readonly maxMessageBodySize: ToField<"u64">;
    readonly enabledAttesters: ToField<VecSet<"address">>;
    readonly nextAvailableNonce: ToField<"u64">;
    readonly usedNonces: ToField<Table<"address", "bool">>;
    readonly signatureThreshold: ToField<"u64">;
    readonly paused: ToField<"bool">;
    readonly compatibleVersions: ToField<VecSet<"u64">>;
    private constructor();
    static reified(): StateReified;
    static get r(): reified.StructClassReified<State, StateFields>;
    static phantom(): PhantomReified<ToTypeStr<State>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        id: {
            id: {
                bytes: string;
            };
        };
        local_domain: number;
        message_version: number;
        max_message_body_size: string;
        enabled_attesters: {
            contents: any[];
        };
        next_available_nonce: string;
        used_nonces: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string;
        };
        signature_threshold: string;
        paused: boolean;
        compatible_versions: {
            contents: any[];
        };
    }, {
        id: {
            id: {
                bytes: string;
            };
        };
        local_domain: number;
        message_version: number;
        max_message_body_size: string | number | bigint;
        enabled_attesters: {
            contents: Iterable<any> & {
                length: number;
            };
        };
        next_available_nonce: string | number | bigint;
        used_nonces: {
            id: {
                id: {
                    bytes: string;
                };
            };
            size: string | number | bigint;
        };
        signature_threshold: string | number | bigint;
        paused: boolean;
        compatible_versions: {
            contents: Iterable<any> & {
                length: number;
            };
        };
    }>;
    static fromFields(fields: Record<string, any>): State;
    static fromFieldsWithTypes(item: FieldsWithTypes): State;
    static fromBcs(data: Uint8Array): State;
    toJSONField(): {
        id: UID;
        localDomain: number;
        messageVersion: number;
        maxMessageBodySize: string;
        enabledAttesters: {
            contents: string[];
        };
        nextAvailableNonce: string;
        usedNonces: {
            id: UID;
            size: string;
        };
        signatureThreshold: string;
        paused: boolean;
        compatibleVersions: {
            contents: string[];
        };
    };
    toJSON(): {
        id: UID;
        localDomain: number;
        messageVersion: number;
        maxMessageBodySize: string;
        enabledAttesters: {
            contents: string[];
        };
        nextAvailableNonce: string;
        usedNonces: {
            id: UID;
            size: string;
        };
        signatureThreshold: string;
        paused: boolean;
        compatibleVersions: {
            contents: string[];
        };
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): State;
    static fromJSON(json: Record<string, any>): State;
    static fromSuiParsedData(content: SuiParsedData): State;
    static fromSuiObjectData(data: SuiObjectData): State;
    static fetch(client: SuiClient, id: string): Promise<State>;
}
