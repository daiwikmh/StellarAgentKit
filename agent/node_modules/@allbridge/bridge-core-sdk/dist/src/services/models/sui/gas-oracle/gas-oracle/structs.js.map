{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/gas-oracle/gas-oracle/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n  ToTypeStr as ToPhantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { UID } from \"../../sui/object/structs\";\nimport { Table } from \"../../sui/table/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== AdminCap =============================== */\n\nexport function isAdminCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::gas_oracle::AdminCap`;\n}\n\nexport interface AdminCapFields {\n  id: ToField<UID>;\n}\n\nexport type AdminCapReified = Reified<AdminCap, AdminCapFields>;\n\nexport class AdminCap implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::gas_oracle::AdminCap`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = AdminCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = AdminCap.$isPhantom;\n\n  readonly id: ToField<UID>;\n\n  private constructor(typeArgs: [], fields: AdminCapFields) {\n    this.$fullTypeName = composeSuiType(AdminCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified(): AdminCapReified {\n    return {\n      typeName: AdminCap.$typeName,\n      fullTypeName: composeSuiType(AdminCap.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: AdminCap.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => AdminCap.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => AdminCap.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => AdminCap.fromBcs(data),\n      bcs: AdminCap.bcs,\n      fromJSONField: (field: any) => AdminCap.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => AdminCap.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => AdminCap.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => AdminCap.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => AdminCap.fetch(client, id),\n      new: (fields: AdminCapFields) => {\n        return new AdminCap([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return AdminCap.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<AdminCap>> {\n    return phantom(AdminCap.reified());\n  }\n  static get p() {\n    return AdminCap.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"AdminCap\", {\n      id: UID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): AdminCap {\n    return AdminCap.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): AdminCap {\n    if (!isAdminCap(item.type)) {\n      throw new Error(\"not a AdminCap type\");\n    }\n\n    return AdminCap.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): AdminCap {\n    return AdminCap.fromFields(AdminCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): AdminCap {\n    return AdminCap.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): AdminCap {\n    if (json.$typeName !== AdminCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return AdminCap.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): AdminCap {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isAdminCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a AdminCap object`);\n    }\n    return AdminCap.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): AdminCap {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isAdminCap(data.bcs.type)) {\n        throw new Error(`object at is not a AdminCap object`);\n      }\n\n      return AdminCap.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return AdminCap.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<AdminCap> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching AdminCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isAdminCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a AdminCap object`);\n    }\n\n    return AdminCap.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== ChainData =============================== */\n\nexport function isChainData(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::gas_oracle::ChainData`;\n}\n\nexport interface ChainDataFields {\n  gasPrice: ToField<\"u128\">;\n  price: ToField<\"u128\">;\n}\n\nexport type ChainDataReified = Reified<ChainData, ChainDataFields>;\n\nexport class ChainData implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::gas_oracle::ChainData`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = ChainData.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = ChainData.$isPhantom;\n\n  readonly gasPrice: ToField<\"u128\">;\n  readonly price: ToField<\"u128\">;\n\n  private constructor(typeArgs: [], fields: ChainDataFields) {\n    this.$fullTypeName = composeSuiType(ChainData.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.gasPrice = fields.gasPrice;\n    this.price = fields.price;\n  }\n\n  static reified(): ChainDataReified {\n    return {\n      typeName: ChainData.$typeName,\n      fullTypeName: composeSuiType(ChainData.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: ChainData.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => ChainData.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => ChainData.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => ChainData.fromBcs(data),\n      bcs: ChainData.bcs,\n      fromJSONField: (field: any) => ChainData.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => ChainData.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => ChainData.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => ChainData.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => ChainData.fetch(client, id),\n      new: (fields: ChainDataFields) => {\n        return new ChainData([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return ChainData.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<ChainData>> {\n    return phantom(ChainData.reified());\n  }\n  static get p() {\n    return ChainData.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"ChainData\", {\n      gas_price: bcs.u128(),\n      price: bcs.u128(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): ChainData {\n    return ChainData.reified().new({\n      gasPrice: decodeFromFields(\"u128\", fields.gas_price),\n      price: decodeFromFields(\"u128\", fields.price),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): ChainData {\n    if (!isChainData(item.type)) {\n      throw new Error(\"not a ChainData type\");\n    }\n\n    return ChainData.reified().new({\n      gasPrice: decodeFromFieldsWithTypes(\"u128\", item.fields.gas_price),\n      price: decodeFromFieldsWithTypes(\"u128\", item.fields.price),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): ChainData {\n    return ChainData.fromFields(ChainData.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      gasPrice: this.gasPrice.toString(),\n      price: this.price.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): ChainData {\n    return ChainData.reified().new({\n      gasPrice: decodeFromJSONField(\"u128\", field.gasPrice),\n      price: decodeFromJSONField(\"u128\", field.price),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): ChainData {\n    if (json.$typeName !== ChainData.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return ChainData.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): ChainData {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isChainData(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a ChainData object`);\n    }\n    return ChainData.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): ChainData {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isChainData(data.bcs.type)) {\n        throw new Error(`object at is not a ChainData object`);\n      }\n\n      return ChainData.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return ChainData.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<ChainData> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching ChainData object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isChainData(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a ChainData object`);\n    }\n\n    return ChainData.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== GasOracle =============================== */\n\nexport function isGasOracle(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::gas_oracle::GasOracle`;\n}\n\nexport interface GasOracleFields {\n  id: ToField<UID>;\n  data: ToField<Table<\"u8\", ToPhantom<ChainData>>>;\n}\n\nexport type GasOracleReified = Reified<GasOracle, GasOracleFields>;\n\nexport class GasOracle implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::gas_oracle::GasOracle`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = GasOracle.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = GasOracle.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly data: ToField<Table<\"u8\", ToPhantom<ChainData>>>;\n\n  private constructor(typeArgs: [], fields: GasOracleFields) {\n    this.$fullTypeName = composeSuiType(GasOracle.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.data = fields.data;\n  }\n\n  static reified(): GasOracleReified {\n    return {\n      typeName: GasOracle.$typeName,\n      fullTypeName: composeSuiType(GasOracle.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: GasOracle.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => GasOracle.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => GasOracle.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => GasOracle.fromBcs(data),\n      bcs: GasOracle.bcs,\n      fromJSONField: (field: any) => GasOracle.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => GasOracle.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => GasOracle.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => GasOracle.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => GasOracle.fetch(client, id),\n      new: (fields: GasOracleFields) => {\n        return new GasOracle([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return GasOracle.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<GasOracle>> {\n    return phantom(GasOracle.reified());\n  }\n  static get p() {\n    return GasOracle.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"GasOracle\", {\n      id: UID.bcs,\n      data: Table.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): GasOracle {\n    return GasOracle.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      data: decodeFromFields(Table.reified(reified.phantom(\"u8\"), reified.phantom(ChainData.reified())), fields.data),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): GasOracle {\n    if (!isGasOracle(item.type)) {\n      throw new Error(\"not a GasOracle type\");\n    }\n\n    return GasOracle.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      data: decodeFromFieldsWithTypes(\n        Table.reified(reified.phantom(\"u8\"), reified.phantom(ChainData.reified())),\n        item.fields.data\n      ),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): GasOracle {\n    return GasOracle.fromFields(GasOracle.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      data: this.data.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): GasOracle {\n    return GasOracle.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      data: decodeFromJSONField(Table.reified(reified.phantom(\"u8\"), reified.phantom(ChainData.reified())), field.data),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): GasOracle {\n    if (json.$typeName !== GasOracle.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return GasOracle.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): GasOracle {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isGasOracle(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a GasOracle object`);\n    }\n    return GasOracle.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): GasOracle {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isGasOracle(data.bcs.type)) {\n        throw new Error(`object at is not a GasOracle object`);\n      }\n\n      return GasOracle.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return GasOracle.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<GasOracle> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching GasOracle object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isGasOracle(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a GasOracle object`);\n    }\n\n    return GasOracle.fromSuiObjectData(res.data);\n  }\n}\n"]}