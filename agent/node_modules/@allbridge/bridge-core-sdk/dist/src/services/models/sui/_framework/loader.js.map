{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../../../../../src/services/models/sui/_framework/loader.ts"],"names":[],"mappings":";AAAA,cAAc;;;AAEd,iCAAwD;AACxD,uCAYmB;AACnB,+CAAgD;AAahD,MAAa,iBAAiB;IACpB,GAAG,GAA8B,IAAI,GAAG,EAAE,CAAC;IAEnD,QAAQ,CAAC,GAAG,OAAuB;QACjC,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE,CAAC;YAC1B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QACnC,CAAC;IACH,CAAC;IAKD,OAAO,CAAC,IAAY;QAClB,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAA,oBAAa,EAAC,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC,CAAC;QACpE,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,MAAM,CAAC;YACZ,KAAK,IAAI,CAAC;YACV,KAAK,KAAK,CAAC;YACX,KAAK,KAAK,CAAC;YACX,KAAK,KAAK,CAAC;YACX,KAAK,MAAM,CAAC;YACZ,KAAK,MAAM,CAAC;YACZ,KAAK,SAAS;gBACZ,OAAO,QAAQ,CAAC;YAClB,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACd,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC1B,MAAM,IAAI,KAAK,CAAC,2CAA2C,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;gBAChF,CAAC;gBACD,OAAO,IAAA,gBAAM,EAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3C,CAAC;QACH,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,gBAAgB,QAAQ,EAAE,CAAC,CAAC;QAC9C,CAAC;QAED,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAE,CAAC;QACpC,IAAI,GAAG,CAAC,cAAc,KAAK,QAAQ,CAAC,MAAM,EAAE,CAAC;YAC3C,MAAM,IAAI,KAAK,CAAC,QAAQ,QAAQ,YAAY,GAAG,CAAC,cAAc,4BAA4B,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;QAC/G,CAAC;QAED,MAAM,eAAe,GAA4E,EAAE,CAAC;QACpG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACzC,IAAI,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;gBACtB,eAAe,CAAC,IAAI,CAAC,IAAA,iBAAO,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC;iBAAM,CAAC;gBACN,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAClD,CAAC;QACH,CAAC;QAED,OAAO,GAAG,CAAC,OAAO,CAAC,GAAG,eAAe,CAAC,CAAC;IACzC,CAAC;CACF;AApDD,8CAoDC;AAEY,QAAA,MAAM,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAC9C,IAAA,6BAAe,EAAC,cAAM,CAAC,CAAC","sourcesContent":["// @ts-nocheck\n\nimport { compressSuiType, parseTypeName } from \"./util\";\nimport {\n  PhantomReified,\n  PhantomTypeArgument,\n  Primitive,\n  Reified,\n  StructClass,\n  StructClassReified,\n  TypeArgument,\n  VectorClass,\n  VectorClassReified,\n  phantom,\n  vector,\n} from \"./reified\";\nimport { registerClasses } from \"./init-loader\";\n\nexport type PrimitiveValue = string | number | boolean | bigint;\n\ninterface _StructClass {\n  $typeName: string;\n  $numTypeParams: number;\n  $isPhantom: readonly boolean[];\n  reified(\n    ...Ts: Array<Reified<TypeArgument, any> | PhantomReified<PhantomTypeArgument>>\n  ): StructClassReified<StructClass, any>;\n}\n\nexport class StructClassLoader {\n  private map: Map<string, _StructClass> = new Map();\n\n  register(...classes: _StructClass[]) {\n    for (const cls of classes) {\n      this.map.set(cls.$typeName, cls);\n    }\n  }\n\n  reified<T extends Primitive>(type: T): T;\n  reified(type: `vector<${string}>`): VectorClassReified<VectorClass, any>;\n  reified(type: string): StructClassReified<StructClass, any>;\n  reified(type: string): StructClassReified<StructClass, any> | VectorClassReified<VectorClass, any> | string {\n    const { typeName, typeArgs } = parseTypeName(compressSuiType(type));\n    switch (typeName) {\n      case \"bool\":\n      case \"u8\":\n      case \"u16\":\n      case \"u32\":\n      case \"u64\":\n      case \"u128\":\n      case \"u256\":\n      case \"address\":\n        return typeName;\n      case \"vector\": {\n        if (typeArgs.length !== 1) {\n          throw new Error(`Vector expects 1 type argument, but got ${typeArgs.length}`);\n        }\n        return vector(this.reified(typeArgs[0]));\n      }\n    }\n\n    if (!this.map.has(typeName)) {\n      throw new Error(`Unknown type ${typeName}`);\n    }\n\n    const cls = this.map.get(typeName)!;\n    if (cls.$numTypeParams !== typeArgs.length) {\n      throw new Error(`Type ${typeName} expects ${cls.$numTypeParams} type arguments, but got ${typeArgs.length}`);\n    }\n\n    const reifiedTypeArgs: Array<Reified<TypeArgument, any> | PhantomReified<PhantomTypeArgument>> = [];\n    for (let i = 0; i < typeArgs.length; i++) {\n      if (cls.$isPhantom[i]) {\n        reifiedTypeArgs.push(phantom(typeArgs[i]));\n      } else {\n        reifiedTypeArgs.push(this.reified(typeArgs[i]));\n      }\n    }\n\n    return cls.reified(...reifiedTypeArgs);\n  }\n}\n\nexport const loader = new StructClassLoader();\nregisterClasses(loader);\n"]}