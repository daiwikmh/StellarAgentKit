"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getId = getId;
exports.getVersion = getVersion;
exports.init = init;
exports.migrate = migrate;
exports.gasBalanceValue = gasBalanceValue;
exports.getGasUsage = getGasUsage;
exports.getOtherChainIds = getOtherChainIds;
exports.getReceivedMessages = getReceivedMessages;
exports.getSentMessages = getSentMessages;
exports.getTransactionCost = getTransactionCost;
exports.receiveMessage = receiveMessage;
exports.sendMessage = sendMessage;
exports.setGasUsage = setGasUsage;
exports.setOtherChains = setOtherChains;
exports.withdrawFee = withdrawFee;
exports.addSecondaryValidator = addSecondaryValidator;
exports.removeSecondaryValidator = removeSecondaryValidator;
exports.setPrimaryValidator = setPrimaryValidator;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function getId(tx, messenger) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::get_id`,
        arguments: [(0, util_1.obj)(tx, messenger)],
    });
}
function getVersion(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::get_version`,
        arguments: [],
    });
}
function init(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::init`,
        arguments: [],
    });
}
function migrate(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::migrate`,
        arguments: [(0, util_1.obj)(tx, args.admin), (0, util_1.obj)(tx, args.messenger)],
    });
}
function gasBalanceValue(tx, messenger) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::gas_balance_value`,
        arguments: [(0, util_1.obj)(tx, messenger)],
    });
}
function getGasUsage(tx, messenger) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::get_gas_usage`,
        arguments: [(0, util_1.obj)(tx, messenger)],
    });
}
function getOtherChainIds(tx, messenger) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::get_other_chain_ids`,
        arguments: [(0, util_1.obj)(tx, messenger)],
    });
}
function getReceivedMessages(tx, messenger) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::get_received_messages`,
        arguments: [(0, util_1.obj)(tx, messenger)],
    });
}
function getSentMessages(tx, messenger) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::get_sent_messages`,
        arguments: [(0, util_1.obj)(tx, messenger)],
    });
}
function getTransactionCost(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::get_transaction_cost`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.obj)(tx, args.gasOracle), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function receiveMessage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::receive_message`,
        arguments: [
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.obj)(tx, args.message),
            (0, util_1.pure)(tx, args.signaturePrimary, `vector<u8>`),
            (0, util_1.pure)(tx, args.signatureSecondary, `vector<u8>`),
        ],
    });
}
function sendMessage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::send_message`,
        arguments: [
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.obj)(tx, args.coin),
            (0, util_1.obj)(tx, args.message),
            (0, util_1.obj)(tx, args.sender),
        ],
    });
}
function setGasUsage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::set_gas_usage`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.pure)(tx, args.chainId, `u8`), (0, util_1.pure)(tx, args.gasAmount, `u64`)],
    });
}
function setOtherChains(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::set_other_chains`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.pure)(tx, args.otherChainIds, `vector<bool>`)],
    });
}
function withdrawFee(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::withdraw_fee`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function addSecondaryValidator(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::add_secondary_validator`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.pure)(tx, args.secondaryValidator, `vector<u8>`)],
    });
}
function removeSecondaryValidator(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::remove_secondary_validator`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.pure)(tx, args.secondaryValidator, `vector<u8>`)],
    });
}
function setPrimaryValidator(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::messenger::set_primary_validator`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.pure)(tx, args.primaryValidator, `vector<u8>`)],
    });
}
//# sourceMappingURL=functions.js.map