{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0x31cc14d80c175ae39777c0238f20594c6d4869cfab199f40b69f3319956b8beb/burn-message/structs.ts"],"names":[],"mappings":";;;AAoBA,sCAGC;AAvBD,cAAc;AACd,4DAUwC;AACxC,sDAA+F;AAC/F,oCAAkC;AAClC,yCAAsC;AAEtC,6CAA4D;AAE5D,gFAAgF;AAEhF,SAAgB,aAAa,CAAC,IAAY;IACxC,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,KAAK,GAAG,cAAM,6BAA6B,CAAC;AACzD,CAAC;AAYD,MAAa,WAAW;IACtB,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,cAAM,6BAA6B,CAAC;IAChD,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,EAAW,CAAC;IAEhC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAClC,aAAa,CAAS;IACtB,SAAS,CAAK;IACd,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;IAEpC,OAAO,CAAiB;IACxB,SAAS,CAAqB;IAC9B,aAAa,CAAqB;IAClC,MAAM,CAAkB;IACxB,aAAa,CAAqB;IAE3C,YAAoB,QAAY,EAAE,MAAyB;QACzD,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,WAAW,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QAClF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;QAClC,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,WAAW,CAAC,SAAS;YAC/B,YAAY,EAAE,IAAA,qBAAc,EAAC,WAAW,CAAC,SAAS,EAAE,GAAG,EAAE,CAAW;YACpE,QAAQ,EAAE,EAAQ;YAClB,SAAS,EAAE,WAAW,CAAC,UAAU;YACjC,eAAe,EAAE,EAAE;YACnB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC;YAC3E,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC;YACrF,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC;YACxD,GAAG,EAAE,WAAW,CAAC,GAAG;YACpB,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC;YAC/D,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC;YACnE,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACrF,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACrF,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YAC7E,GAAG,EAAE,CAAC,MAAyB,EAAE,EAAE;gBACjC,OAAO,IAAI,WAAW,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YACrC,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO,IAAA,iBAAO,EAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC;IACxC,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,SAAG,CAAC,MAAM,CAAC,aAAa,EAAE;YAC/B,OAAO,EAAE,SAAG,CAAC,GAAG,EAAE;YAClB,UAAU,EAAE,SAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC;gBAClC,KAAK,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAA,eAAO,EAAC,GAAG,CAAC;gBACpC,MAAM,EAAE,CAAC,GAAe,EAAE,EAAE,CAAC,IAAA,aAAK,EAAC,GAAG,CAAC;aACxC,CAAC;YACF,cAAc,EAAE,SAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC;gBACtC,KAAK,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAA,eAAO,EAAC,GAAG,CAAC;gBACpC,MAAM,EAAE,CAAC,GAAe,EAAE,EAAE,CAAC,IAAA,aAAK,EAAC,GAAG,CAAC;aACxC,CAAC;YACF,MAAM,EAAE,SAAG,CAAC,IAAI,EAAE;YAClB,cAAc,EAAE,SAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC;gBACtC,KAAK,EAAE,CAAC,GAAW,EAAE,EAAE,CAAC,IAAA,eAAO,EAAC,GAAG,CAAC;gBACpC,MAAM,EAAE,CAAC,GAAe,EAAE,EAAE,CAAC,IAAA,aAAK,EAAC,GAAG,CAAC;aACxC,CAAC;SACH,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAA2B;QAC3C,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAC/B,OAAO,EAAE,IAAA,0BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC;YAChD,SAAS,EAAE,IAAA,0BAAgB,EAAC,SAAS,EAAE,MAAM,CAAC,UAAU,CAAC;YACzD,aAAa,EAAE,IAAA,0BAAgB,EAAC,SAAS,EAAE,MAAM,CAAC,cAAc,CAAC;YACjE,MAAM,EAAE,IAAA,0BAAgB,EAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;YAC/C,aAAa,EAAE,IAAA,0BAAgB,EAAC,SAAS,EAAE,MAAM,CAAC,cAAc,CAAC;SAClE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAqB;QAC9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC5C,CAAC;QAED,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAC/B,OAAO,EAAE,IAAA,mCAAyB,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YAC9D,SAAS,EAAE,IAAA,mCAAyB,EAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;YACvE,aAAa,EAAE,IAAA,mCAAyB,EAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;YAC/E,MAAM,EAAE,IAAA,mCAAyB,EAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAC7D,aAAa,EAAE,IAAA,mCAAyB,EAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC;SAChF,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAgB;QAC7B,OAAO,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,WAAW;QACT,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC9B,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,KAAU;QAC7B,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAC/B,OAAO,EAAE,IAAA,6BAAmB,EAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC;YAClD,SAAS,EAAE,IAAA,6BAAmB,EAAC,SAAS,EAAE,KAAK,CAAC,SAAS,CAAC;YAC1D,aAAa,EAAE,IAAA,6BAAmB,EAAC,SAAS,EAAE,KAAK,CAAC,aAAa,CAAC;YAClE,MAAM,EAAE,IAAA,6BAAmB,EAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC;YACjD,aAAa,EAAE,IAAA,6BAAmB,EAAC,SAAS,EAAE,KAAK,CAAC,aAAa,CAAC;SACnE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAyB;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,WAAW,CAAC,SAAS,EAAE,CAAC;YAC7C,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAsB;QAC7C,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,8BAA8B,CAAC,CAAC;QACzF,CAAC;QACD,OAAO,WAAW,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACxE,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC3D,CAAC;YAED,OAAO,WAAW,CAAC,OAAO,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzD,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAiB,EAAE,EAAU;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,2CAA2C,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACtF,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAClF,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,8BAA8B,CAAC,CAAC;QACpE,CAAC;QAED,OAAO,WAAW,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;;AAxLH,kCAyLC","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64, fromHEX, toHEX } from \"@mysten/sui/utils\";\n\n/* ============================== BurnMessage =============================== */\n\nexport function isBurnMessage(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::burn_message::BurnMessage`;\n}\n\nexport interface BurnMessageFields {\n  version: ToField<\"u32\">;\n  burnToken: ToField<\"address\">;\n  mintRecipient: ToField<\"address\">;\n  amount: ToField<\"u256\">;\n  messageSender: ToField<\"address\">;\n}\n\nexport type BurnMessageReified = Reified<BurnMessage, BurnMessageFields>;\n\nexport class BurnMessage implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::burn_message::BurnMessage`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = BurnMessage.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = BurnMessage.$isPhantom;\n\n  readonly version: ToField<\"u32\">;\n  readonly burnToken: ToField<\"address\">;\n  readonly mintRecipient: ToField<\"address\">;\n  readonly amount: ToField<\"u256\">;\n  readonly messageSender: ToField<\"address\">;\n\n  private constructor(typeArgs: [], fields: BurnMessageFields) {\n    this.$fullTypeName = composeSuiType(BurnMessage.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.version = fields.version;\n    this.burnToken = fields.burnToken;\n    this.mintRecipient = fields.mintRecipient;\n    this.amount = fields.amount;\n    this.messageSender = fields.messageSender;\n  }\n\n  static reified(): BurnMessageReified {\n    return {\n      typeName: BurnMessage.$typeName,\n      fullTypeName: composeSuiType(BurnMessage.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: BurnMessage.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => BurnMessage.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => BurnMessage.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => BurnMessage.fromBcs(data),\n      bcs: BurnMessage.bcs,\n      fromJSONField: (field: any) => BurnMessage.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => BurnMessage.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => BurnMessage.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => BurnMessage.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => BurnMessage.fetch(client, id),\n      new: (fields: BurnMessageFields) => {\n        return new BurnMessage([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return BurnMessage.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<BurnMessage>> {\n    return phantom(BurnMessage.reified());\n  }\n  static get p() {\n    return BurnMessage.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"BurnMessage\", {\n      version: bcs.u32(),\n      burn_token: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      mint_recipient: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      amount: bcs.u256(),\n      message_sender: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): BurnMessage {\n    return BurnMessage.reified().new({\n      version: decodeFromFields(\"u32\", fields.version),\n      burnToken: decodeFromFields(\"address\", fields.burn_token),\n      mintRecipient: decodeFromFields(\"address\", fields.mint_recipient),\n      amount: decodeFromFields(\"u256\", fields.amount),\n      messageSender: decodeFromFields(\"address\", fields.message_sender),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): BurnMessage {\n    if (!isBurnMessage(item.type)) {\n      throw new Error(\"not a BurnMessage type\");\n    }\n\n    return BurnMessage.reified().new({\n      version: decodeFromFieldsWithTypes(\"u32\", item.fields.version),\n      burnToken: decodeFromFieldsWithTypes(\"address\", item.fields.burn_token),\n      mintRecipient: decodeFromFieldsWithTypes(\"address\", item.fields.mint_recipient),\n      amount: decodeFromFieldsWithTypes(\"u256\", item.fields.amount),\n      messageSender: decodeFromFieldsWithTypes(\"address\", item.fields.message_sender),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): BurnMessage {\n    return BurnMessage.fromFields(BurnMessage.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      version: this.version,\n      burnToken: this.burnToken,\n      mintRecipient: this.mintRecipient,\n      amount: this.amount.toString(),\n      messageSender: this.messageSender,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): BurnMessage {\n    return BurnMessage.reified().new({\n      version: decodeFromJSONField(\"u32\", field.version),\n      burnToken: decodeFromJSONField(\"address\", field.burnToken),\n      mintRecipient: decodeFromJSONField(\"address\", field.mintRecipient),\n      amount: decodeFromJSONField(\"u256\", field.amount),\n      messageSender: decodeFromJSONField(\"address\", field.messageSender),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): BurnMessage {\n    if (json.$typeName !== BurnMessage.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return BurnMessage.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): BurnMessage {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isBurnMessage(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a BurnMessage object`);\n    }\n    return BurnMessage.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): BurnMessage {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isBurnMessage(data.bcs.type)) {\n        throw new Error(`object at is not a BurnMessage object`);\n      }\n\n      return BurnMessage.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return BurnMessage.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<BurnMessage> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching BurnMessage object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isBurnMessage(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a BurnMessage object`);\n    }\n\n    return BurnMessage.fromSuiObjectData(res.data);\n  }\n}\n"]}