{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/config/functions.ts"],"names":[],"mappings":";;AAMA,oBAMC;AAOD,4BAMC;AAOD,wCAMC;AASD,0CAWC;AAQD,sDAcC;AAOD,gEAUC;AAOD,kCAMC;AAOD,0DAUC;AAQD,0CAUC;AAQD,gDAUC;AAED,sBAMC;AA3KD,cAAc;AACd,0BAAkC;AAClC,gDAAuE;AACvE,+CAAuC;AAGvC,SAAgB,IAAI,CAAC,EAAe,EAAE,OAAe,EAAE,GAAe;IACpE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,eAAe;QACtC,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC;KAC5C,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,QAAQ,CAAC,EAAe,EAAE,OAAe,EAAE,IAAkB;IAC3E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,oBAAoB;QAC3C,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;KACnE,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,cAAc,CAAC,EAAe,EAAE,QAAkC,EAAE,IAAwB;IAC1G,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,4BAA4B;QACnD,aAAa,EAAE,QAAQ;QACvB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAC5E,CAAC,CAAC;AACL,CAAC;AASD,SAAgB,eAAe,CAAC,EAAe,EAAE,QAAkC,EAAE,IAAyB;IAC5G,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8BAA8B;QACrD,aAAa,EAAE,QAAQ;QACvB,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC;YACvC,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC;YACxC,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC;SAC1C;KACF,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,qBAAqB,CACnC,EAAe,EACf,QAAkC,EAClC,IAA+B;IAE/B,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,qCAAqC;QAC5D,aAAa,EAAE,QAAQ;QACvB,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC;YACvC,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC;SACzC;KACF,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,0BAA0B,CACxC,EAAe,EACf,QAAkC,EAClC,IAAoC;IAEpC,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,2CAA2C;QAClE,aAAa,EAAE,QAAQ;QACvB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAC5E,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,WAAW,CAAC,EAAe,EAAE,QAA0B,EAAE,IAAqB;IAC5F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,wBAAwB;QAC/C,aAAa,EAAE,QAAQ;QACvB,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,YAAE,CAAC,SAAS,EAAE,CAAC,EAAE,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAChG,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,uBAAuB,CACrC,EAAe,EACf,QAAkC,EAClC,IAAiC;IAEjC,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,uCAAuC;QAC9D,aAAa,EAAE,QAAQ;QACvB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAC5E,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,eAAe,CAC7B,EAAe,EACf,QAA0C,EAC1C,IAAyB;IAEzB,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,6BAA6B;QACpD,aAAa,EAAE,QAAQ;QACvB,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;KAClH,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,kBAAkB,CAAC,EAAe,EAAE,QAAkC,EAAE,IAA4B;IAClH,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iCAAiC;QACxD,aAAa,EAAE,QAAQ;QACvB,SAAS,EAAE;YACT,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC;YACpB,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC;YACvC,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC;SACzC;KACF,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,KAAK,CAAC,EAAe,EAAE,OAAe,EAAE,MAA8B;IACpF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iBAAiB;QACxC,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,MAAM,CAAC,CAAC;KAC7B,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { GenericArg, generic, obj, pure } from \"../../_framework/util\";\nimport { ID } from \"../object/structs\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function new_(tx: Transaction, typeArg: string, cap: GenericArg) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::new`,\n    typeArguments: [typeArg],\n    arguments: [generic(tx, `${typeArg}`, cap)],\n  });\n}\n\nexport interface TransferArgs {\n  config: TransactionObjectInput;\n  owner: string | TransactionArgument;\n}\n\nexport function transfer(tx: Transaction, typeArg: string, args: TransferArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::transfer`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.config), pure(tx, args.owner, `address`)],\n  });\n}\n\nexport interface ExistsWithTypeArgs {\n  config: TransactionObjectInput;\n  name: GenericArg;\n}\n\nexport function existsWithType(tx: Transaction, typeArgs: [string, string, string], args: ExistsWithTypeArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::exists_with_type`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.config), generic(tx, `${typeArgs[1]}`, args.name)],\n  });\n}\n\nexport interface AddForNextEpochArgs {\n  config: TransactionObjectInput;\n  cap: GenericArg;\n  name: GenericArg;\n  value: GenericArg;\n}\n\nexport function addForNextEpoch(tx: Transaction, typeArgs: [string, string, string], args: AddForNextEpochArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::add_for_next_epoch`,\n    typeArguments: typeArgs,\n    arguments: [\n      obj(tx, args.config),\n      generic(tx, `${typeArgs[0]}`, args.cap),\n      generic(tx, `${typeArgs[1]}`, args.name),\n      generic(tx, `${typeArgs[2]}`, args.value),\n    ],\n  });\n}\n\nexport interface BorrowForNextEpochMutArgs {\n  config: TransactionObjectInput;\n  cap: GenericArg;\n  name: GenericArg;\n}\n\nexport function borrowForNextEpochMut(\n  tx: Transaction,\n  typeArgs: [string, string, string],\n  args: BorrowForNextEpochMutArgs\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::borrow_for_next_epoch_mut`,\n    typeArguments: typeArgs,\n    arguments: [\n      obj(tx, args.config),\n      generic(tx, `${typeArgs[0]}`, args.cap),\n      generic(tx, `${typeArgs[1]}`, args.name),\n    ],\n  });\n}\n\nexport interface ExistsWithTypeForNextEpochArgs {\n  config: TransactionObjectInput;\n  name: GenericArg;\n}\n\nexport function existsWithTypeForNextEpoch(\n  tx: Transaction,\n  typeArgs: [string, string, string],\n  args: ExistsWithTypeForNextEpochArgs\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::exists_with_type_for_next_epoch`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.config), generic(tx, `${typeArgs[1]}`, args.name)],\n  });\n}\n\nexport interface ReadSettingArgs {\n  config: string | TransactionArgument;\n  name: GenericArg;\n}\n\nexport function readSetting(tx: Transaction, typeArgs: [string, string], args: ReadSettingArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::read_setting`,\n    typeArguments: typeArgs,\n    arguments: [pure(tx, args.config, `${ID.$typeName}`), generic(tx, `${typeArgs[0]}`, args.name)],\n  });\n}\n\nexport interface ReadSettingForNextEpochArgs {\n  config: TransactionObjectInput;\n  name: GenericArg;\n}\n\nexport function readSettingForNextEpoch(\n  tx: Transaction,\n  typeArgs: [string, string, string],\n  args: ReadSettingForNextEpochArgs\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::read_setting_for_next_epoch`,\n    typeArguments: typeArgs,\n    arguments: [obj(tx, args.config), generic(tx, `${typeArgs[1]}`, args.name)],\n  });\n}\n\nexport interface ReadSettingImplArgs {\n  config: string | TransactionArgument;\n  name: string | TransactionArgument;\n  currentEpoch: bigint | TransactionArgument;\n}\n\nexport function readSettingImpl(\n  tx: Transaction,\n  typeArgs: [string, string, string, string],\n  args: ReadSettingImplArgs\n) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::read_setting_impl`,\n    typeArguments: typeArgs,\n    arguments: [pure(tx, args.config, `address`), pure(tx, args.name, `address`), pure(tx, args.currentEpoch, `u64`)],\n  });\n}\n\nexport interface RemoveForNextEpochArgs {\n  config: TransactionObjectInput;\n  cap: GenericArg;\n  name: GenericArg;\n}\n\nexport function removeForNextEpoch(tx: Transaction, typeArgs: [string, string, string], args: RemoveForNextEpochArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::remove_for_next_epoch`,\n    typeArguments: typeArgs,\n    arguments: [\n      obj(tx, args.config),\n      generic(tx, `${typeArgs[0]}`, args.cap),\n      generic(tx, `${typeArgs[1]}`, args.name),\n    ],\n  });\n}\n\nexport function share(tx: Transaction, typeArg: string, config: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::config::share`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, config)],\n  });\n}\n"]}