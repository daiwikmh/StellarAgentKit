{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/cctp-bridge/message-transmitter-authenticator/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== MessageTransmitterAuthenticator =============================== */\n\nexport function isMessageTransmitterAuthenticator(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::message_transmitter_authenticator::MessageTransmitterAuthenticator`;\n}\n\nexport interface MessageTransmitterAuthenticatorFields {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type MessageTransmitterAuthenticatorReified = Reified<\n  MessageTransmitterAuthenticator,\n  MessageTransmitterAuthenticatorFields\n>;\n\nexport class MessageTransmitterAuthenticator implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::message_transmitter_authenticator::MessageTransmitterAuthenticator`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = MessageTransmitterAuthenticator.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = MessageTransmitterAuthenticator.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [], fields: MessageTransmitterAuthenticatorFields) {\n    this.$fullTypeName = composeSuiType(MessageTransmitterAuthenticator.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified(): MessageTransmitterAuthenticatorReified {\n    return {\n      typeName: MessageTransmitterAuthenticator.$typeName,\n      fullTypeName: composeSuiType(MessageTransmitterAuthenticator.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: MessageTransmitterAuthenticator.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => MessageTransmitterAuthenticator.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => MessageTransmitterAuthenticator.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => MessageTransmitterAuthenticator.fromBcs(data),\n      bcs: MessageTransmitterAuthenticator.bcs,\n      fromJSONField: (field: any) => MessageTransmitterAuthenticator.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => MessageTransmitterAuthenticator.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => MessageTransmitterAuthenticator.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => MessageTransmitterAuthenticator.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => MessageTransmitterAuthenticator.fetch(client, id),\n      new: (fields: MessageTransmitterAuthenticatorFields) => {\n        return new MessageTransmitterAuthenticator([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return MessageTransmitterAuthenticator.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<MessageTransmitterAuthenticator>> {\n    return phantom(MessageTransmitterAuthenticator.reified());\n  }\n  static get p() {\n    return MessageTransmitterAuthenticator.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"MessageTransmitterAuthenticator\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): MessageTransmitterAuthenticator {\n    return MessageTransmitterAuthenticator.reified().new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): MessageTransmitterAuthenticator {\n    if (!isMessageTransmitterAuthenticator(item.type)) {\n      throw new Error(\"not a MessageTransmitterAuthenticator type\");\n    }\n\n    return MessageTransmitterAuthenticator.reified().new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): MessageTransmitterAuthenticator {\n    return MessageTransmitterAuthenticator.fromFields(MessageTransmitterAuthenticator.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): MessageTransmitterAuthenticator {\n    return MessageTransmitterAuthenticator.reified().new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): MessageTransmitterAuthenticator {\n    if (json.$typeName !== MessageTransmitterAuthenticator.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return MessageTransmitterAuthenticator.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): MessageTransmitterAuthenticator {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isMessageTransmitterAuthenticator(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a MessageTransmitterAuthenticator object`);\n    }\n    return MessageTransmitterAuthenticator.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): MessageTransmitterAuthenticator {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isMessageTransmitterAuthenticator(data.bcs.type)) {\n        throw new Error(`object at is not a MessageTransmitterAuthenticator object`);\n      }\n\n      return MessageTransmitterAuthenticator.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return MessageTransmitterAuthenticator.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<MessageTransmitterAuthenticator> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching MessageTransmitterAuthenticator object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isMessageTransmitterAuthenticator(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a MessageTransmitterAuthenticator object`);\n    }\n\n    return MessageTransmitterAuthenticator.fromSuiObjectData(res.data);\n  }\n}\n"]}