"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StampedReceipt = exports.StampReceiptTicket = exports.Receipt = void 0;
exports.isReceipt = isReceipt;
exports.isStampReceiptTicket = isStampReceiptTicket;
exports.isStampedReceipt = isStampedReceipt;
// @ts-nocheck
const reified = __importStar(require("../../../../_framework/reified"));
const reified_1 = require("../../../../_framework/reified");
const util_1 = require("../../../../_framework/util");
const structs_1 = require("../../../../sui/vec-set/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== Receipt =============================== */
function isReceipt(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::receive_message::Receipt`;
}
class Receipt {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::receive_message::Receipt`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = Receipt.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = Receipt.$isPhantom;
    caller;
    recipient;
    sourceDomain;
    sender;
    nonce;
    messageBody;
    currentVersion;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(Receipt.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.caller = fields.caller;
        this.recipient = fields.recipient;
        this.sourceDomain = fields.sourceDomain;
        this.sender = fields.sender;
        this.nonce = fields.nonce;
        this.messageBody = fields.messageBody;
        this.currentVersion = fields.currentVersion;
    }
    static reified() {
        return {
            typeName: Receipt.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(Receipt.$typeName, ...[]),
            typeArgs: [],
            isPhantom: Receipt.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => Receipt.fromFields(fields),
            fromFieldsWithTypes: (item) => Receipt.fromFieldsWithTypes(item),
            fromBcs: (data) => Receipt.fromBcs(data),
            bcs: Receipt.bcs,
            fromJSONField: (field) => Receipt.fromJSONField(field),
            fromJSON: (json) => Receipt.fromJSON(json),
            fromSuiParsedData: (content) => Receipt.fromSuiParsedData(content),
            fromSuiObjectData: (content) => Receipt.fromSuiObjectData(content),
            fetch: async (client, id) => Receipt.fetch(client, id),
            new: (fields) => {
                return new Receipt([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return Receipt.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(Receipt.reified());
    }
    static get p() {
        return Receipt.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("Receipt", {
            caller: bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            }),
            recipient: bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            }),
            source_domain: bcs_1.bcs.u32(),
            sender: bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            }),
            nonce: bcs_1.bcs.u64(),
            message_body: bcs_1.bcs.vector(bcs_1.bcs.u8()),
            current_version: structs_1.VecSet.bcs(bcs_1.bcs.u64()),
        });
    }
    static fromFields(fields) {
        return Receipt.reified().new({
            caller: (0, reified_1.decodeFromFields)("address", fields.caller),
            recipient: (0, reified_1.decodeFromFields)("address", fields.recipient),
            sourceDomain: (0, reified_1.decodeFromFields)("u32", fields.source_domain),
            sender: (0, reified_1.decodeFromFields)("address", fields.sender),
            nonce: (0, reified_1.decodeFromFields)("u64", fields.nonce),
            messageBody: (0, reified_1.decodeFromFields)(reified.vector("u8"), fields.message_body),
            currentVersion: (0, reified_1.decodeFromFields)(structs_1.VecSet.reified("u64"), fields.current_version),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isReceipt(item.type)) {
            throw new Error("not a Receipt type");
        }
        return Receipt.reified().new({
            caller: (0, reified_1.decodeFromFieldsWithTypes)("address", item.fields.caller),
            recipient: (0, reified_1.decodeFromFieldsWithTypes)("address", item.fields.recipient),
            sourceDomain: (0, reified_1.decodeFromFieldsWithTypes)("u32", item.fields.source_domain),
            sender: (0, reified_1.decodeFromFieldsWithTypes)("address", item.fields.sender),
            nonce: (0, reified_1.decodeFromFieldsWithTypes)("u64", item.fields.nonce),
            messageBody: (0, reified_1.decodeFromFieldsWithTypes)(reified.vector("u8"), item.fields.message_body),
            currentVersion: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.VecSet.reified("u64"), item.fields.current_version),
        });
    }
    static fromBcs(data) {
        return Receipt.fromFields(Receipt.bcs.parse(data));
    }
    toJSONField() {
        return {
            caller: this.caller,
            recipient: this.recipient,
            sourceDomain: this.sourceDomain,
            sender: this.sender,
            nonce: this.nonce.toString(),
            messageBody: (0, reified_1.fieldToJSON)(`vector<u8>`, this.messageBody),
            currentVersion: this.currentVersion.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return Receipt.reified().new({
            caller: (0, reified_1.decodeFromJSONField)("address", field.caller),
            recipient: (0, reified_1.decodeFromJSONField)("address", field.recipient),
            sourceDomain: (0, reified_1.decodeFromJSONField)("u32", field.sourceDomain),
            sender: (0, reified_1.decodeFromJSONField)("address", field.sender),
            nonce: (0, reified_1.decodeFromJSONField)("u64", field.nonce),
            messageBody: (0, reified_1.decodeFromJSONField)(reified.vector("u8"), field.messageBody),
            currentVersion: (0, reified_1.decodeFromJSONField)(structs_1.VecSet.reified("u64"), field.currentVersion),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== Receipt.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return Receipt.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isReceipt(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a Receipt object`);
        }
        return Receipt.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isReceipt(data.bcs.type)) {
                throw new Error(`object at is not a Receipt object`);
            }
            return Receipt.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return Receipt.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching Receipt object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isReceipt(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a Receipt object`);
        }
        return Receipt.fromSuiObjectData(res.data);
    }
}
exports.Receipt = Receipt;
/* ============================== StampReceiptTicket =============================== */
function isStampReceiptTicket(type) {
    type = (0, util_1.compressSuiType)(type);
    return type.startsWith(`${index_1.PKG_V1}::receive_message::StampReceiptTicket` + "<");
}
class StampReceiptTicket {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::receive_message::StampReceiptTicket`;
    }
    static $numTypeParams = 1;
    static $isPhantom = [false];
    $typeName = StampReceiptTicket.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = StampReceiptTicket.$isPhantom;
    auth;
    receipt;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(StampReceiptTicket.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.auth = fields.auth;
        this.receipt = fields.receipt;
    }
    static reified(Auth) {
        return {
            typeName: StampReceiptTicket.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(StampReceiptTicket.$typeName, ...[(0, reified_1.extractType)(Auth)]),
            typeArgs: [(0, reified_1.extractType)(Auth)],
            isPhantom: StampReceiptTicket.$isPhantom,
            reifiedTypeArgs: [Auth],
            fromFields: (fields) => StampReceiptTicket.fromFields(Auth, fields),
            fromFieldsWithTypes: (item) => StampReceiptTicket.fromFieldsWithTypes(Auth, item),
            fromBcs: (data) => StampReceiptTicket.fromBcs(Auth, data),
            bcs: StampReceiptTicket.bcs((0, reified_1.toBcs)(Auth)),
            fromJSONField: (field) => StampReceiptTicket.fromJSONField(Auth, field),
            fromJSON: (json) => StampReceiptTicket.fromJSON(Auth, json),
            fromSuiParsedData: (content) => StampReceiptTicket.fromSuiParsedData(Auth, content),
            fromSuiObjectData: (content) => StampReceiptTicket.fromSuiObjectData(Auth, content),
            fetch: async (client, id) => StampReceiptTicket.fetch(client, Auth, id),
            new: (fields) => {
                return new StampReceiptTicket([(0, reified_1.extractType)(Auth)], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return StampReceiptTicket.reified;
    }
    static phantom(Auth) {
        return (0, reified_1.phantom)(StampReceiptTicket.reified(Auth));
    }
    static get p() {
        return StampReceiptTicket.phantom;
    }
    static get bcs() {
        return (Auth) => bcs_1.bcs.struct(`StampReceiptTicket<${Auth.name}>`, {
            auth: Auth,
            receipt: Receipt.bcs,
        });
    }
    static fromFields(typeArg, fields) {
        return StampReceiptTicket.reified(typeArg).new({
            auth: (0, reified_1.decodeFromFields)(typeArg, fields.auth),
            receipt: (0, reified_1.decodeFromFields)(Receipt.reified(), fields.receipt),
        });
    }
    static fromFieldsWithTypes(typeArg, item) {
        if (!isStampReceiptTicket(item.type)) {
            throw new Error("not a StampReceiptTicket type");
        }
        (0, reified_1.assertFieldsWithTypesArgsMatch)(item, [typeArg]);
        return StampReceiptTicket.reified(typeArg).new({
            auth: (0, reified_1.decodeFromFieldsWithTypes)(typeArg, item.fields.auth),
            receipt: (0, reified_1.decodeFromFieldsWithTypes)(Receipt.reified(), item.fields.receipt),
        });
    }
    static fromBcs(typeArg, data) {
        const typeArgs = [typeArg];
        return StampReceiptTicket.fromFields(typeArg, StampReceiptTicket.bcs((0, reified_1.toBcs)(typeArgs[0])).parse(data));
    }
    toJSONField() {
        return {
            auth: (0, reified_1.fieldToJSON)(this.$typeArgs[0], this.auth),
            receipt: this.receipt.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(typeArg, field) {
        return StampReceiptTicket.reified(typeArg).new({
            auth: (0, reified_1.decodeFromJSONField)(typeArg, field.auth),
            receipt: (0, reified_1.decodeFromJSONField)(Receipt.reified(), field.receipt),
        });
    }
    static fromJSON(typeArg, json) {
        if (json.$typeName !== StampReceiptTicket.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        (0, reified_1.assertReifiedTypeArgsMatch)((0, util_1.composeSuiType)(StampReceiptTicket.$typeName, (0, reified_1.extractType)(typeArg)), json.$typeArgs, [
            typeArg,
        ]);
        return StampReceiptTicket.fromJSONField(typeArg, json);
    }
    static fromSuiParsedData(typeArg, content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isStampReceiptTicket(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a StampReceiptTicket object`);
        }
        return StampReceiptTicket.fromFieldsWithTypes(typeArg, content);
    }
    static fromSuiObjectData(typeArg, data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isStampReceiptTicket(data.bcs.type)) {
                throw new Error(`object at is not a StampReceiptTicket object`);
            }
            const gotTypeArgs = (0, util_1.parseTypeName)(data.bcs.type).typeArgs;
            if (gotTypeArgs.length !== 1) {
                throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);
            }
            const gotTypeArg = (0, util_1.compressSuiType)(gotTypeArgs[0]);
            const expectedTypeArg = (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg));
            if (gotTypeArg !== (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg))) {
                throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);
            }
            return StampReceiptTicket.fromBcs(typeArg, (0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return StampReceiptTicket.fromSuiParsedData(typeArg, data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, typeArg, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching StampReceiptTicket object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isStampReceiptTicket(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a StampReceiptTicket object`);
        }
        return StampReceiptTicket.fromSuiObjectData(typeArg, res.data);
    }
}
exports.StampReceiptTicket = StampReceiptTicket;
/* ============================== StampedReceipt =============================== */
function isStampedReceipt(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::receive_message::StampedReceipt`;
}
class StampedReceipt {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::receive_message::StampedReceipt`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = StampedReceipt.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = StampedReceipt.$isPhantom;
    receipt;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(StampedReceipt.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.receipt = fields.receipt;
    }
    static reified() {
        return {
            typeName: StampedReceipt.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(StampedReceipt.$typeName, ...[]),
            typeArgs: [],
            isPhantom: StampedReceipt.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => StampedReceipt.fromFields(fields),
            fromFieldsWithTypes: (item) => StampedReceipt.fromFieldsWithTypes(item),
            fromBcs: (data) => StampedReceipt.fromBcs(data),
            bcs: StampedReceipt.bcs,
            fromJSONField: (field) => StampedReceipt.fromJSONField(field),
            fromJSON: (json) => StampedReceipt.fromJSON(json),
            fromSuiParsedData: (content) => StampedReceipt.fromSuiParsedData(content),
            fromSuiObjectData: (content) => StampedReceipt.fromSuiObjectData(content),
            fetch: async (client, id) => StampedReceipt.fetch(client, id),
            new: (fields) => {
                return new StampedReceipt([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return StampedReceipt.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(StampedReceipt.reified());
    }
    static get p() {
        return StampedReceipt.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("StampedReceipt", {
            receipt: Receipt.bcs,
        });
    }
    static fromFields(fields) {
        return StampedReceipt.reified().new({
            receipt: (0, reified_1.decodeFromFields)(Receipt.reified(), fields.receipt),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isStampedReceipt(item.type)) {
            throw new Error("not a StampedReceipt type");
        }
        return StampedReceipt.reified().new({
            receipt: (0, reified_1.decodeFromFieldsWithTypes)(Receipt.reified(), item.fields.receipt),
        });
    }
    static fromBcs(data) {
        return StampedReceipt.fromFields(StampedReceipt.bcs.parse(data));
    }
    toJSONField() {
        return {
            receipt: this.receipt.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return StampedReceipt.reified().new({
            receipt: (0, reified_1.decodeFromJSONField)(Receipt.reified(), field.receipt),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== StampedReceipt.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return StampedReceipt.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isStampedReceipt(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a StampedReceipt object`);
        }
        return StampedReceipt.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isStampedReceipt(data.bcs.type)) {
                throw new Error(`object at is not a StampedReceipt object`);
            }
            return StampedReceipt.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return StampedReceipt.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching StampedReceipt object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isStampedReceipt(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a StampedReceipt object`);
        }
        return StampedReceipt.fromSuiObjectData(res.data);
    }
}
exports.StampedReceipt = StampedReceipt;
//# sourceMappingURL=structs.js.map