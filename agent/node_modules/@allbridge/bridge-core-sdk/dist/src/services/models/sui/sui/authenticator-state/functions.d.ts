import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export declare function create(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ActiveJwkEqualArgs {
    a: TransactionObjectInput;
    b: TransactionObjectInput;
}
export declare function activeJwkEqual(tx: Transaction, args: ActiveJwkEqualArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function checkSorted(tx: Transaction, newActiveJwks: Array<TransactionObjectInput> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function deduplicate(tx: Transaction, jwks: Array<TransactionObjectInput> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ExpireJwksArgs {
    self: TransactionObjectInput;
    minEpoch: bigint | TransactionArgument;
}
export declare function expireJwks(tx: Transaction, args: ExpireJwksArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getActiveJwks(tx: Transaction, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface JwkEqualArgs {
    a: TransactionObjectInput;
    b: TransactionObjectInput;
}
export declare function jwkEqual(tx: Transaction, args: JwkEqualArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface JwkIdEqualArgs {
    a: TransactionObjectInput;
    b: TransactionObjectInput;
}
export declare function jwkIdEqual(tx: Transaction, args: JwkIdEqualArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface JwkLtArgs {
    a: TransactionObjectInput;
    b: TransactionObjectInput;
}
export declare function jwkLt(tx: Transaction, args: JwkLtArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function loadInner(tx: Transaction, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function loadInnerMut(tx: Transaction, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface StringBytesLtArgs {
    a: string | TransactionArgument;
    b: string | TransactionArgument;
}
export declare function stringBytesLt(tx: Transaction, args: StringBytesLtArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface UpdateAuthenticatorStateArgs {
    self: TransactionObjectInput;
    newActiveJwks: Array<TransactionObjectInput> | TransactionArgument;
}
export declare function updateAuthenticatorState(tx: Transaction, args: UpdateAuthenticatorStateArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
