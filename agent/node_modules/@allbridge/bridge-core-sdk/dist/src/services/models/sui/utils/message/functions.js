"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.data = data;
exports.fromBytes = fromBytes;
exports.new_ = new_;
exports.toHex = toHex;
exports.addSender = addSender;
exports.chainFrom = chainFrom;
exports.chainTo = chainTo;
exports.fromArgs = fromArgs;
exports.fromArgsWithSender = fromArgsWithSender;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
const structs_1 = require("../../sui/object/structs");
function data(tx, message) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::message::data`,
        arguments: [(0, util_1.obj)(tx, message)],
    });
}
function fromBytes(tx, message) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::message::from_bytes`,
        arguments: [(0, util_1.pure)(tx, message, `vector<u8>`)],
    });
}
function new_(tx, message) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::message::new`,
        arguments: [(0, util_1.obj)(tx, message)],
    });
}
function toHex(tx, message) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::message::to_hex`,
        arguments: [(0, util_1.obj)(tx, message)],
    });
}
function addSender(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::message::add_sender`,
        arguments: [(0, util_1.obj)(tx, args.message), (0, util_1.pure)(tx, args.sender, `${structs_1.ID.$typeName}`)],
    });
}
function chainFrom(tx, message) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::message::chain_from`,
        arguments: [(0, util_1.obj)(tx, message)],
    });
}
function chainTo(tx, message) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::message::chain_to`,
        arguments: [(0, util_1.obj)(tx, message)],
    });
}
function fromArgs(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::message::from_args`,
        arguments: [
            (0, util_1.pure)(tx, args.amount, `u64`),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.sourceChainId, `u8`),
            (0, util_1.pure)(tx, args.destinationChainId, `u8`),
            (0, util_1.obj)(tx, args.receiveToken),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.obj)(tx, args.messenger),
        ],
    });
}
function fromArgsWithSender(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::message::from_args_with_sender`,
        arguments: [
            (0, util_1.pure)(tx, args.amount, `u64`),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.sourceChainId, `u8`),
            (0, util_1.pure)(tx, args.destinationChainId, `u8`),
            (0, util_1.obj)(tx, args.receiveToken),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.pure)(tx, args.sender, `${structs_1.ID.$typeName}`),
        ],
    });
}
//# sourceMappingURL=functions.js.map