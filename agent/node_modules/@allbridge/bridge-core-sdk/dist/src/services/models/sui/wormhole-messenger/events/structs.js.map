{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/wormhole-messenger/events/structs.ts"],"names":[],"mappings":";;;AAqBA,wDAGC;AAwKD,gDAGC;AAnMD,cAAc;AACd,0EAAsE;AACtE,sDAUkC;AAClC,gDAAyF;AACzF,oCAAkC;AAClC,yCAAsC;AAEtC,6CAA4C;AAE5C,yFAAyF;AAEzF,SAAgB,sBAAsB,CAAC,IAAY;IACjD,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,KAAK,GAAG,cAAM,gCAAgC,CAAC;AAC5D,CAAC;AASD,MAAa,oBAAoB;IAC/B,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,cAAM,gCAAgC,CAAC;IACnD,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,EAAW,CAAC;IAEhC,SAAS,GAAG,oBAAoB,CAAC,SAAS,CAAC;IAC3C,aAAa,CAAS;IACtB,SAAS,CAAK;IACd,UAAU,GAAG,oBAAoB,CAAC,UAAU,CAAC;IAE7C,OAAO,CAAkB;IACzB,QAAQ,CAAiB;IAElC,YAAoB,QAAY,EAAE,MAAkC;QAClE,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,oBAAoB,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QAC3F,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,oBAAoB,CAAC,SAAS;YACxC,YAAY,EAAE,IAAA,qBAAc,EAAC,oBAAoB,CAAC,SAAS,EAAE,GAAG,EAAE,CAAW;YAC7E,QAAQ,EAAE,EAAQ;YAClB,SAAS,EAAE,oBAAoB,CAAC,UAAU;YAC1C,eAAe,EAAE,EAAE;YACnB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,oBAAoB,CAAC,UAAU,CAAC,MAAM,CAAC;YACpF,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAC9F,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC;YACjE,GAAG,EAAE,oBAAoB,CAAC,GAAG;YAC7B,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,oBAAoB,CAAC,aAAa,CAAC,KAAK,CAAC;YACxE,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC5E,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,OAAO,CAAC;YAC9F,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,OAAO,CAAC;YAC9F,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YACtF,GAAG,EAAE,CAAC,MAAkC,EAAE,EAAE;gBAC1C,OAAO,IAAI,oBAAoB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAC9C,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,oBAAoB,CAAC,OAAO,EAAE,CAAC;IACxC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO,IAAA,iBAAO,EAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC,CAAC;IACjD,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,oBAAoB,CAAC,OAAO,EAAE,CAAC;IACxC,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,SAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE;YACxC,OAAO,EAAE,gBAAM,CAAC,GAAG;YACnB,QAAQ,EAAE,SAAG,CAAC,GAAG,EAAE;SACpB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAA2B;QAC3C,OAAO,oBAAoB,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACxC,OAAO,EAAE,IAAA,0BAAgB,EAAC,gBAAM,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC;YAC3D,QAAQ,EAAE,IAAA,0BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC;SACnD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAqB;QAC9C,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACvC,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACrD,CAAC;QAED,OAAO,oBAAoB,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACxC,OAAO,EAAE,IAAA,mCAAyB,EAAC,gBAAM,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YACzE,QAAQ,EAAE,IAAA,mCAAyB,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;SACjE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAgB;QAC7B,OAAO,oBAAoB,CAAC,UAAU,CAAC,oBAAoB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,WAAW;QACT,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;SACnC,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,KAAU;QAC7B,OAAO,oBAAoB,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACxC,OAAO,EAAE,IAAA,6BAAmB,EAAC,gBAAM,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC;YAC7D,QAAQ,EAAE,IAAA,6BAAmB,EAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC;SACrD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAyB;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,oBAAoB,CAAC,SAAS,EAAE,CAAC;YACtD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAsB;QAC7C,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1C,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,uCAAuC,CAAC,CAAC;QAClG,CAAC;QACD,OAAO,oBAAoB,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IAC3D,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACjF,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;YACpE,CAAC;YAED,OAAO,oBAAoB,CAAC,OAAO,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAClE,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9D,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAiB,EAAE,EAAU;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,oDAAoD,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAC/F,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAC3F,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,uCAAuC,CAAC,CAAC;QAC7E,CAAC;QAED,OAAO,oBAAoB,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAC;;AA1JH,oDA2JC;AAED,qFAAqF;AAErF,SAAgB,kBAAkB,CAAC,IAAY;IAC7C,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,KAAK,GAAG,cAAM,4BAA4B,CAAC;AACxD,CAAC;AASD,MAAa,gBAAgB;IAC3B,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,cAAM,4BAA4B,CAAC;IAC/C,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,EAAW,CAAC;IAEhC,SAAS,GAAG,gBAAgB,CAAC,SAAS,CAAC;IACvC,aAAa,CAAS;IACtB,SAAS,CAAK;IACd,UAAU,GAAG,gBAAgB,CAAC,UAAU,CAAC;IAEzC,OAAO,CAAkB;IACzB,QAAQ,CAAiB;IAElC,YAAoB,QAAY,EAAE,MAA8B;QAC9D,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QACvF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,gBAAgB,CAAC,SAAS;YACpC,YAAY,EAAE,IAAA,qBAAc,EAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,EAAE,CAAW;YACzE,QAAQ,EAAE,EAAQ;YAClB,SAAS,EAAE,gBAAgB,CAAC,UAAU;YACtC,eAAe,EAAE,EAAE;YACnB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,gBAAgB,CAAC,UAAU,CAAC,MAAM,CAAC;YAChF,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAC1F,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC;YAC7D,GAAG,EAAE,gBAAgB,CAAC,GAAG;YACzB,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,gBAAgB,CAAC,aAAa,CAAC,KAAK,CAAC;YACpE,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC;YACxE,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,OAAO,CAAC;YAC1F,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,OAAO,CAAC;YAC1F,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YAClF,GAAG,EAAE,CAAC,MAA8B,EAAE,EAAE;gBACtC,OAAO,IAAI,gBAAgB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAC1C,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,gBAAgB,CAAC,OAAO,EAAE,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO,IAAA,iBAAO,EAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;IAC7C,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,gBAAgB,CAAC,OAAO,EAAE,CAAC;IACpC,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,SAAG,CAAC,MAAM,CAAC,kBAAkB,EAAE;YACpC,OAAO,EAAE,gBAAM,CAAC,GAAG;YACnB,QAAQ,EAAE,SAAG,CAAC,GAAG,EAAE;SACpB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAA2B;QAC3C,OAAO,gBAAgB,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACpC,OAAO,EAAE,IAAA,0BAAgB,EAAC,gBAAM,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC;YAC3D,QAAQ,EAAE,IAAA,0BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC;SACnD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAqB;QAC9C,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,CAAC;QAED,OAAO,gBAAgB,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACpC,OAAO,EAAE,IAAA,mCAAyB,EAAC,gBAAM,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YACzE,QAAQ,EAAE,IAAA,mCAAyB,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;SACjE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAgB;QAC7B,OAAO,gBAAgB,CAAC,UAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACvE,CAAC;IAED,WAAW;QACT,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;SACnC,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,KAAU;QAC7B,OAAO,gBAAgB,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACpC,OAAO,EAAE,IAAA,6BAAmB,EAAC,gBAAM,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC;YAC7D,QAAQ,EAAE,IAAA,6BAAmB,EAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,CAAC;SACrD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAyB;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,gBAAgB,CAAC,SAAS,EAAE,CAAC;YAClD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,gBAAgB,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAsB;QAC7C,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,mCAAmC,CAAC,CAAC;QAC9F,CAAC;QACD,OAAO,gBAAgB,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC7E,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAChE,CAAC;YAED,OAAO,gBAAgB,CAAC,OAAO,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC9D,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,gBAAgB,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAiB,EAAE,EAAU;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,gDAAgD,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAC3F,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACvF,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,mCAAmC,CAAC,CAAC;QACzE,CAAC;QAED,OAAO,gBAAgB,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;;AA1JH,4CA2JC","sourcesContent":["// @ts-nocheck\nimport { String } from \"../../_dependencies/source/0x1/ascii/structs\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== MessageReceivedEvent =============================== */\n\nexport function isMessageReceivedEvent(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::events::MessageReceivedEvent`;\n}\n\nexport interface MessageReceivedEventFields {\n  message: ToField<String>;\n  sequence: ToField<\"u64\">;\n}\n\nexport type MessageReceivedEventReified = Reified<MessageReceivedEvent, MessageReceivedEventFields>;\n\nexport class MessageReceivedEvent implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::events::MessageReceivedEvent`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = MessageReceivedEvent.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = MessageReceivedEvent.$isPhantom;\n\n  readonly message: ToField<String>;\n  readonly sequence: ToField<\"u64\">;\n\n  private constructor(typeArgs: [], fields: MessageReceivedEventFields) {\n    this.$fullTypeName = composeSuiType(MessageReceivedEvent.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.message = fields.message;\n    this.sequence = fields.sequence;\n  }\n\n  static reified(): MessageReceivedEventReified {\n    return {\n      typeName: MessageReceivedEvent.$typeName,\n      fullTypeName: composeSuiType(MessageReceivedEvent.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: MessageReceivedEvent.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => MessageReceivedEvent.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => MessageReceivedEvent.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => MessageReceivedEvent.fromBcs(data),\n      bcs: MessageReceivedEvent.bcs,\n      fromJSONField: (field: any) => MessageReceivedEvent.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => MessageReceivedEvent.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => MessageReceivedEvent.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => MessageReceivedEvent.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => MessageReceivedEvent.fetch(client, id),\n      new: (fields: MessageReceivedEventFields) => {\n        return new MessageReceivedEvent([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return MessageReceivedEvent.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<MessageReceivedEvent>> {\n    return phantom(MessageReceivedEvent.reified());\n  }\n  static get p() {\n    return MessageReceivedEvent.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"MessageReceivedEvent\", {\n      message: String.bcs,\n      sequence: bcs.u64(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): MessageReceivedEvent {\n    return MessageReceivedEvent.reified().new({\n      message: decodeFromFields(String.reified(), fields.message),\n      sequence: decodeFromFields(\"u64\", fields.sequence),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): MessageReceivedEvent {\n    if (!isMessageReceivedEvent(item.type)) {\n      throw new Error(\"not a MessageReceivedEvent type\");\n    }\n\n    return MessageReceivedEvent.reified().new({\n      message: decodeFromFieldsWithTypes(String.reified(), item.fields.message),\n      sequence: decodeFromFieldsWithTypes(\"u64\", item.fields.sequence),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): MessageReceivedEvent {\n    return MessageReceivedEvent.fromFields(MessageReceivedEvent.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      message: this.message,\n      sequence: this.sequence.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): MessageReceivedEvent {\n    return MessageReceivedEvent.reified().new({\n      message: decodeFromJSONField(String.reified(), field.message),\n      sequence: decodeFromJSONField(\"u64\", field.sequence),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): MessageReceivedEvent {\n    if (json.$typeName !== MessageReceivedEvent.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return MessageReceivedEvent.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): MessageReceivedEvent {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isMessageReceivedEvent(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a MessageReceivedEvent object`);\n    }\n    return MessageReceivedEvent.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): MessageReceivedEvent {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isMessageReceivedEvent(data.bcs.type)) {\n        throw new Error(`object at is not a MessageReceivedEvent object`);\n      }\n\n      return MessageReceivedEvent.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return MessageReceivedEvent.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<MessageReceivedEvent> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching MessageReceivedEvent object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isMessageReceivedEvent(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a MessageReceivedEvent object`);\n    }\n\n    return MessageReceivedEvent.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== MessageSentEvent =============================== */\n\nexport function isMessageSentEvent(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::events::MessageSentEvent`;\n}\n\nexport interface MessageSentEventFields {\n  message: ToField<String>;\n  sequence: ToField<\"u64\">;\n}\n\nexport type MessageSentEventReified = Reified<MessageSentEvent, MessageSentEventFields>;\n\nexport class MessageSentEvent implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::events::MessageSentEvent`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = MessageSentEvent.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = MessageSentEvent.$isPhantom;\n\n  readonly message: ToField<String>;\n  readonly sequence: ToField<\"u64\">;\n\n  private constructor(typeArgs: [], fields: MessageSentEventFields) {\n    this.$fullTypeName = composeSuiType(MessageSentEvent.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.message = fields.message;\n    this.sequence = fields.sequence;\n  }\n\n  static reified(): MessageSentEventReified {\n    return {\n      typeName: MessageSentEvent.$typeName,\n      fullTypeName: composeSuiType(MessageSentEvent.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: MessageSentEvent.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => MessageSentEvent.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => MessageSentEvent.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => MessageSentEvent.fromBcs(data),\n      bcs: MessageSentEvent.bcs,\n      fromJSONField: (field: any) => MessageSentEvent.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => MessageSentEvent.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => MessageSentEvent.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => MessageSentEvent.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => MessageSentEvent.fetch(client, id),\n      new: (fields: MessageSentEventFields) => {\n        return new MessageSentEvent([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return MessageSentEvent.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<MessageSentEvent>> {\n    return phantom(MessageSentEvent.reified());\n  }\n  static get p() {\n    return MessageSentEvent.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"MessageSentEvent\", {\n      message: String.bcs,\n      sequence: bcs.u64(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): MessageSentEvent {\n    return MessageSentEvent.reified().new({\n      message: decodeFromFields(String.reified(), fields.message),\n      sequence: decodeFromFields(\"u64\", fields.sequence),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): MessageSentEvent {\n    if (!isMessageSentEvent(item.type)) {\n      throw new Error(\"not a MessageSentEvent type\");\n    }\n\n    return MessageSentEvent.reified().new({\n      message: decodeFromFieldsWithTypes(String.reified(), item.fields.message),\n      sequence: decodeFromFieldsWithTypes(\"u64\", item.fields.sequence),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): MessageSentEvent {\n    return MessageSentEvent.fromFields(MessageSentEvent.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      message: this.message,\n      sequence: this.sequence.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): MessageSentEvent {\n    return MessageSentEvent.reified().new({\n      message: decodeFromJSONField(String.reified(), field.message),\n      sequence: decodeFromJSONField(\"u64\", field.sequence),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): MessageSentEvent {\n    if (json.$typeName !== MessageSentEvent.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return MessageSentEvent.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): MessageSentEvent {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isMessageSentEvent(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a MessageSentEvent object`);\n    }\n    return MessageSentEvent.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): MessageSentEvent {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isMessageSentEvent(data.bcs.type)) {\n        throw new Error(`object at is not a MessageSentEvent object`);\n      }\n\n      return MessageSentEvent.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return MessageSentEvent.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<MessageSentEvent> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching MessageSentEvent object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isMessageSentEvent(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a MessageSentEvent object`);\n    }\n\n    return MessageSentEvent.fromSuiObjectData(res.data);\n  }\n}\n"]}