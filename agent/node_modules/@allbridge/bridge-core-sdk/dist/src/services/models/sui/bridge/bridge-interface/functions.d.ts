import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export declare function destroyEmpty(tx: Transaction, typeArg: string, userDeposit: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SwapArgs {
    bridge: TransactionObjectInput;
    coin: TransactionObjectInput;
    receiveAmountMin: bigint | TransactionArgument;
}
export declare function swap(tx: Transaction, typeArgs: [string, string], args: SwapArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface DepositArgs {
    bridge: TransactionObjectInput;
    userDeposit: TransactionObjectInput;
    coin: TransactionObjectInput;
}
export declare function deposit(tx: Transaction, typeArg: string, args: DepositArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface WithdrawArgs {
    bridge: TransactionObjectInput;
    userDeposit: TransactionObjectInput;
    amountLp: bigint | TransactionArgument;
}
export declare function withdraw(tx: Transaction, typeArg: string, args: WithdrawArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface DepositFeeArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    coin: TransactionObjectInput;
}
export declare function depositFee(tx: Transaction, typeArg: string, args: DepositFeeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface MigrateArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
}
export declare function migrate(tx: Transaction, args: MigrateArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetGasUsageArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    value: bigint | TransactionArgument;
}
export declare function setGasUsage(tx: Transaction, args: SetGasUsageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface WithdrawFeeArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    amount: bigint | TransactionArgument;
}
export declare function withdrawFee(tx: Transaction, typeArg: string, args: WithdrawFeeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GasUsageArgs {
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function gasUsage(tx: Transaction, args: GasUsageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function lpAmount(tx: Transaction, typeArg: string, userDeposit: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function rewardDebt(tx: Transaction, typeArg: string, userDeposit: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ClaimAdminFeeArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
}
export declare function claimAdminFee(tx: Transaction, typeArg: string, args: ClaimAdminFeeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ClaimRewardArgs {
    bridge: TransactionObjectInput;
    userDeposit: TransactionObjectInput;
}
export declare function claimReward(tx: Transaction, typeArg: string, args: ClaimRewardArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetAdminFeeShareBpArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    adminFeeShareBp: bigint | TransactionArgument;
}
export declare function setAdminFeeShareBp(tx: Transaction, typeArg: string, args: SetAdminFeeShareBpArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function adminFeeShareBp(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetBalanceRatioMinBpArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    balanceRatioMinBp: bigint | TransactionArgument;
}
export declare function setBalanceRatioMinBp(tx: Transaction, typeArg: string, args: SetBalanceRatioMinBpArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function pool(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AdjustTotalLpAmountArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    userDeposit: TransactionObjectInput;
}
export declare function adjustTotalLpAmount(tx: Transaction, typeArg: string, args: AdjustTotalLpAmountArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function canDeposit(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function canWithdraw(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function feeShare(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetFeeShareArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    feeShareBp: bigint | TransactionArgument;
}
export declare function setFeeShare(tx: Transaction, typeArg: string, args: SetFeeShareArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface StartDepositArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
}
export declare function startDeposit(tx: Transaction, typeArg: string, args: StartDepositArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface StartWithdrawArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
}
export declare function startWithdraw(tx: Transaction, typeArg: string, args: StartWithdrawArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface StopDepositArgs {
    stopCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
}
export declare function stopDeposit(tx: Transaction, typeArg: string, args: StopDepositArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface StopWithdrawArgs {
    stopCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
}
export declare function stopWithdraw(tx: Transaction, typeArg: string, args: StopWithdrawArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddBridgeArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    bridgeAddress: TransactionObjectInput;
}
export declare function addBridge(tx: Transaction, args: AddBridgeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddBridgeTokenArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    tokenAddress: TransactionObjectInput;
}
export declare function addBridgeToken(tx: Transaction, args: AddBridgeTokenArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddPoolArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    pool: TransactionObjectInput;
}
export declare function addPool(tx: Transaction, typeArg: string, args: AddPoolArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function canSwap(tx: Transaction, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function feeValue(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetBridgeAllbridgeCostArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getBridgeAllbridgeCost(tx: Transaction, args: GetBridgeAllbridgeCostArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetBridgeCostArgs {
    bridge: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getBridgeCost(tx: Transaction, args: GetBridgeCostArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetBridgeWormholeCostArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    wormholeState: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getBridgeWormholeCost(tx: Transaction, args: GetBridgeWormholeCostArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface IsProcessedMessageArgs {
    bridge: TransactionObjectInput;
    message: TransactionObjectInput;
}
export declare function isProcessedMessage(tx: Transaction, args: IsProcessedMessageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReceiveTokensWormholeArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    amount: bigint | TransactionArgument;
    recipient: TransactionObjectInput;
    sourceChainId: number | TransactionArgument;
    nonce: bigint | TransactionArgument;
    receiveAmountMin: bigint | TransactionArgument;
    extraGasCoin: TransactionObjectInput;
}
export declare function receiveTokensWormhole(tx: Transaction, typeArg: string, args: ReceiveTokensWormholeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveBridgeArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function removeBridge(tx: Transaction, args: RemoveBridgeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveBridgeTokenArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    tokenAddress: TransactionObjectInput;
}
export declare function removeBridgeToken(tx: Transaction, args: RemoveBridgeTokenArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetRebalancerArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
    rebalancer: string | TransactionArgument;
}
export declare function setRebalancer(tx: Transaction, args: SetRebalancerArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface StartSwapArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
}
export declare function startSwap(tx: Transaction, args: StartSwapArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface StopSwapArgs {
    stopSwapCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
}
export declare function stopSwap(tx: Transaction, args: StopSwapArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SwapAndBridgeWormholeArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    wormholeState: TransactionObjectInput;
    theClock: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    amount: TransactionObjectInput;
    recipient: TransactionObjectInput;
    destinationChainId: number | TransactionArgument;
    receiveToken: TransactionObjectInput;
    nonce: bigint | TransactionArgument;
    feeSuiCoin: TransactionObjectInput;
    feeTokenCoin: TransactionObjectInput;
}
export declare function swapAndBridgeWormhole(tx: Transaction, typeArg: string, args: SwapAndBridgeWormholeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface NewPoolArgs {
    adminCap: TransactionObjectInput;
    coinMetadata: TransactionObjectInput;
    a: bigint | TransactionArgument;
    feeShareBp: bigint | TransactionArgument;
}
export declare function newPool(tx: Transaction, typeArg: string, args: NewPoolArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function newUserDeposit(tx: Transaction, typeArg: string): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function poolA(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function poolBalance(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function poolD(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function poolDecimals(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function poolLpSupply(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface PoolPendingRewardsArgs {
    bridge: TransactionObjectInput;
    userDeposit: TransactionObjectInput;
}
export declare function poolPendingRewards(tx: Transaction, typeArg: string, args: PoolPendingRewardsArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function poolTokenBalance(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function poolVusdBalance(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReceiveTokensArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    amount: bigint | TransactionArgument;
    recipient: TransactionObjectInput;
    sourceChainId: number | TransactionArgument;
    nonce: bigint | TransactionArgument;
    receiveAmountMin: bigint | TransactionArgument;
    extraGasCoin: TransactionObjectInput;
}
export declare function receiveTokens(tx: Transaction, typeArg: string, args: ReceiveTokensArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SwapAndBridgeArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    amount: TransactionObjectInput;
    recipient: TransactionObjectInput;
    destinationChainId: number | TransactionArgument;
    receiveToken: TransactionObjectInput;
    nonce: bigint | TransactionArgument;
    feeSuiCoin: TransactionObjectInput;
    feeTokenCoin: TransactionObjectInput;
}
export declare function swapAndBridge(tx: Transaction, typeArg: string, args: SwapAndBridgeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
