"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.a = a;
exports.new_ = new_;
exports.sqrt = sqrt;
exports.d = d;
exports.addTokenBalance = addTokenBalance;
exports.addVusdBalance = addVusdBalance;
exports.cbrt = cbrt;
exports.getBalanceRatioMinBp = getBalanceRatioMinBp;
exports.getD = getD;
exports.getY = getY;
exports.setBalanceRatioMinBp = setBalanceRatioMinBp;
exports.setTokenBalance = setTokenBalance;
exports.tokenBalance = tokenBalance;
exports.setVusdBalance = setVusdBalance;
exports.vusdBalance = vusdBalance;
exports.subTokenBalance = subTokenBalance;
exports.subVusdBalance = subVusdBalance;
exports.updateD = updateD;
exports.updateTokenBalance = updateTokenBalance;
exports.updateVusdBalance = updateVusdBalance;
exports.validateBalanceRatio = validateBalanceRatio;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function a(tx, typeArg, poolState) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::a`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolState)],
    });
}
function new_(tx, typeArg, a) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::new`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.pure)(tx, a, `u64`)],
    });
}
function sqrt(tx, n) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::sqrt`,
        arguments: [(0, util_1.pure)(tx, n, `u256`)],
    });
}
function d(tx, typeArg, poolState) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::d`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolState)],
    });
}
function addTokenBalance(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::add_token_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolState), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function addVusdBalance(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::add_vusd_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolState), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function cbrt(tx, n) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::cbrt`,
        arguments: [(0, util_1.pure)(tx, n, `u256`)],
    });
}
function getBalanceRatioMinBp(tx, typeArg, poolState) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::get_balance_ratio_min_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolState)],
    });
}
function getD(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::get_d`,
        arguments: [(0, util_1.pure)(tx, args.a, `u64`), (0, util_1.pure)(tx, args.x, `u64`), (0, util_1.pure)(tx, args.y, `u64`)],
    });
}
function getY(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::get_y`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolState), (0, util_1.pure)(tx, args.nativeX, `u64`)],
    });
}
function setBalanceRatioMinBp(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::set_balance_ratio_min_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolState), (0, util_1.pure)(tx, args.balanceRatioMinBp, `u64`)],
    });
}
function setTokenBalance(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::set_token_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolState), (0, util_1.pure)(tx, args.tokenBalance, `u64`)],
    });
}
function tokenBalance(tx, typeArg, poolState) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::token_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolState)],
    });
}
function setVusdBalance(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::set_vusd_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolState), (0, util_1.pure)(tx, args.vusdBalance, `u64`)],
    });
}
function vusdBalance(tx, typeArg, poolState) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::vusd_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolState)],
    });
}
function subTokenBalance(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::sub_token_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolState), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function subVusdBalance(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::sub_vusd_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.poolState), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function updateD(tx, typeArg, poolState) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::update_d`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolState)],
    });
}
function updateTokenBalance(tx, typeArg, poolState) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::update_token_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolState)],
    });
}
function updateVusdBalance(tx, typeArg, poolState) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::update_vusd_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolState)],
    });
}
function validateBalanceRatio(tx, typeArg, poolState) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool_state::validate_balance_ratio`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, poolState)],
    });
}
//# sourceMappingURL=functions.js.map