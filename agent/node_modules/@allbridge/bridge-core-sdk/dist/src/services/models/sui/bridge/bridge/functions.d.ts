import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export interface SwapArgs {
    bridge: TransactionObjectInput;
    coin: TransactionObjectInput;
    receiveAmountMin: bigint | TransactionArgument;
}
export declare function swap(tx: Transaction, typeArgs: [string, string], args: SwapArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface DepositFeeArgs {
    bridge: TransactionObjectInput;
    coin: TransactionObjectInput;
}
export declare function depositFee(tx: Transaction, typeArg: string, args: DepositFeeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getId(tx: Transaction, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getVersion(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function init(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface MigrateArgs {
    adminCap: TransactionObjectInput;
    bridge: TransactionObjectInput;
}
export declare function migrate(tx: Transaction, args: MigrateArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetGasUsageArgs {
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    value: bigint | TransactionArgument;
}
export declare function setGasUsage(tx: Transaction, args: SetGasUsageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface WithdrawFeeArgs {
    bridge: TransactionObjectInput;
    amount: bigint | TransactionArgument;
}
export declare function withdrawFee(tx: Transaction, typeArg: string, args: WithdrawFeeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GasUsageArgs {
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function gasUsage(tx: Transaction, args: GasUsageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function adminFeeShareBp(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function pool(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddBridgeArgs {
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    bridgeAddress: TransactionObjectInput;
}
export declare function addBridge(tx: Transaction, args: AddBridgeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddBridgeTokenArgs {
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    tokenAddress: TransactionObjectInput;
}
export declare function addBridgeToken(tx: Transaction, args: AddBridgeTokenArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface AddPoolArgs {
    bridge: TransactionObjectInput;
    pool: TransactionObjectInput;
}
export declare function addPool(tx: Transaction, typeArg: string, args: AddPoolArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function canSwap(tx: Transaction, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function feeValue(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetBridgeAllbridgeCostArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getBridgeAllbridgeCost(tx: Transaction, args: GetBridgeAllbridgeCostArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetBridgeCostArgs {
    bridge: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getBridgeCost(tx: Transaction, args: GetBridgeCostArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GetBridgeWormholeCostArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    wormholeState: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function getBridgeWormholeCost(tx: Transaction, args: GetBridgeWormholeCostArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function getPoolKey(tx: Transaction, typeArg: string): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface IsProcessedMessageArgs {
    bridge: TransactionObjectInput;
    message: TransactionObjectInput;
}
export declare function isProcessedMessage(tx: Transaction, args: IsProcessedMessageArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function poolMut(tx: Transaction, typeArg: string, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReceiveTokensAllbridgeArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    amount: bigint | TransactionArgument;
    recipient: TransactionObjectInput;
    sourceChainId: number | TransactionArgument;
    nonce: bigint | TransactionArgument;
    receiveAmountMin: bigint | TransactionArgument;
    extraGasCoin: TransactionObjectInput;
}
export declare function receiveTokensAllbridge(tx: Transaction, typeArg: string, args: ReceiveTokensAllbridgeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ReceiveTokensWormholeArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    amount: bigint | TransactionArgument;
    recipient: TransactionObjectInput;
    sourceChainId: number | TransactionArgument;
    nonce: bigint | TransactionArgument;
    receiveAmountMin: bigint | TransactionArgument;
    extraGasCoin: TransactionObjectInput;
}
export declare function receiveTokensWormhole(tx: Transaction, typeArg: string, args: ReceiveTokensWormholeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveBridgeArgs {
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
}
export declare function removeBridge(tx: Transaction, args: RemoveBridgeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveBridgeTokenArgs {
    bridge: TransactionObjectInput;
    chainId: number | TransactionArgument;
    tokenAddress: TransactionObjectInput;
}
export declare function removeBridgeToken(tx: Transaction, args: RemoveBridgeTokenArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SetRebalancerArgs {
    bridge: TransactionObjectInput;
    rebalancer: string | TransactionArgument;
}
export declare function setRebalancer(tx: Transaction, args: SetRebalancerArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function startSwap(tx: Transaction, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function stopSwap(tx: Transaction, bridge: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SwapAndBridgeAllbridgeArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    coin: TransactionObjectInput;
    recipient: TransactionObjectInput;
    destinationChainId: number | TransactionArgument;
    receiveToken: TransactionObjectInput;
    nonce: bigint | TransactionArgument;
    feeSuiCoin: TransactionObjectInput;
    feeTokenCoin: TransactionObjectInput;
}
export declare function swapAndBridgeAllbridge(tx: Transaction, typeArg: string, args: SwapAndBridgeAllbridgeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface SwapAndBridgeWormholeArgs {
    bridge: TransactionObjectInput;
    messenger: TransactionObjectInput;
    wormholeState: TransactionObjectInput;
    theClock: TransactionObjectInput;
    gasOracle: TransactionObjectInput;
    coin: TransactionObjectInput;
    recipient: TransactionObjectInput;
    destinationChainId: number | TransactionArgument;
    receiveToken: TransactionObjectInput;
    nonce: bigint | TransactionArgument;
    feeSuiCoin: TransactionObjectInput;
    feeTokenCoin: TransactionObjectInput;
}
export declare function swapAndBridgeWormhole(tx: Transaction, typeArg: string, args: SwapAndBridgeWormholeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
