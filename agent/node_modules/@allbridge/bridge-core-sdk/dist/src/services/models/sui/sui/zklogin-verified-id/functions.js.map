{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/zklogin-verified-id/functions.ts"],"names":[],"mappings":";;AAMA,0BAKC;AAED,sBAKC;AAED,4BAKC;AAWD,wCAYC;AAWD,wDAYC;AAED,oCAKC;AAED,sCAKC;AAED,wBAKC;AAUD,0CAWC;AAjHD,cAAc;AACd,0BAAkC;AAClC,2EAAuE;AACvE,gDAAkD;AAGlD,SAAgB,OAAO,CAAC,EAAe,EAAE,UAAkC;IACzE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+BAA+B;QACtD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,UAAU,CAAC,CAAC;KACjC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,KAAK,CAAC,EAAe,EAAE,UAAkC;IACvE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,8BAA8B;QACrD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,UAAU,CAAC,CAAC;KACjC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,QAAQ,CAAC,EAAe,EAAE,UAAkC;IAC1E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iCAAiC;QACxD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,UAAU,CAAC,CAAC;KACjC,CAAC,CAAC;AACL,CAAC;AAWD,SAAgB,cAAc,CAAC,EAAe,EAAE,IAAwB;IACtE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,yCAAyC;QAChE,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC;YACjC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC;YAClD,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC;YACnD,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC;YAC5C,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC;YAC9C,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC;SAC/B;KACF,CAAC,CAAC;AACL,CAAC;AAWD,SAAgB,sBAAsB,CAAC,EAAe,EAAE,IAAgC;IACtF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,kDAAkD;QACzE,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC;YACjC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC;YACzC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,YAAY,CAAC;YAC1C,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;YACnC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,YAAY,CAAC;YACrC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC;SAC/B;KACF,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,YAAY,CAAC,EAAe,EAAE,UAAkC;IAC9E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,uCAAuC;QAC9D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,UAAU,CAAC,CAAC;KACjC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,aAAa,CAAC,EAAe,EAAE,UAAkC;IAC/E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,wCAAwC;QAC/D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,UAAU,CAAC,CAAC;KACjC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,MAAM,CAAC,EAAe,EAAE,UAAkC;IACxE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,+BAA+B;QACtD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,UAAU,CAAC,CAAC;KACjC,CAAC,CAAC;AACL,CAAC;AAUD,SAAgB,eAAe,CAAC,EAAe,EAAE,IAAyB;IACxE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,0CAA0C;QACjE,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,YAAY,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC;YAClD,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,aAAa,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC;YACnD,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC;YAC5C,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC;YAC9C,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC;SAC/B;KACF,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { String } from \"../../_dependencies/source/0x1/string/structs\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function delete_(tx: Transaction, verifiedId: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_id::delete`,\n    arguments: [obj(tx, verifiedId)],\n  });\n}\n\nexport function owner(tx: Transaction, verifiedId: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_id::owner`,\n    arguments: [obj(tx, verifiedId)],\n  });\n}\n\nexport function audience(tx: Transaction, verifiedId: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_id::audience`,\n    arguments: [obj(tx, verifiedId)],\n  });\n}\n\nexport interface CheckZkloginIdArgs {\n  address: string | TransactionArgument;\n  keyClaimName: string | TransactionArgument;\n  keyClaimValue: string | TransactionArgument;\n  issuer: string | TransactionArgument;\n  audience: string | TransactionArgument;\n  pinHash: bigint | TransactionArgument;\n}\n\nexport function checkZkloginId(tx: Transaction, args: CheckZkloginIdArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_id::check_zklogin_id`,\n    arguments: [\n      pure(tx, args.address, `address`),\n      pure(tx, args.keyClaimName, `${String.$typeName}`),\n      pure(tx, args.keyClaimValue, `${String.$typeName}`),\n      pure(tx, args.issuer, `${String.$typeName}`),\n      pure(tx, args.audience, `${String.$typeName}`),\n      pure(tx, args.pinHash, `u256`),\n    ],\n  });\n}\n\nexport interface CheckZkloginIdInternalArgs {\n  address: string | TransactionArgument;\n  keyClaimName: Array<number | TransactionArgument> | TransactionArgument;\n  keyClaimValue: Array<number | TransactionArgument> | TransactionArgument;\n  issuer: Array<number | TransactionArgument> | TransactionArgument;\n  audience: Array<number | TransactionArgument> | TransactionArgument;\n  pinHash: bigint | TransactionArgument;\n}\n\nexport function checkZkloginIdInternal(tx: Transaction, args: CheckZkloginIdInternalArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_id::check_zklogin_id_internal`,\n    arguments: [\n      pure(tx, args.address, `address`),\n      pure(tx, args.keyClaimName, `vector<u8>`),\n      pure(tx, args.keyClaimValue, `vector<u8>`),\n      pure(tx, args.issuer, `vector<u8>`),\n      pure(tx, args.audience, `vector<u8>`),\n      pure(tx, args.pinHash, `u256`),\n    ],\n  });\n}\n\nexport function keyClaimName(tx: Transaction, verifiedId: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_id::key_claim_name`,\n    arguments: [obj(tx, verifiedId)],\n  });\n}\n\nexport function keyClaimValue(tx: Transaction, verifiedId: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_id::key_claim_value`,\n    arguments: [obj(tx, verifiedId)],\n  });\n}\n\nexport function issuer(tx: Transaction, verifiedId: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_id::issuer`,\n    arguments: [obj(tx, verifiedId)],\n  });\n}\n\nexport interface VerifyZkloginIdArgs {\n  keyClaimName: string | TransactionArgument;\n  keyClaimValue: string | TransactionArgument;\n  issuer: string | TransactionArgument;\n  audience: string | TransactionArgument;\n  pinHash: bigint | TransactionArgument;\n}\n\nexport function verifyZkloginId(tx: Transaction, args: VerifyZkloginIdArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_id::verify_zklogin_id`,\n    arguments: [\n      pure(tx, args.keyClaimName, `${String.$typeName}`),\n      pure(tx, args.keyClaimValue, `${String.$typeName}`),\n      pure(tx, args.issuer, `${String.$typeName}`),\n      pure(tx, args.audience, `${String.$typeName}`),\n      pure(tx, args.pinHash, `u256`),\n    ],\n  });\n}\n"]}