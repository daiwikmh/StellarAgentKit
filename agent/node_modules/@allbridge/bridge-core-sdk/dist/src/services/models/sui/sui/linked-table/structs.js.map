{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/linked-table/structs.ts"],"names":[],"mappings":";;;AAgCA,sCAGC;AAkPD,wBAGC;AAxRD,cAAc;AACd,2EAAuE;AACvE,sDAoBkC;AAClC,gDAAwG;AACxG,oCAAmC;AACnC,+CAAwC;AACxC,yCAA+C;AAE/C,6CAA4C;AAE5C,gFAAgF;AAEhF,SAAgB,aAAa,CAAC,IAAY;IACxC,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,eAAO,6BAA6B,GAAG,GAAG,CAAC,CAAC;AACxE,CAAC;AAcD,MAAa,WAAW;IACtB,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,eAAO,6BAA6B,CAAC;IACjD,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,CAAC,KAAK,EAAE,IAAI,CAAU,CAAC;IAE3C,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAClC,aAAa,CAAS;IACtB,SAAS,CAAsC;IAC/C,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;IAEpC,EAAE,CAAe;IACjB,IAAI,CAAiB;IACrB,IAAI,CAAqB;IACzB,IAAI,CAAqB;IAElC,YAAoB,QAA6C,EAAE,MAA+B;QAChG,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,WAAW,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QAClF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,OAAO,CACZ,CAAI,EACJ,CAAI;QAEJ,OAAO;YACL,QAAQ,EAAE,WAAW,CAAC,SAAS;YAC/B,YAAY,EAAE,IAAA,qBAAc,EAAC,WAAW,CAAC,SAAS,EAAE,GAAG,CAAC,IAAA,qBAAW,EAAC,CAAC,CAAC,EAAE,IAAA,qBAAW,EAAC,CAAC,CAAC,CAAC,CAAW;YAClG,QAAQ,EAAE,CAAC,IAAA,qBAAW,EAAC,CAAC,CAAC,EAAE,IAAA,qBAAW,EAAC,CAAC,CAAC,CAGxC;YACD,SAAS,EAAE,WAAW,CAAC,UAAU;YACjC,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YACvB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;YACnF,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;YAC7F,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;YAChE,GAAG,EAAE,WAAW,CAAC,GAAG,CAAC,IAAA,eAAK,EAAC,CAAC,CAAC,CAAC;YAC9B,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC;YACvE,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;YAC3E,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;YAC7F,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;YAC7F,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;YACrF,GAAG,EAAE,CAAC,MAAsE,EAAE,EAAE;gBAC9E,OAAO,IAAI,WAAW,CAAC,CAAC,IAAA,qBAAW,EAAC,CAAC,CAAC,EAAE,IAAA,qBAAW,EAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YACnE,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,WAAW,CAAC,OAAO,CAAC;IAC7B,CAAC;IAED,MAAM,CAAC,OAAO,CACZ,CAAI,EACJ,CAAI;QAEJ,OAAO,IAAA,iBAAO,EAAC,WAAW,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,WAAW,CAAC,OAAO,CAAC;IAC7B,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,CAAyB,CAAI,EAAE,EAAE,CACtC,SAAG,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,IAAI,GAAG,EAAE;YACnC,EAAE,EAAE,aAAG,CAAC,GAAG;YACX,IAAI,EAAE,SAAG,CAAC,GAAG,EAAE;YACf,IAAI,EAAE,gBAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACnB,IAAI,EAAE,gBAAM,CAAC,GAAG,CAAC,CAAC,CAAC;SACpB,CAAC,CAAC;IACP,CAAC;IAED,MAAM,CAAC,UAAU,CACf,QAAgB,EAChB,MAA2B;QAE3B,OAAO,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACvD,EAAE,EAAE,IAAA,0BAAgB,EAAC,aAAG,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC;YAC9C,IAAI,EAAE,IAAA,0BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC;YAC1C,IAAI,EAAE,IAAA,0BAAgB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC;YAChE,IAAI,EAAE,IAAA,0BAAgB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC;SACjE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CACxB,QAAgB,EAChB,IAAqB;QAErB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC5C,CAAC;QACD,IAAA,wCAA8B,EAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAE/C,OAAO,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACvD,EAAE,EAAE,IAAA,mCAAyB,EAAC,aAAG,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5D,IAAI,EAAE,IAAA,mCAAyB,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACxD,IAAI,EAAE,IAAA,mCAAyB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YAC9E,IAAI,EAAE,IAAA,mCAAyB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;SAC/E,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CACZ,QAAgB,EAChB,IAAgB;QAEhB,OAAO,WAAW,CAAC,UAAU,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,CAAC,IAAA,eAAK,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3F,CAAC;IAED,WAAW;QACT,OAAO;YACL,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC1B,IAAI,EAAE,IAAA,qBAAW,EAAY,GAAG,gBAAM,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC;YACpF,IAAI,EAAE,IAAA,qBAAW,EAAY,GAAG,gBAAM,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC;SACrF,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAClB,QAAgB,EAChB,KAAU;QAEV,OAAO,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACvD,EAAE,EAAE,IAAA,6BAAmB,EAAC,aAAG,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC;YAChD,IAAI,EAAE,IAAA,6BAAmB,EAAC,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC;YAC5C,IAAI,EAAE,IAAA,6BAAmB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;YAClE,IAAI,EAAE,IAAA,6BAAmB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;SACnE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CACb,QAAgB,EAChB,IAAyB;QAEzB,IAAI,IAAI,CAAC,SAAS,KAAK,WAAW,CAAC,SAAS,EAAE,CAAC;YAC7C,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QACD,IAAA,oCAA0B,EACxB,IAAA,qBAAc,EAAC,WAAW,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,qBAAW,CAAC,CAAC,EACnE,IAAI,CAAC,SAAS,EACd,QAAQ,CACT,CAAC;QAEF,OAAO,WAAW,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,MAAM,CAAC,iBAAiB,CACtB,QAAgB,EAChB,OAAsB;QAEtB,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,8BAA8B,CAAC,CAAC;QACzF,CAAC;QACD,OAAO,WAAW,CAAC,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC5D,CAAC;IAED,MAAM,CAAC,iBAAiB,CACtB,QAAgB,EAChB,IAAmB;QAEnB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACxE,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC3D,CAAC;YAED,MAAM,WAAW,GAAG,IAAA,oBAAa,EAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;YAC1D,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7B,MAAM,IAAI,KAAK,CAAC,6DAA6D,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;YACrG,CAAC;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,UAAU,GAAG,IAAA,sBAAe,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,eAAe,GAAG,IAAA,sBAAe,EAAC,IAAA,qBAAW,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClE,IAAI,UAAU,KAAK,eAAe,EAAE,CAAC;oBACnC,MAAM,IAAI,KAAK,CACb,sCAAsC,CAAC,eAAe,eAAe,cAAc,UAAU,GAAG,CACjG,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,OAAO,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnE,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,WAAW,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QAC/D,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAChB,MAAiB,EACjB,QAAgB,EAChB,EAAU;QAEV,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,2CAA2C,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACtF,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAClF,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,8BAA8B,CAAC,CAAC;QACpE,CAAC;QAED,OAAO,WAAW,CAAC,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;;AA/NH,kCAgOC;AAED,yEAAyE;AAEzE,SAAgB,MAAM,CAAC,IAAY;IACjC,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,eAAO,sBAAsB,GAAG,GAAG,CAAC,CAAC;AACjE,CAAC;AAUD,MAAa,IAAI;IACf,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,eAAO,sBAAsB,CAAC;IAC1C,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,CAAU,CAAC;IAE5C,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IAC3B,aAAa,CAAS;IACtB,SAAS,CAA+B;IACxC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IAE7B,IAAI,CAAqB;IACzB,IAAI,CAAqB;IACzB,KAAK,CAAa;IAE3B,YAAoB,QAAsC,EAAE,MAAwB;QAClF,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,IAAI,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QAC3E,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC5B,CAAC;IAED,MAAM,CAAC,OAAO,CACZ,CAAI,EACJ,CAAI;QAEJ,OAAO;YACL,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,YAAY,EAAE,IAAA,qBAAc,EAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,IAAA,qBAAW,EAAC,CAAC,CAAC,EAAE,IAAA,qBAAW,EAAC,CAAC,CAAC,CAAC,CAAW;YAC3F,QAAQ,EAAE,CAAC,IAAA,qBAAW,EAAC,CAAC,CAAC,EAAE,IAAA,qBAAW,EAAC,CAAC,CAAC,CAAiE;YAC1G,SAAS,EAAE,IAAI,CAAC,UAAU;YAC1B,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YACvB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;YAC5E,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;YACtF,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;YACzD,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,IAAA,eAAK,EAAC,CAAC,CAAC,EAAE,IAAA,eAAK,EAAC,CAAC,CAAC,CAAC;YACjC,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC;YAChE,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC;YACpE,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;YACtF,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC;YACtF,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;YAC9E,GAAG,EAAE,CAAC,MAAwD,EAAE,EAAE;gBAChE,OAAO,IAAI,IAAI,CAAC,CAAC,IAAA,qBAAW,EAAC,CAAC,CAAC,EAAE,IAAA,qBAAW,EAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAC5D,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,MAAM,CAAC,OAAO,CACZ,CAAI,EACJ,CAAI;QAEJ,OAAO,IAAA,iBAAO,EAAC,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,CAAiD,CAAI,EAAE,CAAI,EAAE,EAAE,CACpE,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,GAAG,EAAE;YACvC,IAAI,EAAE,gBAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACnB,IAAI,EAAE,gBAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACnB,KAAK,EAAE,CAAC;SACT,CAAC,CAAC;IACP,CAAC;IAED,MAAM,CAAC,UAAU,CACf,QAAgB,EAChB,MAA2B;QAE3B,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAChD,IAAI,EAAE,IAAA,0BAAgB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC;YAChE,IAAI,EAAE,IAAA,0BAAgB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC;YAChE,KAAK,EAAE,IAAA,0BAAgB,EAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC;SACnD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CACxB,QAAgB,EAChB,IAAqB;QAErB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACvB,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACrC,CAAC;QACD,IAAA,wCAA8B,EAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAE/C,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAChD,IAAI,EAAE,IAAA,mCAAyB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YAC9E,IAAI,EAAE,IAAA,mCAAyB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YAC9E,KAAK,EAAE,IAAA,mCAAyB,EAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;SACjE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CACZ,QAAgB,EAChB,IAAgB;QAEhB,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,IAAA,eAAK,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,IAAA,eAAK,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACjG,CAAC;IAED,WAAW;QACT,OAAO;YACL,IAAI,EAAE,IAAA,qBAAW,EAAY,GAAG,gBAAM,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC;YACpF,IAAI,EAAE,IAAA,qBAAW,EAAY,GAAG,gBAAM,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,CAAC;YACpF,KAAK,EAAE,IAAA,qBAAW,EAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;SACrD,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAClB,QAAgB,EAChB,KAAU;QAEV,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAChD,IAAI,EAAE,IAAA,6BAAmB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;YAClE,IAAI,EAAE,IAAA,6BAAmB,EAAC,gBAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;YAClE,KAAK,EAAE,IAAA,6BAAmB,EAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC;SACrD,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CACb,QAAgB,EAChB,IAAyB;QAEzB,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QACD,IAAA,oCAA0B,EAAC,IAAA,qBAAc,EAAC,IAAI,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,qBAAW,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAEnH,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,MAAM,CAAC,iBAAiB,CACtB,QAAgB,EAChB,OAAsB;QAEtB,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YAC1B,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,uBAAuB,CAAC,CAAC;QAClF,CAAC;QACD,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACrD,CAAC;IAED,MAAM,CAAC,iBAAiB,CACtB,QAAgB,EAChB,IAAmB;QAEnB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACjE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACpD,CAAC;YAED,MAAM,WAAW,GAAG,IAAA,oBAAa,EAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC;YAC1D,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC7B,MAAM,IAAI,KAAK,CAAC,6DAA6D,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC;YACrG,CAAC;YACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,MAAM,UAAU,GAAG,IAAA,sBAAe,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnD,MAAM,eAAe,GAAG,IAAA,sBAAe,EAAC,IAAA,qBAAW,EAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClE,IAAI,UAAU,KAAK,eAAe,EAAE,CAAC;oBACnC,MAAM,IAAI,KAAK,CACb,sCAAsC,CAAC,eAAe,eAAe,cAAc,UAAU,GAAG,CACjG,CAAC;gBACJ,CAAC;YACH,CAAC;YAED,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACxD,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAChB,MAAiB,EACjB,QAAgB,EAChB,EAAU;QAEV,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,oCAAoC,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAC/E,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAC3E,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,uBAAuB,CAAC,CAAC;QAC7D,CAAC;QAED,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;;AAjNH,oBAkNC","sourcesContent":["// @ts-nocheck\nimport { Option } from \"../../_dependencies/source/0x1/option/structs\";\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  fieldToJSON,\n  phantom,\n  toBcs,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { UID } from \"../object/structs\";\nimport { BcsType, bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== LinkedTable =============================== */\n\nexport function isLinkedTable(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::linked_table::LinkedTable` + \"<\");\n}\n\nexport interface LinkedTableFields<K extends TypeArgument, V extends PhantomTypeArgument> {\n  id: ToField<UID>;\n  size: ToField<\"u64\">;\n  head: ToField<Option<K>>;\n  tail: ToField<Option<K>>;\n}\n\nexport type LinkedTableReified<K extends TypeArgument, V extends PhantomTypeArgument> = Reified<\n  LinkedTable<K, V>,\n  LinkedTableFields<K, V>\n>;\n\nexport class LinkedTable<K extends TypeArgument, V extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::linked_table::LinkedTable`;\n  }\n  static readonly $numTypeParams = 2;\n  static readonly $isPhantom = [false, true] as const;\n\n  readonly $typeName = LinkedTable.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<K>, PhantomToTypeStr<V>];\n  readonly $isPhantom = LinkedTable.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly size: ToField<\"u64\">;\n  readonly head: ToField<Option<K>>;\n  readonly tail: ToField<Option<K>>;\n\n  private constructor(typeArgs: [ToTypeStr<K>, PhantomToTypeStr<V>], fields: LinkedTableFields<K, V>) {\n    this.$fullTypeName = composeSuiType(LinkedTable.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.size = fields.size;\n    this.head = fields.head;\n    this.tail = fields.tail;\n  }\n\n  static reified<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    K: K,\n    V: V\n  ): LinkedTableReified<ToTypeArgument<K>, ToPhantomTypeArgument<V>> {\n    return {\n      typeName: LinkedTable.$typeName,\n      fullTypeName: composeSuiType(LinkedTable.$typeName, ...[extractType(K), extractType(V)]) as string,\n      typeArgs: [extractType(K), extractType(V)] as [\n        ToTypeStr<ToTypeArgument<K>>,\n        PhantomToTypeStr<ToPhantomTypeArgument<V>>,\n      ],\n      isPhantom: LinkedTable.$isPhantom,\n      reifiedTypeArgs: [K, V],\n      fromFields: (fields: Record<string, any>) => LinkedTable.fromFields([K, V], fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => LinkedTable.fromFieldsWithTypes([K, V], item),\n      fromBcs: (data: Uint8Array) => LinkedTable.fromBcs([K, V], data),\n      bcs: LinkedTable.bcs(toBcs(K)),\n      fromJSONField: (field: any) => LinkedTable.fromJSONField([K, V], field),\n      fromJSON: (json: Record<string, any>) => LinkedTable.fromJSON([K, V], json),\n      fromSuiParsedData: (content: SuiParsedData) => LinkedTable.fromSuiParsedData([K, V], content),\n      fromSuiObjectData: (content: SuiObjectData) => LinkedTable.fromSuiObjectData([K, V], content),\n      fetch: async (client: SuiClient, id: string) => LinkedTable.fetch(client, [K, V], id),\n      new: (fields: LinkedTableFields<ToTypeArgument<K>, ToPhantomTypeArgument<V>>) => {\n        return new LinkedTable([extractType(K), extractType(V)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return LinkedTable.reified;\n  }\n\n  static phantom<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    K: K,\n    V: V\n  ): PhantomReified<ToTypeStr<LinkedTable<ToTypeArgument<K>, ToPhantomTypeArgument<V>>>> {\n    return phantom(LinkedTable.reified(K, V));\n  }\n  static get p() {\n    return LinkedTable.phantom;\n  }\n\n  static get bcs() {\n    return <K extends BcsType<any>>(K: K) =>\n      bcs.struct(`LinkedTable<${K.name}>`, {\n        id: UID.bcs,\n        size: bcs.u64(),\n        head: Option.bcs(K),\n        tail: Option.bcs(K),\n      });\n  }\n\n  static fromFields<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    typeArgs: [K, V],\n    fields: Record<string, any>\n  ): LinkedTable<ToTypeArgument<K>, ToPhantomTypeArgument<V>> {\n    return LinkedTable.reified(typeArgs[0], typeArgs[1]).new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      size: decodeFromFields(\"u64\", fields.size),\n      head: decodeFromFields(Option.reified(typeArgs[0]), fields.head),\n      tail: decodeFromFields(Option.reified(typeArgs[0]), fields.tail),\n    });\n  }\n\n  static fromFieldsWithTypes<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    typeArgs: [K, V],\n    item: FieldsWithTypes\n  ): LinkedTable<ToTypeArgument<K>, ToPhantomTypeArgument<V>> {\n    if (!isLinkedTable(item.type)) {\n      throw new Error(\"not a LinkedTable type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, typeArgs);\n\n    return LinkedTable.reified(typeArgs[0], typeArgs[1]).new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      size: decodeFromFieldsWithTypes(\"u64\", item.fields.size),\n      head: decodeFromFieldsWithTypes(Option.reified(typeArgs[0]), item.fields.head),\n      tail: decodeFromFieldsWithTypes(Option.reified(typeArgs[0]), item.fields.tail),\n    });\n  }\n\n  static fromBcs<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    typeArgs: [K, V],\n    data: Uint8Array\n  ): LinkedTable<ToTypeArgument<K>, ToPhantomTypeArgument<V>> {\n    return LinkedTable.fromFields(typeArgs, LinkedTable.bcs(toBcs(typeArgs[0])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      size: this.size.toString(),\n      head: fieldToJSON<Option<K>>(`${Option.$typeName}<${this.$typeArgs[0]}>`, this.head),\n      tail: fieldToJSON<Option<K>>(`${Option.$typeName}<${this.$typeArgs[0]}>`, this.tail),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    typeArgs: [K, V],\n    field: any\n  ): LinkedTable<ToTypeArgument<K>, ToPhantomTypeArgument<V>> {\n    return LinkedTable.reified(typeArgs[0], typeArgs[1]).new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      size: decodeFromJSONField(\"u64\", field.size),\n      head: decodeFromJSONField(Option.reified(typeArgs[0]), field.head),\n      tail: decodeFromJSONField(Option.reified(typeArgs[0]), field.tail),\n    });\n  }\n\n  static fromJSON<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    typeArgs: [K, V],\n    json: Record<string, any>\n  ): LinkedTable<ToTypeArgument<K>, ToPhantomTypeArgument<V>> {\n    if (json.$typeName !== LinkedTable.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(\n      composeSuiType(LinkedTable.$typeName, ...typeArgs.map(extractType)),\n      json.$typeArgs,\n      typeArgs\n    );\n\n    return LinkedTable.fromJSONField(typeArgs, json);\n  }\n\n  static fromSuiParsedData<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    typeArgs: [K, V],\n    content: SuiParsedData\n  ): LinkedTable<ToTypeArgument<K>, ToPhantomTypeArgument<V>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isLinkedTable(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a LinkedTable object`);\n    }\n    return LinkedTable.fromFieldsWithTypes(typeArgs, content);\n  }\n\n  static fromSuiObjectData<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    typeArgs: [K, V],\n    data: SuiObjectData\n  ): LinkedTable<ToTypeArgument<K>, ToPhantomTypeArgument<V>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isLinkedTable(data.bcs.type)) {\n        throw new Error(`object at is not a LinkedTable object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 2) {\n        throw new Error(`type argument mismatch: expected 2 type arguments but got ${gotTypeArgs.length}`);\n      }\n      for (let i = 0; i < 2; i++) {\n        const gotTypeArg = compressSuiType(gotTypeArgs[i]);\n        const expectedTypeArg = compressSuiType(extractType(typeArgs[i]));\n        if (gotTypeArg !== expectedTypeArg) {\n          throw new Error(\n            `type argument mismatch at position ${i}: expected '${expectedTypeArg}' but got '${gotTypeArg}'`\n          );\n        }\n      }\n\n      return LinkedTable.fromBcs(typeArgs, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return LinkedTable.fromSuiParsedData(typeArgs, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<K extends Reified<TypeArgument, any>, V extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArgs: [K, V],\n    id: string\n  ): Promise<LinkedTable<ToTypeArgument<K>, ToPhantomTypeArgument<V>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching LinkedTable object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isLinkedTable(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a LinkedTable object`);\n    }\n\n    return LinkedTable.fromSuiObjectData(typeArgs, res.data);\n  }\n}\n\n/* ============================== Node =============================== */\n\nexport function isNode(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::linked_table::Node` + \"<\");\n}\n\nexport interface NodeFields<K extends TypeArgument, V extends TypeArgument> {\n  prev: ToField<Option<K>>;\n  next: ToField<Option<K>>;\n  value: ToField<V>;\n}\n\nexport type NodeReified<K extends TypeArgument, V extends TypeArgument> = Reified<Node<K, V>, NodeFields<K, V>>;\n\nexport class Node<K extends TypeArgument, V extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::linked_table::Node`;\n  }\n  static readonly $numTypeParams = 2;\n  static readonly $isPhantom = [false, false] as const;\n\n  readonly $typeName = Node.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<K>, ToTypeStr<V>];\n  readonly $isPhantom = Node.$isPhantom;\n\n  readonly prev: ToField<Option<K>>;\n  readonly next: ToField<Option<K>>;\n  readonly value: ToField<V>;\n\n  private constructor(typeArgs: [ToTypeStr<K>, ToTypeStr<V>], fields: NodeFields<K, V>) {\n    this.$fullTypeName = composeSuiType(Node.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.prev = fields.prev;\n    this.next = fields.next;\n    this.value = fields.value;\n  }\n\n  static reified<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    K: K,\n    V: V\n  ): NodeReified<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return {\n      typeName: Node.$typeName,\n      fullTypeName: composeSuiType(Node.$typeName, ...[extractType(K), extractType(V)]) as string,\n      typeArgs: [extractType(K), extractType(V)] as [ToTypeStr<ToTypeArgument<K>>, ToTypeStr<ToTypeArgument<V>>],\n      isPhantom: Node.$isPhantom,\n      reifiedTypeArgs: [K, V],\n      fromFields: (fields: Record<string, any>) => Node.fromFields([K, V], fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Node.fromFieldsWithTypes([K, V], item),\n      fromBcs: (data: Uint8Array) => Node.fromBcs([K, V], data),\n      bcs: Node.bcs(toBcs(K), toBcs(V)),\n      fromJSONField: (field: any) => Node.fromJSONField([K, V], field),\n      fromJSON: (json: Record<string, any>) => Node.fromJSON([K, V], json),\n      fromSuiParsedData: (content: SuiParsedData) => Node.fromSuiParsedData([K, V], content),\n      fromSuiObjectData: (content: SuiObjectData) => Node.fromSuiObjectData([K, V], content),\n      fetch: async (client: SuiClient, id: string) => Node.fetch(client, [K, V], id),\n      new: (fields: NodeFields<ToTypeArgument<K>, ToTypeArgument<V>>) => {\n        return new Node([extractType(K), extractType(V)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Node.reified;\n  }\n\n  static phantom<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    K: K,\n    V: V\n  ): PhantomReified<ToTypeStr<Node<ToTypeArgument<K>, ToTypeArgument<V>>>> {\n    return phantom(Node.reified(K, V));\n  }\n  static get p() {\n    return Node.phantom;\n  }\n\n  static get bcs() {\n    return <K extends BcsType<any>, V extends BcsType<any>>(K: K, V: V) =>\n      bcs.struct(`Node<${K.name}, ${V.name}>`, {\n        prev: Option.bcs(K),\n        next: Option.bcs(K),\n        value: V,\n      });\n  }\n\n  static fromFields<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    fields: Record<string, any>\n  ): Node<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return Node.reified(typeArgs[0], typeArgs[1]).new({\n      prev: decodeFromFields(Option.reified(typeArgs[0]), fields.prev),\n      next: decodeFromFields(Option.reified(typeArgs[0]), fields.next),\n      value: decodeFromFields(typeArgs[1], fields.value),\n    });\n  }\n\n  static fromFieldsWithTypes<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    item: FieldsWithTypes\n  ): Node<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (!isNode(item.type)) {\n      throw new Error(\"not a Node type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, typeArgs);\n\n    return Node.reified(typeArgs[0], typeArgs[1]).new({\n      prev: decodeFromFieldsWithTypes(Option.reified(typeArgs[0]), item.fields.prev),\n      next: decodeFromFieldsWithTypes(Option.reified(typeArgs[0]), item.fields.next),\n      value: decodeFromFieldsWithTypes(typeArgs[1], item.fields.value),\n    });\n  }\n\n  static fromBcs<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    data: Uint8Array\n  ): Node<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return Node.fromFields(typeArgs, Node.bcs(toBcs(typeArgs[0]), toBcs(typeArgs[1])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      prev: fieldToJSON<Option<K>>(`${Option.$typeName}<${this.$typeArgs[0]}>`, this.prev),\n      next: fieldToJSON<Option<K>>(`${Option.$typeName}<${this.$typeArgs[0]}>`, this.next),\n      value: fieldToJSON<V>(this.$typeArgs[1], this.value),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    field: any\n  ): Node<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return Node.reified(typeArgs[0], typeArgs[1]).new({\n      prev: decodeFromJSONField(Option.reified(typeArgs[0]), field.prev),\n      next: decodeFromJSONField(Option.reified(typeArgs[0]), field.next),\n      value: decodeFromJSONField(typeArgs[1], field.value),\n    });\n  }\n\n  static fromJSON<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    json: Record<string, any>\n  ): Node<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (json.$typeName !== Node.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Node.$typeName, ...typeArgs.map(extractType)), json.$typeArgs, typeArgs);\n\n    return Node.fromJSONField(typeArgs, json);\n  }\n\n  static fromSuiParsedData<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    content: SuiParsedData\n  ): Node<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isNode(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Node object`);\n    }\n    return Node.fromFieldsWithTypes(typeArgs, content);\n  }\n\n  static fromSuiObjectData<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    data: SuiObjectData\n  ): Node<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isNode(data.bcs.type)) {\n        throw new Error(`object at is not a Node object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 2) {\n        throw new Error(`type argument mismatch: expected 2 type arguments but got ${gotTypeArgs.length}`);\n      }\n      for (let i = 0; i < 2; i++) {\n        const gotTypeArg = compressSuiType(gotTypeArgs[i]);\n        const expectedTypeArg = compressSuiType(extractType(typeArgs[i]));\n        if (gotTypeArg !== expectedTypeArg) {\n          throw new Error(\n            `type argument mismatch at position ${i}: expected '${expectedTypeArg}' but got '${gotTypeArg}'`\n          );\n        }\n      }\n\n      return Node.fromBcs(typeArgs, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Node.fromSuiParsedData(typeArgs, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArgs: [K, V],\n    id: string\n  ): Promise<Node<ToTypeArgument<K>, ToTypeArgument<V>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Node object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isNode(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Node object`);\n    }\n\n    return Node.fromSuiObjectData(typeArgs, res.data);\n  }\n}\n"]}