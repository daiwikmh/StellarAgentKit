"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerifiedIssuer = void 0;
exports.isVerifiedIssuer = isVerifiedIssuer;
// @ts-nocheck
const structs_1 = require("../../_dependencies/source/0x1/string/structs");
const reified_1 = require("../../_framework/reified");
const util_1 = require("../../_framework/util");
const index_1 = require("../index");
const structs_2 = require("../object/structs");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== VerifiedIssuer =============================== */
function isVerifiedIssuer(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V26}::zklogin_verified_issuer::VerifiedIssuer`;
}
class VerifiedIssuer {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V26}::zklogin_verified_issuer::VerifiedIssuer`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = VerifiedIssuer.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = VerifiedIssuer.$isPhantom;
    id;
    owner;
    issuer;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(VerifiedIssuer.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.id = fields.id;
        this.owner = fields.owner;
        this.issuer = fields.issuer;
    }
    static reified() {
        return {
            typeName: VerifiedIssuer.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(VerifiedIssuer.$typeName, ...[]),
            typeArgs: [],
            isPhantom: VerifiedIssuer.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => VerifiedIssuer.fromFields(fields),
            fromFieldsWithTypes: (item) => VerifiedIssuer.fromFieldsWithTypes(item),
            fromBcs: (data) => VerifiedIssuer.fromBcs(data),
            bcs: VerifiedIssuer.bcs,
            fromJSONField: (field) => VerifiedIssuer.fromJSONField(field),
            fromJSON: (json) => VerifiedIssuer.fromJSON(json),
            fromSuiParsedData: (content) => VerifiedIssuer.fromSuiParsedData(content),
            fromSuiObjectData: (content) => VerifiedIssuer.fromSuiObjectData(content),
            fetch: async (client, id) => VerifiedIssuer.fetch(client, id),
            new: (fields) => {
                return new VerifiedIssuer([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return VerifiedIssuer.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(VerifiedIssuer.reified());
    }
    static get p() {
        return VerifiedIssuer.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("VerifiedIssuer", {
            id: structs_2.UID.bcs,
            owner: bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            }),
            issuer: structs_1.String.bcs,
        });
    }
    static fromFields(fields) {
        return VerifiedIssuer.reified().new({
            id: (0, reified_1.decodeFromFields)(structs_2.UID.reified(), fields.id),
            owner: (0, reified_1.decodeFromFields)("address", fields.owner),
            issuer: (0, reified_1.decodeFromFields)(structs_1.String.reified(), fields.issuer),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isVerifiedIssuer(item.type)) {
            throw new Error("not a VerifiedIssuer type");
        }
        return VerifiedIssuer.reified().new({
            id: (0, reified_1.decodeFromFieldsWithTypes)(structs_2.UID.reified(), item.fields.id),
            owner: (0, reified_1.decodeFromFieldsWithTypes)("address", item.fields.owner),
            issuer: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.String.reified(), item.fields.issuer),
        });
    }
    static fromBcs(data) {
        return VerifiedIssuer.fromFields(VerifiedIssuer.bcs.parse(data));
    }
    toJSONField() {
        return {
            id: this.id,
            owner: this.owner,
            issuer: this.issuer,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return VerifiedIssuer.reified().new({
            id: (0, reified_1.decodeFromJSONField)(structs_2.UID.reified(), field.id),
            owner: (0, reified_1.decodeFromJSONField)("address", field.owner),
            issuer: (0, reified_1.decodeFromJSONField)(structs_1.String.reified(), field.issuer),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== VerifiedIssuer.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return VerifiedIssuer.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isVerifiedIssuer(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a VerifiedIssuer object`);
        }
        return VerifiedIssuer.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isVerifiedIssuer(data.bcs.type)) {
                throw new Error(`object at is not a VerifiedIssuer object`);
            }
            return VerifiedIssuer.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return VerifiedIssuer.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching VerifiedIssuer object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isVerifiedIssuer(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a VerifiedIssuer object`);
        }
        return VerifiedIssuer.fromSuiObjectData(res.data);
    }
}
exports.VerifiedIssuer = VerifiedIssuer;
//# sourceMappingURL=structs.js.map