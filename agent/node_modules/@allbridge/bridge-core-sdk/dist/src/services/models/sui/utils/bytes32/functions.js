"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isZero = isZero;
exports.data = data;
exports.empty = empty;
exports.new_ = new_;
exports.fromAddress = fromAddress;
exports.fromAsciiHex = fromAsciiHex;
exports.fromHex = fromHex;
exports.fromId = fromId;
exports.fromUid = fromUid;
exports.newFromPartial = newFromPartial;
exports.toAddress = toAddress;
exports.toAsciiHex = toAsciiHex;
exports.toHex = toHex;
exports.toId = toId;
// @ts-nocheck
const __1 = require("..");
const structs_1 = require("../../_dependencies/source/0x1/ascii/structs");
const structs_2 = require("../../_dependencies/source/0x1/string/structs");
const util_1 = require("../../_framework/util");
const structs_3 = require("../../sui/object/structs");
function isZero(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::is_zero`,
        arguments: [(0, util_1.obj)(tx, bytes)],
    });
}
function data(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::data`,
        arguments: [(0, util_1.obj)(tx, bytes)],
    });
}
function empty(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::empty`,
        arguments: [],
    });
}
function new_(tx, data) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::new`,
        arguments: [(0, util_1.pure)(tx, data, `vector<u8>`)],
    });
}
function fromAddress(tx, a) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::from_address`,
        arguments: [(0, util_1.pure)(tx, a, `address`)],
    });
}
function fromAsciiHex(tx, value) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::from_ascii_hex`,
        arguments: [(0, util_1.pure)(tx, value, `${structs_1.String.$typeName}`)],
    });
}
function fromHex(tx, value) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::from_hex`,
        arguments: [(0, util_1.pure)(tx, value, `${structs_2.String.$typeName}`)],
    });
}
function fromId(tx, id) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::from_id`,
        arguments: [(0, util_1.pure)(tx, id, `${structs_3.ID.$typeName}`)],
    });
}
function fromUid(tx, id) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::from_uid`,
        arguments: [(0, util_1.obj)(tx, id)],
    });
}
function newFromPartial(tx, partialData) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::new_from_partial`,
        arguments: [(0, util_1.pure)(tx, partialData, `vector<u8>`)],
    });
}
function toAddress(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::to_address`,
        arguments: [(0, util_1.obj)(tx, bytes)],
    });
}
function toAsciiHex(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::to_ascii_hex`,
        arguments: [(0, util_1.obj)(tx, bytes)],
    });
}
function toHex(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::to_hex`,
        arguments: [(0, util_1.obj)(tx, bytes)],
    });
}
function toId(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bytes32::to_id`,
        arguments: [(0, util_1.obj)(tx, bytes)],
    });
}
//# sourceMappingURL=functions.js.map