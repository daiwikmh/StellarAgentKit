import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export declare function bls12381(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function bn254(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface PrepareVerifyingKeyArgs {
    curve: TransactionObjectInput;
    verifyingKey: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function prepareVerifyingKey(tx: Transaction, args: PrepareVerifyingKeyArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface PrepareVerifyingKeyInternalArgs {
    curve: number | TransactionArgument;
    verifyingKey: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function prepareVerifyingKeyInternal(tx: Transaction, args: PrepareVerifyingKeyInternalArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function proofPointsFromBytes(tx: Transaction, bytes: Array<number | TransactionArgument> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function publicProofInputsFromBytes(tx: Transaction, bytes: Array<number | TransactionArgument> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface PvkFromBytesArgs {
    vkGammaAbcG1Bytes: Array<number | TransactionArgument> | TransactionArgument;
    alphaG1BetaG2Bytes: Array<number | TransactionArgument> | TransactionArgument;
    gammaG2NegPcBytes: Array<number | TransactionArgument> | TransactionArgument;
    deltaG2NegPcBytes: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function pvkFromBytes(tx: Transaction, args: PvkFromBytesArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function pvkToBytes(tx: Transaction, pvk: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface VerifyGroth16ProofArgs {
    curve: TransactionObjectInput;
    preparedVerifyingKey: TransactionObjectInput;
    publicProofInputs: TransactionObjectInput;
    proofPoints: TransactionObjectInput;
}
export declare function verifyGroth16Proof(tx: Transaction, args: VerifyGroth16ProofArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface VerifyGroth16ProofInternalArgs {
    curve: number | TransactionArgument;
    vkGammaAbcG1Bytes: Array<number | TransactionArgument> | TransactionArgument;
    alphaG1BetaG2Bytes: Array<number | TransactionArgument> | TransactionArgument;
    gammaG2NegPcBytes: Array<number | TransactionArgument> | TransactionArgument;
    deltaG2NegPcBytes: Array<number | TransactionArgument> | TransactionArgument;
    publicProofInputs: Array<number | TransactionArgument> | TransactionArgument;
    proofPoints: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function verifyGroth16ProofInternal(tx: Transaction, args: VerifyGroth16ProofInternalArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
