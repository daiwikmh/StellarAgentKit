"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.new_ = new_;
exports.balance = balance;
exports.decimals = decimals;
exports.deposit = deposit;
exports.withdraw = withdraw;
exports.state = state;
exports.init = init;
exports.rewards = rewards;
exports.claimAdminFee = claimAdminFee;
exports.claimReward = claimReward;
exports.setAdminFeeShareBp = setAdminFeeShareBp;
exports.setBalanceRatioMinBp = setBalanceRatioMinBp;
exports.adjustTotalLpAmount = adjustTotalLpAmount;
exports.canDeposit = canDeposit;
exports.canWithdraw = canWithdraw;
exports.feeShare = feeShare;
exports.fromSystemPrecision = fromSystemPrecision;
exports.getFee = getFee;
exports.setFeeShare = setFeeShare;
exports.startDeposit = startDeposit;
exports.startWithdraw = startWithdraw;
exports.stopDeposit = stopDeposit;
exports.stopWithdraw = stopWithdraw;
exports.swapFromVusd = swapFromVusd;
exports.swapToVusd = swapToVusd;
exports.toSystemPrecision = toSystemPrecision;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function new_(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::new`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.coinMetadata), (0, util_1.pure)(tx, args.a, `u64`), (0, util_1.pure)(tx, args.feeShareBp, `u64`)],
    });
}
function balance(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function decimals(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::decimals`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function deposit(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::deposit`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.userDeposit), (0, util_1.obj)(tx, args.coin)],
    });
}
function withdraw(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.userDeposit), (0, util_1.pure)(tx, args.amountLp, `u64`)],
    });
}
function state(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::state`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function init(tx) {
    return tx.moveCall({ target: `${__1.PUBLISHED_AT}::pool::init`, arguments: [] });
}
function rewards(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::rewards`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function claimAdminFee(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::claim_admin_fee`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function claimReward(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::claim_reward`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.userDeposit)],
    });
}
function setAdminFeeShareBp(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::set_admin_fee_share_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.pure)(tx, args.adminFeeShareBp, `u64`)],
    });
}
function setBalanceRatioMinBp(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::set_balance_ratio_min_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.pure)(tx, args.balanceRatioMinBp, `u64`)],
    });
}
function adjustTotalLpAmount(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::adjust_total_lp_amount`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.userDeposit)],
    });
}
function canDeposit(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::can_deposit`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function canWithdraw(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::can_withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function feeShare(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::fee_share`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function fromSystemPrecision(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::from_system_precision`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function getFee(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::get_fee`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.coin), (0, util_1.pure)(tx, args.zeroFee, `bool`)],
    });
}
function setFeeShare(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::set_fee_share`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.pure)(tx, args.feeShareBp, `u64`)],
    });
}
function startDeposit(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::start_deposit`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function startWithdraw(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::start_withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function stopDeposit(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::stop_deposit`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function stopWithdraw(tx, typeArg, pool) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::stop_withdraw`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, pool)],
    });
}
function swapFromVusd(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::swap_from_vusd`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.pool),
            (0, util_1.pure)(tx, args.vusdAmount, `u64`),
            (0, util_1.pure)(tx, args.receiveAmountMin, `u64`),
            (0, util_1.pure)(tx, args.zeroFee, `bool`),
        ],
    });
}
function swapToVusd(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::swap_to_vusd`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.obj)(tx, args.coin), (0, util_1.pure)(tx, args.zeroFee, `bool`)],
    });
}
function toSystemPrecision(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::pool::to_system_precision`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.pool), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
//# sourceMappingURL=functions.js.map