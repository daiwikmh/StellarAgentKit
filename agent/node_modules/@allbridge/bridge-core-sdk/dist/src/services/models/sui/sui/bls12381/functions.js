"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pairing = pairing;
exports.bls12381MinPkVerify = bls12381MinPkVerify;
exports.bls12381MinSigVerify = bls12381MinSigVerify;
exports.g1Add = g1Add;
exports.g1Div = g1Div;
exports.g1FromBytes = g1FromBytes;
exports.g1Generator = g1Generator;
exports.g1Identity = g1Identity;
exports.g1Mul = g1Mul;
exports.g1MultiScalarMultiplication = g1MultiScalarMultiplication;
exports.g1Neg = g1Neg;
exports.g1Sub = g1Sub;
exports.g1ToUncompressedG1 = g1ToUncompressedG1;
exports.g2Add = g2Add;
exports.g2Div = g2Div;
exports.g2FromBytes = g2FromBytes;
exports.g2Generator = g2Generator;
exports.g2Identity = g2Identity;
exports.g2Mul = g2Mul;
exports.g2MultiScalarMultiplication = g2MultiScalarMultiplication;
exports.g2Neg = g2Neg;
exports.g2Sub = g2Sub;
exports.gtAdd = gtAdd;
exports.gtDiv = gtDiv;
exports.gtGenerator = gtGenerator;
exports.gtIdentity = gtIdentity;
exports.gtMul = gtMul;
exports.gtNeg = gtNeg;
exports.gtSub = gtSub;
exports.hashToG1 = hashToG1;
exports.hashToG2 = hashToG2;
exports.scalarAdd = scalarAdd;
exports.scalarDiv = scalarDiv;
exports.scalarFromBytes = scalarFromBytes;
exports.scalarFromU64 = scalarFromU64;
exports.scalarInv = scalarInv;
exports.scalarMul = scalarMul;
exports.scalarNeg = scalarNeg;
exports.scalarOne = scalarOne;
exports.scalarSub = scalarSub;
exports.scalarZero = scalarZero;
exports.uncompressedG1Sum = uncompressedG1Sum;
exports.uncompressedG1ToG1 = uncompressedG1ToG1;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
const structs_1 = require("../group-ops/structs");
const structs_2 = require("./structs");
function pairing(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::pairing`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function bls12381MinPkVerify(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::bls12381_min_pk_verify`,
        arguments: [
            (0, util_1.pure)(tx, args.signature, `vector<u8>`),
            (0, util_1.pure)(tx, args.publicKey, `vector<u8>`),
            (0, util_1.pure)(tx, args.msg, `vector<u8>`),
        ],
    });
}
function bls12381MinSigVerify(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::bls12381_min_sig_verify`,
        arguments: [
            (0, util_1.pure)(tx, args.signature, `vector<u8>`),
            (0, util_1.pure)(tx, args.publicKey, `vector<u8>`),
            (0, util_1.pure)(tx, args.msg, `vector<u8>`),
        ],
    });
}
function g1Add(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_add`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function g1Div(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_div`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function g1FromBytes(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_from_bytes`,
        arguments: [(0, util_1.pure)(tx, bytes, `vector<u8>`)],
    });
}
function g1Generator(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_generator`,
        arguments: [],
    });
}
function g1Identity(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_identity`,
        arguments: [],
    });
}
function g1Mul(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_mul`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function g1MultiScalarMultiplication(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_multi_scalar_multiplication`,
        arguments: [
            (0, util_1.vector)(tx, `${structs_1.Element.$typeName}<${structs_2.Scalar.$typeName}>`, args.scalars),
            (0, util_1.vector)(tx, `${structs_1.Element.$typeName}<${structs_2.G1.$typeName}>`, args.elements),
        ],
    });
}
function g1Neg(tx, e) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_neg`,
        arguments: [(0, util_1.obj)(tx, e)],
    });
}
function g1Sub(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_sub`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function g1ToUncompressedG1(tx, e) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g1_to_uncompressed_g1`,
        arguments: [(0, util_1.obj)(tx, e)],
    });
}
function g2Add(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g2_add`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function g2Div(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g2_div`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function g2FromBytes(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g2_from_bytes`,
        arguments: [(0, util_1.pure)(tx, bytes, `vector<u8>`)],
    });
}
function g2Generator(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g2_generator`,
        arguments: [],
    });
}
function g2Identity(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g2_identity`,
        arguments: [],
    });
}
function g2Mul(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g2_mul`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function g2MultiScalarMultiplication(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g2_multi_scalar_multiplication`,
        arguments: [
            (0, util_1.vector)(tx, `${structs_1.Element.$typeName}<${structs_2.Scalar.$typeName}>`, args.scalars),
            (0, util_1.vector)(tx, `${structs_1.Element.$typeName}<${structs_2.G2.$typeName}>`, args.elements),
        ],
    });
}
function g2Neg(tx, e) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g2_neg`,
        arguments: [(0, util_1.obj)(tx, e)],
    });
}
function g2Sub(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::g2_sub`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function gtAdd(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::gt_add`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function gtDiv(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::gt_div`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function gtGenerator(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::gt_generator`,
        arguments: [],
    });
}
function gtIdentity(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::gt_identity`,
        arguments: [],
    });
}
function gtMul(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::gt_mul`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function gtNeg(tx, e) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::gt_neg`,
        arguments: [(0, util_1.obj)(tx, e)],
    });
}
function gtSub(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::gt_sub`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function hashToG1(tx, m) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::hash_to_g1`,
        arguments: [(0, util_1.pure)(tx, m, `vector<u8>`)],
    });
}
function hashToG2(tx, m) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::hash_to_g2`,
        arguments: [(0, util_1.pure)(tx, m, `vector<u8>`)],
    });
}
function scalarAdd(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_add`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function scalarDiv(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_div`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function scalarFromBytes(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_from_bytes`,
        arguments: [(0, util_1.pure)(tx, bytes, `vector<u8>`)],
    });
}
function scalarFromU64(tx, x) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_from_u64`,
        arguments: [(0, util_1.pure)(tx, x, `u64`)],
    });
}
function scalarInv(tx, e) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_inv`,
        arguments: [(0, util_1.obj)(tx, e)],
    });
}
function scalarMul(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_mul`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function scalarNeg(tx, e) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_neg`,
        arguments: [(0, util_1.obj)(tx, e)],
    });
}
function scalarOne(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_one`,
        arguments: [],
    });
}
function scalarSub(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_sub`,
        arguments: [(0, util_1.obj)(tx, args.e1), (0, util_1.obj)(tx, args.e2)],
    });
}
function scalarZero(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::scalar_zero`,
        arguments: [],
    });
}
function uncompressedG1Sum(tx, terms) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::uncompressed_g1_sum`,
        arguments: [(0, util_1.vector)(tx, `${structs_1.Element.$typeName}<${structs_2.UncompressedG1.$typeName}>`, terms)],
    });
}
function uncompressedG1ToG1(tx, e) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bls12381::uncompressed_g1_to_g1`,
        arguments: [(0, util_1.obj)(tx, e)],
    });
}
//# sourceMappingURL=functions.js.map