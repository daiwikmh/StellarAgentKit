{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/random/structs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,4BAGC;AAwKD,8CAGC;AAgLD,sCAGC;AA1XD,cAAc;AACd,kEAAoD;AACpD,sDAWkC;AAClC,gDAAyF;AAEzF,oCAAmC;AACnC,+CAAwC;AACxC,kDAAiD;AACjD,yCAAsC;AAEtC,6CAA4C;AAE5C,2EAA2E;AAE3E,SAAgB,QAAQ,CAAC,IAAY;IACnC,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,KAAK,GAAG,eAAO,kBAAkB,CAAC;AAC/C,CAAC;AASD,MAAa,MAAM;IACjB,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,eAAO,kBAAkB,CAAC;IACtC,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,EAAW,CAAC;IAEhC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;IAC7B,aAAa,CAAS;IACtB,SAAS,CAAK;IACd,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;IAE/B,EAAE,CAAe;IACjB,KAAK,CAAqB;IAEnC,YAAoB,QAAY,EAAE,MAAoB;QACpD,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,MAAM,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QAC7E,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;IAC5B,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,MAAM,CAAC,SAAS;YAC1B,YAAY,EAAE,IAAA,qBAAc,EAAC,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE,CAAW;YAC/D,QAAQ,EAAE,EAAQ;YAClB,SAAS,EAAE,MAAM,CAAC,UAAU;YAC5B,eAAe,EAAE,EAAE;YACnB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;YACtE,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC;YAChF,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YACnD,GAAG,EAAE,MAAM,CAAC,GAAG;YACf,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC;YAC1D,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC9D,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC;YAChF,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC;YAChF,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YACxE,GAAG,EAAE,CAAC,MAAoB,EAAE,EAAE;gBAC5B,OAAO,IAAI,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAChC,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,MAAM,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO,IAAA,iBAAO,EAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;IACnC,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,MAAM,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,SAAG,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC1B,EAAE,EAAE,aAAG,CAAC,GAAG;YACX,KAAK,EAAE,mBAAS,CAAC,GAAG;SACrB,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAA2B;QAC3C,OAAO,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAC1B,EAAE,EAAE,IAAA,0BAAgB,EAAC,aAAG,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC;YAC9C,KAAK,EAAE,IAAA,0BAAgB,EAAC,mBAAS,CAAC,OAAO,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC;SAC3D,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAqB;QAC9C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;QAED,OAAO,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAC1B,EAAE,EAAE,IAAA,mCAAyB,EAAC,aAAG,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5D,KAAK,EAAE,IAAA,mCAAyB,EAAC,mBAAS,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;SACzE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAgB;QAC7B,OAAO,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACnD,CAAC;IAED,WAAW;QACT,OAAO;YACL,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;SAChC,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,KAAU;QAC7B,OAAO,MAAM,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAC1B,EAAE,EAAE,IAAA,6BAAmB,EAAC,aAAG,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC;YAChD,KAAK,EAAE,IAAA,6BAAmB,EAAC,mBAAS,CAAC,OAAO,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC;SAC7D,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAyB;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,MAAM,CAAC,SAAS,EAAE,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAsB;QAC7C,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,yBAAyB,CAAC,CAAC;QACpF,CAAC;QACD,OAAO,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACnE,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACtD,CAAC;YAED,OAAO,MAAM,CAAC,OAAO,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACpD,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAiB,EAAE,EAAU;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,sCAAsC,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACjF,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAC7E,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,yBAAyB,CAAC,CAAC;QAC/D,CAAC;QAED,OAAO,MAAM,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;;AA1JH,wBA2JC;AAED,oFAAoF;AAEpF,SAAgB,iBAAiB,CAAC,IAAY;IAC5C,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,KAAK,GAAG,eAAO,2BAA2B,CAAC;AACxD,CAAC;AAUD,MAAa,eAAe;IAC1B,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,eAAO,2BAA2B,CAAC;IAC/C,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,EAAW,CAAC;IAEhC,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC;IACtC,aAAa,CAAS;IACtB,SAAS,CAAK;IACd,UAAU,GAAG,eAAe,CAAC,UAAU,CAAC;IAExC,IAAI,CAAwB;IAC5B,OAAO,CAAiB;IACxB,MAAM,CAAwB;IAEvC,YAAoB,QAAY,EAAE,MAA6B;QAC7D,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,eAAe,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QACtF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,eAAe,CAAC,SAAS;YACnC,YAAY,EAAE,IAAA,qBAAc,EAAC,eAAe,CAAC,SAAS,EAAE,GAAG,EAAE,CAAW;YACxE,QAAQ,EAAE,EAAQ;YAClB,SAAS,EAAE,eAAe,CAAC,UAAU;YACrC,eAAe,EAAE,EAAE;YACnB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,MAAM,CAAC;YAC/E,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,eAAe,CAAC,mBAAmB,CAAC,IAAI,CAAC;YACzF,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC;YAC5D,GAAG,EAAE,eAAe,CAAC,GAAG;YACxB,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC;YACnE,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC;YACvE,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACzF,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACzF,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YACjF,GAAG,EAAE,CAAC,MAA6B,EAAE,EAAE;gBACrC,OAAO,IAAI,eAAe,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YACzC,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,eAAe,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO,IAAA,iBAAO,EAAC,eAAe,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5C,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,eAAe,CAAC,OAAO,EAAE,CAAC;IACnC,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,SAAG,CAAC,MAAM,CAAC,iBAAiB,EAAE;YACnC,IAAI,EAAE,SAAG,CAAC,MAAM,CAAC,SAAG,CAAC,EAAE,EAAE,CAAC;YAC1B,OAAO,EAAE,SAAG,CAAC,GAAG,EAAE;YAClB,MAAM,EAAE,SAAG,CAAC,MAAM,CAAC,SAAG,CAAC,EAAE,EAAE,CAAC;SAC7B,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAA2B;QAC3C,OAAO,eAAe,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACnC,IAAI,EAAE,IAAA,0BAAgB,EAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC;YACzD,OAAO,EAAE,IAAA,0BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC;YAChD,MAAM,EAAE,IAAA,0BAAgB,EAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC;SAC9D,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAqB;QAC9C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAClC,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;QAChD,CAAC;QAED,OAAO,eAAe,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACnC,IAAI,EAAE,IAAA,mCAAyB,EAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACvE,OAAO,EAAE,IAAA,mCAAyB,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YAC9D,MAAM,EAAE,IAAA,mCAAyB,EAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;SAC5E,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAgB;QAC7B,OAAO,eAAe,CAAC,UAAU,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACrE,CAAC;IAED,WAAW;QACT,OAAO;YACL,IAAI,EAAE,IAAA,qBAAW,EAAe,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC;YACxD,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,MAAM,EAAE,IAAA,qBAAW,EAAe,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC;SAC7D,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,KAAU;QAC7B,OAAO,eAAe,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YACnC,IAAI,EAAE,IAAA,6BAAmB,EAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;YAC3D,OAAO,EAAE,IAAA,6BAAmB,EAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC;YAClD,MAAM,EAAE,IAAA,6BAAmB,EAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,MAAM,CAAC;SAChE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAyB;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,eAAe,CAAC,SAAS,EAAE,CAAC;YACjD,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAsB;QAC7C,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACrC,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,kCAAkC,CAAC,CAAC;QAC7F,CAAC;QACD,OAAO,eAAe,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC5E,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAC/D,CAAC;YAED,OAAO,eAAe,CAAC,OAAO,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7D,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,eAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACzD,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAiB,EAAE,EAAU;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,+CAA+C,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QAC1F,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACtF,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,kCAAkC,CAAC,CAAC;QACxE,CAAC;QAED,OAAO,eAAe,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;;AAjKH,0CAkKC;AAED,gFAAgF;AAEhF,SAAgB,aAAa,CAAC,IAAY;IACxC,IAAI,GAAG,IAAA,sBAAe,EAAC,IAAI,CAAC,CAAC;IAC7B,OAAO,IAAI,KAAK,GAAG,eAAO,uBAAuB,CAAC;AACpD,CAAC;AAWD,MAAa,WAAW;IACtB,aAAa,GAAG,IAAa,CAAC;IAE9B,MAAM,KAAK,SAAS;QAClB,OAAO,GAAG,eAAO,uBAAuB,CAAC;IAC3C,CAAC;IACD,MAAM,CAAU,cAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAU,UAAU,GAAG,EAAW,CAAC;IAEhC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;IAClC,aAAa,CAAS;IACtB,SAAS,CAAK;IACd,UAAU,GAAG,WAAW,CAAC,UAAU,CAAC;IAEpC,OAAO,CAAiB;IACxB,KAAK,CAAiB;IACtB,eAAe,CAAiB;IAChC,WAAW,CAAwB;IAE5C,YAAoB,QAAY,EAAE,MAAyB;QACzD,IAAI,CAAC,aAAa,GAAG,IAAA,qBAAc,EAAC,WAAW,CAAC,SAAS,EAAE,GAAG,QAAQ,CAAW,CAAC;QAClF,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAE1B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;QAC1B,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;QAC9C,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;IACxC,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,WAAW,CAAC,SAAS;YAC/B,YAAY,EAAE,IAAA,qBAAc,EAAC,WAAW,CAAC,SAAS,EAAE,GAAG,EAAE,CAAW;YACpE,QAAQ,EAAE,EAAQ;YAClB,SAAS,EAAE,WAAW,CAAC,UAAU;YACjC,eAAe,EAAE,EAAE;YACnB,UAAU,EAAE,CAAC,MAA2B,EAAE,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC;YAC3E,mBAAmB,EAAE,CAAC,IAAqB,EAAE,EAAE,CAAC,WAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC;YACrF,OAAO,EAAE,CAAC,IAAgB,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC;YACxD,GAAG,EAAE,WAAW,CAAC,GAAG;YACpB,aAAa,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,CAAC;YAC/D,QAAQ,EAAE,CAAC,IAAyB,EAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC;YACnE,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACrF,iBAAiB,EAAE,CAAC,OAAsB,EAAE,EAAE,CAAC,WAAW,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACrF,KAAK,EAAE,KAAK,EAAE,MAAiB,EAAE,EAAU,EAAE,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC;YAC7E,GAAG,EAAE,CAAC,MAAyB,EAAE,EAAE;gBACjC,OAAO,IAAI,WAAW,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YACrC,CAAC;YACD,IAAI,EAAE,oBAAoB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,KAAK,CAAC;QACV,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,OAAO;QACZ,OAAO,IAAA,iBAAO,EAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC;IACxC,CAAC;IACD,MAAM,KAAK,CAAC;QACV,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM,KAAK,GAAG;QACZ,OAAO,SAAG,CAAC,MAAM,CAAC,aAAa,EAAE;YAC/B,OAAO,EAAE,SAAG,CAAC,GAAG,EAAE;YAClB,KAAK,EAAE,SAAG,CAAC,GAAG,EAAE;YAChB,gBAAgB,EAAE,SAAG,CAAC,GAAG,EAAE;YAC3B,YAAY,EAAE,SAAG,CAAC,MAAM,CAAC,SAAG,CAAC,EAAE,EAAE,CAAC;SACnC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,MAA2B;QAC3C,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAC/B,OAAO,EAAE,IAAA,0BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC;YAChD,KAAK,EAAE,IAAA,0BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC;YAC5C,eAAe,EAAE,IAAA,0BAAgB,EAAC,KAAK,EAAE,MAAM,CAAC,gBAAgB,CAAC;YACjE,WAAW,EAAE,IAAA,0BAAgB,EAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,YAAY,CAAC;SACzE,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,mBAAmB,CAAC,IAAqB;QAC9C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAC5C,CAAC;QAED,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAC/B,OAAO,EAAE,IAAA,mCAAyB,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;YAC9D,KAAK,EAAE,IAAA,mCAAyB,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAC1D,eAAe,EAAE,IAAA,mCAAyB,EAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;YAC/E,WAAW,EAAE,IAAA,mCAAyB,EAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;SACvF,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,IAAgB;QAC7B,OAAO,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,WAAW;QACT,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YAChC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YAC5B,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;YAChD,WAAW,EAAE,IAAA,qBAAW,EAAe,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC;SACvE,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO;YACL,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,IAAI,CAAC,WAAW,EAAE;SACtB,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,KAAU;QAC7B,OAAO,WAAW,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;YAC/B,OAAO,EAAE,IAAA,6BAAmB,EAAC,KAAK,EAAE,KAAK,CAAC,OAAO,CAAC;YAClD,KAAK,EAAE,IAAA,6BAAmB,EAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC;YAC9C,eAAe,EAAE,IAAA,6BAAmB,EAAC,KAAK,EAAE,KAAK,CAAC,eAAe,CAAC;YAClE,WAAW,EAAE,IAAA,6BAAmB,EAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC;SAC1E,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,IAAyB;QACvC,IAAI,IAAI,CAAC,SAAS,KAAK,WAAW,CAAC,SAAS,EAAE,CAAC;YAC7C,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;QACvD,CAAC;QAED,OAAO,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,OAAsB;QAC7C,IAAI,OAAO,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QACD,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,aAAc,OAAO,CAAC,MAAc,CAAC,EAAE,8BAA8B,CAAC,CAAC;QACzF,CAAC;QACD,OAAO,WAAW,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;IAClD,CAAC;IAED,MAAM,CAAC,iBAAiB,CAAC,IAAmB;QAC1C,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;YACb,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;gBACxE,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC3D,CAAC;YAED,OAAO,WAAW,CAAC,OAAO,CAAC,IAAA,eAAO,EAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACzD,CAAC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,OAAO,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,IAAI,KAAK,CACb,+GAA+G,CAChH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,MAAiB,EAAE,EAAU;QAC9C,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACvE,IAAI,GAAG,CAAC,KAAK,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,2CAA2C,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACtF,CAAC;QACD,IAAI,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,KAAK,YAAY,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAClF,MAAM,IAAI,KAAK,CAAC,gBAAgB,EAAE,8BAA8B,CAAC,CAAC;QACpE,CAAC;QAED,OAAO,WAAW,CAAC,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IACjD,CAAC;;AAxKH,kCAyKC","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  fieldToJSON,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { Vector } from \"../../_framework/vector\";\nimport { PKG_V26 } from \"../index\";\nimport { UID } from \"../object/structs\";\nimport { Versioned } from \"../versioned/structs\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Random =============================== */\n\nexport function isRandom(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::random::Random`;\n}\n\nexport interface RandomFields {\n  id: ToField<UID>;\n  inner: ToField<Versioned>;\n}\n\nexport type RandomReified = Reified<Random, RandomFields>;\n\nexport class Random implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::random::Random`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Random.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Random.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly inner: ToField<Versioned>;\n\n  private constructor(typeArgs: [], fields: RandomFields) {\n    this.$fullTypeName = composeSuiType(Random.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.inner = fields.inner;\n  }\n\n  static reified(): RandomReified {\n    return {\n      typeName: Random.$typeName,\n      fullTypeName: composeSuiType(Random.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Random.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Random.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Random.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Random.fromBcs(data),\n      bcs: Random.bcs,\n      fromJSONField: (field: any) => Random.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Random.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Random.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Random.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Random.fetch(client, id),\n      new: (fields: RandomFields) => {\n        return new Random([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Random.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Random>> {\n    return phantom(Random.reified());\n  }\n  static get p() {\n    return Random.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Random\", {\n      id: UID.bcs,\n      inner: Versioned.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Random {\n    return Random.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      inner: decodeFromFields(Versioned.reified(), fields.inner),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Random {\n    if (!isRandom(item.type)) {\n      throw new Error(\"not a Random type\");\n    }\n\n    return Random.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      inner: decodeFromFieldsWithTypes(Versioned.reified(), item.fields.inner),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Random {\n    return Random.fromFields(Random.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      inner: this.inner.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Random {\n    return Random.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      inner: decodeFromJSONField(Versioned.reified(), field.inner),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): Random {\n    if (json.$typeName !== Random.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Random.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Random {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isRandom(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Random object`);\n    }\n    return Random.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Random {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isRandom(data.bcs.type)) {\n        throw new Error(`object at is not a Random object`);\n      }\n\n      return Random.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Random.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Random> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Random object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isRandom(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Random object`);\n    }\n\n    return Random.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== RandomGenerator =============================== */\n\nexport function isRandomGenerator(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::random::RandomGenerator`;\n}\n\nexport interface RandomGeneratorFields {\n  seed: ToField<Vector<\"u8\">>;\n  counter: ToField<\"u16\">;\n  buffer: ToField<Vector<\"u8\">>;\n}\n\nexport type RandomGeneratorReified = Reified<RandomGenerator, RandomGeneratorFields>;\n\nexport class RandomGenerator implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::random::RandomGenerator`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = RandomGenerator.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = RandomGenerator.$isPhantom;\n\n  readonly seed: ToField<Vector<\"u8\">>;\n  readonly counter: ToField<\"u16\">;\n  readonly buffer: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: RandomGeneratorFields) {\n    this.$fullTypeName = composeSuiType(RandomGenerator.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.seed = fields.seed;\n    this.counter = fields.counter;\n    this.buffer = fields.buffer;\n  }\n\n  static reified(): RandomGeneratorReified {\n    return {\n      typeName: RandomGenerator.$typeName,\n      fullTypeName: composeSuiType(RandomGenerator.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: RandomGenerator.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => RandomGenerator.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => RandomGenerator.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => RandomGenerator.fromBcs(data),\n      bcs: RandomGenerator.bcs,\n      fromJSONField: (field: any) => RandomGenerator.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => RandomGenerator.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => RandomGenerator.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => RandomGenerator.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => RandomGenerator.fetch(client, id),\n      new: (fields: RandomGeneratorFields) => {\n        return new RandomGenerator([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return RandomGenerator.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<RandomGenerator>> {\n    return phantom(RandomGenerator.reified());\n  }\n  static get p() {\n    return RandomGenerator.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"RandomGenerator\", {\n      seed: bcs.vector(bcs.u8()),\n      counter: bcs.u16(),\n      buffer: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): RandomGenerator {\n    return RandomGenerator.reified().new({\n      seed: decodeFromFields(reified.vector(\"u8\"), fields.seed),\n      counter: decodeFromFields(\"u16\", fields.counter),\n      buffer: decodeFromFields(reified.vector(\"u8\"), fields.buffer),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): RandomGenerator {\n    if (!isRandomGenerator(item.type)) {\n      throw new Error(\"not a RandomGenerator type\");\n    }\n\n    return RandomGenerator.reified().new({\n      seed: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.seed),\n      counter: decodeFromFieldsWithTypes(\"u16\", item.fields.counter),\n      buffer: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.buffer),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): RandomGenerator {\n    return RandomGenerator.fromFields(RandomGenerator.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      seed: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.seed),\n      counter: this.counter,\n      buffer: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.buffer),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): RandomGenerator {\n    return RandomGenerator.reified().new({\n      seed: decodeFromJSONField(reified.vector(\"u8\"), field.seed),\n      counter: decodeFromJSONField(\"u16\", field.counter),\n      buffer: decodeFromJSONField(reified.vector(\"u8\"), field.buffer),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): RandomGenerator {\n    if (json.$typeName !== RandomGenerator.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return RandomGenerator.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): RandomGenerator {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isRandomGenerator(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a RandomGenerator object`);\n    }\n    return RandomGenerator.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): RandomGenerator {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isRandomGenerator(data.bcs.type)) {\n        throw new Error(`object at is not a RandomGenerator object`);\n      }\n\n      return RandomGenerator.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return RandomGenerator.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<RandomGenerator> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching RandomGenerator object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isRandomGenerator(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a RandomGenerator object`);\n    }\n\n    return RandomGenerator.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== RandomInner =============================== */\n\nexport function isRandomInner(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::random::RandomInner`;\n}\n\nexport interface RandomInnerFields {\n  version: ToField<\"u64\">;\n  epoch: ToField<\"u64\">;\n  randomnessRound: ToField<\"u64\">;\n  randomBytes: ToField<Vector<\"u8\">>;\n}\n\nexport type RandomInnerReified = Reified<RandomInner, RandomInnerFields>;\n\nexport class RandomInner implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::random::RandomInner`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = RandomInner.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = RandomInner.$isPhantom;\n\n  readonly version: ToField<\"u64\">;\n  readonly epoch: ToField<\"u64\">;\n  readonly randomnessRound: ToField<\"u64\">;\n  readonly randomBytes: ToField<Vector<\"u8\">>;\n\n  private constructor(typeArgs: [], fields: RandomInnerFields) {\n    this.$fullTypeName = composeSuiType(RandomInner.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.version = fields.version;\n    this.epoch = fields.epoch;\n    this.randomnessRound = fields.randomnessRound;\n    this.randomBytes = fields.randomBytes;\n  }\n\n  static reified(): RandomInnerReified {\n    return {\n      typeName: RandomInner.$typeName,\n      fullTypeName: composeSuiType(RandomInner.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: RandomInner.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => RandomInner.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => RandomInner.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => RandomInner.fromBcs(data),\n      bcs: RandomInner.bcs,\n      fromJSONField: (field: any) => RandomInner.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => RandomInner.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => RandomInner.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => RandomInner.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => RandomInner.fetch(client, id),\n      new: (fields: RandomInnerFields) => {\n        return new RandomInner([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return RandomInner.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<RandomInner>> {\n    return phantom(RandomInner.reified());\n  }\n  static get p() {\n    return RandomInner.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"RandomInner\", {\n      version: bcs.u64(),\n      epoch: bcs.u64(),\n      randomness_round: bcs.u64(),\n      random_bytes: bcs.vector(bcs.u8()),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): RandomInner {\n    return RandomInner.reified().new({\n      version: decodeFromFields(\"u64\", fields.version),\n      epoch: decodeFromFields(\"u64\", fields.epoch),\n      randomnessRound: decodeFromFields(\"u64\", fields.randomness_round),\n      randomBytes: decodeFromFields(reified.vector(\"u8\"), fields.random_bytes),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): RandomInner {\n    if (!isRandomInner(item.type)) {\n      throw new Error(\"not a RandomInner type\");\n    }\n\n    return RandomInner.reified().new({\n      version: decodeFromFieldsWithTypes(\"u64\", item.fields.version),\n      epoch: decodeFromFieldsWithTypes(\"u64\", item.fields.epoch),\n      randomnessRound: decodeFromFieldsWithTypes(\"u64\", item.fields.randomness_round),\n      randomBytes: decodeFromFieldsWithTypes(reified.vector(\"u8\"), item.fields.random_bytes),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): RandomInner {\n    return RandomInner.fromFields(RandomInner.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      version: this.version.toString(),\n      epoch: this.epoch.toString(),\n      randomnessRound: this.randomnessRound.toString(),\n      randomBytes: fieldToJSON<Vector<\"u8\">>(`vector<u8>`, this.randomBytes),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): RandomInner {\n    return RandomInner.reified().new({\n      version: decodeFromJSONField(\"u64\", field.version),\n      epoch: decodeFromJSONField(\"u64\", field.epoch),\n      randomnessRound: decodeFromJSONField(\"u64\", field.randomnessRound),\n      randomBytes: decodeFromJSONField(reified.vector(\"u8\"), field.randomBytes),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): RandomInner {\n    if (json.$typeName !== RandomInner.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return RandomInner.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): RandomInner {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isRandomInner(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a RandomInner object`);\n    }\n    return RandomInner.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): RandomInner {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isRandomInner(data.bcs.type)) {\n        throw new Error(`object at is not a RandomInner object`);\n      }\n\n      return RandomInner.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return RandomInner.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<RandomInner> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching RandomInner object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isRandomInner(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a RandomInner object`);\n    }\n\n    return RandomInner.fromSuiObjectData(res.data);\n  }\n}\n"]}