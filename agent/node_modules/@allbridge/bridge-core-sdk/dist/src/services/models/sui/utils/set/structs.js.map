{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/utils/set/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n  ToTypeStr as ToPhantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { Table } from \"../../sui/table/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Empty =============================== */\n\nexport function isEmpty(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::set::Empty`;\n}\n\nexport interface EmptyFields {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type EmptyReified = Reified<Empty, EmptyFields>;\n\nexport class Empty implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::set::Empty`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Empty.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Empty.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [], fields: EmptyFields) {\n    this.$fullTypeName = composeSuiType(Empty.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified(): EmptyReified {\n    return {\n      typeName: Empty.$typeName,\n      fullTypeName: composeSuiType(Empty.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Empty.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Empty.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Empty.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Empty.fromBcs(data),\n      bcs: Empty.bcs,\n      fromJSONField: (field: any) => Empty.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Empty.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Empty.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Empty.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Empty.fetch(client, id),\n      new: (fields: EmptyFields) => {\n        return new Empty([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Empty.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Empty>> {\n    return phantom(Empty.reified());\n  }\n  static get p() {\n    return Empty.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Empty\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Empty {\n    return Empty.reified().new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Empty {\n    if (!isEmpty(item.type)) {\n      throw new Error(\"not a Empty type\");\n    }\n\n    return Empty.reified().new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Empty {\n    return Empty.fromFields(Empty.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Empty {\n    return Empty.reified().new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): Empty {\n    if (json.$typeName !== Empty.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Empty.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Empty {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isEmpty(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Empty object`);\n    }\n    return Empty.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Empty {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isEmpty(data.bcs.type)) {\n        throw new Error(`object at is not a Empty object`);\n      }\n\n      return Empty.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Empty.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Empty> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Empty object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isEmpty(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Empty object`);\n    }\n\n    return Empty.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== Set =============================== */\n\nexport function isSet(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::set::Set` + \"<\");\n}\n\nexport interface SetFields<T extends PhantomTypeArgument> {\n  items: ToField<Table<T, ToPhantom<Empty>>>;\n}\n\nexport type SetReified<T extends PhantomTypeArgument> = Reified<Set<T>, SetFields<T>>;\n\nexport class Set<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::set::Set`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = Set.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = Set.$isPhantom;\n\n  readonly items: ToField<Table<T, ToPhantom<Empty>>>;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: SetFields<T>) {\n    this.$fullTypeName = composeSuiType(Set.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.items = fields.items;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): SetReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: Set.$typeName,\n      fullTypeName: composeSuiType(Set.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: Set.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => Set.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Set.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => Set.fromBcs(T, data),\n      bcs: Set.bcs,\n      fromJSONField: (field: any) => Set.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => Set.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => Set.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => Set.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => Set.fetch(client, T, id),\n      new: (fields: SetFields<ToPhantomTypeArgument<T>>) => {\n        return new Set([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Set.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<Set<ToPhantomTypeArgument<T>>>> {\n    return phantom(Set.reified(T));\n  }\n  static get p() {\n    return Set.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Set\", {\n      items: Table.bcs,\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): Set<ToPhantomTypeArgument<T>> {\n    return Set.reified(typeArg).new({\n      items: decodeFromFields(Table.reified(typeArg, reified.phantom(Empty.reified())), fields.items),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): Set<ToPhantomTypeArgument<T>> {\n    if (!isSet(item.type)) {\n      throw new Error(\"not a Set type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Set.reified(typeArg).new({\n      items: decodeFromFieldsWithTypes(Table.reified(typeArg, reified.phantom(Empty.reified())), item.fields.items),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): Set<ToPhantomTypeArgument<T>> {\n    return Set.fromFields(typeArg, Set.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      items: this.items.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): Set<ToPhantomTypeArgument<T>> {\n    return Set.reified(typeArg).new({\n      items: decodeFromJSONField(Table.reified(typeArg, reified.phantom(Empty.reified())), field.items),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): Set<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== Set.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Set.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Set.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): Set<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isSet(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Set object`);\n    }\n    return Set.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): Set<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isSet(data.bcs.type)) {\n        throw new Error(`object at is not a Set object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Set.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Set.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<Set<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Set object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isSet(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Set object`);\n    }\n\n    return Set.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}