import { PhantomReified, PhantomToTypeStr, PhantomTypeArgument, Reified, StructClass, ToField, ToPhantomTypeArgument, ToTypeStr } from "../../_framework/reified";
import { FieldsWithTypes } from "../../_framework/util";
import { Balance } from "../../sui/balance/structs";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isPoolRewards(type: string): boolean;
export interface PoolRewardsFields<T extends PhantomTypeArgument> {
    accRewardPerShareP: ToField<"u128">;
    adminFeeShareBp: ToField<"u64">;
    adminFee: ToField<Balance<T>>;
    rewards: ToField<Balance<T>>;
    lpSupply: ToField<"u64">;
}
export type PoolRewardsReified<T extends PhantomTypeArgument> = Reified<PoolRewards<T>, PoolRewardsFields<T>>;
export declare class PoolRewards<T extends PhantomTypeArgument> implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 1;
    static readonly $isPhantom: readonly [true];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [PhantomToTypeStr<T>];
    readonly $isPhantom: readonly [true];
    readonly accRewardPerShareP: ToField<"u128">;
    readonly adminFeeShareBp: ToField<"u64">;
    readonly adminFee: ToField<Balance<T>>;
    readonly rewards: ToField<Balance<T>>;
    readonly lpSupply: ToField<"u64">;
    private constructor();
    static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): PoolRewardsReified<ToPhantomTypeArgument<T>>;
    static get r(): typeof PoolRewards.reified;
    static phantom<T extends PhantomReified<PhantomTypeArgument>>(T: T): PhantomReified<ToTypeStr<PoolRewards<ToPhantomTypeArgument<T>>>>;
    static get p(): typeof PoolRewards.phantom;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        acc_reward_per_share_p: string;
        admin_fee_share_bp: string;
        admin_fee: {
            value: string;
        };
        rewards: {
            value: string;
        };
        lp_supply: string;
    }, {
        acc_reward_per_share_p: string | number | bigint;
        admin_fee_share_bp: string | number | bigint;
        admin_fee: {
            value: string | number | bigint;
        };
        rewards: {
            value: string | number | bigint;
        };
        lp_supply: string | number | bigint;
    }>;
    static fromFields<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, fields: Record<string, any>): PoolRewards<ToPhantomTypeArgument<T>>;
    static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, item: FieldsWithTypes): PoolRewards<ToPhantomTypeArgument<T>>;
    static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: Uint8Array): PoolRewards<ToPhantomTypeArgument<T>>;
    toJSONField(): {
        accRewardPerShareP: string;
        adminFeeShareBp: string;
        adminFee: {
            value: string;
        };
        rewards: {
            value: string;
        };
        lpSupply: string;
    };
    toJSON(): {
        accRewardPerShareP: string;
        adminFeeShareBp: string;
        adminFee: {
            value: string;
        };
        rewards: {
            value: string;
        };
        lpSupply: string;
        $typeName: string;
        $typeArgs: [PhantomToTypeStr<T>];
    };
    static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, field: any): PoolRewards<ToPhantomTypeArgument<T>>;
    static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, json: Record<string, any>): PoolRewards<ToPhantomTypeArgument<T>>;
    static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, content: SuiParsedData): PoolRewards<ToPhantomTypeArgument<T>>;
    static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(typeArg: T, data: SuiObjectData): PoolRewards<ToPhantomTypeArgument<T>>;
    static fetch<T extends PhantomReified<PhantomTypeArgument>>(client: SuiClient, typeArg: T, id: string): Promise<PoolRewards<ToPhantomTypeArgument<T>>>;
}
