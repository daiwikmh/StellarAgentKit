"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bridge = bridge;
exports.id = id;
exports.authenticatorState = authenticatorState;
exports.borrowId = borrowId;
exports.borrowUid = borrowUid;
exports.clock = clock;
exports.delete_ = delete_;
exports.deleteImpl = deleteImpl;
exports.idAddress = idAddress;
exports.idBytes = idBytes;
exports.idFromAddress = idFromAddress;
exports.idFromBytes = idFromBytes;
exports.idToAddress = idToAddress;
exports.idToBytes = idToBytes;
exports.new_ = new_;
exports.newUidFromHash = newUidFromHash;
exports.randomnessState = randomnessState;
exports.recordNewUid = recordNewUid;
exports.suiDenyListObjectId = suiDenyListObjectId;
exports.suiSystemState = suiSystemState;
exports.uidAsInner = uidAsInner;
exports.uidToAddress = uidToAddress;
exports.uidToBytes = uidToBytes;
exports.uidToInner = uidToInner;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
const structs_1 = require("./structs");
function bridge(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::bridge`,
        arguments: [],
    });
}
function id(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::id`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function authenticatorState(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::authenticator_state`,
        arguments: [],
    });
}
function borrowId(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::borrow_id`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function borrowUid(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::borrow_uid`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function clock(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::clock`,
        arguments: [],
    });
}
function delete_(tx, id) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::delete`,
        arguments: [(0, util_1.obj)(tx, id)],
    });
}
function deleteImpl(tx, id) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::delete_impl`,
        arguments: [(0, util_1.pure)(tx, id, `address`)],
    });
}
function idAddress(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::id_address`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function idBytes(tx, typeArg, obj) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::id_bytes`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.generic)(tx, `${typeArg}`, obj)],
    });
}
function idFromAddress(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::id_from_address`,
        arguments: [(0, util_1.pure)(tx, bytes, `address`)],
    });
}
function idFromBytes(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::id_from_bytes`,
        arguments: [(0, util_1.pure)(tx, bytes, `vector<u8>`)],
    });
}
function idToAddress(tx, id) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::id_to_address`,
        arguments: [(0, util_1.pure)(tx, id, `${structs_1.ID.$typeName}`)],
    });
}
function idToBytes(tx, id) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::id_to_bytes`,
        arguments: [(0, util_1.pure)(tx, id, `${structs_1.ID.$typeName}`)],
    });
}
function new_(tx) {
    return tx.moveCall({ target: `${__1.PUBLISHED_AT}::object::new`, arguments: [] });
}
function newUidFromHash(tx, bytes) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::new_uid_from_hash`,
        arguments: [(0, util_1.pure)(tx, bytes, `address`)],
    });
}
function randomnessState(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::randomness_state`,
        arguments: [],
    });
}
function recordNewUid(tx, id) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::record_new_uid`,
        arguments: [(0, util_1.pure)(tx, id, `address`)],
    });
}
function suiDenyListObjectId(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::sui_deny_list_object_id`,
        arguments: [],
    });
}
function suiSystemState(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::sui_system_state`,
        arguments: [],
    });
}
function uidAsInner(tx, uid) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::uid_as_inner`,
        arguments: [(0, util_1.obj)(tx, uid)],
    });
}
function uidToAddress(tx, uid) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::uid_to_address`,
        arguments: [(0, util_1.obj)(tx, uid)],
    });
}
function uidToBytes(tx, uid) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::uid_to_bytes`,
        arguments: [(0, util_1.obj)(tx, uid)],
    });
}
function uidToInner(tx, uid) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::object::uid_to_inner`,
        arguments: [(0, util_1.obj)(tx, uid)],
    });
}
//# sourceMappingURL=functions.js.map