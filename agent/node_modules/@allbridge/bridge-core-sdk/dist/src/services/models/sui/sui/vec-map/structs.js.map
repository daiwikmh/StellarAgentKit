{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/vec-map/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  fieldToJSON,\n  phantom,\n  toBcs,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { Vector } from \"../../_framework/vector\";\nimport { PKG_V26 } from \"../index\";\nimport { BcsType, bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Entry =============================== */\n\nexport function isEntry(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::vec_map::Entry` + \"<\");\n}\n\nexport interface EntryFields<K extends TypeArgument, V extends TypeArgument> {\n  key: ToField<K>;\n  value: ToField<V>;\n}\n\nexport type EntryReified<K extends TypeArgument, V extends TypeArgument> = Reified<Entry<K, V>, EntryFields<K, V>>;\n\nexport class Entry<K extends TypeArgument, V extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::vec_map::Entry`;\n  }\n  static readonly $numTypeParams = 2;\n  static readonly $isPhantom = [false, false] as const;\n\n  readonly $typeName = Entry.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<K>, ToTypeStr<V>];\n  readonly $isPhantom = Entry.$isPhantom;\n\n  readonly key: ToField<K>;\n  readonly value: ToField<V>;\n\n  private constructor(typeArgs: [ToTypeStr<K>, ToTypeStr<V>], fields: EntryFields<K, V>) {\n    this.$fullTypeName = composeSuiType(Entry.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.key = fields.key;\n    this.value = fields.value;\n  }\n\n  static reified<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    K: K,\n    V: V\n  ): EntryReified<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return {\n      typeName: Entry.$typeName,\n      fullTypeName: composeSuiType(Entry.$typeName, ...[extractType(K), extractType(V)]) as string,\n      typeArgs: [extractType(K), extractType(V)] as [ToTypeStr<ToTypeArgument<K>>, ToTypeStr<ToTypeArgument<V>>],\n      isPhantom: Entry.$isPhantom,\n      reifiedTypeArgs: [K, V],\n      fromFields: (fields: Record<string, any>) => Entry.fromFields([K, V], fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Entry.fromFieldsWithTypes([K, V], item),\n      fromBcs: (data: Uint8Array) => Entry.fromBcs([K, V], data),\n      bcs: Entry.bcs(toBcs(K), toBcs(V)),\n      fromJSONField: (field: any) => Entry.fromJSONField([K, V], field),\n      fromJSON: (json: Record<string, any>) => Entry.fromJSON([K, V], json),\n      fromSuiParsedData: (content: SuiParsedData) => Entry.fromSuiParsedData([K, V], content),\n      fromSuiObjectData: (content: SuiObjectData) => Entry.fromSuiObjectData([K, V], content),\n      fetch: async (client: SuiClient, id: string) => Entry.fetch(client, [K, V], id),\n      new: (fields: EntryFields<ToTypeArgument<K>, ToTypeArgument<V>>) => {\n        return new Entry([extractType(K), extractType(V)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Entry.reified;\n  }\n\n  static phantom<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    K: K,\n    V: V\n  ): PhantomReified<ToTypeStr<Entry<ToTypeArgument<K>, ToTypeArgument<V>>>> {\n    return phantom(Entry.reified(K, V));\n  }\n  static get p() {\n    return Entry.phantom;\n  }\n\n  static get bcs() {\n    return <K extends BcsType<any>, V extends BcsType<any>>(K: K, V: V) =>\n      bcs.struct(`Entry<${K.name}, ${V.name}>`, {\n        key: K,\n        value: V,\n      });\n  }\n\n  static fromFields<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    fields: Record<string, any>\n  ): Entry<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return Entry.reified(typeArgs[0], typeArgs[1]).new({\n      key: decodeFromFields(typeArgs[0], fields.key),\n      value: decodeFromFields(typeArgs[1], fields.value),\n    });\n  }\n\n  static fromFieldsWithTypes<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    item: FieldsWithTypes\n  ): Entry<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (!isEntry(item.type)) {\n      throw new Error(\"not a Entry type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, typeArgs);\n\n    return Entry.reified(typeArgs[0], typeArgs[1]).new({\n      key: decodeFromFieldsWithTypes(typeArgs[0], item.fields.key),\n      value: decodeFromFieldsWithTypes(typeArgs[1], item.fields.value),\n    });\n  }\n\n  static fromBcs<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    data: Uint8Array\n  ): Entry<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return Entry.fromFields(typeArgs, Entry.bcs(toBcs(typeArgs[0]), toBcs(typeArgs[1])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      key: fieldToJSON<K>(this.$typeArgs[0], this.key),\n      value: fieldToJSON<V>(this.$typeArgs[1], this.value),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    field: any\n  ): Entry<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return Entry.reified(typeArgs[0], typeArgs[1]).new({\n      key: decodeFromJSONField(typeArgs[0], field.key),\n      value: decodeFromJSONField(typeArgs[1], field.value),\n    });\n  }\n\n  static fromJSON<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    json: Record<string, any>\n  ): Entry<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (json.$typeName !== Entry.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Entry.$typeName, ...typeArgs.map(extractType)), json.$typeArgs, typeArgs);\n\n    return Entry.fromJSONField(typeArgs, json);\n  }\n\n  static fromSuiParsedData<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    content: SuiParsedData\n  ): Entry<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isEntry(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Entry object`);\n    }\n    return Entry.fromFieldsWithTypes(typeArgs, content);\n  }\n\n  static fromSuiObjectData<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    data: SuiObjectData\n  ): Entry<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isEntry(data.bcs.type)) {\n        throw new Error(`object at is not a Entry object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 2) {\n        throw new Error(`type argument mismatch: expected 2 type arguments but got ${gotTypeArgs.length}`);\n      }\n      for (let i = 0; i < 2; i++) {\n        const gotTypeArg = compressSuiType(gotTypeArgs[i]);\n        const expectedTypeArg = compressSuiType(extractType(typeArgs[i]));\n        if (gotTypeArg !== expectedTypeArg) {\n          throw new Error(\n            `type argument mismatch at position ${i}: expected '${expectedTypeArg}' but got '${gotTypeArg}'`\n          );\n        }\n      }\n\n      return Entry.fromBcs(typeArgs, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Entry.fromSuiParsedData(typeArgs, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArgs: [K, V],\n    id: string\n  ): Promise<Entry<ToTypeArgument<K>, ToTypeArgument<V>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Entry object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isEntry(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Entry object`);\n    }\n\n    return Entry.fromSuiObjectData(typeArgs, res.data);\n  }\n}\n\n/* ============================== VecMap =============================== */\n\nexport function isVecMap(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::vec_map::VecMap` + \"<\");\n}\n\nexport interface VecMapFields<K extends TypeArgument, V extends TypeArgument> {\n  contents: ToField<Vector<Entry<K, V>>>;\n}\n\nexport type VecMapReified<K extends TypeArgument, V extends TypeArgument> = Reified<VecMap<K, V>, VecMapFields<K, V>>;\n\nexport class VecMap<K extends TypeArgument, V extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::vec_map::VecMap`;\n  }\n  static readonly $numTypeParams = 2;\n  static readonly $isPhantom = [false, false] as const;\n\n  readonly $typeName = VecMap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<K>, ToTypeStr<V>];\n  readonly $isPhantom = VecMap.$isPhantom;\n\n  readonly contents: ToField<Vector<Entry<K, V>>>;\n\n  private constructor(typeArgs: [ToTypeStr<K>, ToTypeStr<V>], fields: VecMapFields<K, V>) {\n    this.$fullTypeName = composeSuiType(VecMap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.contents = fields.contents;\n  }\n\n  static reified<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    K: K,\n    V: V\n  ): VecMapReified<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return {\n      typeName: VecMap.$typeName,\n      fullTypeName: composeSuiType(VecMap.$typeName, ...[extractType(K), extractType(V)]) as string,\n      typeArgs: [extractType(K), extractType(V)] as [ToTypeStr<ToTypeArgument<K>>, ToTypeStr<ToTypeArgument<V>>],\n      isPhantom: VecMap.$isPhantom,\n      reifiedTypeArgs: [K, V],\n      fromFields: (fields: Record<string, any>) => VecMap.fromFields([K, V], fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => VecMap.fromFieldsWithTypes([K, V], item),\n      fromBcs: (data: Uint8Array) => VecMap.fromBcs([K, V], data),\n      bcs: VecMap.bcs(toBcs(K), toBcs(V)),\n      fromJSONField: (field: any) => VecMap.fromJSONField([K, V], field),\n      fromJSON: (json: Record<string, any>) => VecMap.fromJSON([K, V], json),\n      fromSuiParsedData: (content: SuiParsedData) => VecMap.fromSuiParsedData([K, V], content),\n      fromSuiObjectData: (content: SuiObjectData) => VecMap.fromSuiObjectData([K, V], content),\n      fetch: async (client: SuiClient, id: string) => VecMap.fetch(client, [K, V], id),\n      new: (fields: VecMapFields<ToTypeArgument<K>, ToTypeArgument<V>>) => {\n        return new VecMap([extractType(K), extractType(V)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return VecMap.reified;\n  }\n\n  static phantom<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    K: K,\n    V: V\n  ): PhantomReified<ToTypeStr<VecMap<ToTypeArgument<K>, ToTypeArgument<V>>>> {\n    return phantom(VecMap.reified(K, V));\n  }\n  static get p() {\n    return VecMap.phantom;\n  }\n\n  static get bcs() {\n    return <K extends BcsType<any>, V extends BcsType<any>>(K: K, V: V) =>\n      bcs.struct(`VecMap<${K.name}, ${V.name}>`, {\n        contents: bcs.vector(Entry.bcs(K, V)),\n      });\n  }\n\n  static fromFields<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    fields: Record<string, any>\n  ): VecMap<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return VecMap.reified(typeArgs[0], typeArgs[1]).new({\n      contents: decodeFromFields(reified.vector(Entry.reified(typeArgs[0], typeArgs[1])), fields.contents),\n    });\n  }\n\n  static fromFieldsWithTypes<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    item: FieldsWithTypes\n  ): VecMap<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (!isVecMap(item.type)) {\n      throw new Error(\"not a VecMap type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, typeArgs);\n\n    return VecMap.reified(typeArgs[0], typeArgs[1]).new({\n      contents: decodeFromFieldsWithTypes(\n        reified.vector(Entry.reified(typeArgs[0], typeArgs[1])),\n        item.fields.contents\n      ),\n    });\n  }\n\n  static fromBcs<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    data: Uint8Array\n  ): VecMap<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return VecMap.fromFields(typeArgs, VecMap.bcs(toBcs(typeArgs[0]), toBcs(typeArgs[1])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      contents: fieldToJSON<Vector<Entry<K, V>>>(\n        `vector<${Entry.$typeName}<${this.$typeArgs[0]}, ${this.$typeArgs[1]}>>`,\n        this.contents\n      ),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    field: any\n  ): VecMap<ToTypeArgument<K>, ToTypeArgument<V>> {\n    return VecMap.reified(typeArgs[0], typeArgs[1]).new({\n      contents: decodeFromJSONField(reified.vector(Entry.reified(typeArgs[0], typeArgs[1])), field.contents),\n    });\n  }\n\n  static fromJSON<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    json: Record<string, any>\n  ): VecMap<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (json.$typeName !== VecMap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(\n      composeSuiType(VecMap.$typeName, ...typeArgs.map(extractType)),\n      json.$typeArgs,\n      typeArgs\n    );\n\n    return VecMap.fromJSONField(typeArgs, json);\n  }\n\n  static fromSuiParsedData<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    content: SuiParsedData\n  ): VecMap<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isVecMap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a VecMap object`);\n    }\n    return VecMap.fromFieldsWithTypes(typeArgs, content);\n  }\n\n  static fromSuiObjectData<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    typeArgs: [K, V],\n    data: SuiObjectData\n  ): VecMap<ToTypeArgument<K>, ToTypeArgument<V>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isVecMap(data.bcs.type)) {\n        throw new Error(`object at is not a VecMap object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 2) {\n        throw new Error(`type argument mismatch: expected 2 type arguments but got ${gotTypeArgs.length}`);\n      }\n      for (let i = 0; i < 2; i++) {\n        const gotTypeArg = compressSuiType(gotTypeArgs[i]);\n        const expectedTypeArg = compressSuiType(extractType(typeArgs[i]));\n        if (gotTypeArg !== expectedTypeArg) {\n          throw new Error(\n            `type argument mismatch at position ${i}: expected '${expectedTypeArg}' but got '${gotTypeArg}'`\n          );\n        }\n      }\n\n      return VecMap.fromBcs(typeArgs, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return VecMap.fromSuiParsedData(typeArgs, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<K extends Reified<TypeArgument, any>, V extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArgs: [K, V],\n    id: string\n  ): Promise<VecMap<ToTypeArgument<K>, ToTypeArgument<V>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching VecMap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isVecMap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a VecMap object`);\n    }\n\n    return VecMap.fromSuiObjectData(typeArgs, res.data);\n  }\n}\n"]}