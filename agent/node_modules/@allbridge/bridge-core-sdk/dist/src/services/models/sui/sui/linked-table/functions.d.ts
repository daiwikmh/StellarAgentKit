import { GenericArg } from "../../_framework/util";
import { Transaction, TransactionObjectInput } from "@mysten/sui/transactions";
export interface BorrowArgs {
    table: TransactionObjectInput;
    k: GenericArg;
}
export declare function borrow(tx: Transaction, typeArgs: [string, string], args: BorrowArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface BorrowMutArgs {
    table: TransactionObjectInput;
    k: GenericArg;
}
export declare function borrowMut(tx: Transaction, typeArgs: [string, string], args: BorrowMutArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ContainsArgs {
    table: TransactionObjectInput;
    k: GenericArg;
}
export declare function contains(tx: Transaction, typeArgs: [string, string], args: ContainsArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function destroyEmpty(tx: Transaction, typeArgs: [string, string], table: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function isEmpty(tx: Transaction, typeArgs: [string, string], table: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function length(tx: Transaction, typeArgs: [string, string], table: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function popBack(tx: Transaction, typeArgs: [string, string], table: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface PushBackArgs {
    table: TransactionObjectInput;
    k: GenericArg;
    value: GenericArg;
}
export declare function pushBack(tx: Transaction, typeArgs: [string, string], args: PushBackArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface RemoveArgs {
    table: TransactionObjectInput;
    k: GenericArg;
}
export declare function remove(tx: Transaction, typeArgs: [string, string], args: RemoveArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function new_(tx: Transaction, typeArgs: [string, string]): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function drop(tx: Transaction, typeArgs: [string, string], table: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function back(tx: Transaction, typeArgs: [string, string], table: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function front(tx: Transaction, typeArgs: [string, string], table: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface NextArgs {
    table: TransactionObjectInput;
    k: GenericArg;
}
export declare function next(tx: Transaction, typeArgs: [string, string], args: NextArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function popFront(tx: Transaction, typeArgs: [string, string], table: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface PrevArgs {
    table: TransactionObjectInput;
    k: GenericArg;
}
export declare function prev(tx: Transaction, typeArgs: [string, string], args: PrevArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface PushFrontArgs {
    table: TransactionObjectInput;
    k: GenericArg;
    value: GenericArg;
}
export declare function pushFront(tx: Transaction, typeArgs: [string, string], args: PushFrontArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
