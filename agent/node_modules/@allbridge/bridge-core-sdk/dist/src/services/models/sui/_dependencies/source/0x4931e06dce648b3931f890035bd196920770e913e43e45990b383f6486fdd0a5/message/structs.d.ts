import * as reified from "../../../../_framework/reified";
import { PhantomReified, Reified, StructClass, ToField, ToTypeStr } from "../../../../_framework/reified";
import { FieldsWithTypes } from "../../../../_framework/util";
import { Vector } from "../../../../_framework/vector";
import { SuiClient, SuiObjectData, SuiParsedData } from "@mysten/sui/client";
export declare function isMessage(type: string): boolean;
export interface MessageFields {
    version: ToField<"u32">;
    sourceDomain: ToField<"u32">;
    destinationDomain: ToField<"u32">;
    nonce: ToField<"u64">;
    sender: ToField<"address">;
    recipient: ToField<"address">;
    destinationCaller: ToField<"address">;
    messageBody: ToField<Vector<"u8">>;
}
export type MessageReified = Reified<Message, MessageFields>;
export declare class Message implements StructClass {
    __StructClass: true;
    static get $typeName(): string;
    static readonly $numTypeParams = 0;
    static readonly $isPhantom: readonly [];
    readonly $typeName: string;
    readonly $fullTypeName: string;
    readonly $typeArgs: [];
    readonly $isPhantom: readonly [];
    readonly version: ToField<"u32">;
    readonly sourceDomain: ToField<"u32">;
    readonly destinationDomain: ToField<"u32">;
    readonly nonce: ToField<"u64">;
    readonly sender: ToField<"address">;
    readonly recipient: ToField<"address">;
    readonly destinationCaller: ToField<"address">;
    readonly messageBody: ToField<Vector<"u8">>;
    private constructor();
    static reified(): MessageReified;
    static get r(): reified.StructClassReified<Message, MessageFields>;
    static phantom(): PhantomReified<ToTypeStr<Message>>;
    static get p(): reified.PhantomReified<string>;
    static get bcs(): import("@mysten/sui/dist/cjs/bcs").BcsType<{
        version: number;
        source_domain: number;
        destination_domain: number;
        nonce: string;
        sender: string;
        recipient: string;
        destination_caller: string;
        message_body: number[];
    }, {
        version: number;
        source_domain: number;
        destination_domain: number;
        nonce: string | number | bigint;
        sender: string;
        recipient: string;
        destination_caller: string;
        message_body: Iterable<number> & {
            length: number;
        };
    }>;
    static fromFields(fields: Record<string, any>): Message;
    static fromFieldsWithTypes(item: FieldsWithTypes): Message;
    static fromBcs(data: Uint8Array): Message;
    toJSONField(): {
        version: number;
        sourceDomain: number;
        destinationDomain: number;
        nonce: string;
        sender: string;
        recipient: string;
        destinationCaller: string;
        messageBody: number[];
    };
    toJSON(): {
        version: number;
        sourceDomain: number;
        destinationDomain: number;
        nonce: string;
        sender: string;
        recipient: string;
        destinationCaller: string;
        messageBody: number[];
        $typeName: string;
        $typeArgs: [];
    };
    static fromJSONField(field: any): Message;
    static fromJSON(json: Record<string, any>): Message;
    static fromSuiParsedData(content: SuiParsedData): Message;
    static fromSuiObjectData(data: SuiObjectData): Message;
    static fetch(client: SuiClient, id: string): Promise<Message>;
}
