{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/zklogin-verified-issuer/functions.ts"],"names":[],"mappings":";;AAMA,0BAKC;AAED,sBAKC;AAED,wBAKC;AAQD,gDASC;AAQD,gEASC;AAOD,kDAKC;AAvED,cAAc;AACd,0BAAkC;AAClC,2EAAuE;AACvE,gDAAkD;AAGlD,SAAgB,OAAO,CAAC,EAAe,EAAE,cAAsC;IAC7E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,cAAc,CAAC,CAAC;KACrC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,KAAK,CAAC,EAAe,EAAE,cAAsC;IAC3E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,kCAAkC;QACzD,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,cAAc,CAAC,CAAC;KACrC,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,MAAM,CAAC,EAAe,EAAE,cAAsC;IAC5E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,mCAAmC;QAC1D,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,cAAc,CAAC,CAAC;KACrC,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,kBAAkB,CAAC,EAAe,EAAE,IAA4B;IAC9E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iDAAiD;QACxE,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC;YACjC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC;YAClC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC;SAC7C;KACF,CAAC,CAAC;AACL,CAAC;AAQD,SAAgB,0BAA0B,CAAC,EAAe,EAAE,IAAoC;IAC9F,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,0DAA0D;QACjF,SAAS,EAAE;YACT,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC;YACjC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC;YAClC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC;SACpC;KACF,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,mBAAmB,CAAC,EAAe,EAAE,IAA6B;IAChF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,kDAAkD;QACzE,SAAS,EAAE,CAAC,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE,IAAA,WAAI,EAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,gBAAM,CAAC,SAAS,EAAE,CAAC,CAAC;KAC9F,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { String } from \"../../_dependencies/source/0x1/string/structs\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport function delete_(tx: Transaction, verifiedIssuer: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_issuer::delete`,\n    arguments: [obj(tx, verifiedIssuer)],\n  });\n}\n\nexport function owner(tx: Transaction, verifiedIssuer: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_issuer::owner`,\n    arguments: [obj(tx, verifiedIssuer)],\n  });\n}\n\nexport function issuer(tx: Transaction, verifiedIssuer: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_issuer::issuer`,\n    arguments: [obj(tx, verifiedIssuer)],\n  });\n}\n\nexport interface CheckZkloginIssuerArgs {\n  address: string | TransactionArgument;\n  addressSeed: bigint | TransactionArgument;\n  issuer: string | TransactionArgument;\n}\n\nexport function checkZkloginIssuer(tx: Transaction, args: CheckZkloginIssuerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_issuer::check_zklogin_issuer`,\n    arguments: [\n      pure(tx, args.address, `address`),\n      pure(tx, args.addressSeed, `u256`),\n      pure(tx, args.issuer, `${String.$typeName}`),\n    ],\n  });\n}\n\nexport interface CheckZkloginIssuerInternalArgs {\n  address: string | TransactionArgument;\n  addressSeed: bigint | TransactionArgument;\n  issuer: Array<number | TransactionArgument> | TransactionArgument;\n}\n\nexport function checkZkloginIssuerInternal(tx: Transaction, args: CheckZkloginIssuerInternalArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_issuer::check_zklogin_issuer_internal`,\n    arguments: [\n      pure(tx, args.address, `address`),\n      pure(tx, args.addressSeed, `u256`),\n      pure(tx, args.issuer, `vector<u8>`),\n    ],\n  });\n}\n\nexport interface VerifyZkloginIssuerArgs {\n  addressSeed: bigint | TransactionArgument;\n  issuer: string | TransactionArgument;\n}\n\nexport function verifyZkloginIssuer(tx: Transaction, args: VerifyZkloginIssuerArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::zklogin_verified_issuer::verify_zklogin_issuer`,\n    arguments: [pure(tx, args.addressSeed, `u256`), pure(tx, args.issuer, `${String.$typeName}`)],\n  });\n}\n"]}