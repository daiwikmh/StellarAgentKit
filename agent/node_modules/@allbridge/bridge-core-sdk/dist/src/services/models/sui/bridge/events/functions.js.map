{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/bridge/events/functions.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { obj, pure } from \"../../_framework/util\";\nimport { Transaction, TransactionArgument, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface DepositEventArgs {\n  amount: bigint | TransactionArgument;\n  lpAmount: bigint | TransactionArgument;\n}\n\nexport function depositEvent(tx: Transaction, typeArg: string, args: DepositEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::deposit_event`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.amount, `u64`), pure(tx, args.lpAmount, `u64`)],\n  });\n}\n\nexport interface ReceiveFeeEventArgs {\n  userPaySui: bigint | TransactionArgument;\n  userPayStable: bigint | TransactionArgument;\n  totalPaySui: bigint | TransactionArgument;\n  bridgeFeeSui: bigint | TransactionArgument;\n  messengerFeeSui: bigint | TransactionArgument;\n  totalFeeSui: bigint | TransactionArgument;\n}\n\nexport function receiveFeeEvent(tx: Transaction, args: ReceiveFeeEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::receive_fee_event`,\n    arguments: [\n      pure(tx, args.userPaySui, `u64`),\n      pure(tx, args.userPayStable, `u64`),\n      pure(tx, args.totalPaySui, `u64`),\n      pure(tx, args.bridgeFeeSui, `u64`),\n      pure(tx, args.messengerFeeSui, `u64`),\n      pure(tx, args.totalFeeSui, `u64`),\n    ],\n  });\n}\n\nexport function rewardsClaimedEvent(tx: Transaction, typeArg: string, amount: bigint | TransactionArgument) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::rewards_claimed_event`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, amount, `u64`)],\n  });\n}\n\nexport interface SwappedEventArgs {\n  sentAmount: bigint | TransactionArgument;\n  receivedAmount: bigint | TransactionArgument;\n  sender: string | TransactionArgument;\n}\n\nexport function swappedEvent(tx: Transaction, typeArgs: [string, string], args: SwappedEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::swapped_event`,\n    typeArguments: typeArgs,\n    arguments: [\n      pure(tx, args.sentAmount, `u64`),\n      pure(tx, args.receivedAmount, `u64`),\n      pure(tx, args.sender, `address`),\n    ],\n  });\n}\n\nexport interface SwappedFromVusdEventArgs {\n  amount: bigint | TransactionArgument;\n  vusdAmount: bigint | TransactionArgument;\n  fee: bigint | TransactionArgument;\n}\n\nexport function swappedFromVusdEvent(tx: Transaction, typeArg: string, args: SwappedFromVusdEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::swapped_from_vusd_event`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.amount, `u64`), pure(tx, args.vusdAmount, `u64`), pure(tx, args.fee, `u64`)],\n  });\n}\n\nexport interface SwappedToVusdEventArgs {\n  amount: bigint | TransactionArgument;\n  vusdAmount: bigint | TransactionArgument;\n  fee: bigint | TransactionArgument;\n}\n\nexport function swappedToVusdEvent(tx: Transaction, typeArg: string, args: SwappedToVusdEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::swapped_to_vusd_event`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.amount, `u64`), pure(tx, args.vusdAmount, `u64`), pure(tx, args.fee, `u64`)],\n  });\n}\n\nexport interface TokensReceivedEventArgs {\n  amount: bigint | TransactionArgument;\n  extraGasAmount: bigint | TransactionArgument;\n  recipient: string | TransactionArgument;\n  nonce: bigint | TransactionArgument;\n  messenger: TransactionObjectInput;\n  message: TransactionObjectInput;\n}\n\nexport function tokensReceivedEvent(tx: Transaction, typeArg: string, args: TokensReceivedEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::tokens_received_event`,\n    typeArguments: [typeArg],\n    arguments: [\n      pure(tx, args.amount, `u64`),\n      pure(tx, args.extraGasAmount, `u64`),\n      pure(tx, args.recipient, `address`),\n      pure(tx, args.nonce, `u256`),\n      obj(tx, args.messenger),\n      obj(tx, args.message),\n    ],\n  });\n}\n\nexport interface TokensSentEventArgs {\n  vusdAmount: bigint | TransactionArgument;\n  sender: string | TransactionArgument;\n  recipient: TransactionObjectInput;\n  destinationChainId: number | TransactionArgument;\n  receiveToken: TransactionObjectInput;\n  nonce: bigint | TransactionArgument;\n  messenger: TransactionObjectInput;\n}\n\nexport function tokensSentEvent(tx: Transaction, typeArg: string, args: TokensSentEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::tokens_sent_event`,\n    typeArguments: [typeArg],\n    arguments: [\n      pure(tx, args.vusdAmount, `u64`),\n      pure(tx, args.sender, `address`),\n      obj(tx, args.recipient),\n      pure(tx, args.destinationChainId, `u8`),\n      obj(tx, args.receiveToken),\n      pure(tx, args.nonce, `u256`),\n      obj(tx, args.messenger),\n    ],\n  });\n}\n\nexport interface WithdrawEventArgs {\n  amount: bigint | TransactionArgument;\n  lpAmount: bigint | TransactionArgument;\n}\n\nexport function withdrawEvent(tx: Transaction, typeArg: string, args: WithdrawEventArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::events::withdraw_event`,\n    typeArguments: [typeArg],\n    arguments: [pure(tx, args.amount, `u64`), pure(tx, args.lpAmount, `u64`)],\n  });\n}\n"]}