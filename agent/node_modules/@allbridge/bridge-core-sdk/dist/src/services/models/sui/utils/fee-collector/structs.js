"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeCollector = void 0;
exports.isFeeCollector = isFeeCollector;
// @ts-nocheck
const reified_1 = require("../../_framework/reified");
const util_1 = require("../../_framework/util");
const structs_1 = require("../../sui/bag/structs");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== FeeCollector =============================== */
function isFeeCollector(type) {
    type = (0, util_1.compressSuiType)(type);
    return type.startsWith(`${index_1.PKG_V1}::fee_collector::FeeCollector` + "<");
}
class FeeCollector {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::fee_collector::FeeCollector`;
    }
    static $numTypeParams = 1;
    static $isPhantom = [true];
    $typeName = FeeCollector.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = FeeCollector.$isPhantom;
    balances;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(FeeCollector.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.balances = fields.balances;
    }
    static reified(Cap) {
        return {
            typeName: FeeCollector.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(FeeCollector.$typeName, ...[(0, reified_1.extractType)(Cap)]),
            typeArgs: [(0, reified_1.extractType)(Cap)],
            isPhantom: FeeCollector.$isPhantom,
            reifiedTypeArgs: [Cap],
            fromFields: (fields) => FeeCollector.fromFields(Cap, fields),
            fromFieldsWithTypes: (item) => FeeCollector.fromFieldsWithTypes(Cap, item),
            fromBcs: (data) => FeeCollector.fromBcs(Cap, data),
            bcs: FeeCollector.bcs,
            fromJSONField: (field) => FeeCollector.fromJSONField(Cap, field),
            fromJSON: (json) => FeeCollector.fromJSON(Cap, json),
            fromSuiParsedData: (content) => FeeCollector.fromSuiParsedData(Cap, content),
            fromSuiObjectData: (content) => FeeCollector.fromSuiObjectData(Cap, content),
            fetch: async (client, id) => FeeCollector.fetch(client, Cap, id),
            new: (fields) => {
                return new FeeCollector([(0, reified_1.extractType)(Cap)], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return FeeCollector.reified;
    }
    static phantom(Cap) {
        return (0, reified_1.phantom)(FeeCollector.reified(Cap));
    }
    static get p() {
        return FeeCollector.phantom;
    }
    static get bcs() {
        return bcs_1.bcs.struct("FeeCollector", {
            balances: structs_1.Bag.bcs,
        });
    }
    static fromFields(typeArg, fields) {
        return FeeCollector.reified(typeArg).new({
            balances: (0, reified_1.decodeFromFields)(structs_1.Bag.reified(), fields.balances),
        });
    }
    static fromFieldsWithTypes(typeArg, item) {
        if (!isFeeCollector(item.type)) {
            throw new Error("not a FeeCollector type");
        }
        (0, reified_1.assertFieldsWithTypesArgsMatch)(item, [typeArg]);
        return FeeCollector.reified(typeArg).new({
            balances: (0, reified_1.decodeFromFieldsWithTypes)(structs_1.Bag.reified(), item.fields.balances),
        });
    }
    static fromBcs(typeArg, data) {
        return FeeCollector.fromFields(typeArg, FeeCollector.bcs.parse(data));
    }
    toJSONField() {
        return {
            balances: this.balances.toJSONField(),
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(typeArg, field) {
        return FeeCollector.reified(typeArg).new({
            balances: (0, reified_1.decodeFromJSONField)(structs_1.Bag.reified(), field.balances),
        });
    }
    static fromJSON(typeArg, json) {
        if (json.$typeName !== FeeCollector.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        (0, reified_1.assertReifiedTypeArgsMatch)((0, util_1.composeSuiType)(FeeCollector.$typeName, (0, reified_1.extractType)(typeArg)), json.$typeArgs, [typeArg]);
        return FeeCollector.fromJSONField(typeArg, json);
    }
    static fromSuiParsedData(typeArg, content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isFeeCollector(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a FeeCollector object`);
        }
        return FeeCollector.fromFieldsWithTypes(typeArg, content);
    }
    static fromSuiObjectData(typeArg, data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isFeeCollector(data.bcs.type)) {
                throw new Error(`object at is not a FeeCollector object`);
            }
            const gotTypeArgs = (0, util_1.parseTypeName)(data.bcs.type).typeArgs;
            if (gotTypeArgs.length !== 1) {
                throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);
            }
            const gotTypeArg = (0, util_1.compressSuiType)(gotTypeArgs[0]);
            const expectedTypeArg = (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg));
            if (gotTypeArg !== (0, util_1.compressSuiType)((0, reified_1.extractType)(typeArg))) {
                throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);
            }
            return FeeCollector.fromBcs(typeArg, (0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return FeeCollector.fromSuiParsedData(typeArg, data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, typeArg, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching FeeCollector object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isFeeCollector(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a FeeCollector object`);
        }
        return FeeCollector.fromSuiObjectData(typeArg, res.data);
    }
}
exports.FeeCollector = FeeCollector;
//# sourceMappingURL=structs.js.map