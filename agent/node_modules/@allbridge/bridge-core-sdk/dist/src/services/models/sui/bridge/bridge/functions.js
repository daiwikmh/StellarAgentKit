"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.swap = swap;
exports.depositFee = depositFee;
exports.getId = getId;
exports.getVersion = getVersion;
exports.init = init;
exports.migrate = migrate;
exports.setGasUsage = setGasUsage;
exports.withdrawFee = withdrawFee;
exports.gasUsage = gasUsage;
exports.adminFeeShareBp = adminFeeShareBp;
exports.pool = pool;
exports.addBridge = addBridge;
exports.addBridgeToken = addBridgeToken;
exports.addPool = addPool;
exports.canSwap = canSwap;
exports.feeValue = feeValue;
exports.getBridgeAllbridgeCost = getBridgeAllbridgeCost;
exports.getBridgeCost = getBridgeCost;
exports.getBridgeWormholeCost = getBridgeWormholeCost;
exports.getPoolKey = getPoolKey;
exports.isProcessedMessage = isProcessedMessage;
exports.poolMut = poolMut;
exports.receiveTokensAllbridge = receiveTokensAllbridge;
exports.receiveTokensWormhole = receiveTokensWormhole;
exports.removeBridge = removeBridge;
exports.removeBridgeToken = removeBridgeToken;
exports.setRebalancer = setRebalancer;
exports.startSwap = startSwap;
exports.stopSwap = stopSwap;
exports.swapAndBridgeAllbridge = swapAndBridgeAllbridge;
exports.swapAndBridgeWormhole = swapAndBridgeWormhole;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function swap(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::swap`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.coin), (0, util_1.pure)(tx, args.receiveAmountMin, `u64`)],
    });
}
function depositFee(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::deposit_fee`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.coin)],
    });
}
function getId(tx, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::get_id`,
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function getVersion(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::get_version`,
        arguments: [],
    });
}
function init(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::init`,
        arguments: [],
    });
}
function migrate(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::migrate`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.bridge)],
    });
}
function setGasUsage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::set_gas_usage`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`), (0, util_1.pure)(tx, args.value, `u64`)],
    });
}
function withdrawFee(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::withdraw_fee`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function gasUsage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::gas_usage`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function adminFeeShareBp(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::admin_fee_share_bp`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function pool(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::pool`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function addBridge(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::add_bridge`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`), (0, util_1.obj)(tx, args.bridgeAddress)],
    });
}
function addBridgeToken(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::add_bridge_token`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`), (0, util_1.obj)(tx, args.tokenAddress)],
    });
}
function addPool(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::add_pool`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.pool)],
    });
}
function canSwap(tx, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::can_swap`,
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function feeValue(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::fee_value`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function getBridgeAllbridgeCost(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::get_bridge_allbridge_cost`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.messenger), (0, util_1.obj)(tx, args.gasOracle), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function getBridgeCost(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::get_bridge_cost`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.gasOracle), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function getBridgeWormholeCost(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::get_bridge_wormhole_cost`,
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.obj)(tx, args.wormholeState),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.pure)(tx, args.chainId, `u8`),
        ],
    });
}
function getPoolKey(tx, typeArg) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::get_pool_key`,
        typeArguments: [typeArg],
        arguments: [],
    });
}
function isProcessedMessage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::is_processed_message`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.obj)(tx, args.message)],
    });
}
function poolMut(tx, typeArg, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::pool_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function receiveTokensAllbridge(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::receive_tokens_allbridge`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.pure)(tx, args.amount, `u64`),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.sourceChainId, `u8`),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.pure)(tx, args.receiveAmountMin, `u64`),
            (0, util_1.obj)(tx, args.extraGasCoin),
        ],
    });
}
function receiveTokensWormhole(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::receive_tokens_wormhole`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.pure)(tx, args.amount, `u64`),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.sourceChainId, `u8`),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.pure)(tx, args.receiveAmountMin, `u64`),
            (0, util_1.obj)(tx, args.extraGasCoin),
        ],
    });
}
function removeBridge(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::remove_bridge`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function removeBridgeToken(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::remove_bridge_token`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.chainId, `u8`), (0, util_1.obj)(tx, args.tokenAddress)],
    });
}
function setRebalancer(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::set_rebalancer`,
        arguments: [(0, util_1.obj)(tx, args.bridge), (0, util_1.pure)(tx, args.rebalancer, `address`)],
    });
}
function startSwap(tx, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::start_swap`,
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function stopSwap(tx, bridge) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::stop_swap`,
        arguments: [(0, util_1.obj)(tx, bridge)],
    });
}
function swapAndBridgeAllbridge(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::swap_and_bridge_allbridge`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.obj)(tx, args.coin),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.destinationChainId, `u8`),
            (0, util_1.obj)(tx, args.receiveToken),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.obj)(tx, args.feeSuiCoin),
            (0, util_1.obj)(tx, args.feeTokenCoin),
        ],
    });
}
function swapAndBridgeWormhole(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::bridge::swap_and_bridge_wormhole`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.obj)(tx, args.bridge),
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.obj)(tx, args.wormholeState),
            (0, util_1.obj)(tx, args.theClock),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.obj)(tx, args.coin),
            (0, util_1.obj)(tx, args.recipient),
            (0, util_1.pure)(tx, args.destinationChainId, `u8`),
            (0, util_1.obj)(tx, args.receiveToken),
            (0, util_1.pure)(tx, args.nonce, `u256`),
            (0, util_1.obj)(tx, args.feeSuiCoin),
            (0, util_1.obj)(tx, args.feeTokenCoin),
        ],
    });
}
//# sourceMappingURL=functions.js.map