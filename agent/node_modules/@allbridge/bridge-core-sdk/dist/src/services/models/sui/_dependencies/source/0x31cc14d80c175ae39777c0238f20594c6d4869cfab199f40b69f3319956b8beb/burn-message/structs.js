"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BurnMessage = void 0;
exports.isBurnMessage = isBurnMessage;
// @ts-nocheck
const reified_1 = require("../../../../_framework/reified");
const util_1 = require("../../../../_framework/util");
const index_1 = require("../index");
const bcs_1 = require("@mysten/sui/bcs");
const utils_1 = require("@mysten/sui/utils");
/* ============================== BurnMessage =============================== */
function isBurnMessage(type) {
    type = (0, util_1.compressSuiType)(type);
    return type === `${index_1.PKG_V1}::burn_message::BurnMessage`;
}
class BurnMessage {
    __StructClass = true;
    static get $typeName() {
        return `${index_1.PKG_V1}::burn_message::BurnMessage`;
    }
    static $numTypeParams = 0;
    static $isPhantom = [];
    $typeName = BurnMessage.$typeName;
    $fullTypeName;
    $typeArgs;
    $isPhantom = BurnMessage.$isPhantom;
    version;
    burnToken;
    mintRecipient;
    amount;
    messageSender;
    constructor(typeArgs, fields) {
        this.$fullTypeName = (0, util_1.composeSuiType)(BurnMessage.$typeName, ...typeArgs);
        this.$typeArgs = typeArgs;
        this.version = fields.version;
        this.burnToken = fields.burnToken;
        this.mintRecipient = fields.mintRecipient;
        this.amount = fields.amount;
        this.messageSender = fields.messageSender;
    }
    static reified() {
        return {
            typeName: BurnMessage.$typeName,
            fullTypeName: (0, util_1.composeSuiType)(BurnMessage.$typeName, ...[]),
            typeArgs: [],
            isPhantom: BurnMessage.$isPhantom,
            reifiedTypeArgs: [],
            fromFields: (fields) => BurnMessage.fromFields(fields),
            fromFieldsWithTypes: (item) => BurnMessage.fromFieldsWithTypes(item),
            fromBcs: (data) => BurnMessage.fromBcs(data),
            bcs: BurnMessage.bcs,
            fromJSONField: (field) => BurnMessage.fromJSONField(field),
            fromJSON: (json) => BurnMessage.fromJSON(json),
            fromSuiParsedData: (content) => BurnMessage.fromSuiParsedData(content),
            fromSuiObjectData: (content) => BurnMessage.fromSuiObjectData(content),
            fetch: async (client, id) => BurnMessage.fetch(client, id),
            new: (fields) => {
                return new BurnMessage([], fields);
            },
            kind: "StructClassReified",
        };
    }
    static get r() {
        return BurnMessage.reified();
    }
    static phantom() {
        return (0, reified_1.phantom)(BurnMessage.reified());
    }
    static get p() {
        return BurnMessage.phantom();
    }
    static get bcs() {
        return bcs_1.bcs.struct("BurnMessage", {
            version: bcs_1.bcs.u32(),
            burn_token: bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            }),
            mint_recipient: bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            }),
            amount: bcs_1.bcs.u256(),
            message_sender: bcs_1.bcs.bytes(32).transform({
                input: (val) => (0, utils_1.fromHEX)(val),
                output: (val) => (0, utils_1.toHEX)(val),
            }),
        });
    }
    static fromFields(fields) {
        return BurnMessage.reified().new({
            version: (0, reified_1.decodeFromFields)("u32", fields.version),
            burnToken: (0, reified_1.decodeFromFields)("address", fields.burn_token),
            mintRecipient: (0, reified_1.decodeFromFields)("address", fields.mint_recipient),
            amount: (0, reified_1.decodeFromFields)("u256", fields.amount),
            messageSender: (0, reified_1.decodeFromFields)("address", fields.message_sender),
        });
    }
    static fromFieldsWithTypes(item) {
        if (!isBurnMessage(item.type)) {
            throw new Error("not a BurnMessage type");
        }
        return BurnMessage.reified().new({
            version: (0, reified_1.decodeFromFieldsWithTypes)("u32", item.fields.version),
            burnToken: (0, reified_1.decodeFromFieldsWithTypes)("address", item.fields.burn_token),
            mintRecipient: (0, reified_1.decodeFromFieldsWithTypes)("address", item.fields.mint_recipient),
            amount: (0, reified_1.decodeFromFieldsWithTypes)("u256", item.fields.amount),
            messageSender: (0, reified_1.decodeFromFieldsWithTypes)("address", item.fields.message_sender),
        });
    }
    static fromBcs(data) {
        return BurnMessage.fromFields(BurnMessage.bcs.parse(data));
    }
    toJSONField() {
        return {
            version: this.version,
            burnToken: this.burnToken,
            mintRecipient: this.mintRecipient,
            amount: this.amount.toString(),
            messageSender: this.messageSender,
        };
    }
    toJSON() {
        return {
            $typeName: this.$typeName,
            $typeArgs: this.$typeArgs,
            ...this.toJSONField(),
        };
    }
    static fromJSONField(field) {
        return BurnMessage.reified().new({
            version: (0, reified_1.decodeFromJSONField)("u32", field.version),
            burnToken: (0, reified_1.decodeFromJSONField)("address", field.burnToken),
            mintRecipient: (0, reified_1.decodeFromJSONField)("address", field.mintRecipient),
            amount: (0, reified_1.decodeFromJSONField)("u256", field.amount),
            messageSender: (0, reified_1.decodeFromJSONField)("address", field.messageSender),
        });
    }
    static fromJSON(json) {
        if (json.$typeName !== BurnMessage.$typeName) {
            throw new Error("not a WithTwoGenerics json object");
        }
        return BurnMessage.fromJSONField(json);
    }
    static fromSuiParsedData(content) {
        if (content.dataType !== "moveObject") {
            throw new Error("not an object");
        }
        if (!isBurnMessage(content.type)) {
            throw new Error(`object at ${content.fields.id} is not a BurnMessage object`);
        }
        return BurnMessage.fromFieldsWithTypes(content);
    }
    static fromSuiObjectData(data) {
        if (data.bcs) {
            if (data.bcs.dataType !== "moveObject" || !isBurnMessage(data.bcs.type)) {
                throw new Error(`object at is not a BurnMessage object`);
            }
            return BurnMessage.fromBcs((0, utils_1.fromB64)(data.bcs.bcsBytes));
        }
        if (data.content) {
            return BurnMessage.fromSuiParsedData(data.content);
        }
        throw new Error("Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.");
    }
    static async fetch(client, id) {
        const res = await client.getObject({ id, options: { showBcs: true } });
        if (res.error) {
            throw new Error(`error fetching BurnMessage object at id ${id}: ${res.error.code}`);
        }
        if (res.data?.bcs?.dataType !== "moveObject" || !isBurnMessage(res.data.bcs.type)) {
            throw new Error(`object at id ${id} is not a BurnMessage object`);
        }
        return BurnMessage.fromSuiObjectData(res.data);
    }
}
exports.BurnMessage = BurnMessage;
//# sourceMappingURL=structs.js.map