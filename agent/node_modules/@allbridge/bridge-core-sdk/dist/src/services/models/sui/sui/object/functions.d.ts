import { GenericArg } from "../../_framework/util";
import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export declare function bridge(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function id(tx: Transaction, typeArg: string, obj: GenericArg): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function authenticatorState(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function borrowId(tx: Transaction, typeArg: string, obj: GenericArg): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function borrowUid(tx: Transaction, typeArg: string, obj: GenericArg): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function clock(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function delete_(tx: Transaction, id: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function deleteImpl(tx: Transaction, id: string | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function idAddress(tx: Transaction, typeArg: string, obj: GenericArg): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function idBytes(tx: Transaction, typeArg: string, obj: GenericArg): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function idFromAddress(tx: Transaction, bytes: string | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function idFromBytes(tx: Transaction, bytes: Array<number | TransactionArgument> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function idToAddress(tx: Transaction, id: string | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function idToBytes(tx: Transaction, id: string | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function new_(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function newUidFromHash(tx: Transaction, bytes: string | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function randomnessState(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function recordNewUid(tx: Transaction, id: string | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function suiDenyListObjectId(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function suiSystemState(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function uidAsInner(tx: Transaction, uid: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function uidToAddress(tx: Transaction, uid: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function uidToBytes(tx: Transaction, uid: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function uidToInner(tx: Transaction, uid: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
