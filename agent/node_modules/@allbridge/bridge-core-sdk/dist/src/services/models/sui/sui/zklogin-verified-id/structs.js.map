{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/zklogin-verified-id/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { String } from \"../../_dependencies/source/0x1/string/structs\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { UID } from \"../object/structs\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64, fromHEX, toHEX } from \"@mysten/sui/utils\";\n\n/* ============================== VerifiedID =============================== */\n\nexport function isVerifiedID(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::zklogin_verified_id::VerifiedID`;\n}\n\nexport interface VerifiedIDFields {\n  id: ToField<UID>;\n  owner: ToField<\"address\">;\n  keyClaimName: ToField<String>;\n  keyClaimValue: ToField<String>;\n  issuer: ToField<String>;\n  audience: ToField<String>;\n}\n\nexport type VerifiedIDReified = Reified<VerifiedID, VerifiedIDFields>;\n\nexport class VerifiedID implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::zklogin_verified_id::VerifiedID`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = VerifiedID.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = VerifiedID.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly owner: ToField<\"address\">;\n  readonly keyClaimName: ToField<String>;\n  readonly keyClaimValue: ToField<String>;\n  readonly issuer: ToField<String>;\n  readonly audience: ToField<String>;\n\n  private constructor(typeArgs: [], fields: VerifiedIDFields) {\n    this.$fullTypeName = composeSuiType(VerifiedID.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.owner = fields.owner;\n    this.keyClaimName = fields.keyClaimName;\n    this.keyClaimValue = fields.keyClaimValue;\n    this.issuer = fields.issuer;\n    this.audience = fields.audience;\n  }\n\n  static reified(): VerifiedIDReified {\n    return {\n      typeName: VerifiedID.$typeName,\n      fullTypeName: composeSuiType(VerifiedID.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: VerifiedID.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => VerifiedID.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => VerifiedID.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => VerifiedID.fromBcs(data),\n      bcs: VerifiedID.bcs,\n      fromJSONField: (field: any) => VerifiedID.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => VerifiedID.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => VerifiedID.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => VerifiedID.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => VerifiedID.fetch(client, id),\n      new: (fields: VerifiedIDFields) => {\n        return new VerifiedID([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return VerifiedID.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<VerifiedID>> {\n    return phantom(VerifiedID.reified());\n  }\n  static get p() {\n    return VerifiedID.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"VerifiedID\", {\n      id: UID.bcs,\n      owner: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      key_claim_name: String.bcs,\n      key_claim_value: String.bcs,\n      issuer: String.bcs,\n      audience: String.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): VerifiedID {\n    return VerifiedID.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      owner: decodeFromFields(\"address\", fields.owner),\n      keyClaimName: decodeFromFields(String.reified(), fields.key_claim_name),\n      keyClaimValue: decodeFromFields(String.reified(), fields.key_claim_value),\n      issuer: decodeFromFields(String.reified(), fields.issuer),\n      audience: decodeFromFields(String.reified(), fields.audience),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): VerifiedID {\n    if (!isVerifiedID(item.type)) {\n      throw new Error(\"not a VerifiedID type\");\n    }\n\n    return VerifiedID.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      owner: decodeFromFieldsWithTypes(\"address\", item.fields.owner),\n      keyClaimName: decodeFromFieldsWithTypes(String.reified(), item.fields.key_claim_name),\n      keyClaimValue: decodeFromFieldsWithTypes(String.reified(), item.fields.key_claim_value),\n      issuer: decodeFromFieldsWithTypes(String.reified(), item.fields.issuer),\n      audience: decodeFromFieldsWithTypes(String.reified(), item.fields.audience),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): VerifiedID {\n    return VerifiedID.fromFields(VerifiedID.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      owner: this.owner,\n      keyClaimName: this.keyClaimName,\n      keyClaimValue: this.keyClaimValue,\n      issuer: this.issuer,\n      audience: this.audience,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): VerifiedID {\n    return VerifiedID.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      owner: decodeFromJSONField(\"address\", field.owner),\n      keyClaimName: decodeFromJSONField(String.reified(), field.keyClaimName),\n      keyClaimValue: decodeFromJSONField(String.reified(), field.keyClaimValue),\n      issuer: decodeFromJSONField(String.reified(), field.issuer),\n      audience: decodeFromJSONField(String.reified(), field.audience),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): VerifiedID {\n    if (json.$typeName !== VerifiedID.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return VerifiedID.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): VerifiedID {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isVerifiedID(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a VerifiedID object`);\n    }\n    return VerifiedID.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): VerifiedID {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isVerifiedID(data.bcs.type)) {\n        throw new Error(`object at is not a VerifiedID object`);\n      }\n\n      return VerifiedID.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return VerifiedID.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<VerifiedID> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching VerifiedID object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isVerifiedID(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a VerifiedID object`);\n    }\n\n    return VerifiedID.fromSuiObjectData(res.data);\n  }\n}\n"]}