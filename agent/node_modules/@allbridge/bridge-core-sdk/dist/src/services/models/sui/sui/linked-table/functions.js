"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.borrow = borrow;
exports.borrowMut = borrowMut;
exports.contains = contains;
exports.destroyEmpty = destroyEmpty;
exports.isEmpty = isEmpty;
exports.length = length;
exports.popBack = popBack;
exports.pushBack = pushBack;
exports.remove = remove;
exports.new_ = new_;
exports.drop = drop;
exports.back = back;
exports.front = front;
exports.next = next;
exports.popFront = popFront;
exports.prev = prev;
exports.pushFront = pushFront;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function borrow(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::borrow`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.table), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function borrowMut(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::borrow_mut`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.table), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function contains(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::contains`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.table), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function destroyEmpty(tx, typeArgs, table) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::destroy_empty`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, table)],
    });
}
function isEmpty(tx, typeArgs, table) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::is_empty`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, table)],
    });
}
function length(tx, typeArgs, table) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::length`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, table)],
    });
}
function popBack(tx, typeArgs, table) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::pop_back`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, table)],
    });
}
function pushBack(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::push_back`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.table), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k), (0, util_1.generic)(tx, `${typeArgs[1]}`, args.value)],
    });
}
function remove(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::remove`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.table), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function new_(tx, typeArgs) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::new`,
        typeArguments: typeArgs,
        arguments: [],
    });
}
function drop(tx, typeArgs, table) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::drop`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, table)],
    });
}
function back(tx, typeArgs, table) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::back`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, table)],
    });
}
function front(tx, typeArgs, table) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::front`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, table)],
    });
}
function next(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::next`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.table), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function popFront(tx, typeArgs, table) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::pop_front`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, table)],
    });
}
function prev(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::prev`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.table), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k)],
    });
}
function pushFront(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::linked_table::push_front`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.table), (0, util_1.generic)(tx, `${typeArgs[0]}`, args.k), (0, util_1.generic)(tx, `${typeArgs[1]}`, args.value)],
    });
}
//# sourceMappingURL=functions.js.map