{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0xf47329f4344f3bf0f8e436e2f7b485466cff300f12a166563995d3888c296a94/cursor/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../../../_framework/reified\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  fieldToJSON,\n  phantom,\n  toBcs,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../../../_framework/util\";\nimport { Vector } from \"../../../../_framework/vector\";\nimport { PKG_V1 } from \"../index\";\nimport { BcsType, bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== Cursor =============================== */\n\nexport function isCursor(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V1}::cursor::Cursor` + \"<\");\n}\n\nexport interface CursorFields<T extends TypeArgument> {\n  data: ToField<Vector<T>>;\n}\n\nexport type CursorReified<T extends TypeArgument> = Reified<Cursor<T>, CursorFields<T>>;\n\nexport class Cursor<T extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::cursor::Cursor`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [false] as const;\n\n  readonly $typeName = Cursor.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<T>];\n  readonly $isPhantom = Cursor.$isPhantom;\n\n  readonly data: ToField<Vector<T>>;\n\n  private constructor(typeArgs: [ToTypeStr<T>], fields: CursorFields<T>) {\n    this.$fullTypeName = composeSuiType(Cursor.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.data = fields.data;\n  }\n\n  static reified<T extends Reified<TypeArgument, any>>(T: T): CursorReified<ToTypeArgument<T>> {\n    return {\n      typeName: Cursor.$typeName,\n      fullTypeName: composeSuiType(Cursor.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [ToTypeStr<ToTypeArgument<T>>],\n      isPhantom: Cursor.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => Cursor.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Cursor.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => Cursor.fromBcs(T, data),\n      bcs: Cursor.bcs(toBcs(T)),\n      fromJSONField: (field: any) => Cursor.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => Cursor.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => Cursor.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => Cursor.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => Cursor.fetch(client, T, id),\n      new: (fields: CursorFields<ToTypeArgument<T>>) => {\n        return new Cursor([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Cursor.reified;\n  }\n\n  static phantom<T extends Reified<TypeArgument, any>>(T: T): PhantomReified<ToTypeStr<Cursor<ToTypeArgument<T>>>> {\n    return phantom(Cursor.reified(T));\n  }\n  static get p() {\n    return Cursor.phantom;\n  }\n\n  static get bcs() {\n    return <T extends BcsType<any>>(T: T) =>\n      bcs.struct(`Cursor<${T.name}>`, {\n        data: bcs.vector(T),\n      });\n  }\n\n  static fromFields<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): Cursor<ToTypeArgument<T>> {\n    return Cursor.reified(typeArg).new({\n      data: decodeFromFields(reified.vector(typeArg), fields.data),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): Cursor<ToTypeArgument<T>> {\n    if (!isCursor(item.type)) {\n      throw new Error(\"not a Cursor type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Cursor.reified(typeArg).new({\n      data: decodeFromFieldsWithTypes(reified.vector(typeArg), item.fields.data),\n    });\n  }\n\n  static fromBcs<T extends Reified<TypeArgument, any>>(typeArg: T, data: Uint8Array): Cursor<ToTypeArgument<T>> {\n    const typeArgs = [typeArg];\n\n    return Cursor.fromFields(typeArg, Cursor.bcs(toBcs(typeArgs[0])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      data: fieldToJSON<Vector<T>>(`vector<${this.$typeArgs[0]}>`, this.data),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends Reified<TypeArgument, any>>(typeArg: T, field: any): Cursor<ToTypeArgument<T>> {\n    return Cursor.reified(typeArg).new({\n      data: decodeFromJSONField(reified.vector(typeArg), field.data),\n    });\n  }\n\n  static fromJSON<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): Cursor<ToTypeArgument<T>> {\n    if (json.$typeName !== Cursor.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Cursor.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Cursor.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): Cursor<ToTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isCursor(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Cursor object`);\n    }\n    return Cursor.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): Cursor<ToTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isCursor(data.bcs.type)) {\n        throw new Error(`object at is not a Cursor object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Cursor.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Cursor.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<Cursor<ToTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Cursor object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isCursor(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Cursor object`);\n    }\n\n    return Cursor.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}