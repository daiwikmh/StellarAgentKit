import { GenericArg } from "../../_framework/util";
import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export declare function version(tx: Transaction, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface CreateArgs {
    initVersion: bigint | TransactionArgument;
    initValue: GenericArg;
}
export declare function create(tx: Transaction, typeArg: string, args: CreateArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function destroy(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function loadValue(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function loadValueMut(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function removeValueForUpgrade(tx: Transaction, typeArg: string, self: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface UpgradeArgs {
    self: TransactionObjectInput;
    newVersion: bigint | TransactionArgument;
    newValue: GenericArg;
    cap: TransactionObjectInput;
}
export declare function upgrade(tx: Transaction, typeArg: string, args: UpgradeArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
