{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/utils/set/functions.ts"],"names":[],"mappings":";;AAUA,kBAMC;AAOD,4BAMC;AAED,oCAMC;AAOD,wBAMC;AAED,oBAMC;AA1DD,cAAc;AACd,0BAAkC;AAClC,gDAAiE;AAQjE,SAAgB,GAAG,CAAC,EAAe,EAAE,OAAe,EAAE,IAAa;IACjE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,YAAY;QACnC,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,OAAO,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;KACpE,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,QAAQ,CAAC,EAAe,EAAE,OAAe,EAAE,IAAkB;IAC3E,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,iBAAiB;QACxC,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,OAAO,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;KACpE,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,YAAY,CAAC,EAAe,EAAE,OAAe,EAAE,GAA2B;IACxF,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,sBAAsB;QAC7C,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,GAAG,CAAC,CAAC;KAC1B,CAAC,CAAC;AACL,CAAC;AAOD,SAAgB,MAAM,CAAC,EAAe,EAAE,OAAe,EAAE,IAAgB;IACvE,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,eAAe;QACtC,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,CAAC,IAAA,UAAG,EAAC,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,IAAA,cAAO,EAAC,EAAE,EAAE,GAAG,OAAO,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;KACpE,CAAC,CAAC;AACL,CAAC;AAED,SAAgB,IAAI,CAAC,EAAe,EAAE,OAAe;IACnD,OAAO,EAAE,CAAC,QAAQ,CAAC;QACjB,MAAM,EAAE,GAAG,gBAAY,YAAY;QACnC,aAAa,EAAE,CAAC,OAAO,CAAC;QACxB,SAAS,EAAE,EAAE;KACd,CAAC,CAAC;AACL,CAAC","sourcesContent":["// @ts-nocheck\nimport { PUBLISHED_AT } from \"..\";\nimport { GenericArg, generic, obj } from \"../../_framework/util\";\nimport { Transaction, TransactionObjectInput } from \"@mysten/sui/transactions\";\n\nexport interface AddArgs {\n  set: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function add(tx: Transaction, typeArg: string, args: AddArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::set::add`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.set), generic(tx, `${typeArg}`, args.key)],\n  });\n}\n\nexport interface ContainsArgs {\n  set: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function contains(tx: Transaction, typeArg: string, args: ContainsArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::set::contains`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.set), generic(tx, `${typeArg}`, args.key)],\n  });\n}\n\nexport function destroyEmpty(tx: Transaction, typeArg: string, set: TransactionObjectInput) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::set::destroy_empty`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, set)],\n  });\n}\n\nexport interface RemoveArgs {\n  set: TransactionObjectInput;\n  key: GenericArg;\n}\n\nexport function remove(tx: Transaction, typeArg: string, args: RemoveArgs) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::set::remove`,\n    typeArguments: [typeArg],\n    arguments: [obj(tx, args.set), generic(tx, `${typeArg}`, args.key)],\n  });\n}\n\nexport function new_(tx: Transaction, typeArg: string) {\n  return tx.moveCall({\n    target: `${PUBLISHED_AT}::set::new`,\n    typeArguments: [typeArg],\n    arguments: [],\n  });\n}\n"]}