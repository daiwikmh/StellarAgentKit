{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/borrow/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport { Option } from \"../../_dependencies/source/0x1/option/structs\";\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeArgument,\n  ToTypeStr,\n  TypeArgument,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  fieldToJSON,\n  phantom,\n  toBcs,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { PKG_V26 } from \"../index\";\nimport { ID } from \"../object/structs\";\nimport { BcsType, bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64, fromHEX, toHEX } from \"@mysten/sui/utils\";\n\n/* ============================== Borrow =============================== */\n\nexport function isBorrow(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V26}::borrow::Borrow`;\n}\n\nexport interface BorrowFields {\n  ref: ToField<\"address\">;\n  obj: ToField<ID>;\n}\n\nexport type BorrowReified = Reified<Borrow, BorrowFields>;\n\nexport class Borrow implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::borrow::Borrow`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = Borrow.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = Borrow.$isPhantom;\n\n  readonly ref: ToField<\"address\">;\n  readonly obj: ToField<ID>;\n\n  private constructor(typeArgs: [], fields: BorrowFields) {\n    this.$fullTypeName = composeSuiType(Borrow.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.ref = fields.ref;\n    this.obj = fields.obj;\n  }\n\n  static reified(): BorrowReified {\n    return {\n      typeName: Borrow.$typeName,\n      fullTypeName: composeSuiType(Borrow.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: Borrow.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => Borrow.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Borrow.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => Borrow.fromBcs(data),\n      bcs: Borrow.bcs,\n      fromJSONField: (field: any) => Borrow.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => Borrow.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => Borrow.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => Borrow.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => Borrow.fetch(client, id),\n      new: (fields: BorrowFields) => {\n        return new Borrow([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Borrow.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<Borrow>> {\n    return phantom(Borrow.reified());\n  }\n  static get p() {\n    return Borrow.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"Borrow\", {\n      ref: bcs.bytes(32).transform({\n        input: (val: string) => fromHEX(val),\n        output: (val: Uint8Array) => toHEX(val),\n      }),\n      obj: ID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): Borrow {\n    return Borrow.reified().new({\n      ref: decodeFromFields(\"address\", fields.ref),\n      obj: decodeFromFields(ID.reified(), fields.obj),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): Borrow {\n    if (!isBorrow(item.type)) {\n      throw new Error(\"not a Borrow type\");\n    }\n\n    return Borrow.reified().new({\n      ref: decodeFromFieldsWithTypes(\"address\", item.fields.ref),\n      obj: decodeFromFieldsWithTypes(ID.reified(), item.fields.obj),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): Borrow {\n    return Borrow.fromFields(Borrow.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      ref: this.ref,\n      obj: this.obj,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): Borrow {\n    return Borrow.reified().new({\n      ref: decodeFromJSONField(\"address\", field.ref),\n      obj: decodeFromJSONField(ID.reified(), field.obj),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): Borrow {\n    if (json.$typeName !== Borrow.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return Borrow.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): Borrow {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isBorrow(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Borrow object`);\n    }\n    return Borrow.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): Borrow {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isBorrow(data.bcs.type)) {\n        throw new Error(`object at is not a Borrow object`);\n      }\n\n      return Borrow.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Borrow.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<Borrow> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Borrow object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isBorrow(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Borrow object`);\n    }\n\n    return Borrow.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== Referent =============================== */\n\nexport function isReferent(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::borrow::Referent` + \"<\");\n}\n\nexport interface ReferentFields<T extends TypeArgument> {\n  id: ToField<\"address\">;\n  value: ToField<Option<T>>;\n}\n\nexport type ReferentReified<T extends TypeArgument> = Reified<Referent<T>, ReferentFields<T>>;\n\nexport class Referent<T extends TypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::borrow::Referent`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [false] as const;\n\n  readonly $typeName = Referent.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [ToTypeStr<T>];\n  readonly $isPhantom = Referent.$isPhantom;\n\n  readonly id: ToField<\"address\">;\n  readonly value: ToField<Option<T>>;\n\n  private constructor(typeArgs: [ToTypeStr<T>], fields: ReferentFields<T>) {\n    this.$fullTypeName = composeSuiType(Referent.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.value = fields.value;\n  }\n\n  static reified<T extends Reified<TypeArgument, any>>(T: T): ReferentReified<ToTypeArgument<T>> {\n    return {\n      typeName: Referent.$typeName,\n      fullTypeName: composeSuiType(Referent.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [ToTypeStr<ToTypeArgument<T>>],\n      isPhantom: Referent.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => Referent.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => Referent.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => Referent.fromBcs(T, data),\n      bcs: Referent.bcs(toBcs(T)),\n      fromJSONField: (field: any) => Referent.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => Referent.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => Referent.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => Referent.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => Referent.fetch(client, T, id),\n      new: (fields: ReferentFields<ToTypeArgument<T>>) => {\n        return new Referent([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return Referent.reified;\n  }\n\n  static phantom<T extends Reified<TypeArgument, any>>(T: T): PhantomReified<ToTypeStr<Referent<ToTypeArgument<T>>>> {\n    return phantom(Referent.reified(T));\n  }\n  static get p() {\n    return Referent.phantom;\n  }\n\n  static get bcs() {\n    return <T extends BcsType<any>>(T: T) =>\n      bcs.struct(`Referent<${T.name}>`, {\n        id: bcs.bytes(32).transform({\n          input: (val: string) => fromHEX(val),\n          output: (val: Uint8Array) => toHEX(val),\n        }),\n        value: Option.bcs(T),\n      });\n  }\n\n  static fromFields<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): Referent<ToTypeArgument<T>> {\n    return Referent.reified(typeArg).new({\n      id: decodeFromFields(\"address\", fields.id),\n      value: decodeFromFields(Option.reified(typeArg), fields.value),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): Referent<ToTypeArgument<T>> {\n    if (!isReferent(item.type)) {\n      throw new Error(\"not a Referent type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return Referent.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(\"address\", item.fields.id),\n      value: decodeFromFieldsWithTypes(Option.reified(typeArg), item.fields.value),\n    });\n  }\n\n  static fromBcs<T extends Reified<TypeArgument, any>>(typeArg: T, data: Uint8Array): Referent<ToTypeArgument<T>> {\n    const typeArgs = [typeArg];\n\n    return Referent.fromFields(typeArg, Referent.bcs(toBcs(typeArgs[0])).parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      value: fieldToJSON<Option<T>>(`${Option.$typeName}<${this.$typeArgs[0]}>`, this.value),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends Reified<TypeArgument, any>>(typeArg: T, field: any): Referent<ToTypeArgument<T>> {\n    return Referent.reified(typeArg).new({\n      id: decodeFromJSONField(\"address\", field.id),\n      value: decodeFromJSONField(Option.reified(typeArg), field.value),\n    });\n  }\n\n  static fromJSON<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): Referent<ToTypeArgument<T>> {\n    if (json.$typeName !== Referent.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(Referent.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return Referent.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): Referent<ToTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isReferent(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a Referent object`);\n    }\n    return Referent.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends Reified<TypeArgument, any>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): Referent<ToTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isReferent(data.bcs.type)) {\n        throw new Error(`object at is not a Referent object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return Referent.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return Referent.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends Reified<TypeArgument, any>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<Referent<ToTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching Referent object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isReferent(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a Referent object`);\n    }\n\n    return Referent.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}