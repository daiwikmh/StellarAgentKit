"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.value = value;
exports.allow = allow;
exports.sender = sender;
exports.amount = amount;
exports.recipient = recipient;
exports.transfer = transfer;
exports.key = key;
exports.destroyZero = destroyZero;
exports.join = join;
exports.split = split;
exports.zero = zero;
exports.burn = burn;
exports.mint = mint;
exports.confirmRequest = confirmRequest;
exports.newRequest = newRequest;
exports.rules = rules;
exports.keep = keep;
exports.action = action;
exports.addApproval = addApproval;
exports.addRuleConfig = addRuleConfig;
exports.addRuleForAction = addRuleForAction;
exports.approvals = approvals;
exports.confirmRequestMut = confirmRequestMut;
exports.confirmWithPolicyCap = confirmWithPolicyCap;
exports.confirmWithTreasuryCap = confirmWithTreasuryCap;
exports.disallow = disallow;
exports.flush = flush;
exports.fromCoin = fromCoin;
exports.fromCoinAction = fromCoinAction;
exports.hasRuleConfig = hasRuleConfig;
exports.hasRuleConfigWithType = hasRuleConfigWithType;
exports.isAllowed = isAllowed;
exports.newPolicy = newPolicy;
exports.spentBalance = spentBalance;
exports.removeRuleConfig = removeRuleConfig;
exports.removeRuleForAction = removeRuleForAction;
exports.ruleConfig = ruleConfig;
exports.ruleConfigMut = ruleConfigMut;
exports.sharePolicy = sharePolicy;
exports.spend = spend;
exports.spendAction = spendAction;
exports.spent = spent;
exports.toCoin = toCoin;
exports.toCoinAction = toCoinAction;
exports.transferAction = transferAction;
// @ts-nocheck
const __1 = require("..");
const structs_1 = require("../../_dependencies/source/0x1/option/structs");
const structs_2 = require("../../_dependencies/source/0x1/string/structs");
const util_1 = require("../../_framework/util");
const structs_3 = require("../balance/structs");
function value(tx, typeArg, t) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::value`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, t)],
    });
}
function allow(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::allow`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.action, `${structs_2.String.$typeName}`)],
    });
}
function sender(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::sender`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function amount(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::amount`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function recipient(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::recipient`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function transfer(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::transfer`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.t), (0, util_1.pure)(tx, args.recipient, `address`)],
    });
}
function key(tx, typeArg) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::key`,
        typeArguments: [typeArg],
        arguments: [],
    });
}
function destroyZero(tx, typeArg, token) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::destroy_zero`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, token)],
    });
}
function join(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::join`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.token), (0, util_1.obj)(tx, args.another)],
    });
}
function split(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::split`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.token), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function zero(tx, typeArg) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::zero`,
        typeArguments: [typeArg],
        arguments: [],
    });
}
function burn(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::burn`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.obj)(tx, args.token)],
    });
}
function mint(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::mint`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function confirmRequest(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::confirm_request`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.request)],
    });
}
function newRequest(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::new_request`,
        typeArguments: [typeArg],
        arguments: [
            (0, util_1.pure)(tx, args.name, `${structs_2.String.$typeName}`),
            (0, util_1.pure)(tx, args.amount, `u64`),
            (0, util_1.pure)(tx, args.recipient, `${structs_1.Option.$typeName}<address>`),
            (0, util_1.option)(tx, `${structs_3.Balance.$typeName}<${typeArg}>`, args.spentBalance),
        ],
    });
}
function rules(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::rules`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.action, `${structs_2.String.$typeName}`)],
    });
}
function keep(tx, typeArg, token) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::keep`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, token)],
    });
}
function action(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::action`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function addApproval(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::add_approval`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.generic)(tx, `${typeArgs[1]}`, args.t), (0, util_1.obj)(tx, args.request)],
    });
}
function addRuleConfig(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::add_rule_config`,
        typeArguments: typeArgs,
        arguments: [
            (0, util_1.generic)(tx, `${typeArgs[1]}`, args.rule),
            (0, util_1.obj)(tx, args.self),
            (0, util_1.obj)(tx, args.cap),
            (0, util_1.generic)(tx, `${typeArgs[2]}`, args.config),
        ],
    });
}
function addRuleForAction(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::add_rule_for_action`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.action, `${structs_2.String.$typeName}`)],
    });
}
function approvals(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::approvals`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function confirmRequestMut(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::confirm_request_mut`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.policy), (0, util_1.obj)(tx, args.request)],
    });
}
function confirmWithPolicyCap(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::confirm_with_policy_cap`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.policyCap), (0, util_1.obj)(tx, args.request)],
    });
}
function confirmWithTreasuryCap(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::confirm_with_treasury_cap`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.treasuryCap), (0, util_1.obj)(tx, args.request)],
    });
}
function disallow(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::disallow`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.action, `${structs_2.String.$typeName}`)],
    });
}
function flush(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::flush`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function fromCoin(tx, typeArg, coin) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::from_coin`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, coin)],
    });
}
function fromCoinAction(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::from_coin_action`,
        arguments: [],
    });
}
function hasRuleConfig(tx, typeArgs, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::has_rule_config`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function hasRuleConfigWithType(tx, typeArgs, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::has_rule_config_with_type`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function isAllowed(tx, typeArg, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::is_allowed`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.pure)(tx, args.action, `${structs_2.String.$typeName}`)],
    });
}
function newPolicy(tx, typeArg, treasuryCap) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::new_policy`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, treasuryCap)],
    });
}
function spentBalance(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::spent_balance`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function removeRuleConfig(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::remove_rule_config`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function removeRuleForAction(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::remove_rule_for_action`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap), (0, util_1.pure)(tx, args.action, `${structs_2.String.$typeName}`)],
    });
}
function ruleConfig(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::rule_config`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.generic)(tx, `${typeArgs[1]}`, args.rule), (0, util_1.obj)(tx, args.self)],
    });
}
function ruleConfigMut(tx, typeArgs, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::rule_config_mut`,
        typeArguments: typeArgs,
        arguments: [(0, util_1.generic)(tx, `${typeArgs[1]}`, args.rule), (0, util_1.obj)(tx, args.self), (0, util_1.obj)(tx, args.cap)],
    });
}
function sharePolicy(tx, typeArg, policy) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::share_policy`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, policy)],
    });
}
function spend(tx, typeArg, t) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::spend`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, t)],
    });
}
function spendAction(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::spend_action`,
        arguments: [],
    });
}
function spent(tx, typeArg, self) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::spent`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, self)],
    });
}
function toCoin(tx, typeArg, t) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::to_coin`,
        typeArguments: [typeArg],
        arguments: [(0, util_1.obj)(tx, t)],
    });
}
function toCoinAction(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::to_coin_action`,
        arguments: [],
    });
}
function transferAction(tx) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::token::transfer_action`,
        arguments: [],
    });
}
//# sourceMappingURL=functions.js.map