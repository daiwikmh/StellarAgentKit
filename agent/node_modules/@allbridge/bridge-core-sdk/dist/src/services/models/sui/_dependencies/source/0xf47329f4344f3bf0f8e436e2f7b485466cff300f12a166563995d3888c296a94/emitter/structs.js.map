{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../../../src/services/models/sui/_dependencies/source/0xf47329f4344f3bf0f8e436e2f7b485466cff300f12a166563995d3888c296a94/emitter/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {\n  PhantomReified,\n  Reified,\n  StructClass,\n  ToField,\n  ToTypeStr,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  phantom,\n} from \"../../../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType } from \"../../../../_framework/util\";\nimport { ID, UID } from \"../../../../sui/object/structs\";\nimport { PKG_V1 } from \"../index\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== EmitterCap =============================== */\n\nexport function isEmitterCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::emitter::EmitterCap`;\n}\n\nexport interface EmitterCapFields {\n  id: ToField<UID>;\n  sequence: ToField<\"u64\">;\n}\n\nexport type EmitterCapReified = Reified<EmitterCap, EmitterCapFields>;\n\nexport class EmitterCap implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::emitter::EmitterCap`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = EmitterCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = EmitterCap.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly sequence: ToField<\"u64\">;\n\n  private constructor(typeArgs: [], fields: EmitterCapFields) {\n    this.$fullTypeName = composeSuiType(EmitterCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.sequence = fields.sequence;\n  }\n\n  static reified(): EmitterCapReified {\n    return {\n      typeName: EmitterCap.$typeName,\n      fullTypeName: composeSuiType(EmitterCap.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: EmitterCap.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => EmitterCap.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => EmitterCap.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => EmitterCap.fromBcs(data),\n      bcs: EmitterCap.bcs,\n      fromJSONField: (field: any) => EmitterCap.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => EmitterCap.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => EmitterCap.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => EmitterCap.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => EmitterCap.fetch(client, id),\n      new: (fields: EmitterCapFields) => {\n        return new EmitterCap([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return EmitterCap.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<EmitterCap>> {\n    return phantom(EmitterCap.reified());\n  }\n  static get p() {\n    return EmitterCap.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"EmitterCap\", {\n      id: UID.bcs,\n      sequence: bcs.u64(),\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): EmitterCap {\n    return EmitterCap.reified().new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      sequence: decodeFromFields(\"u64\", fields.sequence),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): EmitterCap {\n    if (!isEmitterCap(item.type)) {\n      throw new Error(\"not a EmitterCap type\");\n    }\n\n    return EmitterCap.reified().new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      sequence: decodeFromFieldsWithTypes(\"u64\", item.fields.sequence),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): EmitterCap {\n    return EmitterCap.fromFields(EmitterCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      sequence: this.sequence.toString(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): EmitterCap {\n    return EmitterCap.reified().new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      sequence: decodeFromJSONField(\"u64\", field.sequence),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): EmitterCap {\n    if (json.$typeName !== EmitterCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return EmitterCap.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): EmitterCap {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isEmitterCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a EmitterCap object`);\n    }\n    return EmitterCap.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): EmitterCap {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isEmitterCap(data.bcs.type)) {\n        throw new Error(`object at is not a EmitterCap object`);\n      }\n\n      return EmitterCap.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return EmitterCap.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<EmitterCap> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching EmitterCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isEmitterCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a EmitterCap object`);\n    }\n\n    return EmitterCap.fromSuiObjectData(res.data);\n  }\n}\n\n/* ============================== EmitterCreated =============================== */\n\nexport function isEmitterCreated(type: string): boolean {\n  type = compressSuiType(type);\n  return type === `${PKG_V1}::emitter::EmitterCreated`;\n}\n\nexport interface EmitterCreatedFields {\n  emitterCap: ToField<ID>;\n}\n\nexport type EmitterCreatedReified = Reified<EmitterCreated, EmitterCreatedFields>;\n\nexport class EmitterCreated implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V1}::emitter::EmitterCreated`;\n  }\n  static readonly $numTypeParams = 0;\n  static readonly $isPhantom = [] as const;\n\n  readonly $typeName = EmitterCreated.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [];\n  readonly $isPhantom = EmitterCreated.$isPhantom;\n\n  readonly emitterCap: ToField<ID>;\n\n  private constructor(typeArgs: [], fields: EmitterCreatedFields) {\n    this.$fullTypeName = composeSuiType(EmitterCreated.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.emitterCap = fields.emitterCap;\n  }\n\n  static reified(): EmitterCreatedReified {\n    return {\n      typeName: EmitterCreated.$typeName,\n      fullTypeName: composeSuiType(EmitterCreated.$typeName, ...[]) as string,\n      typeArgs: [] as [],\n      isPhantom: EmitterCreated.$isPhantom,\n      reifiedTypeArgs: [],\n      fromFields: (fields: Record<string, any>) => EmitterCreated.fromFields(fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => EmitterCreated.fromFieldsWithTypes(item),\n      fromBcs: (data: Uint8Array) => EmitterCreated.fromBcs(data),\n      bcs: EmitterCreated.bcs,\n      fromJSONField: (field: any) => EmitterCreated.fromJSONField(field),\n      fromJSON: (json: Record<string, any>) => EmitterCreated.fromJSON(json),\n      fromSuiParsedData: (content: SuiParsedData) => EmitterCreated.fromSuiParsedData(content),\n      fromSuiObjectData: (content: SuiObjectData) => EmitterCreated.fromSuiObjectData(content),\n      fetch: async (client: SuiClient, id: string) => EmitterCreated.fetch(client, id),\n      new: (fields: EmitterCreatedFields) => {\n        return new EmitterCreated([], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return EmitterCreated.reified();\n  }\n\n  static phantom(): PhantomReified<ToTypeStr<EmitterCreated>> {\n    return phantom(EmitterCreated.reified());\n  }\n  static get p() {\n    return EmitterCreated.phantom();\n  }\n\n  static get bcs() {\n    return bcs.struct(\"EmitterCreated\", {\n      emitter_cap: ID.bcs,\n    });\n  }\n\n  static fromFields(fields: Record<string, any>): EmitterCreated {\n    return EmitterCreated.reified().new({\n      emitterCap: decodeFromFields(ID.reified(), fields.emitter_cap),\n    });\n  }\n\n  static fromFieldsWithTypes(item: FieldsWithTypes): EmitterCreated {\n    if (!isEmitterCreated(item.type)) {\n      throw new Error(\"not a EmitterCreated type\");\n    }\n\n    return EmitterCreated.reified().new({\n      emitterCap: decodeFromFieldsWithTypes(ID.reified(), item.fields.emitter_cap),\n    });\n  }\n\n  static fromBcs(data: Uint8Array): EmitterCreated {\n    return EmitterCreated.fromFields(EmitterCreated.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      emitterCap: this.emitterCap,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField(field: any): EmitterCreated {\n    return EmitterCreated.reified().new({\n      emitterCap: decodeFromJSONField(ID.reified(), field.emitterCap),\n    });\n  }\n\n  static fromJSON(json: Record<string, any>): EmitterCreated {\n    if (json.$typeName !== EmitterCreated.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n\n    return EmitterCreated.fromJSONField(json);\n  }\n\n  static fromSuiParsedData(content: SuiParsedData): EmitterCreated {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isEmitterCreated(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a EmitterCreated object`);\n    }\n    return EmitterCreated.fromFieldsWithTypes(content);\n  }\n\n  static fromSuiObjectData(data: SuiObjectData): EmitterCreated {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isEmitterCreated(data.bcs.type)) {\n        throw new Error(`object at is not a EmitterCreated object`);\n      }\n\n      return EmitterCreated.fromBcs(fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return EmitterCreated.fromSuiParsedData(data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch(client: SuiClient, id: string): Promise<EmitterCreated> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching EmitterCreated object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isEmitterCreated(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a EmitterCreated object`);\n    }\n\n    return EmitterCreated.fromSuiObjectData(res.data);\n  }\n}\n"]}