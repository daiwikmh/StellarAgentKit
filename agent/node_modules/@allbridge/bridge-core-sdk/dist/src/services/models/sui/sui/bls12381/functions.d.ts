import { Transaction, TransactionArgument, TransactionObjectInput } from "@mysten/sui/transactions";
export interface PairingArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function pairing(tx: Transaction, args: PairingArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface Bls12381MinPkVerifyArgs {
    signature: Array<number | TransactionArgument> | TransactionArgument;
    publicKey: Array<number | TransactionArgument> | TransactionArgument;
    msg: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function bls12381MinPkVerify(tx: Transaction, args: Bls12381MinPkVerifyArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface Bls12381MinSigVerifyArgs {
    signature: Array<number | TransactionArgument> | TransactionArgument;
    publicKey: Array<number | TransactionArgument> | TransactionArgument;
    msg: Array<number | TransactionArgument> | TransactionArgument;
}
export declare function bls12381MinSigVerify(tx: Transaction, args: Bls12381MinSigVerifyArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G1AddArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function g1Add(tx: Transaction, args: G1AddArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G1DivArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function g1Div(tx: Transaction, args: G1DivArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function g1FromBytes(tx: Transaction, bytes: Array<number | TransactionArgument> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function g1Generator(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function g1Identity(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G1MulArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function g1Mul(tx: Transaction, args: G1MulArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G1MultiScalarMultiplicationArgs {
    scalars: Array<TransactionObjectInput> | TransactionArgument;
    elements: Array<TransactionObjectInput> | TransactionArgument;
}
export declare function g1MultiScalarMultiplication(tx: Transaction, args: G1MultiScalarMultiplicationArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function g1Neg(tx: Transaction, e: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G1SubArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function g1Sub(tx: Transaction, args: G1SubArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function g1ToUncompressedG1(tx: Transaction, e: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G2AddArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function g2Add(tx: Transaction, args: G2AddArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G2DivArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function g2Div(tx: Transaction, args: G2DivArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function g2FromBytes(tx: Transaction, bytes: Array<number | TransactionArgument> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function g2Generator(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function g2Identity(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G2MulArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function g2Mul(tx: Transaction, args: G2MulArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G2MultiScalarMultiplicationArgs {
    scalars: Array<TransactionObjectInput> | TransactionArgument;
    elements: Array<TransactionObjectInput> | TransactionArgument;
}
export declare function g2MultiScalarMultiplication(tx: Transaction, args: G2MultiScalarMultiplicationArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function g2Neg(tx: Transaction, e: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface G2SubArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function g2Sub(tx: Transaction, args: G2SubArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GtAddArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function gtAdd(tx: Transaction, args: GtAddArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GtDivArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function gtDiv(tx: Transaction, args: GtDivArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function gtGenerator(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function gtIdentity(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GtMulArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function gtMul(tx: Transaction, args: GtMulArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function gtNeg(tx: Transaction, e: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface GtSubArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function gtSub(tx: Transaction, args: GtSubArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function hashToG1(tx: Transaction, m: Array<number | TransactionArgument> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function hashToG2(tx: Transaction, m: Array<number | TransactionArgument> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ScalarAddArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function scalarAdd(tx: Transaction, args: ScalarAddArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ScalarDivArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function scalarDiv(tx: Transaction, args: ScalarDivArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function scalarFromBytes(tx: Transaction, bytes: Array<number | TransactionArgument> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function scalarFromU64(tx: Transaction, x: bigint | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function scalarInv(tx: Transaction, e: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ScalarMulArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function scalarMul(tx: Transaction, args: ScalarMulArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function scalarNeg(tx: Transaction, e: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function scalarOne(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export interface ScalarSubArgs {
    e1: TransactionObjectInput;
    e2: TransactionObjectInput;
}
export declare function scalarSub(tx: Transaction, args: ScalarSubArgs): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function scalarZero(tx: Transaction): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function uncompressedG1Sum(tx: Transaction, terms: Array<TransactionObjectInput> | TransactionArgument): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
export declare function uncompressedG1ToG1(tx: Transaction, e: TransactionObjectInput): import("@mysten/sui/dist/cjs/transactions").TransactionResult;
