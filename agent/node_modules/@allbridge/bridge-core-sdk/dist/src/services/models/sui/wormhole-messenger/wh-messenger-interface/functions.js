"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrate = migrate;
exports.gasBalanceValue = gasBalanceValue;
exports.getGasUsage = getGasUsage;
exports.getOtherChainIds = getOtherChainIds;
exports.getTransactionCost = getTransactionCost;
exports.initEmitter = initEmitter;
exports.receiveMessage = receiveMessage;
exports.registerWormholeMessenger = registerWormholeMessenger;
exports.sendMessage = sendMessage;
exports.setGasUsage = setGasUsage;
exports.setOtherChains = setOtherChains;
exports.unregisterWormholeMessenger = unregisterWormholeMessenger;
exports.withdrawFee = withdrawFee;
exports.hasReceivedMessage = hasReceivedMessage;
exports.hasSentMessages = hasSentMessages;
// @ts-nocheck
const __1 = require("..");
const util_1 = require("../../_framework/util");
function migrate(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::migrate`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.wormholeMessenger)],
    });
}
function gasBalanceValue(tx, messenger) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::gas_balance_value`,
        arguments: [(0, util_1.obj)(tx, messenger)],
    });
}
function getGasUsage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::get_gas_usage`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.pure)(tx, args.chainId, `u8`)],
    });
}
function getOtherChainIds(tx, messenger) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::get_other_chain_ids`,
        arguments: [(0, util_1.obj)(tx, messenger)],
    });
}
function getTransactionCost(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::get_transaction_cost`,
        arguments: [
            (0, util_1.obj)(tx, args.messenger),
            (0, util_1.obj)(tx, args.wormholeState),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.pure)(tx, args.chainId, `u8`),
        ],
    });
}
function initEmitter(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::init_emitter`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.whMessenger), (0, util_1.obj)(tx, args.wormholeState)],
    });
}
function receiveMessage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::receive_message`,
        arguments: [
            (0, util_1.obj)(tx, args.whMessenger),
            (0, util_1.pure)(tx, args.encodedMsg, `vector<u8>`),
            (0, util_1.obj)(tx, args.wormholeState),
            (0, util_1.obj)(tx, args.theClock),
        ],
    });
}
function registerWormholeMessenger(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::register_wormhole_messenger`,
        arguments: [
            (0, util_1.obj)(tx, args.adminCap),
            (0, util_1.obj)(tx, args.whMessenger),
            (0, util_1.pure)(tx, args.chainId, `u16`),
            (0, util_1.obj)(tx, args.whAddress),
        ],
    });
}
function sendMessage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::send_message`,
        arguments: [
            (0, util_1.obj)(tx, args.whMessenger),
            (0, util_1.obj)(tx, args.wormholeState),
            (0, util_1.obj)(tx, args.gasOracle),
            (0, util_1.obj)(tx, args.payload),
            (0, util_1.obj)(tx, args.sender),
            (0, util_1.obj)(tx, args.theClock),
            (0, util_1.obj)(tx, args.coin),
        ],
    });
}
function setGasUsage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::set_gas_usage`,
        arguments: [
            (0, util_1.obj)(tx, args.adminCap),
            (0, util_1.obj)(tx, args.whMessenger),
            (0, util_1.pure)(tx, args.chainId, `u8`),
            (0, util_1.pure)(tx, args.gasAmount, `u64`),
        ],
    });
}
function setOtherChains(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::set_other_chains`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.whMessenger), (0, util_1.pure)(tx, args.otherChainIds, `vector<bool>`)],
    });
}
function unregisterWormholeMessenger(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::unregister_wormhole_messenger`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.whMessenger), (0, util_1.pure)(tx, args.chainId, `u16`)],
    });
}
function withdrawFee(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::withdraw_fee`,
        arguments: [(0, util_1.obj)(tx, args.adminCap), (0, util_1.obj)(tx, args.whMessenger), (0, util_1.pure)(tx, args.amount, `u64`)],
    });
}
function hasReceivedMessage(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::has_received_message`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.obj)(tx, args.message)],
    });
}
function hasSentMessages(tx, args) {
    return tx.moveCall({
        target: `${__1.PUBLISHED_AT}::wh_messenger_interface::has_sent_messages`,
        arguments: [(0, util_1.obj)(tx, args.messenger), (0, util_1.obj)(tx, args.message)],
    });
}
//# sourceMappingURL=functions.js.map