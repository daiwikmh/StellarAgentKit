{"version":3,"file":"structs.js","sourceRoot":"","sources":["../../../../../../../src/services/models/sui/sui/transfer-policy/structs.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as reified from \"../../_framework/reified\";\nimport { TypeName } from \"../../_dependencies/source/0x1/type-name/structs\";\nimport {\n  PhantomReified,\n  PhantomToTypeStr,\n  PhantomTypeArgument,\n  Reified,\n  StructClass,\n  ToField,\n  ToPhantomTypeArgument,\n  ToTypeStr,\n  assertFieldsWithTypesArgsMatch,\n  assertReifiedTypeArgsMatch,\n  decodeFromFields,\n  decodeFromFieldsWithTypes,\n  decodeFromJSONField,\n  extractType,\n  phantom,\n  ToTypeStr as ToPhantom,\n} from \"../../_framework/reified\";\nimport { FieldsWithTypes, composeSuiType, compressSuiType, parseTypeName } from \"../../_framework/util\";\nimport { Balance } from \"../balance/structs\";\nimport { PKG_V26 } from \"../index\";\nimport { ID, UID } from \"../object/structs\";\nimport { SUI } from \"../sui/structs\";\nimport { VecSet } from \"../vec-set/structs\";\nimport { bcs } from \"@mysten/sui/bcs\";\nimport { SuiClient, SuiObjectData, SuiParsedData } from \"@mysten/sui/client\";\nimport { fromB64 } from \"@mysten/sui/utils\";\n\n/* ============================== RuleKey =============================== */\n\nexport function isRuleKey(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::transfer_policy::RuleKey` + \"<\");\n}\n\nexport interface RuleKeyFields<T extends PhantomTypeArgument> {\n  dummyField: ToField<\"bool\">;\n}\n\nexport type RuleKeyReified<T extends PhantomTypeArgument> = Reified<RuleKey<T>, RuleKeyFields<T>>;\n\nexport class RuleKey<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::transfer_policy::RuleKey`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = RuleKey.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = RuleKey.$isPhantom;\n\n  readonly dummyField: ToField<\"bool\">;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: RuleKeyFields<T>) {\n    this.$fullTypeName = composeSuiType(RuleKey.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.dummyField = fields.dummyField;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): RuleKeyReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: RuleKey.$typeName,\n      fullTypeName: composeSuiType(RuleKey.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: RuleKey.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => RuleKey.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => RuleKey.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => RuleKey.fromBcs(T, data),\n      bcs: RuleKey.bcs,\n      fromJSONField: (field: any) => RuleKey.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => RuleKey.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => RuleKey.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => RuleKey.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => RuleKey.fetch(client, T, id),\n      new: (fields: RuleKeyFields<ToPhantomTypeArgument<T>>) => {\n        return new RuleKey([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return RuleKey.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<RuleKey<ToPhantomTypeArgument<T>>>> {\n    return phantom(RuleKey.reified(T));\n  }\n  static get p() {\n    return RuleKey.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"RuleKey\", {\n      dummy_field: bcs.bool(),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): RuleKey<ToPhantomTypeArgument<T>> {\n    return RuleKey.reified(typeArg).new({\n      dummyField: decodeFromFields(\"bool\", fields.dummy_field),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): RuleKey<ToPhantomTypeArgument<T>> {\n    if (!isRuleKey(item.type)) {\n      throw new Error(\"not a RuleKey type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return RuleKey.reified(typeArg).new({\n      dummyField: decodeFromFieldsWithTypes(\"bool\", item.fields.dummy_field),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): RuleKey<ToPhantomTypeArgument<T>> {\n    return RuleKey.fromFields(typeArg, RuleKey.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      dummyField: this.dummyField,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): RuleKey<ToPhantomTypeArgument<T>> {\n    return RuleKey.reified(typeArg).new({\n      dummyField: decodeFromJSONField(\"bool\", field.dummyField),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): RuleKey<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== RuleKey.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(RuleKey.$typeName, extractType(typeArg)), json.$typeArgs, [typeArg]);\n\n    return RuleKey.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): RuleKey<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isRuleKey(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a RuleKey object`);\n    }\n    return RuleKey.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): RuleKey<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isRuleKey(data.bcs.type)) {\n        throw new Error(`object at is not a RuleKey object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return RuleKey.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return RuleKey.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<RuleKey<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching RuleKey object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isRuleKey(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a RuleKey object`);\n    }\n\n    return RuleKey.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== TransferPolicy =============================== */\n\nexport function isTransferPolicy(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::transfer_policy::TransferPolicy` + \"<\");\n}\n\nexport interface TransferPolicyFields<T extends PhantomTypeArgument> {\n  id: ToField<UID>;\n  balance: ToField<Balance<ToPhantom<SUI>>>;\n  rules: ToField<VecSet<TypeName>>;\n}\n\nexport type TransferPolicyReified<T extends PhantomTypeArgument> = Reified<TransferPolicy<T>, TransferPolicyFields<T>>;\n\nexport class TransferPolicy<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::transfer_policy::TransferPolicy`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = TransferPolicy.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = TransferPolicy.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly balance: ToField<Balance<ToPhantom<SUI>>>;\n  readonly rules: ToField<VecSet<TypeName>>;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: TransferPolicyFields<T>) {\n    this.$fullTypeName = composeSuiType(TransferPolicy.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.balance = fields.balance;\n    this.rules = fields.rules;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(T: T): TransferPolicyReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: TransferPolicy.$typeName,\n      fullTypeName: composeSuiType(TransferPolicy.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: TransferPolicy.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => TransferPolicy.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => TransferPolicy.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => TransferPolicy.fromBcs(T, data),\n      bcs: TransferPolicy.bcs,\n      fromJSONField: (field: any) => TransferPolicy.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => TransferPolicy.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => TransferPolicy.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => TransferPolicy.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => TransferPolicy.fetch(client, T, id),\n      new: (fields: TransferPolicyFields<ToPhantomTypeArgument<T>>) => {\n        return new TransferPolicy([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return TransferPolicy.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<TransferPolicy<ToPhantomTypeArgument<T>>>> {\n    return phantom(TransferPolicy.reified(T));\n  }\n  static get p() {\n    return TransferPolicy.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"TransferPolicy\", {\n      id: UID.bcs,\n      balance: Balance.bcs,\n      rules: VecSet.bcs(TypeName.bcs),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): TransferPolicy<ToPhantomTypeArgument<T>> {\n    return TransferPolicy.reified(typeArg).new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      balance: decodeFromFields(Balance.reified(reified.phantom(SUI.reified())), fields.balance),\n      rules: decodeFromFields(VecSet.reified(TypeName.reified()), fields.rules),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): TransferPolicy<ToPhantomTypeArgument<T>> {\n    if (!isTransferPolicy(item.type)) {\n      throw new Error(\"not a TransferPolicy type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return TransferPolicy.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      balance: decodeFromFieldsWithTypes(Balance.reified(reified.phantom(SUI.reified())), item.fields.balance),\n      rules: decodeFromFieldsWithTypes(VecSet.reified(TypeName.reified()), item.fields.rules),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): TransferPolicy<ToPhantomTypeArgument<T>> {\n    return TransferPolicy.fromFields(typeArg, TransferPolicy.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      balance: this.balance.toJSONField(),\n      rules: this.rules.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): TransferPolicy<ToPhantomTypeArgument<T>> {\n    return TransferPolicy.reified(typeArg).new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      balance: decodeFromJSONField(Balance.reified(reified.phantom(SUI.reified())), field.balance),\n      rules: decodeFromJSONField(VecSet.reified(TypeName.reified()), field.rules),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): TransferPolicy<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== TransferPolicy.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(TransferPolicy.$typeName, extractType(typeArg)), json.$typeArgs, [\n      typeArg,\n    ]);\n\n    return TransferPolicy.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): TransferPolicy<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isTransferPolicy(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a TransferPolicy object`);\n    }\n    return TransferPolicy.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): TransferPolicy<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isTransferPolicy(data.bcs.type)) {\n        throw new Error(`object at is not a TransferPolicy object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return TransferPolicy.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return TransferPolicy.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<TransferPolicy<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching TransferPolicy object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isTransferPolicy(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a TransferPolicy object`);\n    }\n\n    return TransferPolicy.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== TransferPolicyCap =============================== */\n\nexport function isTransferPolicyCap(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::transfer_policy::TransferPolicyCap` + \"<\");\n}\n\nexport interface TransferPolicyCapFields<T extends PhantomTypeArgument> {\n  id: ToField<UID>;\n  policyId: ToField<ID>;\n}\n\nexport type TransferPolicyCapReified<T extends PhantomTypeArgument> = Reified<\n  TransferPolicyCap<T>,\n  TransferPolicyCapFields<T>\n>;\n\nexport class TransferPolicyCap<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::transfer_policy::TransferPolicyCap`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = TransferPolicyCap.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = TransferPolicyCap.$isPhantom;\n\n  readonly id: ToField<UID>;\n  readonly policyId: ToField<ID>;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: TransferPolicyCapFields<T>) {\n    this.$fullTypeName = composeSuiType(TransferPolicyCap.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n    this.policyId = fields.policyId;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): TransferPolicyCapReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: TransferPolicyCap.$typeName,\n      fullTypeName: composeSuiType(TransferPolicyCap.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: TransferPolicyCap.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => TransferPolicyCap.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => TransferPolicyCap.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => TransferPolicyCap.fromBcs(T, data),\n      bcs: TransferPolicyCap.bcs,\n      fromJSONField: (field: any) => TransferPolicyCap.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => TransferPolicyCap.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => TransferPolicyCap.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => TransferPolicyCap.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => TransferPolicyCap.fetch(client, T, id),\n      new: (fields: TransferPolicyCapFields<ToPhantomTypeArgument<T>>) => {\n        return new TransferPolicyCap([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return TransferPolicyCap.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<TransferPolicyCap<ToPhantomTypeArgument<T>>>> {\n    return phantom(TransferPolicyCap.reified(T));\n  }\n  static get p() {\n    return TransferPolicyCap.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"TransferPolicyCap\", {\n      id: UID.bcs,\n      policy_id: ID.bcs,\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): TransferPolicyCap<ToPhantomTypeArgument<T>> {\n    return TransferPolicyCap.reified(typeArg).new({\n      id: decodeFromFields(UID.reified(), fields.id),\n      policyId: decodeFromFields(ID.reified(), fields.policy_id),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): TransferPolicyCap<ToPhantomTypeArgument<T>> {\n    if (!isTransferPolicyCap(item.type)) {\n      throw new Error(\"not a TransferPolicyCap type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return TransferPolicyCap.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(UID.reified(), item.fields.id),\n      policyId: decodeFromFieldsWithTypes(ID.reified(), item.fields.policy_id),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): TransferPolicyCap<ToPhantomTypeArgument<T>> {\n    return TransferPolicyCap.fromFields(typeArg, TransferPolicyCap.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n      policyId: this.policyId,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): TransferPolicyCap<ToPhantomTypeArgument<T>> {\n    return TransferPolicyCap.reified(typeArg).new({\n      id: decodeFromJSONField(UID.reified(), field.id),\n      policyId: decodeFromJSONField(ID.reified(), field.policyId),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): TransferPolicyCap<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== TransferPolicyCap.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(TransferPolicyCap.$typeName, extractType(typeArg)), json.$typeArgs, [\n      typeArg,\n    ]);\n\n    return TransferPolicyCap.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): TransferPolicyCap<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isTransferPolicyCap(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a TransferPolicyCap object`);\n    }\n    return TransferPolicyCap.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): TransferPolicyCap<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isTransferPolicyCap(data.bcs.type)) {\n        throw new Error(`object at is not a TransferPolicyCap object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return TransferPolicyCap.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return TransferPolicyCap.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<TransferPolicyCap<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching TransferPolicyCap object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isTransferPolicyCap(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a TransferPolicyCap object`);\n    }\n\n    return TransferPolicyCap.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== TransferPolicyCreated =============================== */\n\nexport function isTransferPolicyCreated(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::transfer_policy::TransferPolicyCreated` + \"<\");\n}\n\nexport interface TransferPolicyCreatedFields<T extends PhantomTypeArgument> {\n  id: ToField<ID>;\n}\n\nexport type TransferPolicyCreatedReified<T extends PhantomTypeArgument> = Reified<\n  TransferPolicyCreated<T>,\n  TransferPolicyCreatedFields<T>\n>;\n\nexport class TransferPolicyCreated<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::transfer_policy::TransferPolicyCreated`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = TransferPolicyCreated.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = TransferPolicyCreated.$isPhantom;\n\n  readonly id: ToField<ID>;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: TransferPolicyCreatedFields<T>) {\n    this.$fullTypeName = composeSuiType(TransferPolicyCreated.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): TransferPolicyCreatedReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: TransferPolicyCreated.$typeName,\n      fullTypeName: composeSuiType(TransferPolicyCreated.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: TransferPolicyCreated.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => TransferPolicyCreated.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => TransferPolicyCreated.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => TransferPolicyCreated.fromBcs(T, data),\n      bcs: TransferPolicyCreated.bcs,\n      fromJSONField: (field: any) => TransferPolicyCreated.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => TransferPolicyCreated.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => TransferPolicyCreated.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => TransferPolicyCreated.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => TransferPolicyCreated.fetch(client, T, id),\n      new: (fields: TransferPolicyCreatedFields<ToPhantomTypeArgument<T>>) => {\n        return new TransferPolicyCreated([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return TransferPolicyCreated.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<TransferPolicyCreated<ToPhantomTypeArgument<T>>>> {\n    return phantom(TransferPolicyCreated.reified(T));\n  }\n  static get p() {\n    return TransferPolicyCreated.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"TransferPolicyCreated\", {\n      id: ID.bcs,\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): TransferPolicyCreated<ToPhantomTypeArgument<T>> {\n    return TransferPolicyCreated.reified(typeArg).new({\n      id: decodeFromFields(ID.reified(), fields.id),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): TransferPolicyCreated<ToPhantomTypeArgument<T>> {\n    if (!isTransferPolicyCreated(item.type)) {\n      throw new Error(\"not a TransferPolicyCreated type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return TransferPolicyCreated.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(ID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): TransferPolicyCreated<ToPhantomTypeArgument<T>> {\n    return TransferPolicyCreated.fromFields(typeArg, TransferPolicyCreated.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): TransferPolicyCreated<ToPhantomTypeArgument<T>> {\n    return TransferPolicyCreated.reified(typeArg).new({\n      id: decodeFromJSONField(ID.reified(), field.id),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): TransferPolicyCreated<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== TransferPolicyCreated.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(TransferPolicyCreated.$typeName, extractType(typeArg)), json.$typeArgs, [\n      typeArg,\n    ]);\n\n    return TransferPolicyCreated.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): TransferPolicyCreated<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isTransferPolicyCreated(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a TransferPolicyCreated object`);\n    }\n    return TransferPolicyCreated.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): TransferPolicyCreated<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isTransferPolicyCreated(data.bcs.type)) {\n        throw new Error(`object at is not a TransferPolicyCreated object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return TransferPolicyCreated.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return TransferPolicyCreated.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<TransferPolicyCreated<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching TransferPolicyCreated object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isTransferPolicyCreated(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a TransferPolicyCreated object`);\n    }\n\n    return TransferPolicyCreated.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== TransferPolicyDestroyed =============================== */\n\nexport function isTransferPolicyDestroyed(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::transfer_policy::TransferPolicyDestroyed` + \"<\");\n}\n\nexport interface TransferPolicyDestroyedFields<T extends PhantomTypeArgument> {\n  id: ToField<ID>;\n}\n\nexport type TransferPolicyDestroyedReified<T extends PhantomTypeArgument> = Reified<\n  TransferPolicyDestroyed<T>,\n  TransferPolicyDestroyedFields<T>\n>;\n\nexport class TransferPolicyDestroyed<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::transfer_policy::TransferPolicyDestroyed`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = TransferPolicyDestroyed.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = TransferPolicyDestroyed.$isPhantom;\n\n  readonly id: ToField<ID>;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: TransferPolicyDestroyedFields<T>) {\n    this.$fullTypeName = composeSuiType(TransferPolicyDestroyed.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.id = fields.id;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): TransferPolicyDestroyedReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: TransferPolicyDestroyed.$typeName,\n      fullTypeName: composeSuiType(TransferPolicyDestroyed.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: TransferPolicyDestroyed.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => TransferPolicyDestroyed.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => TransferPolicyDestroyed.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => TransferPolicyDestroyed.fromBcs(T, data),\n      bcs: TransferPolicyDestroyed.bcs,\n      fromJSONField: (field: any) => TransferPolicyDestroyed.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => TransferPolicyDestroyed.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => TransferPolicyDestroyed.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => TransferPolicyDestroyed.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => TransferPolicyDestroyed.fetch(client, T, id),\n      new: (fields: TransferPolicyDestroyedFields<ToPhantomTypeArgument<T>>) => {\n        return new TransferPolicyDestroyed([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return TransferPolicyDestroyed.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<TransferPolicyDestroyed<ToPhantomTypeArgument<T>>>> {\n    return phantom(TransferPolicyDestroyed.reified(T));\n  }\n  static get p() {\n    return TransferPolicyDestroyed.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"TransferPolicyDestroyed\", {\n      id: ID.bcs,\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): TransferPolicyDestroyed<ToPhantomTypeArgument<T>> {\n    return TransferPolicyDestroyed.reified(typeArg).new({\n      id: decodeFromFields(ID.reified(), fields.id),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): TransferPolicyDestroyed<ToPhantomTypeArgument<T>> {\n    if (!isTransferPolicyDestroyed(item.type)) {\n      throw new Error(\"not a TransferPolicyDestroyed type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return TransferPolicyDestroyed.reified(typeArg).new({\n      id: decodeFromFieldsWithTypes(ID.reified(), item.fields.id),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): TransferPolicyDestroyed<ToPhantomTypeArgument<T>> {\n    return TransferPolicyDestroyed.fromFields(typeArg, TransferPolicyDestroyed.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      id: this.id,\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): TransferPolicyDestroyed<ToPhantomTypeArgument<T>> {\n    return TransferPolicyDestroyed.reified(typeArg).new({\n      id: decodeFromJSONField(ID.reified(), field.id),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): TransferPolicyDestroyed<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== TransferPolicyDestroyed.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(\n      composeSuiType(TransferPolicyDestroyed.$typeName, extractType(typeArg)),\n      json.$typeArgs,\n      [typeArg]\n    );\n\n    return TransferPolicyDestroyed.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): TransferPolicyDestroyed<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isTransferPolicyDestroyed(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a TransferPolicyDestroyed object`);\n    }\n    return TransferPolicyDestroyed.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): TransferPolicyDestroyed<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isTransferPolicyDestroyed(data.bcs.type)) {\n        throw new Error(`object at is not a TransferPolicyDestroyed object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return TransferPolicyDestroyed.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return TransferPolicyDestroyed.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<TransferPolicyDestroyed<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching TransferPolicyDestroyed object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isTransferPolicyDestroyed(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a TransferPolicyDestroyed object`);\n    }\n\n    return TransferPolicyDestroyed.fromSuiObjectData(typeArg, res.data);\n  }\n}\n\n/* ============================== TransferRequest =============================== */\n\nexport function isTransferRequest(type: string): boolean {\n  type = compressSuiType(type);\n  return type.startsWith(`${PKG_V26}::transfer_policy::TransferRequest` + \"<\");\n}\n\nexport interface TransferRequestFields<T extends PhantomTypeArgument> {\n  item: ToField<ID>;\n  paid: ToField<\"u64\">;\n  from: ToField<ID>;\n  receipts: ToField<VecSet<TypeName>>;\n}\n\nexport type TransferRequestReified<T extends PhantomTypeArgument> = Reified<\n  TransferRequest<T>,\n  TransferRequestFields<T>\n>;\n\nexport class TransferRequest<T extends PhantomTypeArgument> implements StructClass {\n  __StructClass = true as const;\n\n  static get $typeName() {\n    return `${PKG_V26}::transfer_policy::TransferRequest`;\n  }\n  static readonly $numTypeParams = 1;\n  static readonly $isPhantom = [true] as const;\n\n  readonly $typeName = TransferRequest.$typeName;\n  readonly $fullTypeName: string;\n  readonly $typeArgs: [PhantomToTypeStr<T>];\n  readonly $isPhantom = TransferRequest.$isPhantom;\n\n  readonly item: ToField<ID>;\n  readonly paid: ToField<\"u64\">;\n  readonly from: ToField<ID>;\n  readonly receipts: ToField<VecSet<TypeName>>;\n\n  private constructor(typeArgs: [PhantomToTypeStr<T>], fields: TransferRequestFields<T>) {\n    this.$fullTypeName = composeSuiType(TransferRequest.$typeName, ...typeArgs) as string;\n    this.$typeArgs = typeArgs;\n\n    this.item = fields.item;\n    this.paid = fields.paid;\n    this.from = fields.from;\n    this.receipts = fields.receipts;\n  }\n\n  static reified<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): TransferRequestReified<ToPhantomTypeArgument<T>> {\n    return {\n      typeName: TransferRequest.$typeName,\n      fullTypeName: composeSuiType(TransferRequest.$typeName, ...[extractType(T)]) as string,\n      typeArgs: [extractType(T)] as [PhantomToTypeStr<ToPhantomTypeArgument<T>>],\n      isPhantom: TransferRequest.$isPhantom,\n      reifiedTypeArgs: [T],\n      fromFields: (fields: Record<string, any>) => TransferRequest.fromFields(T, fields),\n      fromFieldsWithTypes: (item: FieldsWithTypes) => TransferRequest.fromFieldsWithTypes(T, item),\n      fromBcs: (data: Uint8Array) => TransferRequest.fromBcs(T, data),\n      bcs: TransferRequest.bcs,\n      fromJSONField: (field: any) => TransferRequest.fromJSONField(T, field),\n      fromJSON: (json: Record<string, any>) => TransferRequest.fromJSON(T, json),\n      fromSuiParsedData: (content: SuiParsedData) => TransferRequest.fromSuiParsedData(T, content),\n      fromSuiObjectData: (content: SuiObjectData) => TransferRequest.fromSuiObjectData(T, content),\n      fetch: async (client: SuiClient, id: string) => TransferRequest.fetch(client, T, id),\n      new: (fields: TransferRequestFields<ToPhantomTypeArgument<T>>) => {\n        return new TransferRequest([extractType(T)], fields);\n      },\n      kind: \"StructClassReified\",\n    };\n  }\n\n  static get r() {\n    return TransferRequest.reified;\n  }\n\n  static phantom<T extends PhantomReified<PhantomTypeArgument>>(\n    T: T\n  ): PhantomReified<ToTypeStr<TransferRequest<ToPhantomTypeArgument<T>>>> {\n    return phantom(TransferRequest.reified(T));\n  }\n  static get p() {\n    return TransferRequest.phantom;\n  }\n\n  static get bcs() {\n    return bcs.struct(\"TransferRequest\", {\n      item: ID.bcs,\n      paid: bcs.u64(),\n      from: ID.bcs,\n      receipts: VecSet.bcs(TypeName.bcs),\n    });\n  }\n\n  static fromFields<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    fields: Record<string, any>\n  ): TransferRequest<ToPhantomTypeArgument<T>> {\n    return TransferRequest.reified(typeArg).new({\n      item: decodeFromFields(ID.reified(), fields.item),\n      paid: decodeFromFields(\"u64\", fields.paid),\n      from: decodeFromFields(ID.reified(), fields.from),\n      receipts: decodeFromFields(VecSet.reified(TypeName.reified()), fields.receipts),\n    });\n  }\n\n  static fromFieldsWithTypes<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    item: FieldsWithTypes\n  ): TransferRequest<ToPhantomTypeArgument<T>> {\n    if (!isTransferRequest(item.type)) {\n      throw new Error(\"not a TransferRequest type\");\n    }\n    assertFieldsWithTypesArgsMatch(item, [typeArg]);\n\n    return TransferRequest.reified(typeArg).new({\n      item: decodeFromFieldsWithTypes(ID.reified(), item.fields.item),\n      paid: decodeFromFieldsWithTypes(\"u64\", item.fields.paid),\n      from: decodeFromFieldsWithTypes(ID.reified(), item.fields.from),\n      receipts: decodeFromFieldsWithTypes(VecSet.reified(TypeName.reified()), item.fields.receipts),\n    });\n  }\n\n  static fromBcs<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: Uint8Array\n  ): TransferRequest<ToPhantomTypeArgument<T>> {\n    return TransferRequest.fromFields(typeArg, TransferRequest.bcs.parse(data));\n  }\n\n  toJSONField() {\n    return {\n      item: this.item,\n      paid: this.paid.toString(),\n      from: this.from,\n      receipts: this.receipts.toJSONField(),\n    };\n  }\n\n  toJSON() {\n    return {\n      $typeName: this.$typeName,\n      $typeArgs: this.$typeArgs,\n      ...this.toJSONField(),\n    };\n  }\n\n  static fromJSONField<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    field: any\n  ): TransferRequest<ToPhantomTypeArgument<T>> {\n    return TransferRequest.reified(typeArg).new({\n      item: decodeFromJSONField(ID.reified(), field.item),\n      paid: decodeFromJSONField(\"u64\", field.paid),\n      from: decodeFromJSONField(ID.reified(), field.from),\n      receipts: decodeFromJSONField(VecSet.reified(TypeName.reified()), field.receipts),\n    });\n  }\n\n  static fromJSON<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    json: Record<string, any>\n  ): TransferRequest<ToPhantomTypeArgument<T>> {\n    if (json.$typeName !== TransferRequest.$typeName) {\n      throw new Error(\"not a WithTwoGenerics json object\");\n    }\n    assertReifiedTypeArgsMatch(composeSuiType(TransferRequest.$typeName, extractType(typeArg)), json.$typeArgs, [\n      typeArg,\n    ]);\n\n    return TransferRequest.fromJSONField(typeArg, json);\n  }\n\n  static fromSuiParsedData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    content: SuiParsedData\n  ): TransferRequest<ToPhantomTypeArgument<T>> {\n    if (content.dataType !== \"moveObject\") {\n      throw new Error(\"not an object\");\n    }\n    if (!isTransferRequest(content.type)) {\n      throw new Error(`object at ${(content.fields as any).id} is not a TransferRequest object`);\n    }\n    return TransferRequest.fromFieldsWithTypes(typeArg, content);\n  }\n\n  static fromSuiObjectData<T extends PhantomReified<PhantomTypeArgument>>(\n    typeArg: T,\n    data: SuiObjectData\n  ): TransferRequest<ToPhantomTypeArgument<T>> {\n    if (data.bcs) {\n      if (data.bcs.dataType !== \"moveObject\" || !isTransferRequest(data.bcs.type)) {\n        throw new Error(`object at is not a TransferRequest object`);\n      }\n\n      const gotTypeArgs = parseTypeName(data.bcs.type).typeArgs;\n      if (gotTypeArgs.length !== 1) {\n        throw new Error(`type argument mismatch: expected 1 type argument but got '${gotTypeArgs.length}'`);\n      }\n      const gotTypeArg = compressSuiType(gotTypeArgs[0]);\n      const expectedTypeArg = compressSuiType(extractType(typeArg));\n      if (gotTypeArg !== compressSuiType(extractType(typeArg))) {\n        throw new Error(`type argument mismatch: expected '${expectedTypeArg}' but got '${gotTypeArg}'`);\n      }\n\n      return TransferRequest.fromBcs(typeArg, fromB64(data.bcs.bcsBytes));\n    }\n    if (data.content) {\n      return TransferRequest.fromSuiParsedData(typeArg, data.content);\n    }\n    throw new Error(\n      \"Both `bcs` and `content` fields are missing from the data. Include `showBcs` or `showContent` in the request.\"\n    );\n  }\n\n  static async fetch<T extends PhantomReified<PhantomTypeArgument>>(\n    client: SuiClient,\n    typeArg: T,\n    id: string\n  ): Promise<TransferRequest<ToPhantomTypeArgument<T>>> {\n    const res = await client.getObject({ id, options: { showBcs: true } });\n    if (res.error) {\n      throw new Error(`error fetching TransferRequest object at id ${id}: ${res.error.code}`);\n    }\n    if (res.data?.bcs?.dataType !== \"moveObject\" || !isTransferRequest(res.data.bcs.type)) {\n      throw new Error(`object at id ${id} is not a TransferRequest object`);\n    }\n\n    return TransferRequest.fromSuiObjectData(typeArg, res.data);\n  }\n}\n"]}