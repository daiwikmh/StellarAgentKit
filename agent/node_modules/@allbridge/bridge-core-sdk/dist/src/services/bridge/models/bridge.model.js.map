{"version":3,"file":"bridge.model.js","sourceRoot":"","sources":["../../../../../src/services/bridge/models/bridge.model.ts"],"names":[],"mappings":"","sourcesContent":["import { Big } from \"big.js\";\nimport { Messenger } from \"../../../client/core-api/core-api.model\";\nimport { AmountFormat, FeePaymentMethod, TxFeeParams } from \"../../../models\";\nimport { TokenWithChainDetails } from \"../../../tokens-info\";\n\nexport interface ApproveParams {\n  /**\n   * The token info\n   */\n  token: TokenWithChainDetails;\n\n  /**\n   *  The address of the token owner who is granting permission to use tokens\n   */\n  owner: string;\n\n  /**\n   * The integer amount of tokens to approve.\n   * Optional.\n   * The maximum amount by default.\n   */\n  amount?: string | number | Big;\n\n  /**\n   * The Messengers for different routes to approve.\n   * Optional.\n   * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n   */\n  messenger?: Messenger;\n}\n\nexport interface GetTokenBalanceParams {\n  /**\n   *  The address for which we will find out the token balance\n   */\n  account: string;\n  token: TokenWithChainDetails;\n}\n\nexport interface GetNativeTokenBalanceParams {\n  /**\n   *  The address for which we will find out the token balance\n   */\n  account: string;\n  /**\n   * The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n   */\n  chainSymbol: string;\n}\n\nexport interface BaseSendParams {\n  /**\n   * The float amount of Total tokens to transfer.\n   *\n   * In Send case\n   * If {@link SendParams#gasFeePaymentMethod} is {@link FeePaymentMethod#WITH_STABLECOIN}:<br/>\n   * Includes gas fee<br/>\n   * Includes extra gas\n   */\n  amount: string;\n  /**\n   * The account address to transfer tokens from.\n   */\n  fromAccountAddress: string;\n  /**\n   * The account address to transfer tokens to.\n   */\n  toAccountAddress: string;\n  /**\n   * {@link TokenWithChainDetails |The token info object} on the source chain.\n   */\n  sourceToken: TokenWithChainDetails;\n  /**\n   * {@link TokenWithChainDetails |The token info object} on the destination chain.\n   */\n  destinationToken: TokenWithChainDetails;\n\n  txFeeParams?: TxFeeParams;\n}\n\n/**\n * Required params to handle swap transfer (different tokens on the same chain)\n */\nexport interface SwapParams extends BaseSendParams {\n  /**\n   * minimum amount to receive including possible slippage, see {@link AllbridgeCoreSdk#getAmountToBeReceived}\n   */\n  minimumReceiveAmount?: string;\n}\n\n/**\n * Required params to handle bridge transfer (transfer between chains)\n */\nexport interface SendParams extends BaseSendParams {\n  /**\n   * The Messenger to use.\n   */\n  messenger: Messenger;\n  /**\n   * The amount of gas fee to pay for the transfer.\n   *\n   * If {@link gasFeePaymentMethod} is {@link FeePaymentMethod#WITH_NATIVE_CURRENCY} then\n   * it is amount of the source chain currency.<p/>\n   * If {@link gasFeePaymentMethod} is {@link FeePaymentMethod#WITH_STABLECOIN} then\n   * it is amount of the source token.\n   *\n   * Optional.\n   * If not defined, the default fee amount will be applied according to gasFeePaymentMethod.\n   * See method {@link AllbridgeCoreSdk#getGasFeeOptions} to get required gas fee amount.\n   */\n  fee?: string;\n  /**\n   * Format of fee value.<p/>\n   * Optional.\n   * {@link AmountFormat.INT} by default.\n   */\n  feeFormat?: AmountFormat;\n  /**\n   * The amount of extra gas to transfer to gas on destination chain with the transfer.<br/>\n   * To get maximum supported value, look {@link AllbridgeCoreSdk#getExtraGasMaxLimits}\n   *\n   * If gasFeePaymentMethod is {@link FeePaymentMethod#WITH_NATIVE_CURRENCY} then\n   * it is amount of the source chain currency.<p/>\n   * if gasFeePaymentMethod is {@link FeePaymentMethod#WITH_STABLECOIN} then\n   * it is amount of the source token.\n   *\n   * Optional.\n   */\n  extraGas?: string;\n  /**\n   * Format of extra gas value.<p/>\n   * Optional.\n   * {@link AmountFormat.INT} by default.\n   */\n  extraGasFormat?: AmountFormat;\n  /**\n   * Payment method for the gas fee and extra gas payment.\n   *\n   * WITH_NATIVE_CURRENCY - gas fee and extra gas will be added to transaction as native tokens value\n   * WITH_STABLECOIN - gas fee and extra gas will be deducted from the transaction amount\n   *\n   * Optional.\n   * WITH_NATIVE_CURRENCY by default.\n   */\n  gasFeePaymentMethod?: FeePaymentMethod;\n}\n\nexport interface GetAllowanceParams {\n  token: TokenWithChainDetails;\n  owner: string;\n  gasFeePaymentMethod?: FeePaymentMethod;\n  /**\n   * The Messengers for different routes.\n   * Optional.\n   * The {@link Messenger.ALLBRIDGE}, {@link Messenger.WORMHOLE} by default.\n   */\n  messenger?: Messenger;\n}\n\nexport type GetAllowanceParamsDto = GetAllowanceParams;\n\nexport interface CheckAllowanceParams extends GetAllowanceParams {\n  /**\n   * The float amount of tokens to check the allowance.\n   */\n  amount: string | number | Big;\n}\n\n/**\n * @internal\n */\nexport type TxSwapParamsEvm = TxSwapParamsTyped<string>;\nexport type TxSwapParamsSui = TxSwapParamsTyped<string>;\nexport type TxSwapParamsTrx = TxSwapParamsTyped<Buffer>;\nexport type TxSwapParamsSol = TxSwapParamsTyped<number[]>;\nexport type TxSwapParamsSrb = TxSwapParamsTyped<number[]>;\n\nexport interface TxSwapParamsTyped<T> {\n  amount: string;\n  contractAddress: string;\n  fromAccountAddress: string;\n  fromTokenAddress: T;\n  toAccountAddress: string;\n  toTokenAddress: T;\n  minimumReceiveAmount: string;\n}\n\nexport type TxSwapParams = TxSwapParamsEvm | TxSwapParamsTrx | TxSwapParamsSol | TxSwapParamsSrb | TxSwapParamsSui;\n\n/**\n * @internal\n */\nexport type TxSendParamsEvm = TxSendParamsTyped<string>;\nexport type TxSendParamsSui = TxSendParamsTyped<string>;\nexport type TxSendParamsTrx = TxSendParamsTyped<Buffer>;\nexport type TxSendParamsSol = TxSendParamsTyped<number[]>;\nexport type TxSendParamsSrb = TxSendParamsTyped<number[]>;\n\nexport interface TxSendParamsTyped<T> {\n  amount: string;\n  contractAddress: string;\n  fromChainId: number;\n  fromChainSymbol: string;\n  fromAccountAddress: string;\n  fromTokenAddress: T;\n  toChainId: number;\n  toAccountAddress: T;\n  toTokenAddress: T;\n  messenger: Messenger;\n  /**\n   * int format\n   */\n  fee: string;\n  /**\n   * int format\n   */\n  extraGas?: string;\n  gasFeePaymentMethod: FeePaymentMethod;\n}\n\nexport type TxSendParams = TxSendParamsEvm | TxSendParamsTrx | TxSendParamsSol | TxSendParamsSrb | TxSendParamsSui;\n"]}