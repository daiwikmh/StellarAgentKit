import { Keypair, VersionedTransaction } from "@solana/web3.js";
import { AllbridgeCoreClient } from "../../../client/core-api/core-client-base";
import { ChainType, FeePaymentMethod, SwapParams } from "../../../models";
import { RawTransaction, TransactionResponse } from "../../models";
import { SwapAndBridgeSolDataCctpData } from "../../models/sol";
import { SendParams, TxSendParamsSol } from "../models";
import { ChainBridgeService } from "../models/bridge";
import { JupiterService } from "./jupiter";
export interface SolanaBridgeParams {
    wormholeMessengerProgramId: string;
    solanaLookUpTable: string;
    cctpParams: CctpParams;
    jupiterParams: JupiterParams;
}
export interface JupiterParams {
    jupiterUrl: string;
    jupiterApiKeyHeader?: string;
    jupiterMaxAccounts?: number;
}
export interface CctpParams {
    cctpTransmitterProgramId: string;
    cctpTokenMessengerMinter: string;
    cctpDomains: CctpDomains;
}
/**
 * Type representing a map of CCTP domains to their corresponding numeric values.
 *
 * @typedef {Record<string, number>} CctpDomains
 * @property {string} chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., "ETH" for Ethereum). For more details, see: {@link ChainSymbol}.
 * @property {number} value - The numeric value associated with the specified chain.
 */
export type CctpDomains = Record<string, number>;
export declare class SolanaBridgeService extends ChainBridgeService {
    solanaRpcUrl: string;
    params: SolanaBridgeParams;
    api: AllbridgeCoreClient;
    chainType: ChainType.SOLANA;
    jupiterService: JupiterService;
    constructor(solanaRpcUrl: string, params: SolanaBridgeParams, api: AllbridgeCoreClient);
    buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction>;
    private buildSwapTransaction;
    buildRawTransactionSend(params: SendParams): Promise<RawTransaction>;
    private processJup;
    private addPoolAddress;
    convertStableCoinFeeAndExtraGasToNativeCurrency(tokenDecimals: number, solTxSendParams: SolTxSendParams): Promise<{
        fee: string;
        extraGas?: string;
        gasFeePaymentMethod: FeePaymentMethod;
    }>;
    private getExtraGasInstruction;
    private prepareSwapAndBridgeData;
    private buildSwapAndBridgeAllbridgeTransaction;
    private convertToVersionedTransaction;
    private buildSwapAndBridgeWormholeTransaction;
    private prepareSwapAndBridgeCctpData;
    buildSwapAndBridgeCctpTransaction(destinationChainSymbol: string, swapAndBridgeData: SwapAndBridgeSolDataCctpData): Promise<{
        transaction: VersionedTransaction;
        messageSentEventDataKeypair: Keypair;
    }>;
    send(params: SendParams): Promise<TransactionResponse>;
}
interface SolTxSendParams extends TxSendParamsSol {
    poolAddress: string;
}
export {};
