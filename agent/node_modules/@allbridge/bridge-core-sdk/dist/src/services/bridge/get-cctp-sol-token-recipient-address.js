"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCctpSolTokenRecipientAddress = getCctpSolTokenRecipientAddress;
const anchor = __importStar(require("@project-serum/anchor"));
const web3_js_1 = require("@solana/web3.js");
const chain_enums_1 = require("../../chains/chain.enums");
const exceptions_1 = require("../../exceptions");
const accounts_1 = require("../utils/sol/accounts");
const anchor_provider_1 = require("../utils/sol/anchor-provider");
const utils_1 = require("./utils");
// 2. COMMON Realization
async function getCctpSolTokenRecipientAddress(chainType, toAccountAddress, destinationTokenAddress, solRpcUrl) {
    let recipientWalletAddress;
    const receiverAccount = new web3_js_1.PublicKey(toAccountAddress);
    const receiveMint = new web3_js_1.PublicKey(destinationTokenAddress);
    const receiveUserToken = await (0, accounts_1.getAssociatedAccount)(receiverAccount, receiveMint);
    const provider = (0, anchor_provider_1.buildAnchorProvider)(solRpcUrl, toAccountAddress);
    anchor.setProvider(provider);
    const accountData = await anchor.Spl.token(provider).account.token.fetchNullable(receiveUserToken);
    if (accountData?.authority.equals(receiverAccount)) {
        recipientWalletAddress = (0, utils_1.formatAddress)(receiveUserToken.toBase58(), chain_enums_1.ChainType.SOLANA, chainType);
    }
    else {
        const tokenAccounts = await provider.connection.getTokenAccountsByOwner(receiverAccount, {
            mint: receiveMint,
        });
        if (tokenAccounts.value.length === 0 && !accountData) {
            recipientWalletAddress = (0, utils_1.formatAddress)(receiveUserToken.toBase58(), chain_enums_1.ChainType.SOLANA, chainType);
        }
        else if (tokenAccounts.value.length > 0) {
            const firstTokenAccount = tokenAccounts.value[0];
            if (!firstTokenAccount?.pubkey) {
                throw new exceptions_1.SdkError("First token account or its public key is undefined");
            }
            recipientWalletAddress = (0, utils_1.formatAddress)(firstTokenAccount.pubkey.toBase58(), chain_enums_1.ChainType.SOLANA, chainType);
        }
        else {
            throw new exceptions_1.SdkError("Associated account has wrong owner");
        }
    }
    return recipientWalletAddress;
}
//# sourceMappingURL=get-cctp-sol-token-recipient-address.js.map