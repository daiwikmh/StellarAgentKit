{"version":3,"file":"raw-bridge-transaction-builder.js","sourceRoot":"","sources":["../../../../src/services/bridge/raw-bridge-transaction-builder.ts"],"names":[],"mappings":";;;AAGA,6CAAiF;AAIjF,mCAAuC;AACvC,mCAA4D;AAsB5D,MAAa,kCAAkC;IAEnC;IACA;IACA;IACA;IAJV,YACU,GAAwB,EACxB,iBAAoC,EACpC,MAA+B,EAC/B,YAA0B;QAH1B,QAAG,GAAH,GAAG,CAAqB;QACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,WAAM,GAAN,MAAM,CAAyB;QAC/B,iBAAY,GAAZ,YAAY,CAAc;IACjC,CAAC;IAEJ,KAAK,CAAC,OAAO,CAAC,CAA2B,EAAE,CAAiB;QAC1D,IAAI,QAA8B,CAAC;QACnC,IAAI,WAA0B,CAAC;QAC/B,IAAI,CAAC,EAAE,CAAC;YACN,QAAQ,GAAG,CAAa,CAAC;YACzB,WAAW,GAAG,CAAC,CAAC;QAClB,CAAC;aAAM,CAAC;YACN,WAAW,GAAG,CAAkB,CAAC;QACnC,CAAC;QACD,MAAM,OAAO,GAAG,IAAA,kBAAU,EAAC,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC;QACrE,OAAO,IAAI,CAAC,YAAY,CAAC,0BAA0B,CACjD;YACE,GAAG,WAAW;YACd,OAAO;SACR,EACD,QAAQ,CACT,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,MAA+B,EAAE,QAAmB;QAC7D,IAAA,4BAAoB,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACpC,IAAA,8BAAsB,EAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC7E,IAAI,IAAA,oBAAY,EAAC,MAAM,CAAC,EAAE,CAAC;YACzB,OAAO,IAAA,6BAAqB,EAC1B,MAAM,CAAC,WAAW,CAAC,WAAW,EAC9B,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,MAAM,EACX,QAAQ,CACT,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;QACpC,CAAC;QACD,OAAO,IAAA,6BAAqB,EAC1B,MAAM,CAAC,WAAW,CAAC,WAAW,EAC9B,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,MAAM,EACX,QAAQ,CACT,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;CACF;AA/CD,gFA+CC","sourcesContent":["import { NodeRpcUrlsConfig } from \"..\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport { AllbridgeCoreSdkOptions } from \"../../index\";\nimport { validateAmountDecimals, validateAmountGtZero } from \"../../utils/utils\";\nimport { Provider, RawTransaction } from \"../models\";\nimport { TokenService } from \"../token\";\nimport { ApproveParams, SendParams, SwapParams } from \"./models\";\nimport { isSendParams } from \"./utils\";\nimport { getChainBridgeService, getSpender } from \"./index\";\n\nexport interface RawBridgeTransactionBuilder {\n  /**\n   * Creates a Raw Transaction for approving tokens usage by the bridge\n   * @param provider - will be used to access the network\n   * @param approveData\n   */\n  approve(provider: Provider, approveData: ApproveParams): Promise<RawTransaction>;\n  /**\n   * Creates a Raw Transaction for approving tokens usage by the bridge\n   * @param approveData\n   */\n  approve(approveData: ApproveParams): Promise<RawTransaction>;\n  /**\n   * Creates a Raw Transaction for initiating the transfer of tokens\n   * @param params\n   * @param provider - will be used to access the network\n   */\n  send(params: SwapParams | SendParams, provider?: Provider): Promise<RawTransaction>;\n}\n\nexport class DefaultRawBridgeTransactionBuilder implements RawBridgeTransactionBuilder {\n  constructor(\n    private api: AllbridgeCoreClient,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    private params: AllbridgeCoreSdkOptions,\n    private tokenService: TokenService\n  ) {}\n\n  async approve(a: Provider | ApproveParams, b?: ApproveParams): Promise<RawTransaction> {\n    let provider: Provider | undefined;\n    let approveData: ApproveParams;\n    if (b) {\n      provider = a as Provider;\n      approveData = b;\n    } else {\n      approveData = a as ApproveParams;\n    }\n    const spender = getSpender(approveData.token, approveData.messenger);\n    return this.tokenService.buildRawTransactionApprove(\n      {\n        ...approveData,\n        spender,\n      },\n      provider\n    );\n  }\n\n  async send(params: SwapParams | SendParams, provider?: Provider): Promise<RawTransaction> {\n    validateAmountGtZero(params.amount);\n    validateAmountDecimals(\"amount\", params.amount, params.sourceToken.decimals);\n    if (isSendParams(params)) {\n      return getChainBridgeService(\n        params.sourceToken.chainSymbol,\n        this.api,\n        this.nodeRpcUrlsConfig,\n        this.params,\n        provider\n      ).buildRawTransactionSend(params);\n    }\n    return getChainBridgeService(\n      params.sourceToken.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).buildRawTransactionSwap(params);\n  }\n}\n"]}