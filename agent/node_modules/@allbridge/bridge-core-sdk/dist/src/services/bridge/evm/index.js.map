{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/bridge/evm/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Big } from \"big.js\";\nimport BN from \"bn.js\";\nimport { Contract, Transaction as Web3Transaction } from \"web3\";\nimport { PayableMethodObject } from \"web3-eth-contract\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport {\n  ChainSymbol,\n  ChainType,\n  FeePaymentMethod,\n  Messenger,\n  EssentialWeb3,\n  SwapParams,\n  TransactionResponse,\n} from \"../../../models\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { RawTransaction } from \"../../models\";\nimport Bridge from \"../../models/abi/Bridge\";\nimport CctpBridge from \"../../models/abi/CctpBridge\";\nimport { getCctpSolTokenRecipientAddress } from \"../get-cctp-sol-token-recipient-address\";\nimport { SendParams, ChainBridgeService, TxSwapParamsEvm, TxSendParamsEvm } from \"../models\";\nimport { getNonce, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\n\nexport class EvmBridgeService extends ChainBridgeService {\n  chainType: ChainType.EVM = ChainType.EVM;\n\n  constructor(\n    public web3: EssentialWeb3,\n    public api: AllbridgeCoreClient,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig\n  ) {\n    super();\n  }\n\n  async send(params: SendParams): Promise<TransactionResponse> {\n    const rawTransaction = await this.buildRawTransactionSend(params);\n    return this.sendRawTransaction(rawTransaction);\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction> {\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildRawTransactionSwapFromParams(txSwapParams);\n  }\n\n  async buildRawTransactionSwapFromParams(params: TxSwapParamsEvm): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toAccountAddress,\n      toTokenAddress,\n      minimumReceiveAmount,\n    } = params;\n\n    const bridgeContract = this.getBridgeContract(contractAddress);\n\n    const swapMethod = bridgeContract.methods.swap(\n      amount,\n      fromTokenAddress,\n      toTokenAddress,\n      toAccountAddress,\n      minimumReceiveAmount\n    );\n\n    return Promise.resolve({\n      from: fromAccountAddress,\n      to: contractAddress,\n      data: swapMethod.encodeABI(),\n    });\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      messenger,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = txSendParams;\n\n    const nonce = \"0x\" + getNonce().toString(\"hex\");\n    let sendMethod: PayableMethodObject;\n    let value: string;\n\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n    if (messenger === Messenger.CCTP || messenger === Messenger.CCTP_V2) {\n      const cctp = await this.buildRawTransactionCctpSend(params, txSendParams, totalFee);\n      sendMethod = cctp.sendMethod;\n      value = cctp.value;\n    } else {\n      const bridgeContract = this.getBridgeContract(contractAddress);\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        sendMethod = bridgeContract.methods.swapAndBridge(\n          fromTokenAddress,\n          amount,\n          toAccountAddress,\n          toChainId,\n          toTokenAddress,\n          nonce,\n          messenger,\n          totalFee\n        );\n        value = \"0\";\n      } else {\n        sendMethod = bridgeContract.methods.swapAndBridge(\n          fromTokenAddress,\n          amount,\n          toAccountAddress,\n          toChainId,\n          toTokenAddress,\n          nonce,\n          messenger,\n          0\n        );\n        value = totalFee;\n      }\n    }\n\n    return Promise.resolve({\n      from: fromAccountAddress,\n      to: contractAddress,\n      value: value,\n      data: sendMethod.encodeABI(),\n    });\n  }\n\n  private async buildRawTransactionCctpSend(\n    params: SendParams,\n    txSendParams: TxSendParamsEvm,\n    totalFee: string\n  ): Promise<{\n    sendMethod: PayableMethodObject;\n    value: string;\n  }> {\n    const { amount, contractAddress, toChainId, toAccountAddress, gasFeePaymentMethod } = txSendParams;\n\n    const cctpBridgeContract = this.getCctpBridgeContract(contractAddress);\n    let sendMethod: PayableMethodObject;\n    let value: string;\n\n    if (params.destinationToken.chainType === ChainType.SOLANA) {\n      const recipient = await getCctpSolTokenRecipientAddress(\n        this.chainType,\n        params.toAccountAddress,\n        params.destinationToken.tokenAddress,\n        this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SOL)\n      );\n\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        sendMethod = cctpBridgeContract.methods.bridgeWithWalletAddress(\n          amount,\n          recipient,\n          toAccountAddress,\n          toChainId,\n          totalFee\n        );\n        value = \"0\";\n      } else {\n        sendMethod = cctpBridgeContract.methods.bridgeWithWalletAddress(\n          amount,\n          recipient,\n          toAccountAddress,\n          toChainId,\n          0\n        );\n        value = totalFee;\n      }\n    } else {\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        sendMethod = cctpBridgeContract.methods.bridge(amount, toAccountAddress, toChainId, totalFee);\n        value = \"0\";\n      } else {\n        sendMethod = cctpBridgeContract.methods.bridge(amount, toAccountAddress, toChainId, 0);\n        value = totalFee;\n      }\n    }\n    return { sendMethod, value };\n  }\n\n  private async sendRawTransaction(rawTransaction: RawTransaction) {\n    const estimateGas = await this.web3.eth.estimateGas(rawTransaction as Web3Transaction);\n\n    // @ts-expect-error DISABLE SITE SUGGESTED GAS FEE IN METAMASK\n    // prettier-ignore\n    const feeOptions: { maxPriorityFeePerGas?: number | string | BN; maxFeePerGas?: number | string | BN } = { maxPriorityFeePerGas: null, maxFeePerGas: null };\n    const { transactionHash } = await this.web3.eth.sendTransaction({\n      ...(rawTransaction as object),\n      gas: estimateGas,\n      ...feeOptions,\n    } as Web3Transaction);\n    return { txId: transactionHash.toString() };\n  }\n\n  private getBridgeContract(contractAddress: string) {\n    return new this.web3.eth.Contract(Bridge.abi, contractAddress) as Contract<typeof Bridge.abi>;\n  }\n\n  private getCctpBridgeContract(contractAddress: string) {\n    return new this.web3.eth.Contract(CctpBridge.abi, contractAddress) as Contract<typeof CctpBridge.abi>;\n  }\n}\n"]}