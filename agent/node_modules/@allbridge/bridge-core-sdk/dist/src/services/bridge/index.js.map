{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/services/bridge/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { TronWeb } from \"tronweb\";\nimport { Web3 } from \"web3\";\nimport { NodeRpcUrlsConfig } from \"..\";\nimport { Chains } from \"../../chains\";\nimport { Messenger } from \"../../client/core-api/core-api.model\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport { CCTPDoesNotSupportedError } from \"../../exceptions\";\nimport { AllbridgeCoreSdkOptions, ChainSymbol, ChainType, EssentialWeb3 } from \"../../index\";\nimport { TokenWithChainDetails } from \"../../tokens-info\";\nimport { validateAmountDecimals, validateAmountGtZero } from \"../../utils/utils\";\nimport { Provider, TransactionResponse } from \"../models\";\nimport { TokenService } from \"../token\";\nimport { EvmBridgeService } from \"./evm\";\nimport { ApproveParams, CheckAllowanceParams, GetAllowanceParams, SendParams, ChainBridgeService } from \"./models\";\nimport { DefaultRawBridgeTransactionBuilder, RawBridgeTransactionBuilder } from \"./raw-bridge-transaction-builder\";\nimport { SolanaBridgeService } from \"./sol\";\nimport { SrbBridgeService } from \"./srb\";\nimport { SuiBridgeService } from \"./sui\";\nimport { TronBridgeService } from \"./trx\";\n\nexport interface BridgeService {\n  rawTxBuilder: RawBridgeTransactionBuilder;\n\n  /**\n   * Get amount of tokens approved to be sent by the bridge\n   * @param provider - will be used to access the network\n   * @param params See {@link GetAllowanceParams}\n   * @returns the amount of approved tokens\n   */\n  getAllowance(provider: Provider, params: GetAllowanceParams): Promise<string>;\n\n  /**\n   * Get amount of tokens approved to be sent by the bridge\n   * @param params See {@link GetAllowanceParams}\n   * @returns the amount of approved tokens\n   */\n  getAllowance(params: GetAllowanceParams): Promise<string>;\n\n  /**\n   * Check if the amount of approved tokens is enough to make a transfer\n   * @param provider - will be used to access the network\n   * @param params See {@link CheckAllowanceParams}\n   * @returns true if the amount of approved tokens is enough to make a transfer\n   */\n  checkAllowance(provider: Provider, params: CheckAllowanceParams): Promise<boolean>;\n\n  /**\n   * Check if the amount of approved tokens is enough to make a transfer\n   * @param params See {@link CheckAllowanceParams}\n   * @returns true if the amount of approved tokens is enough to make a transfer\n   */\n  checkAllowance(params: CheckAllowanceParams): Promise<boolean>;\n\n  /**\n   * @deprecated Use {@link rawTxBuilder}.{@link RawBridgeTransactionBuilder.approve}<p>\n   * Approve tokens usage by another address on chains\n   * <p>\n   * For ETH/USDT: due to specificity of the USDT contract:<br/>\n   * If the current allowance is not 0, this function will perform an additional transaction to set allowance to 0 before setting the new allowance value.\n   * @param provider - will be used to access the network\n   * @param approveData\n   */\n  approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;\n\n  /**\n   * @deprecated Use {@link rawTxBuilder}.{@link RawBridgeTransactionBuilder.send}<p>\n   * Send tokens through the ChainBridgeService\n   * @param provider - will be used to access the network\n   * @param params\n   */\n  send(provider: Provider, params: SendParams): Promise<TransactionResponse>;\n}\n\nexport class DefaultBridgeService implements BridgeService {\n  public rawTxBuilder: RawBridgeTransactionBuilder;\n\n  constructor(\n    private api: AllbridgeCoreClient,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    private params: AllbridgeCoreSdkOptions,\n    private tokenService: TokenService\n  ) {\n    this.rawTxBuilder = new DefaultRawBridgeTransactionBuilder(api, nodeRpcUrlsConfig, params, tokenService);\n  }\n\n  async getAllowance(a: Provider | GetAllowanceParams, b?: GetAllowanceParams): Promise<string> {\n    let provider: Provider | undefined;\n    let params: GetAllowanceParams;\n    if (b) {\n      provider = a as Provider;\n      params = b;\n    } else {\n      params = a as GetAllowanceParams;\n    }\n    const spender = getSpender(params.token, params.messenger);\n    return await this.tokenService.getAllowance({ ...params, spender }, provider);\n  }\n\n  async checkAllowance(a: Provider | CheckAllowanceParams, b?: CheckAllowanceParams): Promise<boolean> {\n    let provider: Provider | undefined;\n    let params: CheckAllowanceParams;\n    if (b) {\n      provider = a as Provider;\n      params = b;\n    } else {\n      params = a as CheckAllowanceParams;\n    }\n    const spender = getSpender(params.token, params.messenger);\n    return this.tokenService.checkAllowance({ ...params, spender }, provider);\n  }\n\n  async approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse> {\n    const spender = getSpender(approveData.token, approveData.messenger);\n    return this.tokenService.approve(provider, { ...approveData, spender });\n  }\n\n  async send(provider: Provider, params: SendParams): Promise<TransactionResponse> {\n    validateAmountGtZero(params.amount);\n    validateAmountDecimals(\"amount\", params.amount, params.sourceToken.decimals);\n    return getChainBridgeService(\n      params.sourceToken.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).send(params);\n  }\n}\n\nexport function getSpender(token: TokenWithChainDetails, messenger?: Messenger): string {\n  if (messenger && messenger == Messenger.CCTP) {\n    if (token.cctpAddress) {\n      return token.cctpAddress;\n    } else {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n    }\n  } else if (messenger && messenger == Messenger.CCTP_V2) {\n    if (token.cctpV2Address) {\n      return token.cctpV2Address;\n    } else {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP V2 protocol\");\n    }\n  } else {\n    return token.bridgeAddress;\n  }\n}\n\nexport function getChainBridgeService(\n  chainSymbol: string,\n  api: AllbridgeCoreClient,\n  nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n  params: AllbridgeCoreSdkOptions,\n  provider?: Provider\n): ChainBridgeService {\n  switch (Chains.getChainProperty(chainSymbol).chainType) {\n    case ChainType.EVM: {\n      if (provider) {\n        return new EvmBridgeService(provider as EssentialWeb3, api, nodeRpcUrlsConfig);\n      } else {\n        const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n        return new EvmBridgeService(new Web3(nodeRpcUrl), api, nodeRpcUrlsConfig);\n      }\n    }\n    case ChainType.TRX: {\n      if (provider) {\n        return new TronBridgeService(provider as TronWeb, api);\n      } else {\n        const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n        return new TronBridgeService(\n          new TronWeb({\n            fullHost: nodeRpcUrl,\n            solidityNode: nodeRpcUrl,\n            eventServer: nodeRpcUrl,\n          }),\n          api\n        );\n      }\n    }\n    case ChainType.SOLANA: {\n      return new SolanaBridgeService(\n        nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SOL),\n        {\n          wormholeMessengerProgramId: params.wormholeMessengerProgramId,\n          solanaLookUpTable: params.solanaLookUpTable,\n          cctpParams: params.cctpParams,\n          jupiterParams: {\n            jupiterUrl: params.jupiterUrl,\n            jupiterApiKeyHeader: params.jupiterApiKeyHeader,\n            jupiterMaxAccounts: params.jupiterMaxAccounts,\n          },\n        },\n        api\n      );\n    }\n    case ChainType.SRB: {\n      return new SrbBridgeService(nodeRpcUrlsConfig, params, api);\n    }\n    case ChainType.SUI: {\n      return new SuiBridgeService(nodeRpcUrlsConfig, api);\n    }\n  }\n}\n"]}