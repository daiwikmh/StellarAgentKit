{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/services/bridge/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport { Address } from \"@stellar/stellar-sdk\";\nimport { Big, BigSource } from \"big.js\";\nimport randomBytes from \"randombytes\";\nimport { utils as TronWebUtils } from \"tronweb\";\nimport { Chains } from \"../../chains\";\nimport { Messenger } from \"../../client/core-api/core-api.model\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport {\n  AmountNotEnoughError,\n  CCTPDoesNotSupportedError,\n  ExtraGasMaxLimitExceededError,\n  InvalidGasFeePaymentOptionError,\n  SdkError,\n} from \"../../exceptions\";\nimport {\n  AmountFormat,\n  ChainType,\n  ExtraGasMaxLimitResponse,\n  ExtraGasMaxLimits,\n  FeePaymentMethod,\n  GasFeeOptions,\n  SwapParams,\n} from \"../../models\";\nimport { ChainDetailsMap, TokenWithChainDetails } from \"../../tokens-info\";\nimport { convertAmountPrecision, convertFloatAmountToInt, convertIntAmountToFloat } from \"../../utils/calculation\";\nimport {\n  SendParams,\n  TxSendParams,\n  TxSendParamsEvm,\n  TxSendParamsSol,\n  TxSendParamsSrb,\n  TxSendParamsSui,\n  TxSendParamsTrx,\n  TxSwapParams,\n  TxSwapParamsEvm,\n  TxSwapParamsSol,\n  TxSwapParamsSrb,\n  TxSwapParamsSui,\n  TxSwapParamsTrx,\n} from \"./models\"; // 1. OVERLOADS\n\n// 1. OVERLOADS\nexport function formatAddress(address: string, from: ChainType, to: ChainType.EVM | ChainType.SUI): string;\nexport function formatAddress(address: string, from: ChainType, to: ChainType.TRX): Buffer;\nexport function formatAddress(address: string, from: ChainType, to: ChainType.SOLANA | ChainType.SRB): number[];\nexport function formatAddress(address: string, from: ChainType, to: ChainType): string | number[] | Buffer;\n\n// 2. COMMON Realization\nexport function formatAddress(address: string, from: ChainType, to: ChainType): string | number[] | Buffer {\n  let buffer: Buffer;\n  switch (from) {\n    case ChainType.EVM: {\n      buffer = evmAddressToBuffer32(address);\n      break;\n    }\n    case ChainType.SOLANA: {\n      buffer = new PublicKey(address).toBuffer();\n      break;\n    }\n    case ChainType.TRX: {\n      buffer = tronAddressToBuffer32(address);\n      break;\n    }\n    case ChainType.SRB: {\n      buffer = new Address(address).toBuffer();\n      break;\n    }\n    case ChainType.SUI: {\n      buffer = evmAddressToBuffer32(address);\n      break;\n    }\n  }\n\n  switch (to) {\n    case ChainType.EVM: {\n      return \"0x\" + buffer.toString(\"hex\");\n    }\n    case ChainType.SOLANA: {\n      return Array.from(buffer);\n    }\n    case ChainType.TRX: {\n      return buffer;\n    }\n    case ChainType.SRB: {\n      return buffer.toJSON().data;\n    }\n    case ChainType.SUI: {\n      return \"0x\" + buffer.toString(\"hex\");\n    }\n  }\n}\n\nexport function normalizeSuiHex(hex: string): string {\n  return hex.replace(/^0x/i, \"\");\n}\n\nexport function hexToBuffer(hex: string): Buffer {\n  return Buffer.from(hex.replace(/^0x/i, \"\"), \"hex\");\n}\n\nexport function evmAddressToBuffer32(address: string): Buffer {\n  const length = 32;\n  const buff = hexToBuffer(address);\n  return Buffer.concat([Buffer.alloc(length - buff.length, 0), buff], length);\n}\n\nexport function tronAddressToBuffer32(address: string): Buffer {\n  const ethAddress = tronAddressToEthAddress(address);\n  const buffer = hexToBuffer(ethAddress);\n  return bufferToSize(buffer, 32);\n}\n\nexport function tronAddressToEthAddress(address: string): string {\n  const bytes = TronWebUtils.crypto.decodeBase58Address(address);\n  if (!bytes) return \"\";\n  return TronWebUtils.bytes.byteArray2hexStr(bytes).replace(/^41/, \"0x\");\n}\n\nfunction bufferToSize(buffer: Buffer, size: number): Buffer {\n  if (buffer.length >= size) {\n    return buffer;\n  }\n  const result = Buffer.alloc(size, 0);\n  buffer.copy(result, size - buffer.length);\n  return result;\n}\n\nexport function getTokenByTokenAddress(\n  chainDetailsMap: ChainDetailsMap,\n  chainSymbol: string,\n  tokenAddress: string\n): TokenWithChainDetails {\n  const chainDetail = chainDetailsMap[chainSymbol];\n  if (!chainDetail) {\n    throw new SdkError(\"Cannot find chain detail for \" + chainSymbol);\n  }\n  const token = chainDetail.tokens.find((value) => value.tokenAddress.toUpperCase() === tokenAddress.toUpperCase());\n  if (!token) {\n    throw new SdkError(\"Cannot find token info about token \" + tokenAddress + \" on chain \" + chainSymbol);\n  }\n  return token;\n}\n\nexport function getNonce(): Buffer {\n  return randomBytes(32);\n}\n\nexport function getNonceBigInt(): bigint {\n  const bigint = randomBytes(32).readBigInt64BE();\n  if (bigint < 0) {\n    return bigint * -1n;\n  }\n  return bigint;\n}\n\n// 1. OVERLOADS\nexport function prepareTxSwapParams(\n  bridgeChainType: ChainType.EVM | ChainType.SUI,\n  params: SwapParams\n): TxSwapParamsEvm | TxSwapParamsSui;\nexport function prepareTxSwapParams(bridgeChainType: ChainType.TRX, params: SwapParams): TxSwapParamsTrx;\nexport function prepareTxSwapParams(\n  bridgeChainType: ChainType.SOLANA | ChainType.SRB,\n  params: SwapParams\n): TxSwapParamsSol | TxSwapParamsSrb;\nexport function prepareTxSwapParams(bridgeChainType: ChainType, params: SwapParams): TxSwapParams;\n\n// 2. COMMON Realization\nexport function prepareTxSwapParams(bridgeChainType: ChainType, params: SwapParams): TxSwapParams {\n  const txSwapParams = {} as TxSwapParams;\n  const sourceToken = params.sourceToken;\n  txSwapParams.amount = convertFloatAmountToInt(params.amount, sourceToken.decimals).toFixed();\n  txSwapParams.contractAddress = sourceToken.bridgeAddress;\n  txSwapParams.fromAccountAddress = params.fromAccountAddress;\n  if (bridgeChainType === ChainType.SUI) {\n    if (!sourceToken.originTokenAddress) {\n      throw new SdkError(\"SUI sourceToken must contain 'originTokenAddress'\");\n    }\n    txSwapParams.fromTokenAddress = sourceToken.originTokenAddress;\n  } else {\n    txSwapParams.fromTokenAddress = formatAddress(sourceToken.tokenAddress, bridgeChainType, bridgeChainType);\n  }\n  txSwapParams.toAccountAddress = params.toAccountAddress;\n  if (bridgeChainType === ChainType.SUI) {\n    if (!params.destinationToken.originTokenAddress) {\n      throw new SdkError(\"SUI destinationToken must contain 'originTokenAddress'\");\n    }\n    txSwapParams.toTokenAddress = params.destinationToken.originTokenAddress;\n  } else {\n    txSwapParams.toTokenAddress = formatAddress(params.destinationToken.tokenAddress, bridgeChainType, bridgeChainType);\n  }\n  txSwapParams.minimumReceiveAmount = params.minimumReceiveAmount\n    ? convertFloatAmountToInt(params.minimumReceiveAmount, params.destinationToken.decimals).toFixed()\n    : \"0\";\n  return txSwapParams;\n}\n\n// 1. OVERLOADS\nexport function prepareTxSendParams(\n  bridgeChainType: ChainType.EVM | ChainType.SUI,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParamsEvm | TxSendParamsSui>;\nexport function prepareTxSendParams(\n  bridgeChainType: ChainType.TRX,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParamsTrx>;\nexport function prepareTxSendParams(\n  bridgeChainType: ChainType.SOLANA | ChainType.SRB,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParamsSol | TxSendParamsSrb>;\nexport function prepareTxSendParams(\n  bridgeChainType: ChainType,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParams>;\n\n// 2. COMMON Realization\nexport async function prepareTxSendParams(\n  bridgeChainType: ChainType,\n  params: SendParams,\n  api: AllbridgeCoreClient\n): Promise<TxSendParams> {\n  const txSendParams = {} as TxSendParams;\n\n  txSendParams.fromChainId = params.sourceToken.allbridgeChainId;\n  txSendParams.fromChainSymbol = params.sourceToken.chainSymbol;\n  const toChainType = Chains.getChainProperty(params.destinationToken.chainSymbol).chainType;\n  if (bridgeChainType === ChainType.SUI) {\n    if (!params.sourceToken.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    txSendParams.fromTokenAddress = params.sourceToken.originTokenAddress;\n  } else {\n    txSendParams.fromTokenAddress = params.sourceToken.tokenAddress;\n  }\n\n  txSendParams.toChainId = params.destinationToken.allbridgeChainId;\n  txSendParams.toTokenAddress = params.destinationToken.tokenAddress;\n\n  if (params.gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n    txSendParams.gasFeePaymentMethod = FeePaymentMethod.WITH_STABLECOIN;\n  } else {\n    // default FeePaymentMethod.WITH_NATIVE_CURRENCY\n    txSendParams.gasFeePaymentMethod = FeePaymentMethod.WITH_NATIVE_CURRENCY;\n  }\n  const sourceToken = params.sourceToken;\n\n  if (params.messenger === Messenger.CCTP) {\n    if (!sourceToken.cctpAddress || !params.destinationToken.cctpAddress) {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n    }\n    txSendParams.contractAddress = sourceToken.cctpAddress;\n  } else if (params.messenger === Messenger.CCTP_V2) {\n    if (!sourceToken.cctpV2Address || !params.destinationToken.cctpV2Address) {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP V2 protocol\");\n    }\n    txSendParams.contractAddress = sourceToken.cctpV2Address;\n  } else {\n    txSendParams.contractAddress = sourceToken.bridgeAddress;\n  }\n\n  txSendParams.messenger = params.messenger;\n  txSendParams.fromAccountAddress = params.fromAccountAddress;\n  txSendParams.amount = convertFloatAmountToInt(params.amount, sourceToken.decimals).toFixed();\n\n  //Fee\n  let { fee, feeFormat } = params;\n  if (!fee) {\n    const gasFeeOptions = await getGasFeeOptions(\n      txSendParams.fromChainId,\n      params.sourceToken.chainType,\n      txSendParams.toChainId,\n      sourceToken.decimals,\n      txSendParams.messenger,\n      api\n    );\n\n    const gasFeeOption = gasFeeOptions[txSendParams.gasFeePaymentMethod];\n    if (!gasFeeOption) {\n      throw new InvalidGasFeePaymentOptionError();\n    }\n    fee = gasFeeOption[AmountFormat.INT];\n    feeFormat = AmountFormat.INT;\n  }\n  if (feeFormat == AmountFormat.FLOAT) {\n    switch (txSendParams.gasFeePaymentMethod) {\n      case FeePaymentMethod.WITH_NATIVE_CURRENCY:\n        txSendParams.fee = convertFloatAmountToInt(fee, Chains.getChainDecimalsByType(sourceToken.chainType)).toFixed(\n          0\n        );\n        break;\n      case FeePaymentMethod.WITH_STABLECOIN:\n        txSendParams.fee = convertFloatAmountToInt(fee, sourceToken.decimals).toFixed(0);\n        break;\n    }\n  } else {\n    txSendParams.fee = fee;\n  }\n\n  //ExtraGas\n  const { extraGas, extraGasFormat } = params;\n  if (extraGas && +extraGas > 0) {\n    if (extraGasFormat == AmountFormat.FLOAT) {\n      switch (txSendParams.gasFeePaymentMethod) {\n        case FeePaymentMethod.WITH_NATIVE_CURRENCY:\n          txSendParams.extraGas = convertFloatAmountToInt(\n            extraGas,\n            Chains.getChainDecimalsByType(sourceToken.chainType)\n          ).toFixed(0);\n          break;\n        case FeePaymentMethod.WITH_STABLECOIN:\n          txSendParams.extraGas = convertFloatAmountToInt(extraGas, sourceToken.decimals).toFixed(0);\n          break;\n      }\n    } else {\n      txSendParams.extraGas = extraGas;\n    }\n    await validateExtraGasNotExceeded(\n      txSendParams.extraGas,\n      txSendParams.gasFeePaymentMethod,\n      sourceToken,\n      params.destinationToken,\n      api\n    );\n  }\n\n  if (bridgeChainType !== ChainType.SUI) {\n    txSendParams.fromTokenAddress = formatAddress(txSendParams.fromTokenAddress, bridgeChainType, bridgeChainType);\n  }\n  txSendParams.toAccountAddress = formatAddress(params.toAccountAddress, toChainType, bridgeChainType);\n  txSendParams.toTokenAddress = formatAddress(txSendParams.toTokenAddress, toChainType, bridgeChainType);\n  if (txSendParams.gasFeePaymentMethod == FeePaymentMethod.WITH_STABLECOIN) {\n    validateAmountEnough(txSendParams.amount, sourceToken.decimals, txSendParams.fee, txSendParams.extraGas);\n  }\n  return txSendParams;\n}\n\nfunction validateAmountEnough(\n  amountInt: BigSource,\n  decimals: number,\n  feeInt: BigSource,\n  extraGasInt: BigSource | undefined\n) {\n  const amountTotal = Big(amountInt)\n    .minus(feeInt)\n    .minus(extraGasInt ?? 0);\n  if (amountTotal.lte(0)) {\n    throw new AmountNotEnoughError(\n      `Amount not enough to pay fee, ${convertIntAmountToFloat(\n        Big(amountTotal).minus(1).neg(),\n        decimals\n      ).toFixed()} stables is missing`\n    );\n  }\n}\n\nexport async function getGasFeeOptions(\n  sourceAllbridgeChainId: number,\n  sourceChainType: ChainType,\n  destinationAllbridgeChainId: number,\n  sourceChainTokenDecimals: number,\n  messenger: Messenger,\n  api: AllbridgeCoreClient\n): Promise<GasFeeOptions> {\n  const transactionCostResponse = await api.getReceiveTransactionCost({\n    sourceChainId: sourceAllbridgeChainId,\n    destinationChainId: destinationAllbridgeChainId,\n    messenger,\n  });\n\n  const gasFeeOptions: GasFeeOptions = {\n    [FeePaymentMethod.WITH_NATIVE_CURRENCY]: {\n      [AmountFormat.INT]: transactionCostResponse.fee,\n      [AmountFormat.FLOAT]: convertIntAmountToFloat(\n        transactionCostResponse.fee,\n        Chains.getChainDecimalsByType(sourceChainType)\n      ).toFixed(),\n    },\n  };\n  if (transactionCostResponse.sourceNativeTokenPrice) {\n    const gasFeeIntWithStables = convertAmountPrecision(\n      new Big(transactionCostResponse.fee).mul(transactionCostResponse.sourceNativeTokenPrice),\n      Chains.getChainDecimalsByType(sourceChainType),\n      sourceChainTokenDecimals\n    ).toFixed(0, Big.roundUp);\n    gasFeeOptions[FeePaymentMethod.WITH_STABLECOIN] = {\n      [AmountFormat.INT]: gasFeeIntWithStables,\n      [AmountFormat.FLOAT]: convertIntAmountToFloat(gasFeeIntWithStables, sourceChainTokenDecimals).toFixed(),\n    };\n  }\n\n  return gasFeeOptions;\n}\n\nasync function validateExtraGasNotExceeded(\n  extraGasInt: string,\n  gasFeePaymentMethod: FeePaymentMethod,\n  sourceToken: TokenWithChainDetails,\n  destinationToken: TokenWithChainDetails,\n  api: AllbridgeCoreClient\n) {\n  const extraGasLimits = await getExtraGasMaxLimits(sourceToken, destinationToken, api);\n  const extraGasMaxLimit = extraGasLimits.extraGasMax[gasFeePaymentMethod];\n  if (!extraGasMaxLimit) {\n    throw new InvalidGasFeePaymentOptionError(`Impossible to pay extra gas by '${gasFeePaymentMethod}' payment method`);\n  }\n  const extraGasMaxIntLimit = extraGasMaxLimit[AmountFormat.INT];\n  if (Big(extraGasInt).gt(extraGasMaxIntLimit)) {\n    throw new ExtraGasMaxLimitExceededError(\n      `Extra gas ${extraGasInt} in int format, exceeded limit ${extraGasMaxIntLimit} for '${gasFeePaymentMethod}' payment method`\n    );\n  }\n}\n\nexport async function getExtraGasMaxLimits(\n  sourceChainToken: TokenWithChainDetails,\n  destinationChainToken: TokenWithChainDetails,\n  api: AllbridgeCoreClient\n): Promise<ExtraGasMaxLimitResponse> {\n  const extraGasMaxLimits: ExtraGasMaxLimits = {};\n  const transactionCostResponse = await api.getReceiveTransactionCost({\n    sourceChainId: sourceChainToken.allbridgeChainId,\n    destinationChainId: destinationChainToken.allbridgeChainId,\n    messenger: Messenger.ALLBRIDGE,\n  });\n  const maxAmount = destinationChainToken.txCostAmount.maxAmount;\n  const maxAmountFloat = convertIntAmountToFloat(\n    maxAmount,\n    Chains.getChainDecimalsByType(destinationChainToken.chainType)\n  ).toFixed();\n  const maxAmountFloatInSourceNative = Big(maxAmountFloat)\n    .div(transactionCostResponse.exchangeRate)\n    .toFixed(Chains.getChainDecimalsByType(sourceChainToken.chainType), Big.roundDown);\n  const maxAmountInSourceNative = convertFloatAmountToInt(\n    maxAmountFloatInSourceNative,\n    Chains.getChainDecimalsByType(sourceChainToken.chainType)\n  ).toFixed(0);\n  extraGasMaxLimits[FeePaymentMethod.WITH_NATIVE_CURRENCY] = {\n    [AmountFormat.INT]: maxAmountInSourceNative,\n    [AmountFormat.FLOAT]: maxAmountFloatInSourceNative,\n  };\n  if (transactionCostResponse.sourceNativeTokenPrice) {\n    const maxAmountFloatInStable = Big(maxAmountFloatInSourceNative)\n      .mul(transactionCostResponse.sourceNativeTokenPrice)\n      .toFixed(sourceChainToken.decimals, Big.roundDown);\n    extraGasMaxLimits[FeePaymentMethod.WITH_STABLECOIN] = {\n      [AmountFormat.INT]: convertFloatAmountToInt(maxAmountFloatInStable, sourceChainToken.decimals).toFixed(0),\n      [AmountFormat.FLOAT]: maxAmountFloatInStable,\n    };\n  }\n  return {\n    extraGasMax: extraGasMaxLimits,\n    destinationChain: {\n      gasAmountMax: {\n        [AmountFormat.INT]: maxAmount,\n        [AmountFormat.FLOAT]: maxAmountFloat,\n      },\n      swap: {\n        [AmountFormat.INT]: destinationChainToken.txCostAmount.swap,\n        [AmountFormat.FLOAT]: convertIntAmountToFloat(\n          destinationChainToken.txCostAmount.swap,\n          Chains.getChainDecimalsByType(destinationChainToken.chainType)\n        ).toFixed(),\n      },\n      transfer: {\n        [AmountFormat.INT]: destinationChainToken.txCostAmount.transfer,\n        [AmountFormat.FLOAT]: convertIntAmountToFloat(\n          destinationChainToken.txCostAmount.transfer,\n          Chains.getChainDecimalsByType(destinationChainToken.chainType)\n        ).toFixed(),\n      },\n    },\n    exchangeRate: transactionCostResponse.exchangeRate,\n    sourceNativeTokenPrice: transactionCostResponse.sourceNativeTokenPrice,\n  };\n}\n\nexport function isSendParams(params: SwapParams | SendParams): params is SendParams {\n  return params.sourceToken.chainSymbol !== params.destinationToken.chainSymbol;\n}\n"]}