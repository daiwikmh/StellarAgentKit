import { Messenger } from "../../client/core-api/core-api.model";
import { AllbridgeCoreClient } from "../../client/core-api/core-client-base";
import { ChainType, ExtraGasMaxLimitResponse, GasFeeOptions, SwapParams } from "../../models";
import { ChainDetailsMap, TokenWithChainDetails } from "../../tokens-info";
import { SendParams, TxSendParams, TxSendParamsEvm, TxSendParamsSol, TxSendParamsSrb, TxSendParamsSui, TxSendParamsTrx, TxSwapParams, TxSwapParamsEvm, TxSwapParamsSol, TxSwapParamsSrb, TxSwapParamsSui, TxSwapParamsTrx } from "./models";
export declare function formatAddress(address: string, from: ChainType, to: ChainType.EVM | ChainType.SUI): string;
export declare function formatAddress(address: string, from: ChainType, to: ChainType.TRX): Buffer;
export declare function formatAddress(address: string, from: ChainType, to: ChainType.SOLANA | ChainType.SRB): number[];
export declare function formatAddress(address: string, from: ChainType, to: ChainType): string | number[] | Buffer;
export declare function normalizeSuiHex(hex: string): string;
export declare function hexToBuffer(hex: string): Buffer;
export declare function evmAddressToBuffer32(address: string): Buffer;
export declare function tronAddressToBuffer32(address: string): Buffer;
export declare function tronAddressToEthAddress(address: string): string;
export declare function getTokenByTokenAddress(chainDetailsMap: ChainDetailsMap, chainSymbol: string, tokenAddress: string): TokenWithChainDetails;
export declare function getNonce(): Buffer;
export declare function getNonceBigInt(): bigint;
export declare function prepareTxSwapParams(bridgeChainType: ChainType.EVM | ChainType.SUI, params: SwapParams): TxSwapParamsEvm | TxSwapParamsSui;
export declare function prepareTxSwapParams(bridgeChainType: ChainType.TRX, params: SwapParams): TxSwapParamsTrx;
export declare function prepareTxSwapParams(bridgeChainType: ChainType.SOLANA | ChainType.SRB, params: SwapParams): TxSwapParamsSol | TxSwapParamsSrb;
export declare function prepareTxSwapParams(bridgeChainType: ChainType, params: SwapParams): TxSwapParams;
export declare function prepareTxSendParams(bridgeChainType: ChainType.EVM | ChainType.SUI, params: SendParams, api: AllbridgeCoreClient): Promise<TxSendParamsEvm | TxSendParamsSui>;
export declare function prepareTxSendParams(bridgeChainType: ChainType.TRX, params: SendParams, api: AllbridgeCoreClient): Promise<TxSendParamsTrx>;
export declare function prepareTxSendParams(bridgeChainType: ChainType.SOLANA | ChainType.SRB, params: SendParams, api: AllbridgeCoreClient): Promise<TxSendParamsSol | TxSendParamsSrb>;
export declare function prepareTxSendParams(bridgeChainType: ChainType, params: SendParams, api: AllbridgeCoreClient): Promise<TxSendParams>;
export declare function getGasFeeOptions(sourceAllbridgeChainId: number, sourceChainType: ChainType, destinationAllbridgeChainId: number, sourceChainTokenDecimals: number, messenger: Messenger, api: AllbridgeCoreClient): Promise<GasFeeOptions>;
export declare function getExtraGasMaxLimits(sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, api: AllbridgeCoreClient): Promise<ExtraGasMaxLimitResponse>;
export declare function isSendParams(params: SwapParams | SendParams): params is SendParams;
