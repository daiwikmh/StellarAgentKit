{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/bridge/trx/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Big } from \"big.js\";\nimport { TronWeb } from \"tronweb\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { SdkError } from \"../../../exceptions\";\nimport { FeePaymentMethod, Messenger, SwapParams, TransactionResponse } from \"../../../models\";\nimport { RawTransaction, SmartContractMethodParameter } from \"../../models\";\nimport { sendRawTransaction } from \"../../utils/trx\";\nimport { SendParams, TxSendParamsTrx, TxSwapParamsTrx } from \"../models\";\nimport { ChainBridgeService } from \"../models/bridge\";\nimport { getNonceBigInt, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\n\nexport class TronBridgeService extends ChainBridgeService {\n  chainType: ChainType.TRX = ChainType.TRX;\n\n  constructor(\n    public tronWeb: TronWeb,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async send(params: SendParams): Promise<TransactionResponse> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    const rawTransaction = await this.buildRawTransactionSendFromParams(txSendParams);\n    return await sendRawTransaction(this.tronWeb, rawTransaction);\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction> {\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildRawTransactionSwapFromParams(txSwapParams);\n  }\n\n  async buildRawTransactionSwapFromParams(params: TxSwapParamsTrx): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toAccountAddress,\n      toTokenAddress,\n      minimumReceiveAmount,\n    } = params;\n\n    const parameters = [\n      { type: \"uint256\", value: amount },\n      { type: \"bytes32\", value: fromTokenAddress },\n      { type: \"bytes32\", value: toTokenAddress },\n      { type: \"address\", value: toAccountAddress },\n      { type: \"uint256\", value: minimumReceiveAmount },\n    ];\n    const methodSignature = \"swap(uint256,bytes32,bytes32,address,uint256)\";\n    return this.buildRawTransaction(contractAddress, methodSignature, parameters, \"0\", fromAccountAddress);\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    return this.buildRawTransactionSendFromParams(txSendParams);\n  }\n\n  async buildRawTransactionSendFromParams(params: TxSendParamsTrx): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      messenger,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = params;\n\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n\n    const nonce = getNonceBigInt().toString();\n    let parameters;\n    let value: string;\n    let methodSignature: string;\n    if (messenger == Messenger.CCTP || messenger == Messenger.CCTP_V2) {\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        parameters = [\n          { type: \"uint256\", value: amount },\n          { type: \"bytes32\", value: toAccountAddress },\n          { type: \"uint256\", value: toChainId },\n          { type: \"uint256\", value: totalFee },\n        ];\n        value = \"0\";\n      } else {\n        parameters = [\n          { type: \"uint256\", value: amount },\n          { type: \"bytes32\", value: toAccountAddress },\n          { type: \"uint256\", value: toChainId },\n          { type: \"uint256\", value: 0 },\n        ];\n        value = totalFee;\n      }\n      methodSignature = \"bridge(uint256,bytes32,uint256,uint256)\";\n    } else {\n      if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n        parameters = [\n          { type: \"bytes32\", value: fromTokenAddress },\n          { type: \"uint256\", value: amount },\n          { type: \"bytes32\", value: toAccountAddress },\n          { type: \"uint256\", value: toChainId },\n          { type: \"bytes32\", value: toTokenAddress },\n          { type: \"uint256\", value: nonce },\n          { type: \"uint8\", value: messenger },\n          { type: \"uint256\", value: totalFee },\n        ];\n        value = \"0\";\n      } else {\n        parameters = [\n          { type: \"bytes32\", value: fromTokenAddress },\n          { type: \"uint256\", value: amount },\n          { type: \"bytes32\", value: toAccountAddress },\n          { type: \"uint256\", value: toChainId },\n          { type: \"bytes32\", value: toTokenAddress },\n          { type: \"uint256\", value: nonce },\n          { type: \"uint8\", value: messenger },\n          { type: \"uint256\", value: 0 },\n        ];\n        value = totalFee;\n      }\n      methodSignature = \"swapAndBridge(bytes32,uint256,bytes32,uint256,bytes32,uint256,uint8,uint256)\";\n    }\n    return this.buildRawTransaction(contractAddress, methodSignature, parameters, value, fromAccountAddress);\n  }\n\n  private async buildRawTransaction(\n    contractAddress: string,\n    methodSignature: string,\n    parameters: SmartContractMethodParameter[],\n    value: string,\n    fromAddress: string\n  ): Promise<RawTransaction> {\n    const transactionObject = await this.tronWeb.transactionBuilder.triggerSmartContract(\n      contractAddress,\n      methodSignature,\n      {\n        callValue: +value,\n      },\n      parameters,\n      fromAddress\n    );\n    if (!transactionObject?.result?.result) {\n      throw new SdkError(\"Unknown error: \" + JSON.stringify(transactionObject, null, 2));\n    }\n    return transactionObject.transaction;\n  }\n}\n"]}