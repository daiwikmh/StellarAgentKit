import { NodeRpcUrlsConfig } from "..";
import { Messenger } from "../../client/core-api/core-api.model";
import { AllbridgeCoreClient } from "../../client/core-api/core-client-base";
import { AllbridgeCoreSdkOptions } from "../../index";
import { TokenWithChainDetails } from "../../tokens-info";
import { Provider, TransactionResponse } from "../models";
import { TokenService } from "../token";
import { ApproveParams, CheckAllowanceParams, GetAllowanceParams, SendParams, ChainBridgeService } from "./models";
import { RawBridgeTransactionBuilder } from "./raw-bridge-transaction-builder";
export interface BridgeService {
    rawTxBuilder: RawBridgeTransactionBuilder;
    /**
     * Get amount of tokens approved to be sent by the bridge
     * @param provider - will be used to access the network
     * @param params See {@link GetAllowanceParams}
     * @returns the amount of approved tokens
     */
    getAllowance(provider: Provider, params: GetAllowanceParams): Promise<string>;
    /**
     * Get amount of tokens approved to be sent by the bridge
     * @param params See {@link GetAllowanceParams}
     * @returns the amount of approved tokens
     */
    getAllowance(params: GetAllowanceParams): Promise<string>;
    /**
     * Check if the amount of approved tokens is enough to make a transfer
     * @param provider - will be used to access the network
     * @param params See {@link CheckAllowanceParams}
     * @returns true if the amount of approved tokens is enough to make a transfer
     */
    checkAllowance(provider: Provider, params: CheckAllowanceParams): Promise<boolean>;
    /**
     * Check if the amount of approved tokens is enough to make a transfer
     * @param params See {@link CheckAllowanceParams}
     * @returns true if the amount of approved tokens is enough to make a transfer
     */
    checkAllowance(params: CheckAllowanceParams): Promise<boolean>;
    /**
     * @deprecated Use {@link rawTxBuilder}.{@link RawBridgeTransactionBuilder.approve}<p>
     * Approve tokens usage by another address on chains
     * <p>
     * For ETH/USDT: due to specificity of the USDT contract:<br/>
     * If the current allowance is not 0, this function will perform an additional transaction to set allowance to 0 before setting the new allowance value.
     * @param provider - will be used to access the network
     * @param approveData
     */
    approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;
    /**
     * @deprecated Use {@link rawTxBuilder}.{@link RawBridgeTransactionBuilder.send}<p>
     * Send tokens through the ChainBridgeService
     * @param provider - will be used to access the network
     * @param params
     */
    send(provider: Provider, params: SendParams): Promise<TransactionResponse>;
}
export declare class DefaultBridgeService implements BridgeService {
    private api;
    private nodeRpcUrlsConfig;
    private params;
    private tokenService;
    rawTxBuilder: RawBridgeTransactionBuilder;
    constructor(api: AllbridgeCoreClient, nodeRpcUrlsConfig: NodeRpcUrlsConfig, params: AllbridgeCoreSdkOptions, tokenService: TokenService);
    getAllowance(a: Provider | GetAllowanceParams, b?: GetAllowanceParams): Promise<string>;
    checkAllowance(a: Provider | CheckAllowanceParams, b?: CheckAllowanceParams): Promise<boolean>;
    approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;
    send(provider: Provider, params: SendParams): Promise<TransactionResponse>;
}
export declare function getSpender(token: TokenWithChainDetails, messenger?: Messenger): string;
export declare function getChainBridgeService(chainSymbol: string, api: AllbridgeCoreClient, nodeRpcUrlsConfig: NodeRpcUrlsConfig, params: AllbridgeCoreSdkOptions, provider?: Provider): ChainBridgeService;
