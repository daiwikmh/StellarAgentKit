"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JupiterService = void 0;
const spl_token_1 = require("@solana/spl-token");
const web3_js_1 = require("@solana/web3.js");
const axios_1 = __importStar(require("axios"));
const exceptions_1 = require("../../../exceptions");
const utils_1 = require("../../../utils/sol/utils");
class JupiterService {
    connection;
    jupiterUrl;
    apiKeyHeader;
    maxAccounts;
    constructor(solanaRpcUrl, jupiterParams) {
        this.connection = new web3_js_1.Connection(solanaRpcUrl);
        this.jupiterUrl = jupiterParams.jupiterUrl.replace(/\/$/, ""); // trim last "/" if exist
        this.apiKeyHeader = jupiterParams.jupiterApiKeyHeader;
        this.maxAccounts = jupiterParams.jupiterMaxAccounts;
    }
    async getJupiterSwapTx(userAddress, stableTokenAddress, amount, exactOut) {
        let quoteResponse;
        try {
            const swapMode = exactOut ? "ExactOut" : "ExactIn";
            let url = `${this.jupiterUrl}/quote?inputMint=${stableTokenAddress}&outputMint=${spl_token_1.NATIVE_MINT.toString()}&amount=${amount}&swapMode=${swapMode}&slippageBps=100&onlyDirectRoutes=true`;
            if (this.maxAccounts) {
                url += `&maxAccounts=${this.maxAccounts}`;
            }
            quoteResponse = await axios_1.default.get(url, {
                headers: this.apiKeyHeader ? { "x-api-key": this.apiKeyHeader } : undefined,
            });
        }
        catch (err) {
            if (err instanceof axios_1.AxiosError && err.response && err.response.data && err.response.data.error) {
                throw new exceptions_1.JupiterError(err.response.data.error);
            }
            throw new exceptions_1.JupiterError("Cannot get route");
        }
        let inAmount;
        if (exactOut && quoteResponse?.data?.inAmount) {
            inAmount = quoteResponse.data.inAmount;
        }
        else if (exactOut) {
            throw new exceptions_1.JupiterError("Cannot get inAmount");
        }
        let transactionResponse;
        try {
            transactionResponse = await axios_1.default.post(`${this.jupiterUrl}/swap`, {
                quoteResponse: quoteResponse.data,
                userPublicKey: userAddress,
                wrapAndUnwrapSol: true,
            }, {
                headers: this.apiKeyHeader ? { "x-api-key": this.apiKeyHeader } : undefined,
            });
        }
        catch (err) {
            if (err instanceof axios_1.AxiosError && err.response && err.response.data && err.response.data.error) {
                throw new exceptions_1.JupiterError(err.response.data.error);
            }
            throw new exceptions_1.JupiterError("Cannot get swap transaction");
        }
        let swapTransaction;
        if (transactionResponse?.data?.swapTransaction) {
            swapTransaction = transactionResponse.data.swapTransaction;
        }
        else {
            throw new exceptions_1.JupiterError("Cannot get swap transaction");
        }
        const swapTransactionBuf = Buffer.from(swapTransaction, "base64");
        const tx = web3_js_1.VersionedTransaction.deserialize(swapTransactionBuf);
        return exactOut ? { tx, amountIn: inAmount } : { tx };
    }
    async amendJupiterWithSdkTx(transaction, sdkTx) {
        try {
            const addressLookupTableAccounts = await (0, utils_1.fetchAddressLookupTableAccountsFromTx)(transaction, this.connection);
            const sdkAddressLookupTableAccounts = await (0, utils_1.fetchAddressLookupTableAccountsFromTx)(sdkTx, this.connection);
            const message = web3_js_1.TransactionMessage.decompile(transaction.message, {
                addressLookupTableAccounts: addressLookupTableAccounts,
            });
            const sdkMessage = web3_js_1.TransactionMessage.decompile(sdkTx.message, {
                addressLookupTableAccounts: sdkAddressLookupTableAccounts,
            });
            sdkMessage.instructions.shift();
            message.instructions.push(...sdkMessage.instructions);
            addressLookupTableAccounts.push(...sdkAddressLookupTableAccounts);
            transaction.message = message.compileToV0Message(addressLookupTableAccounts);
            if (sdkTx.message.header.numRequiredSignatures === 2 && transaction.signatures.length === 1) {
                const signature = sdkTx.signatures[0];
                if (!signature) {
                    throw new exceptions_1.SdkError("Signature is undefined");
                }
                transaction.signatures.push(signature);
            }
            return transaction;
        }
        catch (e) {
            if (e instanceof Error && e.message) {
                throw new exceptions_1.JupiterError(`Some error occurred during creation final swap and bridge transaction. ${e.message}`);
            }
            throw new exceptions_1.JupiterError("Some error occurred during creation final swap and bridge transaction");
        }
    }
}
exports.JupiterService = JupiterService;
//# sourceMappingURL=jupiter.js.map