{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/bridge/sui/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { SuiClient } from \"@mysten/sui/client\";\nimport { CoinStruct } from \"@mysten/sui/src/client/types/generated\";\nimport { coinWithBalance, Transaction, TransactionResult } from \"@mysten/sui/transactions\";\nimport { SUI_CLOCK_OBJECT_ID } from \"@mysten/sui/utils\";\nimport { Big } from \"big.js\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport {\n  ChainSymbol,\n  ChainType,\n  FeePaymentMethod,\n  Messenger,\n  RawSuiTransaction,\n  SdkError,\n  SwapParams,\n  TransactionResponse,\n} from \"../../../models\";\nimport { SuiAddresses } from \"../../../tokens-info\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { setAddress } from \"../../models/sui/bridge\";\nimport { swap, swapAndBridge, swapAndBridgeWormhole } from \"../../models/sui/bridge/bridge-interface/functions\";\nimport { setAddress as setCctpAddress } from \"../../models/sui/cctp-bridge\";\nimport { bridge } from \"../../models/sui/cctp-bridge/cctp-bridge-interface/functions\";\nimport { setAddress as setUtilsAddress } from \"../../models/sui/utils\";\nimport { fromHex } from \"../../models/sui/utils/bytes32/functions\";\nimport { fetchAllPagesRecursive } from \"../../utils/sui/paginated\";\nimport { getCctpSolTokenRecipientAddress } from \"../get-cctp-sol-token-recipient-address\";\nimport { ChainBridgeService, SendParams, TxSendParamsSui, TxSwapParamsSui } from \"../models\";\nimport { getNonceBigInt, normalizeSuiHex, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\n\nexport class SuiBridgeService extends ChainBridgeService {\n  chainType: ChainType.SUI = ChainType.SUI;\n  chainSymbol: ChainSymbol.SUI = ChainSymbol.SUI;\n\n  private readonly client: SuiClient;\n\n  constructor(\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n    this.client = new SuiClient({\n      url: nodeRpcUrlsConfig.getNodeRpcUrl(this.chainSymbol),\n    });\n  }\n\n  send(): Promise<TransactionResponse> {\n    throw new SdkError(\"Method send not implemented.\");\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawSuiTransaction> {\n    const suiAddresses = params.sourceToken.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildRawTransactionSwapFromParams(txSwapParams, suiAddresses);\n  }\n\n  async buildRawTransactionSwapFromParams(\n    params: TxSwapParamsSui,\n    suiAddresses: SuiAddresses\n  ): Promise<RawSuiTransaction> {\n    const { amount, fromAccountAddress, fromTokenAddress, toTokenAddress, minimumReceiveAmount } = params;\n\n    const tx = new Transaction();\n    tx.setSender(fromAccountAddress);\n\n    const args = {\n      bridge: suiAddresses.bridgeObjectAddress,\n      coin: coinWithBalance({ balance: BigInt(amount), type: fromTokenAddress }),\n      receiveAmountMin: BigInt(minimumReceiveAmount),\n    };\n    const swapResult = swap(tx, [fromTokenAddress, toTokenAddress], args);\n\n    const coins: CoinStruct[] = await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getCoins({\n        owner: params.toAccountAddress,\n        coinType: toTokenAddress,\n        cursor,\n      })\n    );\n    if (coins.length === 0 || !coins[0]) {\n      tx.transferObjects([swapResult], params.toAccountAddress);\n    } else {\n      tx.mergeCoins(coins[0].coinObjectId, [swapResult]);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawSuiTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    const { messenger } = txSendParams;\n\n    const suiAddresses = params.sourceToken.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n    setUtilsAddress(suiAddresses.utilsAddress);\n\n    switch (messenger) {\n      case Messenger.ALLBRIDGE:\n        return this.buildRawTransactionAllbridgeSend(txSendParams, suiAddresses);\n      case Messenger.WORMHOLE:\n        return this.buildRawTransactionWormholeSend(txSendParams, suiAddresses);\n      case Messenger.CCTP:\n      case Messenger.CCTP_V2:\n        return this.buildRawTransactionCctpSend(params, txSendParams, suiAddresses);\n    }\n  }\n\n  private async buildRawTransactionAllbridgeSend(\n    txSendParams: TxSendParamsSui,\n    suiAddresses: SuiAddresses\n  ): Promise<RawSuiTransaction> {\n    const {\n      amount,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = txSendParams;\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n\n    const tx = new Transaction();\n    tx.setSender(fromAccountAddress);\n    if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n      const amountWithoutFee = BigInt(amount) - BigInt(totalFee);\n      const args = {\n        bridge: suiAddresses.bridgeObjectAddress,\n        messenger: suiAddresses.allbridgeMessengerObjectAddress,\n        amount: coinWithBalance({ balance: amountWithoutFee, type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        nonce: getNonceBigInt(),\n        recipient: fromHex(tx, normalizeSuiHex(toAccountAddress)),\n        receiveToken: fromHex(tx, normalizeSuiHex(toTokenAddress)),\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(totalFee), type: fromTokenAddress }),\n        feeSuiCoin: coinWithBalance({ balance: BigInt(0), useGasCoin: false }),\n      };\n      swapAndBridge(tx, fromTokenAddress, args);\n    } else {\n      const totalFeeCoin =\n        totalFee === \"0\"\n          ? coinWithBalance({ balance: BigInt(totalFee), useGasCoin: false })\n          : coinWithBalance({ balance: BigInt(totalFee) });\n      const args = {\n        bridge: suiAddresses.bridgeObjectAddress,\n        messenger: suiAddresses.allbridgeMessengerObjectAddress,\n        amount: coinWithBalance({ balance: BigInt(amount), type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        nonce: getNonceBigInt(),\n        recipient: fromHex(tx, normalizeSuiHex(toAccountAddress)),\n        receiveToken: fromHex(tx, normalizeSuiHex(toTokenAddress)),\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(0), type: fromTokenAddress }),\n        feeSuiCoin: totalFeeCoin,\n      };\n      swapAndBridge(tx, fromTokenAddress, args);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  private async buildRawTransactionWormholeSend(\n    txSendParams: TxSendParamsSui,\n    suiAddresses: SuiAddresses\n  ): Promise<RawSuiTransaction> {\n    const {\n      amount,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = txSendParams;\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n\n    const tx = new Transaction();\n    tx.setSender(fromAccountAddress);\n    if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n      const amountWithoutFee = BigInt(amount) - BigInt(totalFee);\n      const args = {\n        bridge: suiAddresses.bridgeObjectAddress,\n        messenger: suiAddresses.wormholeMessengerObjectAddress,\n        wormholeState: suiAddresses.wormholeStateObjectAddress,\n        theClock: SUI_CLOCK_OBJECT_ID,\n        amount: coinWithBalance({ balance: amountWithoutFee, type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        nonce: getNonceBigInt(),\n        recipient: fromHex(tx, normalizeSuiHex(toAccountAddress)),\n        receiveToken: fromHex(tx, normalizeSuiHex(toTokenAddress)),\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(totalFee), type: fromTokenAddress }),\n        feeSuiCoin: coinWithBalance({ balance: BigInt(0), useGasCoin: false }),\n      };\n      swapAndBridgeWormhole(tx, fromTokenAddress, args);\n    } else {\n      const totalFeeCoin =\n        totalFee === \"0\"\n          ? coinWithBalance({ balance: BigInt(totalFee), useGasCoin: false })\n          : coinWithBalance({ balance: BigInt(totalFee) });\n      const args = {\n        bridge: suiAddresses.bridgeObjectAddress,\n        messenger: suiAddresses.wormholeMessengerObjectAddress,\n        wormholeState: suiAddresses.wormholeStateObjectAddress,\n        theClock: SUI_CLOCK_OBJECT_ID,\n        amount: coinWithBalance({ balance: BigInt(amount), type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        nonce: getNonceBigInt(),\n        recipient: fromHex(tx, normalizeSuiHex(toAccountAddress)),\n        receiveToken: fromHex(tx, normalizeSuiHex(toTokenAddress)),\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(0), type: fromTokenAddress }),\n        feeSuiCoin: totalFeeCoin,\n      };\n      swapAndBridgeWormhole(tx, fromTokenAddress, args);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  private async buildRawTransactionCctpSend(\n    params: SendParams,\n    txSendParams: TxSendParamsSui,\n    suiAddresses: SuiAddresses\n  ): Promise<RawSuiTransaction> {\n    const {\n      amount,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = txSendParams;\n\n    setCctpAddress(suiAddresses.cctpAddress, suiAddresses.cctpAddressOrigin);\n\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n\n    const tx = new Transaction();\n    tx.setSender(fromAccountAddress);\n\n    const recipientWalletAddress = fromHex(tx, normalizeSuiHex(toAccountAddress));\n    let recipient: TransactionResult;\n    if (params.destinationToken.chainType === ChainType.SOLANA) {\n      const recipientStr = await getCctpSolTokenRecipientAddress(\n        this.chainType,\n        params.toAccountAddress,\n        params.destinationToken.tokenAddress,\n        this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SOL)\n      );\n      recipient = fromHex(tx, normalizeSuiHex(recipientStr));\n    } else {\n      recipient = recipientWalletAddress;\n    }\n\n    if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n      const amountWithoutFee = BigInt(amount) - BigInt(totalFee);\n      const args = {\n        cctpBridge: suiAddresses.cctpObjectAddress,\n        tokenMessengerMinterState: suiAddresses.cctpTokenMessengerMinterStateObjectAddress,\n        messageTransmitterState: suiAddresses.cctpMessageTransmitterStateObjectAddress,\n        treasury: suiAddresses.cctpTreasuryObjectAddress,\n        denyList: suiAddresses.cctpDenyListObjectAddress,\n        amount: coinWithBalance({ balance: amountWithoutFee, type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        recipient: recipient,\n        recipientWalletAddress: recipientWalletAddress,\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(totalFee), type: fromTokenAddress }),\n        feeSuiCoin: coinWithBalance({ balance: BigInt(0), useGasCoin: false }),\n      };\n      bridge(tx, fromTokenAddress, args);\n    } else {\n      const totalFeeCoin =\n        totalFee === \"0\"\n          ? coinWithBalance({ balance: BigInt(totalFee), useGasCoin: false })\n          : coinWithBalance({ balance: BigInt(totalFee) });\n      const args = {\n        cctpBridge: suiAddresses.cctpObjectAddress,\n        tokenMessengerMinterState: suiAddresses.cctpTokenMessengerMinterStateObjectAddress,\n        messageTransmitterState: suiAddresses.cctpMessageTransmitterStateObjectAddress,\n        treasury: suiAddresses.cctpTreasuryObjectAddress,\n        denyList: suiAddresses.cctpDenyListObjectAddress,\n        amount: coinWithBalance({ balance: BigInt(amount), type: fromTokenAddress }),\n        destinationChainId: toChainId,\n        recipient: recipient,\n        recipientWalletAddress: recipientWalletAddress,\n        gasOracle: suiAddresses.gasOracleObjectAddress,\n        feeTokenCoin: coinWithBalance({ balance: BigInt(0), type: fromTokenAddress }),\n        feeSuiCoin: totalFeeCoin,\n      };\n      bridge(tx, fromTokenAddress, args);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n}\n"]}