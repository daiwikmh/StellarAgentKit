{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/bridge/sol/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { BN, Program, Spl, web3 } from \"@project-serum/anchor\";\nimport {\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessageArgs,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { Big } from \"big.js\";\nimport { Chains } from \"../../../chains\";\nimport { Messenger } from \"../../../client/core-api/core-api.model\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport {\n  AmountNotEnoughError,\n  CCTPDoesNotSupportedError,\n  JupiterError,\n  MethodNotSupportedError,\n  SdkError,\n  SdkRootError,\n} from \"../../../exceptions\";\nimport { ChainType, FeePaymentMethod, SwapParams, TxFeeParams } from \"../../../models\";\nimport { convertIntAmountToFloat } from \"../../../utils/calculation\";\nimport { RawTransaction, TransactionResponse } from \"../../models\";\nimport { SwapAndBridgeSolData, SwapAndBridgeSolDataCctpData } from \"../../models/sol\";\nimport { Bridge as BridgeType, IDL as bridgeIdl } from \"../../models/sol/types/bridge\";\nimport { CctpBridge as CctpBridgeType, IDL as cctpBridgeIdl } from \"../../models/sol/types/cctp_bridge\";\nimport { getMessage, getTokenAccountData, getVUsdAmount } from \"../../utils/sol\";\nimport {\n  getAssociatedAccount,\n  getAuthorityAccount,\n  getBridgeTokenAccount,\n  getCctpAccounts,\n  getCctpAuthorityAccount,\n  getCctpBridgeAccount,\n  getCctpBridgeTokenAccount,\n  getCctpLockAccount,\n  getChainBridgeAccount,\n  getConfigAccount,\n  getGasUsageAccount,\n  getLockAccount,\n  getOtherChainTokenAccount,\n  getPriceAccount,\n  getSendMessageAccount,\n} from \"../../utils/sol/accounts\";\nimport { buildAnchorProvider } from \"../../utils/sol/anchor-provider\";\nimport { addUnitLimitAndUnitPriceToTx, addUnitLimitAndUnitPriceToVersionedTx } from \"../../utils/sol/compute-budget\";\nimport { SendParams, TxSendParamsSol, TxSwapParamsSol } from \"../models\";\nimport { ChainBridgeService } from \"../models/bridge\";\nimport { getNonce, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\nimport { JupiterService } from \"./jupiter\";\n\nexport interface SolanaBridgeParams {\n  wormholeMessengerProgramId: string;\n  solanaLookUpTable: string;\n  cctpParams: CctpParams;\n  jupiterParams: JupiterParams;\n}\n\nexport interface JupiterParams {\n  jupiterUrl: string;\n  jupiterApiKeyHeader?: string;\n  jupiterMaxAccounts?: number;\n}\n\nexport interface CctpParams {\n  cctpTransmitterProgramId: string;\n  cctpTokenMessengerMinter: string;\n  cctpDomains: CctpDomains;\n}\n\n/**\n * Type representing a map of CCTP domains to their corresponding numeric values.\n *\n * @typedef {Record<string, number>} CctpDomains\n * @property {string} chainSymbol - The symbol of the chain representing one of the supported blockchain networks (e.g., \"ETH\" for Ethereum). For more details, see: {@link ChainSymbol}.\n * @property {number} value - The numeric value associated with the specified chain.\n */\nexport type CctpDomains = Record<string, number>;\n\nconst COMPUTE_UNIT_LIMIT = 1000000;\n\nconst JUP_ADD_INDEX = 1.1;\n\nexport class SolanaBridgeService extends ChainBridgeService {\n  chainType: ChainType.SOLANA = ChainType.SOLANA;\n  jupiterService: JupiterService;\n\n  constructor(\n    public solanaRpcUrl: string,\n    public params: SolanaBridgeParams,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n    this.jupiterService = new JupiterService(solanaRpcUrl, params.jupiterParams);\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction> {\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildSwapTransaction(\n      txSwapParams,\n      params.sourceToken.poolAddress,\n      params.destinationToken.poolAddress,\n      params.txFeeParams\n    );\n  }\n\n  private async buildSwapTransaction(\n    params: TxSwapParamsSol,\n    poolAddress: string,\n    toPoolAddress: string,\n    txFeeParams?: TxFeeParams\n  ): Promise<VersionedTransaction> {\n    const {\n      fromAccountAddress,\n      amount,\n      contractAddress,\n      fromTokenAddress,\n      toTokenAddress,\n      toAccountAddress,\n      minimumReceiveAmount,\n    } = params;\n    const account = fromAccountAddress;\n    const bridgeAddress = contractAddress;\n    const tokenAddress = fromTokenAddress;\n    const receiveTokenAddress = toTokenAddress;\n    const receivePoolAddress = toPoolAddress;\n    const receiverOriginal = toAccountAddress;\n\n    const userAccount = new PublicKey(account);\n    const provider = buildAnchorProvider(this.solanaRpcUrl, userAccount.toString());\n    const bridge = new Program<BridgeType>(bridgeIdl, bridgeAddress, provider);\n\n    const bridgeAuthority = await getAuthorityAccount(bridge.programId);\n    const configAccount = await getConfigAccount(bridge.programId);\n\n    const sendMint = new PublicKey(tokenAddress);\n    const sendBridgeToken = await getBridgeTokenAccount(sendMint, bridge.programId);\n    const sendPool = new PublicKey(poolAddress);\n    const sendUserToken = await getAssociatedAccount(userAccount, sendMint);\n\n    const receiverAccount = new PublicKey(receiverOriginal);\n    const receiveMint = new PublicKey(receiveTokenAddress);\n    const receiveBridgeToken = await getBridgeTokenAccount(receiveMint, bridge.programId);\n    const receivePool = new PublicKey(receivePoolAddress);\n    const receiveUserToken = await getAssociatedAccount(receiverAccount, receiveMint);\n\n    const preInstructions: TransactionInstruction[] = [\n      web3.ComputeBudgetProgram.setComputeUnitLimit({\n        units: COMPUTE_UNIT_LIMIT,\n      }),\n    ];\n\n    try {\n      await getTokenAccountData(receiveUserToken, provider);\n    } catch (e) {\n      const associatedProgram = Spl.associatedToken(provider);\n      const createReceiveUserTokenInstruction: TransactionInstruction = await associatedProgram.methods\n        .create()\n        .accounts({\n          mint: receiveMint,\n          owner: receiverAccount,\n          associatedAccount: receiveUserToken,\n        })\n        .instruction();\n      preInstructions.push(createReceiveUserTokenInstruction);\n    }\n    const transaction = await bridge.methods\n      .swap(new BN(amount), new BN(minimumReceiveAmount || 0))\n      .accounts({\n        payer: userAccount,\n        config: configAccount,\n        bridgeAuthority,\n        user: userAccount,\n        sendBridgeToken,\n        sendMint,\n        sendPool,\n        sendUserToken,\n        receiveBridgeToken,\n        receiveMint,\n        receivePool,\n        receiveUserToken,\n      })\n      .preInstructions(preInstructions)\n      .transaction();\n\n    const connection = provider.connection;\n    transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n    transaction.feePayer = userAccount;\n    await addUnitLimitAndUnitPriceToTx(transaction, txFeeParams, this.solanaRpcUrl);\n    return await this.convertToVersionedTransaction(transaction, connection);\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    let solTxSendParams = this.addPoolAddress(params, txSendParams);\n\n    const isJupiterForStableCoin = solTxSendParams.gasFeePaymentMethod == FeePaymentMethod.WITH_STABLECOIN;\n\n    let jupTx;\n    if (isJupiterForStableCoin) {\n      try {\n        const { tx, solTxSendUpdatedParams } = await this.processJup(solTxSendParams, params, true);\n        jupTx = tx;\n        solTxSendParams = { ...solTxSendParams, ...solTxSendUpdatedParams };\n      } catch (e) {\n        try {\n          const { tx, solTxSendUpdatedParams } = await this.processJup(solTxSendParams, params, false);\n          jupTx = tx;\n          solTxSendParams = { ...solTxSendParams, ...solTxSendUpdatedParams };\n        } catch (e) {\n          if (e instanceof SdkRootError) {\n            throw e;\n          }\n          if (e instanceof Error && e.message) {\n            throw new JupiterError(`Some error occurred during creation Jupiter swap transaction. ${e.message}`);\n          }\n          throw new JupiterError(\"Some error occurred during creation Jupiter swap transaction\");\n        }\n      }\n    }\n\n    let swapAndBridgeTx: VersionedTransaction;\n    let requiredMessageSigner: Keypair | undefined = undefined;\n    switch (txSendParams.messenger) {\n      case Messenger.ALLBRIDGE: {\n        const swapAndBridgeSolData = await this.prepareSwapAndBridgeData(solTxSendParams);\n        swapAndBridgeTx = await this.buildSwapAndBridgeAllbridgeTransaction(swapAndBridgeSolData);\n        break;\n      }\n      case Messenger.WORMHOLE: {\n        const swapAndBridgeSolData = await this.prepareSwapAndBridgeData(solTxSendParams);\n        const { transaction, messageAccount } = await this.buildSwapAndBridgeWormholeTransaction(swapAndBridgeSolData);\n        swapAndBridgeTx = transaction;\n        requiredMessageSigner = messageAccount;\n        break;\n      }\n      case Messenger.CCTP:\n      case Messenger.CCTP_V2: {\n        const swapAndBridgeSolData = await this.prepareSwapAndBridgeCctpData(solTxSendParams);\n        const { transaction, messageSentEventDataKeypair } = await this.buildSwapAndBridgeCctpTransaction(\n          params.destinationToken.chainSymbol,\n          swapAndBridgeSolData\n        );\n        swapAndBridgeTx = transaction;\n        requiredMessageSigner = messageSentEventDataKeypair;\n        break;\n      }\n    }\n\n    if (isJupiterForStableCoin) {\n      if (!jupTx) {\n        throw new JupiterError(\"Swap tx is absent\");\n      }\n      swapAndBridgeTx = await this.jupiterService.amendJupiterWithSdkTx(jupTx, swapAndBridgeTx);\n    }\n\n    await addUnitLimitAndUnitPriceToVersionedTx(swapAndBridgeTx, params.txFeeParams, this.solanaRpcUrl);\n\n    if (requiredMessageSigner) {\n      swapAndBridgeTx.sign([requiredMessageSigner]);\n    }\n    return swapAndBridgeTx;\n  }\n\n  private async processJup(\n    solTxSendParams: SolTxSendParams,\n    params: SendParams,\n    exactOut: boolean\n  ): Promise<{\n    tx: VersionedTransaction;\n    solTxSendUpdatedParams: {\n      amount: string;\n      fee: string;\n      extraGas?: string;\n      gasFeePaymentMethod: FeePaymentMethod;\n    };\n  }> {\n    const { fee, extraGas, gasFeePaymentMethod } = await this.convertStableCoinFeeAndExtraGasToNativeCurrency(\n      params.sourceToken.decimals,\n      solTxSendParams\n    );\n\n    let amountToProcess = exactOut ? Big(fee) : Big(solTxSendParams.fee);\n    if (extraGas) {\n      amountToProcess = amountToProcess.plus(extraGas);\n    }\n    if (!exactOut) {\n      amountToProcess = amountToProcess.mul(JUP_ADD_INDEX);\n    }\n\n    const { tx, amountIn } = await this.jupiterService.getJupiterSwapTx(\n      params.fromAccountAddress,\n      params.sourceToken.tokenAddress,\n      amountToProcess.toFixed(0),\n      exactOut\n    );\n\n    let newAmount: string;\n    if (exactOut) {\n      if (!amountIn) {\n        throw new JupiterError(\"Cannot get inAmount\");\n      }\n      newAmount = Big(solTxSendParams.amount).minus(Big(amountIn).mul(JUP_ADD_INDEX)).toFixed(0);\n    } else {\n      newAmount = Big(solTxSendParams.amount).minus(amountToProcess).toFixed(0);\n    }\n    if (Big(newAmount).lte(0)) {\n      throw new AmountNotEnoughError(\n        `Amount not enough to pay fee, ${convertIntAmountToFloat(\n          Big(newAmount).minus(1).neg(),\n          params.sourceToken.decimals\n        ).toFixed()} stables is missing`\n      );\n    }\n    return {\n      tx: tx,\n      solTxSendUpdatedParams: {\n        amount: newAmount,\n        fee: fee,\n        extraGas: extraGas,\n        gasFeePaymentMethod: gasFeePaymentMethod,\n      },\n    };\n  }\n\n  private addPoolAddress(params: SendParams, txSendParams: TxSendParamsSol): SolTxSendParams {\n    return {\n      ...txSendParams,\n      poolAddress: params.sourceToken.poolAddress,\n    };\n  }\n\n  async convertStableCoinFeeAndExtraGasToNativeCurrency(\n    tokenDecimals: number,\n    solTxSendParams: SolTxSendParams\n  ): Promise<{ fee: string; extraGas?: string; gasFeePaymentMethod: FeePaymentMethod }> {\n    if (solTxSendParams.gasFeePaymentMethod == FeePaymentMethod.WITH_STABLECOIN) {\n      const sourceNativeTokenPrice = (\n        await this.api.getReceiveTransactionCost({\n          sourceChainId: solTxSendParams.fromChainId,\n          destinationChainId: solTxSendParams.toChainId,\n          messenger: solTxSendParams.messenger,\n        })\n      ).sourceNativeTokenPrice;\n      const fee = Big(solTxSendParams.fee)\n        .div(sourceNativeTokenPrice)\n        .mul(Big(10).pow(Chains.getChainDecimalsByType(ChainType.SOLANA) - tokenDecimals))\n        .toFixed(0);\n      let extraGas;\n      if (solTxSendParams.extraGas) {\n        extraGas = Big(solTxSendParams.extraGas)\n          .div(sourceNativeTokenPrice)\n          .mul(Big(10).pow(Chains.getChainDecimalsByType(ChainType.SOLANA) - tokenDecimals))\n          .toFixed(0);\n      }\n      return { fee, extraGas, gasFeePaymentMethod: FeePaymentMethod.WITH_NATIVE_CURRENCY };\n    }\n    return {\n      fee: solTxSendParams.fee,\n      extraGas: solTxSendParams.extraGas,\n      gasFeePaymentMethod: FeePaymentMethod.WITH_NATIVE_CURRENCY,\n    };\n  }\n\n  private getExtraGasInstruction(\n    extraGas: string,\n    userAccount: PublicKey,\n    configAccount: PublicKey\n  ): TransactionInstruction | undefined {\n    return web3.SystemProgram.transfer({\n      fromPubkey: userAccount,\n      toPubkey: configAccount,\n      lamports: +extraGas,\n    });\n  }\n\n  private async prepareSwapAndBridgeData(txSendParams: SolTxSendParams): Promise<SwapAndBridgeSolData> {\n    const {\n      amount,\n      contractAddress,\n      fromChainId,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      poolAddress,\n      extraGas,\n    } = txSendParams;\n    const tokenAddress = fromTokenAddress;\n    const account = fromAccountAddress;\n    const destinationChainId = toChainId;\n    const receiveTokenAddress = toTokenAddress;\n    const receiverInBuffer32 = toAccountAddress;\n    const bridgeAddress = contractAddress;\n    const sourceChainId = fromChainId;\n\n    const provider = buildAnchorProvider(this.solanaRpcUrl, account);\n    const bridge = new Program<BridgeType>(bridgeIdl, bridgeAddress, provider);\n    const nonce = Array.from(getNonce());\n    const poolAccount = new PublicKey(poolAddress);\n    const vUsdAmount = await getVUsdAmount(amount, bridge, poolAccount);\n\n    const lockAccount = await getLockAccount(nonce, bridge.programId);\n    const bridgeAuthority = await getAuthorityAccount(bridge.programId);\n    const userToken = await getAssociatedAccount(new PublicKey(account), new PublicKey(tokenAddress));\n    const bridgeTokenAccount = await getBridgeTokenAccount(new PublicKey(tokenAddress), bridge.programId);\n    const chainBridgeAccount = await getChainBridgeAccount(destinationChainId, bridge.programId);\n    const otherBridgeTokenAccount = await getOtherChainTokenAccount(\n      destinationChainId,\n      Buffer.from(receiveTokenAddress),\n      bridge.programId\n    );\n\n    const configAccount = await getConfigAccount(bridge.programId);\n    const configAccountInfo = await bridge.account.config.fetch(configAccount);\n    const priceAccount = await getPriceAccount(destinationChainId, configAccountInfo.gasOracleProgramId);\n    const thisGasPriceAccount = await getPriceAccount(sourceChainId, configAccountInfo.gasOracleProgramId);\n\n    const message = getMessage({\n      amount: vUsdAmount,\n      recipient: Buffer.from(receiverInBuffer32),\n      nonce: Buffer.from(nonce),\n      receiveToken: Buffer.from(receiveTokenAddress),\n      destinationChainId,\n      sourceChainId,\n      chainBridge: (await getAuthorityAccount(bridge.programId)).toBuffer(),\n    });\n\n    const swapAndBridgeData = {} as SwapAndBridgeSolData;\n\n    swapAndBridgeData.bridge = bridge;\n    swapAndBridgeData.amount = new BN(amount);\n    swapAndBridgeData.vusdAmount = new BN(vUsdAmount);\n    swapAndBridgeData.nonce = nonce;\n    swapAndBridgeData.recipient = Array.from(receiverInBuffer32);\n    swapAndBridgeData.receiveToken = Array.from(receiveTokenAddress);\n    swapAndBridgeData.poolAccount = poolAccount;\n    swapAndBridgeData.lockAccount = lockAccount;\n    swapAndBridgeData.bridgeAuthority = bridgeAuthority;\n    swapAndBridgeData.userToken = userToken;\n    swapAndBridgeData.bridgeTokenAccount = bridgeTokenAccount;\n    swapAndBridgeData.chainBridgeAccount = chainBridgeAccount;\n    swapAndBridgeData.otherBridgeTokenAccount = otherBridgeTokenAccount;\n    swapAndBridgeData.userAccount = new PublicKey(account);\n    swapAndBridgeData.destinationChainId = destinationChainId;\n    // @ts-expect-error\n    swapAndBridgeData.mint = new PublicKey(tokenAddress);\n    swapAndBridgeData.config = configAccount;\n    swapAndBridgeData.configAccountInfo = configAccountInfo;\n    swapAndBridgeData.gasPrice = priceAccount;\n    swapAndBridgeData.thisGasPrice = thisGasPriceAccount;\n    swapAndBridgeData.message = message;\n\n    if (extraGas) {\n      swapAndBridgeData.extraGasInstruction = this.getExtraGasInstruction(\n        extraGas,\n        swapAndBridgeData.userAccount,\n        configAccount\n      );\n    }\n    return swapAndBridgeData;\n  }\n\n  private async buildSwapAndBridgeAllbridgeTransaction(\n    swapAndBridgeData: SwapAndBridgeSolData\n  ): Promise<VersionedTransaction> {\n    const {\n      bridge,\n      vusdAmount,\n      nonce,\n      recipient,\n      receiveToken,\n      poolAccount,\n      lockAccount,\n      bridgeAuthority,\n      userToken,\n      bridgeTokenAccount,\n      chainBridgeAccount,\n      otherBridgeTokenAccount,\n      userAccount,\n      destinationChainId,\n      mint,\n      config,\n      configAccountInfo,\n      gasPrice,\n      thisGasPrice,\n      message,\n      extraGasInstruction,\n    } = swapAndBridgeData;\n    const allbridgeMessengerProgramId = configAccountInfo.allbridgeMessengerProgramId;\n    const messengerGasUsageAccount = await getGasUsageAccount(destinationChainId, allbridgeMessengerProgramId);\n    const messengerConfig = await getConfigAccount(allbridgeMessengerProgramId);\n\n    const sentMessageAccount = await getSendMessageAccount(message, allbridgeMessengerProgramId);\n\n    const instructions: TransactionInstruction[] = [];\n    if (extraGasInstruction) {\n      instructions.push(extraGasInstruction);\n    }\n\n    const transaction = await bridge.methods\n      .swapAndBridge({\n        vusdAmount,\n        nonce,\n        destinationChainId,\n        recipient,\n        receiveToken,\n      })\n      .accounts({\n        mint,\n        user: userAccount,\n        config,\n        lock: lockAccount,\n        pool: poolAccount,\n        gasPrice,\n        thisGasPrice,\n        bridgeAuthority,\n        userToken,\n        bridgeToken: bridgeTokenAccount,\n        chainBridge: chainBridgeAccount,\n        messenger: allbridgeMessengerProgramId,\n        messengerGasUsage: messengerGasUsageAccount,\n        messengerConfig,\n        sentMessageAccount,\n        otherBridgeToken: otherBridgeTokenAccount,\n      })\n      .preInstructions([\n        web3.ComputeBudgetProgram.setComputeUnitLimit({\n          units: COMPUTE_UNIT_LIMIT,\n        }),\n      ])\n      .postInstructions(instructions)\n      .transaction();\n    const connection = buildAnchorProvider(this.solanaRpcUrl, userAccount.toString()).connection;\n    transaction.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n    transaction.feePayer = userAccount;\n    return await this.convertToVersionedTransaction(transaction, connection);\n  }\n\n  private async convertToVersionedTransaction(tx: Transaction, connection: Connection): Promise<VersionedTransaction> {\n    const allbridgeTableAccount = await connection\n      .getAddressLookupTable(new PublicKey(this.params.solanaLookUpTable))\n      .then((res) => res.value);\n    if (!allbridgeTableAccount) {\n      throw new SdkError(\"Cannot find allbridgeLookupTableAccount\");\n    }\n    const messageV0 = new web3.TransactionMessage({\n      payerKey: tx.feePayer,\n      recentBlockhash: tx.recentBlockhash,\n      instructions: tx.instructions,\n    } as TransactionMessageArgs).compileToV0Message([allbridgeTableAccount]);\n    return new web3.VersionedTransaction(messageV0);\n  }\n\n  private async buildSwapAndBridgeWormholeTransaction(\n    swapAndBridgeData: SwapAndBridgeSolData\n  ): Promise<{ transaction: VersionedTransaction; messageAccount: Keypair }> {\n    const {\n      bridge,\n      vusdAmount,\n      nonce,\n      recipient,\n      receiveToken,\n      poolAccount,\n      lockAccount,\n      bridgeAuthority,\n      userToken,\n      bridgeTokenAccount,\n      chainBridgeAccount,\n      otherBridgeTokenAccount,\n      userAccount,\n      destinationChainId,\n      mint,\n      config,\n      configAccountInfo,\n      gasPrice,\n      thisGasPrice,\n      message,\n      extraGasInstruction,\n    } = swapAndBridgeData;\n    const wormholeProgramId = this.params.wormholeMessengerProgramId;\n\n    const [whBridgeAccount] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"Bridge\")],\n      new PublicKey(wormholeProgramId)\n    );\n    const [whFeeCollectorAccount] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"fee_collector\")],\n      new PublicKey(wormholeProgramId)\n    );\n    const [whSequenceAccount] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"Sequence\"), bridgeAuthority.toBuffer()],\n      new PublicKey(wormholeProgramId)\n    );\n\n    const messengerGasUsageAccount = await getGasUsageAccount(\n      destinationChainId,\n      configAccountInfo.wormholeMessengerProgramId\n    );\n    const wormholeMessengerConfigAccount = await getConfigAccount(configAccountInfo.wormholeMessengerProgramId);\n    const messageAccount = Keypair.generate();\n\n    const provider = buildAnchorProvider(this.solanaRpcUrl, userAccount.toString());\n\n    const bridgeAccountInfo = await provider.connection.getAccountInfo(whBridgeAccount);\n    if (bridgeAccountInfo == null) {\n      throw new SdkError(\"Cannot fetch wormhole bridge account info\");\n    }\n    const feeLamports = new BN(bridgeAccountInfo.data.slice(16, 24), \"le\").toString();\n\n    const feeInstruction = SystemProgram.transfer({\n      fromPubkey: userAccount,\n      toPubkey: whFeeCollectorAccount,\n      lamports: +feeLamports,\n    });\n\n    const instructions: TransactionInstruction[] = [];\n    if (extraGasInstruction) {\n      instructions.push(extraGasInstruction);\n    }\n\n    const accounts = {\n      mint,\n      user: userAccount,\n      config,\n      lock: lockAccount,\n      pool: poolAccount,\n      gasPrice,\n      thisGasPrice,\n      bridgeAuthority,\n      userToken,\n      bridgeToken: bridgeTokenAccount,\n      chainBridge: chainBridgeAccount,\n      otherBridgeToken: otherBridgeTokenAccount,\n      messengerGasUsage: messengerGasUsageAccount,\n      wormholeProgram: wormholeProgramId,\n      bridge: whBridgeAccount,\n      message: messageAccount.publicKey,\n      wormholeMessenger: configAccountInfo.wormholeMessengerProgramId,\n      sequence: whSequenceAccount,\n      feeCollector: whFeeCollectorAccount,\n      wormholeMessengerConfig: wormholeMessengerConfigAccount,\n      clock: web3.SYSVAR_CLOCK_PUBKEY,\n    };\n\n    const transaction = await bridge.methods\n      .swapAndBridgeWormhole({\n        vusdAmount,\n        nonce: nonce,\n        destinationChainId,\n        recipient,\n        receiveToken,\n      })\n      .accounts(accounts)\n      .preInstructions([\n        web3.ComputeBudgetProgram.setComputeUnitLimit({\n          units: COMPUTE_UNIT_LIMIT,\n        }),\n        feeInstruction,\n      ])\n      .postInstructions(instructions)\n      .signers([messageAccount])\n      .transaction();\n    transaction.recentBlockhash = (await provider.connection.getLatestBlockhash()).blockhash;\n    transaction.feePayer = userAccount;\n    return { transaction: await this.convertToVersionedTransaction(transaction, provider.connection), messageAccount };\n  }\n\n  private async prepareSwapAndBridgeCctpData(txSendParams: SolTxSendParams): Promise<SwapAndBridgeSolDataCctpData> {\n    const {\n      contractAddress,\n      amount,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      extraGas,\n    } = txSendParams;\n    const cctpAddress = contractAddress;\n    if (!cctpAddress) {\n      throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n    }\n    const CHAIN_ID = 4;\n\n    const account = fromAccountAddress;\n    const receiveTokenAddress = toTokenAddress;\n    const receiverInBuffer32 = toAccountAddress;\n\n    const provider = buildAnchorProvider(this.solanaRpcUrl, account);\n    const cctpBridge: Program<CctpBridgeType> = new Program<CctpBridgeType>(cctpBridgeIdl, cctpAddress, provider);\n    const mint = new PublicKey(fromTokenAddress);\n    const cctpBridgeAccount = await getCctpBridgeAccount(mint, cctpBridge.programId);\n    const userAccount = new PublicKey(account);\n\n    const configAccountInfo = await cctpBridge.account.cctpBridge.fetch(cctpBridgeAccount);\n\n    const swapAndBridgeData = {} as SwapAndBridgeSolDataCctpData;\n\n    swapAndBridgeData.cctpBridge = cctpBridge;\n    swapAndBridgeData.cctpBridgeAccount = cctpBridgeAccount;\n    swapAndBridgeData.cctpAddressAccount = new PublicKey(cctpAddress);\n    swapAndBridgeData.amount = new BN(amount);\n    swapAndBridgeData.recipient = Array.from(receiverInBuffer32);\n    swapAndBridgeData.receiveToken = Array.from(receiveTokenAddress);\n    swapAndBridgeData.userToken = await getAssociatedAccount(userAccount, mint);\n    swapAndBridgeData.bridgeAuthority = await getCctpAuthorityAccount(cctpBridgeAccount, cctpBridge.programId);\n    swapAndBridgeData.bridgeTokenAccount = await getCctpBridgeTokenAccount(mint, cctpBridge.programId);\n    swapAndBridgeData.chainBridgeAccount = await getChainBridgeAccount(toChainId, cctpBridge.programId);\n    swapAndBridgeData.userAccount = userAccount;\n    swapAndBridgeData.destinationChainId = toChainId;\n    swapAndBridgeData.mint = mint;\n    swapAndBridgeData.gasPrice = await getPriceAccount(toChainId, configAccountInfo.gasOracleProgramId);\n    swapAndBridgeData.thisGasPrice = await getPriceAccount(CHAIN_ID, configAccountInfo.gasOracleProgramId);\n    swapAndBridgeData.provider = provider;\n\n    if (extraGas) {\n      swapAndBridgeData.extraGasInstruction = this.getExtraGasInstruction(\n        extraGas,\n        swapAndBridgeData.userAccount,\n        cctpBridgeAccount\n      );\n    }\n    return swapAndBridgeData;\n  }\n\n  async buildSwapAndBridgeCctpTransaction(\n    destinationChainSymbol: string,\n    swapAndBridgeData: SwapAndBridgeSolDataCctpData\n  ): Promise<{ transaction: VersionedTransaction; messageSentEventDataKeypair: Keypair }> {\n    const {\n      cctpBridge,\n      cctpBridgeAccount,\n      amount,\n      recipient,\n      receiveToken,\n      bridgeAuthority,\n      userToken,\n      bridgeTokenAccount,\n      chainBridgeAccount,\n      userAccount,\n      destinationChainId,\n      mint,\n      gasPrice,\n      thisGasPrice,\n      extraGasInstruction,\n      provider,\n    } = swapAndBridgeData;\n    const domain = this.params.cctpParams.cctpDomains[destinationChainSymbol];\n    const cctpTransmitterProgramIdAddress = this.params.cctpParams.cctpTransmitterProgramId;\n    const cctpTokenMessengerMinterAddress = this.params.cctpParams.cctpTokenMessengerMinter;\n    if (domain == undefined || !cctpTransmitterProgramIdAddress || !cctpTokenMessengerMinterAddress) {\n      throw new SdkError(\"CCTP is not configured\");\n    }\n    const cctpTransmitterProgramId = new PublicKey(cctpTransmitterProgramIdAddress);\n    const cctpTokenMessengerMinter = new PublicKey(cctpTokenMessengerMinterAddress);\n    const {\n      messageTransmitterAccount,\n      tokenMessenger,\n      tokenMessengerEventAuthority,\n      tokenMinter,\n      localToken,\n      remoteTokenMessengerKey,\n      authorityPda,\n    } = getCctpAccounts(domain, mint, cctpTransmitterProgramId, cctpTokenMessengerMinter);\n\n    const instructions: TransactionInstruction[] = [];\n    if (extraGasInstruction) {\n      instructions.push(extraGasInstruction);\n    }\n\n    const messageSentEventDataKeypair = Keypair.generate();\n    const lockAccount = getCctpLockAccount(cctpBridge.programId, messageSentEventDataKeypair.publicKey);\n\n    const tx = await cctpBridge.methods\n      .bridge({\n        amount,\n        destinationChainId,\n        recipient,\n        receiveToken,\n      })\n      .accounts({\n        mint: mint,\n        user: userAccount,\n        cctpBridge: cctpBridgeAccount,\n\n        messageSentEventData: messageSentEventDataKeypair.publicKey,\n        lock: lockAccount,\n\n        cctpMessenger: cctpTokenMessengerMinter,\n        messageTransmitterProgram: cctpTransmitterProgramId,\n        messageTransmitterAccount: messageTransmitterAccount,\n        tokenMessenger: tokenMessenger,\n        tokenMinter: tokenMinter,\n        localToken: localToken,\n        remoteTokenMessengerKey: remoteTokenMessengerKey,\n        authorityPda: authorityPda,\n        eventAuthority: tokenMessengerEventAuthority,\n\n        bridgeToken: bridgeTokenAccount,\n        gasPrice: gasPrice,\n        thisGasPrice: thisGasPrice,\n        chainBridge: chainBridgeAccount,\n        userToken,\n        bridgeAuthority: bridgeAuthority,\n      })\n      .preInstructions([\n        web3.ComputeBudgetProgram.setComputeUnitLimit({\n          units: 2000000,\n        }),\n      ])\n      .postInstructions(instructions)\n      .transaction();\n    const connection = provider.connection;\n    tx.recentBlockhash = (await connection.getLatestBlockhash()).blockhash;\n    tx.feePayer = userAccount;\n    return { transaction: await this.convertToVersionedTransaction(tx, connection), messageSentEventDataKeypair };\n  }\n\n  send(params: SendParams): Promise<TransactionResponse> {\n    throw new MethodNotSupportedError();\n  }\n}\n\ninterface SolTxSendParams extends TxSendParamsSol {\n  poolAddress: string;\n}\n"]}