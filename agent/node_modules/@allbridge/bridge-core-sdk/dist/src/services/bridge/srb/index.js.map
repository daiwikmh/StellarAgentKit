{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/bridge/srb/index.ts"],"names":[],"mappings":";;;AAAA,sDAAyD;AACzD,mCAA6B;AAC7B,6DAA0D;AAE1D,oDAA8D;AAC9D,0CAAoE;AACpE,4CAAmD;AAGnD,sEAAkE;AAClE,sCAAyG;AACzG,oCAAoF;AAGpF,MAAa,gBAAiB,SAAQ,2BAAkB;IAI3C;IACA;IACA;IALX,SAAS,GAAkB,iBAAS,CAAC,GAAG,CAAC;IAEzC,YACW,iBAAoC,EACpC,MAA+B,EAC/B,GAAwB;QAEjC,KAAK,EAAE,CAAC;QAJC,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,WAAM,GAAN,MAAM,CAAyB;QAC/B,QAAG,GAAH,GAAG,CAAqB;IAGnC,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,MAAkB;QAC9C,MAAM,YAAY,GAAG,MAAM,IAAA,2BAAmB,EAAC,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QACjF,OAAO,MAAM,IAAI,CAAC,iCAAiC,CAAC,YAAY,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,iCAAiC,CAAC,MAAuB;QAC7D,MAAM,EACJ,MAAM,EACN,eAAe,EACf,kBAAkB,EAClB,gBAAgB,EAChB,SAAS,EACT,gBAAgB,EAChB,cAAc,EACd,GAAG,EACH,mBAAmB,EACnB,QAAQ,GACT,GAAG,MAAM,CAAC;QAEX,IAAI,QAAQ,GAAG,GAAG,CAAC;QACnB,IAAI,QAAQ,EAAE,CAAC;YACb,QAAQ,GAAG,IAAA,YAAG,EAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC;QACpD,CAAC;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,gCAAc,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC;QACvF,IAAI,EAAE,CAAC;QACP,IAAI,mBAAmB,KAAK,yBAAgB,CAAC,eAAe,EAAE,CAAC;YAC7D,EAAE,GAAG,MAAM,QAAQ,CAAC,eAAe,CAAC;gBAClC,MAAM,EAAE,kBAAkB;gBAC1B,KAAK,EAAE,qBAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,EAAE;gBACjE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;gBACtB,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBACxC,oBAAoB,EAAE,CAAC,SAAS;gBAChC,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;gBAC1C,KAAK,EAAE,IAAA,sBAAc,GAAE;gBACvB,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;gBACrB,gBAAgB,EAAE,MAAM,CAAC,QAAQ,CAAC;aACnC,CAAC,CAAC;QACL,CAAC;aAAM,CAAC;YACN,EAAE,GAAG,MAAM,QAAQ,CAAC,eAAe,CAAC;gBAClC,MAAM,EAAE,kBAAkB;gBAC1B,KAAK,EAAE,qBAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,EAAE;gBACjE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;gBACtB,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBACxC,oBAAoB,EAAE,CAAC,SAAS;gBAChC,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;gBAC1C,KAAK,EAAE,IAAA,sBAAc,GAAE;gBACvB,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC;gBAC5B,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC;aAC5B,CAAC,CAAC;QACL,CAAC;QACD,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,uBAAuB,CAAC,MAAkB;QAC9C,MAAM,YAAY,GAAG,IAAA,2BAAmB,EAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QACjE,OAAO,MAAM,IAAI,CAAC,iCAAiC,CAAC,YAAY,CAAC,CAAC;IACpE,CAAC;IAED,KAAK,CAAC,iCAAiC,CAAC,MAAuB;QAC7D,MAAM,EACJ,MAAM,EACN,eAAe,EACf,kBAAkB,EAClB,gBAAgB,EAChB,gBAAgB,EAChB,cAAc,EACd,oBAAoB,GACrB,GAAG,MAAM,CAAC;QACX,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,gCAAc,EAAE,eAAe,EAAE,kBAAkB,CAAC,CAAC;QACvF,OAAO,CACL,MAAM,QAAQ,CAAC,IAAI,CAAC;YAClB,MAAM,EAAE,kBAAkB;YAC1B,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC;YACtB,KAAK,EAAE,qBAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,QAAQ,EAAE;YACjE,aAAa,EAAE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;YAC1C,SAAS,EAAE,gBAAgB;YAC3B,kBAAkB,EAAE,MAAM,CAAC,oBAAoB,CAAC;SACjD,CAAC,CACH,CAAC,KAAK,EAAE,CAAC;IACZ,CAAC;IAED,6DAA6D;IAC7D,IAAI,CAAC,MAAkB;QACrB,MAAM,IAAI,oCAAuB,EAAE,CAAC;IACtC,CAAC;IAEO,WAAW,CAAI,QAAgD,EAAE,OAAe,EAAE,MAAe;QACvG,MAAM,MAAM,GAA0B;YACpC,SAAS,EAAE,MAAM;YACjB,UAAU,EAAE,OAAO;YACnB,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,wBAAwB;YACvD,MAAM,EAAE,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,yBAAW,CAAC,GAAG,CAAC;SAC9D,CAAC;QACF,OAAO,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;CACF;AA1GD,4CA0GC","sourcesContent":["import { Address, contract } from \"@stellar/stellar-sdk\";\nimport { Big } from \"big.js\";\nimport { ChainSymbol } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { MethodNotSupportedError } from \"../../../exceptions\";\nimport { AllbridgeCoreSdkOptions, ChainType } from \"../../../index\";\nimport { FeePaymentMethod } from \"../../../models\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { RawTransaction, TransactionResponse } from \"../../models\";\nimport { BridgeContract } from \"../../models/srb/bridge-contract\";\nimport { ChainBridgeService, SendParams, SwapParams, TxSendParamsSrb, TxSwapParamsSol } from \"../models\";\nimport { getNonceBigInt, prepareTxSendParams, prepareTxSwapParams } from \"../utils\";\nimport ContractClientOptions = contract.ClientOptions;\n\nexport class SrbBridgeService extends ChainBridgeService {\n  chainType: ChainType.SRB = ChainType.SRB;\n\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions,\n    readonly api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async buildRawTransactionSend(params: SendParams): Promise<RawTransaction> {\n    const txSendParams = await prepareTxSendParams(this.chainType, params, this.api);\n    return await this.buildRawTransactionSendFromParams(txSendParams);\n  }\n\n  async buildRawTransactionSendFromParams(params: TxSendParamsSrb): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toChainId,\n      toAccountAddress,\n      toTokenAddress,\n      fee,\n      gasFeePaymentMethod,\n      extraGas,\n    } = params;\n\n    let totalFee = fee;\n    if (extraGas) {\n      totalFee = Big(totalFee).plus(extraGas).toFixed();\n    }\n    const contract = this.getContract(BridgeContract, contractAddress, fromAccountAddress);\n    let tx;\n    if (gasFeePaymentMethod === FeePaymentMethod.WITH_STABLECOIN) {\n      tx = await contract.swap_and_bridge({\n        sender: fromAccountAddress,\n        token: Address.contract(Buffer.from(fromTokenAddress)).toString(),\n        amount: BigInt(amount),\n        recipient: Buffer.from(toAccountAddress),\n        destination_chain_id: +toChainId,\n        receive_token: Buffer.from(toTokenAddress),\n        nonce: getNonceBigInt(),\n        gas_amount: BigInt(0),\n        fee_token_amount: BigInt(totalFee),\n      });\n    } else {\n      tx = await contract.swap_and_bridge({\n        sender: fromAccountAddress,\n        token: Address.contract(Buffer.from(fromTokenAddress)).toString(),\n        amount: BigInt(amount),\n        recipient: Buffer.from(toAccountAddress),\n        destination_chain_id: +toChainId,\n        receive_token: Buffer.from(toTokenAddress),\n        nonce: getNonceBigInt(),\n        gas_amount: BigInt(totalFee),\n        fee_token_amount: BigInt(0),\n      });\n    }\n    return tx.toXDR();\n  }\n\n  async buildRawTransactionSwap(params: SwapParams): Promise<RawTransaction> {\n    const txSwapParams = prepareTxSwapParams(this.chainType, params);\n    return await this.buildRawTransactionSwapFromParams(txSwapParams);\n  }\n\n  async buildRawTransactionSwapFromParams(params: TxSwapParamsSol): Promise<RawTransaction> {\n    const {\n      amount,\n      contractAddress,\n      fromAccountAddress,\n      fromTokenAddress,\n      toAccountAddress,\n      toTokenAddress,\n      minimumReceiveAmount,\n    } = params;\n    const contract = this.getContract(BridgeContract, contractAddress, fromAccountAddress);\n    return (\n      await contract.swap({\n        sender: fromAccountAddress,\n        amount: BigInt(amount),\n        token: Address.contract(Buffer.from(fromTokenAddress)).toBuffer(),\n        receive_token: Buffer.from(toTokenAddress),\n        recipient: toAccountAddress,\n        receive_amount_min: BigInt(minimumReceiveAmount),\n      })\n    ).toXDR();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  send(params: SendParams): Promise<TransactionResponse> {\n    throw new MethodNotSupportedError();\n  }\n\n  private getContract<T>(contract: new (args: ContractClientOptions) => T, address: string, sender?: string): T {\n    const config: ContractClientOptions = {\n      publicKey: sender,\n      contractId: address,\n      networkPassphrase: this.params.sorobanNetworkPassphrase,\n      rpcUrl: this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB),\n    };\n    return new contract(config);\n  }\n}\n"]}