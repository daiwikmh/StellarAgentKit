{"version":3,"file":"compute-budget.js","sourceRoot":"","sources":["../../../../../src/services/utils/sol/compute-budget.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ComputeBudgetInstruction,\n  ComputeBudgetProgram,\n  Connection,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { Big } from \"big.js\";\nimport { TxTooLargeError } from \"../../../exceptions\";\nimport { toPowBase10 } from \"../../../utils/calculation\";\nimport { fetchAddressLookupTableAccountsFromTx } from \"../../../utils/sol/utils\";\nimport { SolanaAutoTxFee, TxFeeParams } from \"../../models\";\n\nexport async function addUnitLimitAndUnitPriceToTx(\n  transaction: Transaction,\n  txFeeParams: TxFeeParams | undefined,\n  solanaRpcUrl: string\n) {\n  const connection = new Connection(solanaRpcUrl, \"confirmed\");\n  /* eslint-disable-next-line @typescript-eslint/no-non-null-assertion */\n  const simUnitsConsumed = (await connection.simulateTransaction(transaction)).value.unitsConsumed!;\n  await addUnitLimitAndUnitPriceToInstructions(transaction.instructions, simUnitsConsumed, txFeeParams, connection);\n}\n\nexport async function addUnitLimitAndUnitPriceToVersionedTx(\n  transaction: VersionedTransaction,\n  txFeeParams: TxFeeParams | undefined,\n  solanaRpcUrl: string\n) {\n  const connection = new Connection(solanaRpcUrl, \"confirmed\");\n  const addressLookupTableAccounts = await fetchAddressLookupTableAccountsFromTx(transaction, connection);\n  const message = TransactionMessage.decompile(transaction.message, {\n    addressLookupTableAccounts: addressLookupTableAccounts,\n  });\n\n  if (transaction.serialize().length > 1232) {\n    throw new TxTooLargeError();\n  }\n\n  // const simUnitsConsumed = (await connection.simulateTransaction(transaction, { replaceRecentBlockhash: true })).value\n  //   .unitsConsumed!;\n  const simUnitsConsumed = 769230; // 1000000/1.3\n\n  await addUnitLimitAndUnitPriceToInstructions(message.instructions, simUnitsConsumed, txFeeParams, connection);\n\n  transaction.message = message.compileToV0Message(addressLookupTableAccounts);\n}\n\nasync function addUnitLimitAndUnitPriceToInstructions(\n  instructions: TransactionInstruction[],\n  simUnitsConsumed: number,\n  txFeeParams: TxFeeParams | undefined,\n  connection: Connection\n) {\n  if (simUnitsConsumed > 0) {\n    const units = updateUnitLimit(simUnitsConsumed, instructions);\n    if (txFeeParams?.solana) {\n      const solanaTxFee = txFeeParams.solana;\n      if (solanaTxFee === SolanaAutoTxFee) {\n        await updateUnitPrice(instructions, connection);\n      } else if (\"pricePerUnitInMicroLamports\" in solanaTxFee) {\n        await updateUnitPrice(instructions, connection, solanaTxFee.pricePerUnitInMicroLamports);\n      } else {\n        const pricePerUnitInMicroLamports = Big(solanaTxFee.extraFeeInLamports)\n          .div(units)\n          .mul(toPowBase10(6))\n          .toFixed(0);\n        await updateUnitPrice(instructions, connection, pricePerUnitInMicroLamports);\n      }\n    }\n  }\n}\n\nfunction updateUnitLimit(simUnitsConsumed: number, instructions: TransactionInstruction[]): string {\n  const computeUnitLimitIndex = instructions.findIndex(\n    (instruction) =>\n      instruction.programId.equals(ComputeBudgetProgram.programId) &&\n      ComputeBudgetInstruction.decodeInstructionType(instruction) === \"SetComputeUnitLimit\"\n  );\n  const units = Number((simUnitsConsumed * 1.3).toFixed(0));\n  const computeUnitLimitInstruction = ComputeBudgetProgram.setComputeUnitLimit({\n    units: units,\n  });\n  if (computeUnitLimitIndex >= 0) {\n    instructions[computeUnitLimitIndex] = computeUnitLimitInstruction;\n  } else {\n    instructions.push(computeUnitLimitInstruction);\n  }\n  return units.toString();\n}\n\nasync function updateUnitPrice(\n  instructions: TransactionInstruction[],\n  connection: Connection,\n  pricePerUnitInMicroLamports?: string\n): Promise<string> {\n  const computeUnitPriceIndex = instructions.findIndex(\n    (instruction) =>\n      instruction.programId.equals(ComputeBudgetProgram.programId) &&\n      ComputeBudgetInstruction.decodeInstructionType(instruction) === \"SetComputeUnitPrice\"\n  );\n  const unitPrice = pricePerUnitInMicroLamports\n    ? BigInt(pricePerUnitInMicroLamports)\n    : BigInt(await getAveragePrioritizationFee(connection));\n  const computeUnitPriceInstruction = ComputeBudgetProgram.setComputeUnitPrice({\n    microLamports: unitPrice,\n  });\n  if (computeUnitPriceIndex >= 0) {\n    instructions[computeUnitPriceIndex] = computeUnitPriceInstruction;\n  } else {\n    instructions.push(computeUnitPriceInstruction);\n  }\n  return unitPrice.toString();\n}\n\nasync function getAveragePrioritizationFee(connection: Connection) {\n  const prioritizationFees = await connection.getRecentPrioritizationFees();\n  let sum = 0;\n  for (const prioritizationFee of prioritizationFees) {\n    sum += prioritizationFee.prioritizationFee;\n  }\n  return (sum / prioritizationFees.length).toFixed(0);\n}\n"]}