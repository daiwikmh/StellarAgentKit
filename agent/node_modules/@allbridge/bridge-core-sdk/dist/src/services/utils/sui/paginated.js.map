{"version":3,"file":"paginated.js","sourceRoot":"","sources":["../../../../../src/services/utils/sui/paginated.ts"],"names":[],"mappings":";;AAMA,wDAaC;AAbM,KAAK,UAAU,sBAAsB,CAC1C,aAA0D,EAC1D,MAAsB,EACtB,kBAA0B,EAAE;IAE5B,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,CAAC;IAC3C,MAAM,kBAAkB,GAAG,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAE/D,IAAI,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,UAAU,EAAE,CAAC;QAC5C,OAAO,sBAAsB,CAAC,aAAa,EAAE,MAAM,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;IACtF,CAAC;SAAM,CAAC;QACN,OAAO,kBAAkB,CAAC;IAC5B,CAAC;AACH,CAAC","sourcesContent":["interface PaginatedResults<Data> {\n  data: Data[];\n  hasNextPage: boolean;\n  nextCursor?: string | null;\n}\n\nexport async function fetchAllPagesRecursive<Data, Result extends PaginatedResults<Data>>(\n  fetchFunction: (cursor?: string | null) => Promise<Result>,\n  cursor?: string | null,\n  accumulatedData: Data[] = []\n): Promise<Data[]> {\n  const result = await fetchFunction(cursor);\n  const newAccumulatedData = accumulatedData.concat(result.data);\n\n  if (result.hasNextPage && result.nextCursor) {\n    return fetchAllPagesRecursive(fetchFunction, result.nextCursor, newAccumulatedData);\n  } else {\n    return newAccumulatedData;\n  }\n}\n"]}