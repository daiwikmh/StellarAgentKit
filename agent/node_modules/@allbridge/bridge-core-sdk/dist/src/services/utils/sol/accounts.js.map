{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../../src/services/utils/sol/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport async function getAssociatedAccount(publicKey: PublicKey, mintAccount: PublicKey): Promise<PublicKey> {\n  return anchor.utils.token.associatedAddress({\n    mint: mintAccount,\n    owner: publicKey,\n  });\n}\n\nexport async function getConfigAccount(programId: PublicKey): Promise<PublicKey> {\n  const [configPda] = await PublicKey.findProgramAddress([anchor.utils.bytes.utf8.encode(\"config\")], programId);\n  return configPda;\n}\n\nexport async function getLockAccount(nonce: number[], bridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [lockPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"lock\"), Uint8Array.from(nonce)],\n    bridgeProgramId\n  );\n  return lockPda;\n}\n\nexport async function getPriceAccount(chainId: number, gasOracleProgramId: PublicKey): Promise<PublicKey> {\n  const [pricePda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"price_v2\"), Uint8Array.from([chainId])],\n    gasOracleProgramId\n  );\n  return pricePda;\n}\n\nexport async function getAuthorityAccount(bridgeProgramId: PublicKey): Promise<PublicKey> {\n  const configAccount = await getConfigAccount(bridgeProgramId);\n  const [poolAuthority] = await PublicKey.findProgramAddress([configAccount.toBuffer()], bridgeProgramId);\n  return poolAuthority;\n}\n\nexport async function getCctpAuthorityAccount(\n  cctpBridgeAccount: PublicKey,\n  cctpBridgeProgramId: PublicKey\n): Promise<PublicKey> {\n  const [poolAuthority] = await PublicKey.findProgramAddress([cctpBridgeAccount.toBuffer()], cctpBridgeProgramId);\n  return poolAuthority;\n}\n\nexport async function getBridgeTokenAccount(mintAccount: PublicKey, bridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [poolPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"token\"), mintAccount.toBytes()],\n    bridgeProgramId\n  );\n  return poolPda;\n}\n\nexport async function getOtherChainTokenAccount(\n  chainId: number,\n  token: Buffer,\n  bridgeProgramId: PublicKey\n): Promise<PublicKey> {\n  const [otherChainTokenPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"other_bridge_token\"), Buffer.from([chainId]), token],\n    bridgeProgramId\n  );\n  return otherChainTokenPda;\n}\n\nexport async function getChainBridgeAccount(chainId: number, bridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [chainBridgePda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"chain_bridge\"), Uint8Array.from([chainId])],\n    bridgeProgramId\n  );\n  return chainBridgePda;\n}\n\nexport async function getGasUsageAccount(chainId: number, messengerProgramId: PublicKey): Promise<PublicKey> {\n  const [chainBridgePda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"gas_usage\"), Uint8Array.from([chainId])],\n    messengerProgramId\n  );\n  return chainBridgePda;\n}\n\nexport async function getSendMessageAccount(\n  messageWithSigner: Uint8Array,\n  messengerProgramId: PublicKey\n): Promise<PublicKey> {\n  const [sentMessagePda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"sent_message\"), messageWithSigner],\n    messengerProgramId\n  );\n  return sentMessagePda;\n}\n\nexport async function getUserDepositAccount(\n  userPublicKey: PublicKey,\n  tokenMintAccount: PublicKey,\n  bridgeProgramId: PublicKey\n): Promise<PublicKey> {\n  const [userDepositPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"user_deposit\"), tokenMintAccount.toBytes(), userPublicKey.toBytes()],\n    bridgeProgramId\n  );\n  return userDepositPda;\n}\n\nexport async function getCctpBridgeAccount(mintAccount: PublicKey, cctpBridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [configPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"cctp_bridge\"), mintAccount.toBytes()],\n    cctpBridgeProgramId\n  );\n  return configPda;\n}\n\nexport async function getCctpBridgeTokenAccount(token: PublicKey, cctpBridgeProgramId: PublicKey): Promise<PublicKey> {\n  const [poolPda] = await PublicKey.findProgramAddress(\n    [anchor.utils.bytes.utf8.encode(\"token\"), token.toBytes()],\n    cctpBridgeProgramId\n  );\n  return poolPda;\n}\n\nexport function getCctpLockAccount(cctpBridgeProgramId: PublicKey, messageSentEventDataAccount: PublicKey): PublicKey {\n  const [tokenMessengerEventAuthority] = PublicKey.findProgramAddressSync(\n    [anchor.utils.bytes.utf8.encode(\"lock\"), messageSentEventDataAccount.toBuffer()],\n    cctpBridgeProgramId\n  );\n  return tokenMessengerEventAuthority;\n}\n\nexport function getCctpAccounts(\n  domain: number,\n  mintAccount: PublicKey,\n  cctpTransmitterProgramId: PublicKey,\n  cctpTokenMessengerMinter: PublicKey\n) {\n  const messageTransmitterAccount = findProgramAddress(\"message_transmitter\", cctpTransmitterProgramId);\n  const tokenMessenger = findProgramAddress(\"token_messenger\", cctpTokenMessengerMinter);\n  const tokenMessengerEventAuthority = findProgramAddress(\"__event_authority\", cctpTokenMessengerMinter);\n  const tokenMinter = findProgramAddress(\"token_minter\", cctpTokenMessengerMinter);\n  const localToken = findProgramAddress(\"local_token\", cctpTokenMessengerMinter, [mintAccount]);\n  const remoteTokenMessengerKey = findProgramAddress(\"remote_token_messenger\", cctpTokenMessengerMinter, [\n    domain.toString(),\n  ]);\n  const authorityPda = findProgramAddress(\"sender_authority\", cctpTokenMessengerMinter);\n  return {\n    messageTransmitterAccount,\n    tokenMessenger,\n    tokenMessengerEventAuthority,\n    tokenMinter,\n    localToken,\n    remoteTokenMessengerKey,\n    authorityPda,\n  };\n}\n\nfunction findProgramAddress(\n  label: string,\n  programId: PublicKey,\n  extraSeeds: (string | number[] | Buffer | PublicKey)[] = []\n): PublicKey {\n  const seeds = [Buffer.from(anchor.utils.bytes.utf8.encode(label))];\n  for (const extraSeed of extraSeeds) {\n    if (typeof extraSeed === \"string\") {\n      seeds.push(Buffer.from(anchor.utils.bytes.utf8.encode(extraSeed)));\n    } else if (Array.isArray(extraSeed)) {\n      seeds.push(Buffer.from(Uint8Array.from(extraSeed)));\n    } else if (Buffer.isBuffer(extraSeed)) {\n      seeds.push(Buffer.from(Uint8Array.from(extraSeed)));\n    } else {\n      seeds.push(Buffer.from(Uint8Array.from(extraSeed.toBuffer())));\n    }\n  }\n  const res = PublicKey.findProgramAddressSync(seeds, programId);\n  return res[0];\n}\n"]}