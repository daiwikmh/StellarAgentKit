{"version":3,"file":"coins.js","sourceRoot":"","sources":["../../../../../src/services/utils/sui/coins.ts"],"names":[],"mappings":";;AAGA,kDAwBC;AAxBD,SAAgB,mBAAmB,CAAC,OAAiB,EAAE,KAAmB,EAAE,EAAe;IACzF,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QACpC,OAAO,EAAE,CAAC;IACZ,CAAC;IACD,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3B,MAAM,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5F,IAAI,cAAc,GAAG,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC/C,MAAM,gBAAgB,GAAiB,EAAE,CAAC;IAE1C,KAAK,MAAM,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;QAClC,IAAI,cAAc,GAAG,cAAc,EAAE,CAAC;YACpC,OAAO,kBAAkB,CAAC,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;QACtE,CAAC;aAAM,CAAC;YACN,cAAc,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAED,IAAI,cAAc,IAAI,cAAc,EAAE,CAAC;QACrC,OAAO,kBAAkB,CAAC,EAAE,EAAE,SAAS,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAC;IACtE,CAAC;SAAM,CAAC;QACN,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AAED,SAAS,kBAAkB,CAAC,EAAe,EAAE,SAAqB,EAAE,gBAA8B,EAAE,OAAiB;IACnH,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QACzC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QAChC,EAAE,CAAC,UAAU,CACX,SAAS,CAAC,YAAY,EACtB,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAC5C,CAAC;QACF,OAAO,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;IAC5D,CAAC;IAED,OAAO,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;AAC5D,CAAC","sourcesContent":["import { CoinStruct } from \"@mysten/sui/client\";\nimport { Transaction } from \"@mysten/sui/transactions\";\n\nexport function getCoinsWithAmounts(amounts: string[], coins: CoinStruct[], tx: Transaction) {\n  if (coins.length === 0 || !coins[0]) {\n    return [];\n  }\n  const firstCoin = coins[0];\n  const requiredAmount = amounts.reduce((total, amount) => total + BigInt(amount), BigInt(0));\n\n  let currentBalance = BigInt(firstCoin.balance);\n  const accumulatedCoins: CoinStruct[] = [];\n\n  for (const coin of coins.slice(1)) {\n    if (currentBalance > requiredAmount) {\n      return splitAndMergeCoins(tx, firstCoin, accumulatedCoins, amounts);\n    } else {\n      currentBalance += BigInt(coin.balance);\n      accumulatedCoins.push(coin);\n    }\n  }\n\n  if (currentBalance >= requiredAmount) {\n    return splitAndMergeCoins(tx, firstCoin, accumulatedCoins, amounts);\n  } else {\n    return [];\n  }\n}\n\nfunction splitAndMergeCoins(tx: Transaction, firstCoin: CoinStruct, accumulatedCoins: CoinStruct[], amounts: string[]) {\n  const pureAmounts = amounts.map((amount) => {\n    return tx.pure.u64(amount);\n  });\n  if (accumulatedCoins.length > 0) {\n    tx.mergeCoins(\n      firstCoin.coinObjectId,\n      accumulatedCoins.map((c) => c.coinObjectId)\n    );\n    return tx.splitCoins(firstCoin.coinObjectId, pureAmounts);\n  }\n\n  return tx.splitCoins(firstCoin.coinObjectId, pureAmounts);\n}\n"]}