"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.depositAmountToVUsd = depositAmountToVUsd;
exports.vUsdToWithdrawalAmount = vUsdToWithdrawalAmount;
const big_js_1 = require("big.js");
const calculation_1 = require("../../../utils/calculation");
const constants_1 = require("../../../utils/calculation/constants");
function depositAmountToVUsd(amount, aValue, dValue, tokenBalance, vUsdBalance) {
    const amountSP = (0, calculation_1.convertFloatAmountToInt)(amount, constants_1.SYSTEM_PRECISION);
    const amountSPBig = (0, big_js_1.Big)(amountSP);
    const oldD = (0, big_js_1.Big)(dValue);
    const oldBalance = (0, big_js_1.Big)(tokenBalance).plus(vUsdBalance);
    let newTokenBalance;
    let newVUsdBalance;
    if (oldD.eq(0) || oldBalance.eq(0)) {
        const halfAmount = amountSPBig.div(2);
        newTokenBalance = (0, big_js_1.Big)(tokenBalance).plus(halfAmount);
        newVUsdBalance = (0, big_js_1.Big)(vUsdBalance).plus(halfAmount);
    }
    else {
        newTokenBalance = (0, big_js_1.Big)(tokenBalance).plus(amountSPBig.mul(tokenBalance).div(oldBalance));
        newVUsdBalance = (0, big_js_1.Big)(vUsdBalance).plus(amountSPBig.mul(vUsdBalance).div(oldBalance));
    }
    const newD = (0, big_js_1.Big)((0, calculation_1.getD)(aValue, newTokenBalance.toFixed(), newVUsdBalance.toFixed()));
    return newD.minus(oldD).toFixed();
}
function vUsdToWithdrawalAmount(lpAmount) {
    const lpAmountSP = (0, calculation_1.convertFloatAmountToInt)(lpAmount, constants_1.SYSTEM_PRECISION);
    return (0, big_js_1.Big)(lpAmountSP).round().toFixed();
}
//# sourceMappingURL=index.js.map