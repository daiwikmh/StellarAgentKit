import * as anchor from "@project-serum/anchor";
import { PublicKey } from "@solana/web3.js";
export declare function getAssociatedAccount(publicKey: PublicKey, mintAccount: PublicKey): Promise<PublicKey>;
export declare function getConfigAccount(programId: PublicKey): Promise<PublicKey>;
export declare function getLockAccount(nonce: number[], bridgeProgramId: PublicKey): Promise<PublicKey>;
export declare function getPriceAccount(chainId: number, gasOracleProgramId: PublicKey): Promise<PublicKey>;
export declare function getAuthorityAccount(bridgeProgramId: PublicKey): Promise<PublicKey>;
export declare function getCctpAuthorityAccount(cctpBridgeAccount: PublicKey, cctpBridgeProgramId: PublicKey): Promise<PublicKey>;
export declare function getBridgeTokenAccount(mintAccount: PublicKey, bridgeProgramId: PublicKey): Promise<PublicKey>;
export declare function getOtherChainTokenAccount(chainId: number, token: Buffer, bridgeProgramId: PublicKey): Promise<PublicKey>;
export declare function getChainBridgeAccount(chainId: number, bridgeProgramId: PublicKey): Promise<PublicKey>;
export declare function getGasUsageAccount(chainId: number, messengerProgramId: PublicKey): Promise<PublicKey>;
export declare function getSendMessageAccount(messageWithSigner: Uint8Array, messengerProgramId: PublicKey): Promise<PublicKey>;
export declare function getUserDepositAccount(userPublicKey: PublicKey, tokenMintAccount: PublicKey, bridgeProgramId: PublicKey): Promise<PublicKey>;
export declare function getCctpBridgeAccount(mintAccount: PublicKey, cctpBridgeProgramId: PublicKey): Promise<PublicKey>;
export declare function getCctpBridgeTokenAccount(token: PublicKey, cctpBridgeProgramId: PublicKey): Promise<PublicKey>;
export declare function getCctpLockAccount(cctpBridgeProgramId: PublicKey, messageSentEventDataAccount: PublicKey): PublicKey;
export declare function getCctpAccounts(domain: number, mintAccount: PublicKey, cctpTransmitterProgramId: PublicKey, cctpTokenMessengerMinter: PublicKey): {
    messageTransmitterAccount: anchor.web3.PublicKey;
    tokenMessenger: anchor.web3.PublicKey;
    tokenMessengerEventAuthority: anchor.web3.PublicKey;
    tokenMinter: anchor.web3.PublicKey;
    localToken: anchor.web3.PublicKey;
    remoteTokenMessengerKey: anchor.web3.PublicKey;
    authorityPda: anchor.web3.PublicKey;
};
