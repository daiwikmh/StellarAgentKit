{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/utils/trx/index.ts"],"names":[],"mappings":";;AAMA,gDAWC;AAED,4BAkBC;AAnCD,oDAAoE;AAEpE,oCAAiC;AAE1B,KAAK,UAAU,kBAAkB,CAAC,OAAgB,EAAE,cAA8B;IACvF,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAqB,CAAC,CAAC;IAE/D,IAAI,CAAE,QAA8B,CAAC,SAAS,EAAE,CAAC;QAC/C,MAAM,IAAI,2BAAc,CAAC,qCAAqC,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IAC/D,MAAM,eAAe,GAAG,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;IACjD,MAAM,QAAQ,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IACzC,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC;AACnC,CAAC;AAEM,KAAK,UAAU,QAAQ,CAAC,OAAgB,EAAE,IAAY,EAAE,OAAO,GAAG,KAAK;IAC5E,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAEzB,OAAO,IAAI,EAAE,CAAC;QACZ,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,OAAO,EAAE,CAAC;YACjC,MAAM,IAAI,0BAAa,CAAC,uBAAuB,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC;YACrB,MAAM,IAAA,aAAK,EAAC,IAAI,CAAC,CAAC;YAClB,SAAS;QACX,CAAC;QACD,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;YACxC,OAAO,MAAM,CAAC;QAChB,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,0BAAa,CAAC,yBAAyB,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QAC5E,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { TronWeb } from \"tronweb\";\nimport { SignedTransaction } from \"tronweb/src/types/Transaction\";\nimport { InvalidTxError, VerifyTxError } from \"../../../exceptions\";\nimport { RawTransaction } from \"../../models\";\nimport { sleep } from \"../index\";\n\nexport async function sendRawTransaction(tronWeb: TronWeb, rawTransaction: RawTransaction): Promise<{ txId: string }> {\n  const signedTx = await tronWeb.trx.sign(rawTransaction as any);\n\n  if (!(signedTx as SignedTransaction).signature) {\n    throw new InvalidTxError(\"Transaction was not signed properly\");\n  }\n\n  const receipt = await tronWeb.trx.sendRawTransaction(signedTx);\n  const transactionHash = receipt.transaction.txID;\n  await verifyTx(tronWeb, transactionHash);\n  return { txId: transactionHash };\n}\n\nexport async function verifyTx(tronWeb: TronWeb, txId: string, timeout = 10000): Promise<any> {\n  const start = Date.now();\n\n  while (true) {\n    if (Date.now() - start > timeout) {\n      throw new VerifyTxError(\"Transaction not found\");\n    }\n    const result = await tronWeb.trx.getUnconfirmedTransactionInfo(txId);\n    if (!result?.receipt) {\n      await sleep(2000);\n      continue;\n    }\n    if (result.receipt.result === \"SUCCESS\") {\n      return result;\n    } else {\n      throw new VerifyTxError(`Transaction status is ${result.receipt.result}`);\n    }\n  }\n}\n"]}