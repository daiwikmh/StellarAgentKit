{"version":3,"file":"view.js","sourceRoot":"","sources":["../../../../../src/services/utils/sui/view.ts"],"names":[],"mappings":";;AAMA,0BA0BC;AA9BD,iEAA2F;AAE3F,MAAM,UAAU,GAAG,oEAAoE,CAAC;AAEjF,KAAK,UAAU,OAAO,CAC3B,MAAiB,EACjB,EAAe,EACf,OAAwB;IAExB,MAAM,gBAAgB,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC;QAC/D,MAAM,EAAE,UAAU;QAClB,gBAAgB,EAAE,EAAE;KACrB,CAAC,CAAC;IACH,IAAI,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE,CAAC;QACzD,MAAM,IAAI,KAAK,CAAC,4BAA4B,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3F,CAAC;IAED,MAAM,WAAW,GAAG,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC;IAEzE,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC,+CAA+C,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9G,CAAC;IAED,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,WAAW,CAAC;IAElC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;QAChC,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW,EAAe,CAAC;IAC3E,CAAC;SAAM,CAAC;QACN,OAAO,IAAA,eAAK,EAAC,OAAO,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACrD,CAAC;AACH,CAAC","sourcesContent":["import { SuiClient } from \"@mysten/sui/client\";\nimport { Transaction } from \"@mysten/sui/transactions\";\nimport { Reified, toBcs, ToJSON, TypeArgument } from \"../../models/sui/_framework/reified\";\n\nconst mockSender = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\nexport async function suiView<T extends TypeArgument>(\n  client: SuiClient,\n  tx: Transaction,\n  reified: Reified<T, any>\n): Promise<ToJSON<T>> {\n  const inspectionResult = await client.devInspectTransactionBlock({\n    sender: mockSender,\n    transactionBlock: tx,\n  });\n  if (inspectionResult.effects.status.status !== \"success\") {\n    throw new Error(`inspectionResult failed. ${JSON.stringify(inspectionResult, null, 2)}`);\n  }\n\n  const returnValue = inspectionResult.results?.pop()?.returnValues?.pop();\n\n  if (!returnValue) {\n    throw new Error(`Something with inspectionResult went wrong. ${JSON.stringify(inspectionResult, null, 2)}`);\n  }\n\n  const [data, _type] = returnValue;\n\n  if (typeof reified === \"object\") {\n    return reified.fromBcs(Uint8Array.from(data)).toJSONField() as ToJSON<T>;\n  } else {\n    return toBcs(reified).parse(Uint8Array.from(data));\n  }\n}\n"]}