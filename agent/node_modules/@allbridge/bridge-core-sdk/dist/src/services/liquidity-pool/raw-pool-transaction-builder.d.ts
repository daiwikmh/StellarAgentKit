import { NodeRpcUrlsConfig } from "..";
import { AllbridgeCoreClient } from "../../client/core-api/core-client-base";
import { AllbridgeCoreSdkOptions } from "../../index";
import { Provider, RawTransaction } from "../models";
import { TokenService } from "../token";
import { ApproveParams, LiquidityPoolsParams, LiquidityPoolsParamsWithAmount } from "./models";
export interface RawPoolTransactionBuilder {
    /**
     * Creates a Raw Transaction for approving tokens usage by the bridge
     * @param provider - will be used to access the network
     * @param approveData
     */
    approve(provider: Provider, approveData: ApproveParams): Promise<RawTransaction>;
    /**
     * Creates a Raw Transaction for approving tokens usage by the bridge
     * @param approveData
     */
    approve(approveData: ApproveParams): Promise<RawTransaction>;
    /**
     * Creates a Raw Transaction for depositing tokens to Liquidity pools
     * @param params
     * @param provider - will be used to access the network
     */
    deposit(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction>;
    /**
     * Creates a Raw Transaction for withdrawing tokens from Liquidity pools
     * @param params
     * @param provider - will be used to access the network
     */
    withdraw(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction>;
    /**
     * Creates a Raw Transaction for claiming rewards from Liquidity pools
     * @param params
     * @param provider - will be used to access the network
     */
    claimRewards(params: LiquidityPoolsParams, provider?: Provider): Promise<RawTransaction>;
}
export declare class DefaultRawPoolTransactionBuilder implements RawPoolTransactionBuilder {
    private api;
    private nodeRpcUrlsConfig;
    private params;
    private tokenService;
    constructor(api: AllbridgeCoreClient, nodeRpcUrlsConfig: NodeRpcUrlsConfig, params: AllbridgeCoreSdkOptions, tokenService: TokenService);
    approve(a: Provider | ApproveParams, b?: ApproveParams): Promise<RawTransaction>;
    deposit(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction>;
    withdraw(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction>;
    claimRewards(params: LiquidityPoolsParams, provider?: Provider): Promise<RawTransaction>;
}
