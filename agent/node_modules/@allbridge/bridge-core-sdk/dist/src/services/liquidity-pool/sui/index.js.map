{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/liquidity-pool/sui/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { SuiClient } from \"@mysten/sui/client\";\nimport { CoinStruct, SuiObjectResponse } from \"@mysten/sui/src/client/types/generated\";\nimport { Transaction, TransactionResult } from \"@mysten/sui/transactions\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { InvalidAmountError, SdkError } from \"../../../exceptions\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../../tokens-info\";\nimport { calculatePoolInfoImbalance } from \"../../../utils/calculation\";\nimport { RawSuiTransaction } from \"../../models\";\nimport { phantom } from \"../../models/sui/_framework/reified\";\nimport { setAddress } from \"../../models/sui/bridge\";\nimport {\n  claimReward,\n  deposit,\n  newUserDeposit,\n  pool,\n  withdraw,\n} from \"../../models/sui/bridge/bridge-interface/functions\";\nimport { Pool } from \"../../models/sui/bridge/pool/structs\";\nimport { UserDeposit } from \"../../models/sui/bridge/user-deposit/structs\";\nimport { getCoinsWithAmounts } from \"../../utils/sui/coins\";\nimport { fetchAllPagesRecursive } from \"../../utils/sui/paginated\";\nimport { suiView } from \"../../utils/sui/view\";\nimport {\n  ChainPoolService,\n  LiquidityPoolsParams,\n  LiquidityPoolsParamsWithAmount,\n  UserBalance,\n  UserBalanceInfo,\n} from \"../models\";\n\nexport class SuiPoolService extends ChainPoolService {\n  chainType: ChainType.SUI = ChainType.SUI;\n\n  private readonly client: SuiClient;\n\n  constructor(\n    public suiRpcUrl: string,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n    this.client = new SuiClient({\n      url: suiRpcUrl,\n    });\n  }\n\n  async getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo> {\n    if (!token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const suiAddresses = token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    const deposits = await this.fetchDeposits(accountAddress, token.originTokenAddress);\n    const total = deposits.reduce(\n      (total, element) => {\n        if (element.data) {\n          total.lpAmount += BigInt((element.data.content as any).fields.lp_amount);\n          total.rewardDebt += BigInt((element.data.content as any).fields.reward_debt);\n          return total;\n        } else {\n          throw new SdkError(\"Deposits fetch failed\");\n        }\n      },\n      { lpAmount: BigInt(0), rewardDebt: BigInt(0) }\n    );\n    return new UserBalance({ lpAmount: total.lpAmount.toString(), rewardDebt: total.rewardDebt.toString() });\n  }\n\n  private async fetchDeposits(accountAddress: string, tokenAddress: string): Promise<SuiObjectResponse[]> {\n    return await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getOwnedObjects({\n        owner: accountAddress,\n        filter: { StructType: UserDeposit.phantom(phantom(tokenAddress)).phantomType },\n        options: { showContent: true },\n        cursor,\n      })\n    );\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo> {\n    const suiAddresses = token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    if (!token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n\n    const P = 48;\n    const tx = new Transaction();\n    pool(tx, token.originTokenAddress, suiAddresses.bridgeObjectAddress);\n    const res = await suiView(this.client, tx, Pool.reified(phantom(token.originTokenAddress)));\n\n    const tokenBalance = res.state.tokenBalance;\n    const vUsdBalance = res.state.vusdBalance;\n    const imbalance = calculatePoolInfoImbalance({ tokenBalance, vUsdBalance });\n\n    return {\n      dValue: res.state.d,\n      aValue: res.state.a,\n      totalLpAmount: res.rewards.lpSupply,\n      vUsdBalance: vUsdBalance,\n      tokenBalance: tokenBalance,\n      accRewardPerShareP: res.rewards.accRewardPerShareP,\n      p: P,\n      imbalance,\n    };\n  }\n\n  async buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawSuiTransaction> {\n    const suiAddresses = params.token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const coins: CoinStruct[] = await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getCoins({\n        owner: params.accountAddress,\n        coinType: params.token.originTokenAddress,\n        cursor,\n      })\n    );\n    if (coins.length === 0 || !coins[0]) {\n      throw new InvalidAmountError(\"No coins to deposit\");\n    }\n    const firstCoin = coins[0];\n\n    const tx = new Transaction();\n    tx.setSender(params.accountAddress);\n    const { depositObj, isNewDeposit } = await this.getDepositObject(\n      params.accountAddress,\n      params.token.originTokenAddress,\n      tx\n    );\n    const [amountCoin] = getCoinsWithAmounts([params.amount], coins, tx);\n    if (!amountCoin) {\n      throw new InvalidAmountError(\"No coins to deposit\");\n    }\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const rewards = deposit(tx, params.token.originTokenAddress, {\n      bridge: suiAddresses.bridgeObjectAddress,\n      userDeposit: depositObj,\n      coin: amountCoin,\n    });\n    tx.mergeCoins(firstCoin.coinObjectId, [rewards]);\n    if (isNewDeposit) {\n      tx.transferObjects([depositObj], params.accountAddress);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  private async getDepositObject(\n    accountAddress: string,\n    tokenAddress: string,\n    tx: Transaction\n  ): Promise<{\n    depositObj: string | TransactionResult;\n    isNewDeposit: boolean;\n  }> {\n    const deposits = await this.fetchDeposits(accountAddress, tokenAddress);\n    if (deposits.length === 0 || !deposits[0]) {\n      const tokenType = phantom(tokenAddress).phantomType;\n      const depositObj = newUserDeposit(tx, tokenType);\n      return { depositObj, isNewDeposit: true };\n    } else {\n      if (deposits[0].data?.objectId) {\n        return { depositObj: deposits[0].data.objectId, isNewDeposit: false };\n      } else {\n        throw new SdkError(\"Something went wrong while deposit\");\n      }\n    }\n  }\n\n  async buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawSuiTransaction> {\n    const suiAddresses = params.token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const tokenType = phantom(params.token.originTokenAddress).phantomType;\n\n    const tx = new Transaction();\n    tx.setSender(params.accountAddress);\n\n    const { depositObj, isNewDeposit } = await this.getDepositObject(\n      params.accountAddress,\n      params.token.originTokenAddress,\n      tx\n    );\n    if (isNewDeposit) {\n      throw new InvalidAmountError(\"No deposit found\");\n    }\n\n    const rewards = withdraw(tx, tokenType, {\n      bridge: suiAddresses.bridgeObjectAddress,\n      userDeposit: depositObj,\n      amountLp: BigInt(params.amount),\n    });\n\n    const coins: CoinStruct[] = await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getCoins({\n        owner: params.accountAddress,\n        coinType: params.token.originTokenAddress,\n        cursor,\n      })\n    );\n\n    if (!rewards[0] || !rewards[1]) {\n      throw new SdkError(\"No rewards found\");\n    }\n\n    if (coins[0]) {\n      tx.mergeCoins(coins[0].coinObjectId, [rewards[0], rewards[1]]);\n    } else {\n      tx.mergeCoins(rewards[0], [rewards[1]]);\n      tx.transferObjects([rewards[0]], params.accountAddress);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n\n  async buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawSuiTransaction> {\n    const suiAddresses = params.token.suiAddresses;\n    if (!suiAddresses) {\n      throw new SdkError(\"SUI token must contain 'suiAddresses'\");\n    }\n    setAddress(suiAddresses.bridgeAddress, suiAddresses.bridgeAddressOrigin);\n\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"SUI token must contain 'originTokenAddress'\");\n    }\n    const tokenType = phantom(params.token.originTokenAddress).phantomType;\n\n    const tx = new Transaction();\n    tx.setSender(params.accountAddress);\n\n    const { depositObj, isNewDeposit } = await this.getDepositObject(\n      params.accountAddress,\n      params.token.originTokenAddress,\n      tx\n    );\n    if (isNewDeposit) {\n      throw new InvalidAmountError(\"No deposit found\");\n    }\n\n    const reward = claimReward(tx, tokenType, {\n      bridge: suiAddresses.bridgeObjectAddress,\n      userDeposit: depositObj,\n    });\n\n    const coins: CoinStruct[] = await fetchAllPagesRecursive((cursor: string | null | undefined) =>\n      this.client.getCoins({\n        owner: params.accountAddress,\n        coinType: params.token.originTokenAddress,\n        cursor,\n      })\n    );\n\n    if (coins[0]) {\n      tx.mergeCoins(coins[0].coinObjectId, [reward]);\n    } else {\n      tx.transferObjects([reward], params.accountAddress);\n    }\n    return await tx.toJSON({ client: this.client });\n  }\n}\n"]}