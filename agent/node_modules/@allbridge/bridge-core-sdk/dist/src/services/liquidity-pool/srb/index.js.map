{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/liquidity-pool/srb/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { contract } from \"@stellar/stellar-sdk\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { AllbridgeCoreSdkOptions, ChainSymbol, ChainType } from \"../../../index\";\nimport {\n  LiquidityPoolsParams,\n  LiquidityPoolsParamsWithAmount,\n  PoolInfo,\n  SdkError,\n  TokenWithChainDetails,\n  UserBalanceInfo,\n} from \"../../../models\";\nimport { calculatePoolInfoImbalance } from \"../../../utils/calculation\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { RawTransaction } from \"../../models\";\nimport { PoolContract } from \"../../models/srb/pool-contract\";\nimport { getViewResultSoroban, isErrorSorobanResult } from \"../../models/srb/utils\";\nimport { ChainPoolService, UserBalance } from \"../models\";\nimport ContractClientOptions = contract.ClientOptions;\n\nexport class SrbPoolService extends ChainPoolService {\n  chainType: ChainType.SRB = ChainType.SRB;\n  private P = 48;\n\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions,\n    readonly api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo> {\n    const poolContract = this.getContract(token.poolAddress);\n    const result = await poolContract.get_user_deposit({ user: accountAddress });\n    if (isErrorSorobanResult(result)) {\n      throw new SdkError();\n    }\n    const viewResultSoroban = getViewResultSoroban(result);\n    if (!viewResultSoroban) {\n      throw new SdkError();\n    }\n\n    const userDeposit = viewResultSoroban.unwrap();\n    return new UserBalance({\n      lpAmount: userDeposit.lp_amount.toString(),\n      rewardDebt: userDeposit.reward_debt.toString(),\n    });\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo> {\n    const poolContract = this.getContract(token.poolAddress);\n    const result = await poolContract.get_pool();\n    if (isErrorSorobanResult(result)) {\n      throw new SdkError();\n    }\n    const viewResultSoroban = getViewResultSoroban(result);\n    if (!viewResultSoroban) {\n      throw new SdkError();\n    }\n\n    const pool = viewResultSoroban.unwrap();\n    return {\n      aValue: pool.a.toString(),\n      accRewardPerShareP: pool.acc_reward_per_share_p.toString(),\n      dValue: pool.d.toString(),\n      tokenBalance: pool.token_balance.toString(),\n      p: this.P,\n      totalLpAmount: pool.total_lp_amount.toString(),\n      vUsdBalance: pool.v_usd_balance.toString(),\n      imbalance: calculatePoolInfoImbalance({\n        tokenBalance: pool.token_balance.toString(),\n        vUsdBalance: pool.v_usd_balance.toString(),\n      }),\n    };\n  }\n\n  async buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const poolContract = this.getContract(params.token.poolAddress, params.accountAddress);\n    return (\n      await poolContract.deposit({\n        sender: params.accountAddress,\n        amount: BigInt(params.amount),\n      })\n    ).toXDR();\n  }\n\n  async buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const poolContract = this.getContract(params.token.poolAddress, params.accountAddress);\n    return (\n      await poolContract.withdraw({\n        sender: params.accountAddress,\n        amount_lp: BigInt(params.amount),\n      })\n    ).toXDR();\n  }\n\n  async buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawTransaction> {\n    const poolContract = this.getContract(params.token.poolAddress, params.accountAddress);\n    return (\n      await poolContract.claim_rewards({\n        sender: params.accountAddress,\n      })\n    ).toXDR();\n  }\n\n  private getContract(address: string, sender?: string): PoolContract {\n    const config: ContractClientOptions = {\n      publicKey: sender,\n      contractId: address,\n      networkPassphrase: this.params.sorobanNetworkPassphrase,\n      rpcUrl: this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB),\n    };\n    return new PoolContract(config);\n  }\n}\n"]}