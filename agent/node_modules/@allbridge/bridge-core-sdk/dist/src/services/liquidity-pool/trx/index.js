"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TronPoolService = void 0;
const web3_1 = require("web3");
const chain_enums_1 = require("../../../chains/chain.enums");
const exceptions_1 = require("../../../exceptions");
const calculation_1 = require("../../../utils/calculation");
const utils_1 = require("../../bridge/utils");
const Pool_1 = __importDefault(require("../../models/abi/Pool"));
const models_1 = require("../models");
class TronPoolService extends models_1.ChainPoolService {
    tronWeb;
    api;
    chainType = chain_enums_1.ChainType.TRX;
    P = 52;
    web3;
    constructor(tronWeb, api, tronJsonRpc) {
        super();
        this.tronWeb = tronWeb;
        this.api = api;
        if (tronJsonRpc) {
            this.web3 = new web3_1.Web3(tronJsonRpc);
        }
    }
    async getUserBalanceInfo(accountAddress, token) {
        let userBalanceInfo;
        if (this.web3) {
            try {
                userBalanceInfo = await this.getUserBalanceInfoByBatch(this.web3, accountAddress, token);
            }
            catch (ignoreError) {
                userBalanceInfo = await this.getUserBalanceInfoPerProperty(accountAddress, token);
            }
        }
        else {
            userBalanceInfo = await this.getUserBalanceInfoPerProperty(accountAddress, token);
        }
        return userBalanceInfo;
    }
    async getUserBalanceInfoByBatch(web3, accountAddress, token) {
        const batch = new web3.BatchRequest();
        const contract = new web3.eth.Contract(Pool_1.default.abi, (0, utils_1.tronAddressToEthAddress)(token.poolAddress));
        const userRewardDebtAbi = contract.methods.userRewardDebt(accountAddress).encodeABI();
        const balanceOfAbi = contract.methods.balanceOf(accountAddress).encodeABI();
        batch.add({
            method: "eth_call",
            params: [{ to: token.poolAddress, data: userRewardDebtAbi }, "latest"],
        });
        batch.add({
            method: "eth_call",
            params: [{ to: token.poolAddress, data: balanceOfAbi }, "latest"],
        });
        const [rewardDebtResult, lpAmountResult] = await batch.execute();
        if (rewardDebtResult && lpAmountResult && !rewardDebtResult.error && !lpAmountResult.error) {
            return new models_1.UserBalance({
                lpAmount: web3_1.Web3.utils.toBigInt(lpAmountResult.result).toString(),
                rewardDebt: web3_1.Web3.utils.toBigInt(rewardDebtResult.result).toString(),
            });
        }
        throw new Error("Batched failed");
    }
    async getUserBalanceInfoPerProperty(accountAddress, token) {
        if (!this.tronWeb.defaultAddress.base58) {
            this.tronWeb.setAddress(accountAddress);
        }
        const contract = this.getContract(token.poolAddress);
        const rewardDebt = (await contract.methods.userRewardDebt(accountAddress).call()).toString();
        const lpAmount = (await contract.methods.balanceOf(accountAddress).call()).toString();
        return new models_1.UserBalance({ lpAmount, rewardDebt });
    }
    async getPoolInfoFromChain(token) {
        let poolInfo;
        if (this.web3) {
            try {
                poolInfo = await this.getPoolInfoByBatch(this.web3, token);
            }
            catch (ignoreError) {
                poolInfo = await this.getPoolInfoPerProperty(token);
            }
        }
        else {
            poolInfo = await this.getPoolInfoPerProperty(token);
        }
        return poolInfo;
    }
    async getPoolInfoByBatch(web3, token) {
        const batch = new web3.BatchRequest();
        const contract = new web3.eth.Contract(Pool_1.default.abi, (0, utils_1.tronAddressToEthAddress)(token.poolAddress), this.web3);
        const aAbi = contract.methods.a().encodeABI();
        const dAbi = contract.methods.d().encodeABI();
        const tokenBalanceAbi = contract.methods.tokenBalance().encodeABI();
        const vUsdBalanceAbi = contract.methods.vUsdBalance().encodeABI();
        const totalSupplyAbi = contract.methods.totalSupply().encodeABI();
        const accRewardPerSharePAbi = contract.methods.accRewardPerShareP().encodeABI();
        batch.add({
            method: "eth_call",
            params: [{ to: token.poolAddress, data: aAbi }, "latest"],
        });
        batch.add({
            method: "eth_call",
            params: [{ to: token.poolAddress, data: dAbi }, "latest"],
        });
        batch.add({
            method: "eth_call",
            params: [{ to: token.poolAddress, data: tokenBalanceAbi }, "latest"],
        });
        batch.add({
            method: "eth_call",
            params: [{ to: token.poolAddress, data: vUsdBalanceAbi }, "latest"],
        });
        batch.add({
            method: "eth_call",
            params: [{ to: token.poolAddress, data: totalSupplyAbi }, "latest"],
        });
        batch.add({
            method: "eth_call",
            params: [{ to: token.poolAddress, data: accRewardPerSharePAbi }, "latest"],
        });
        const [aResult, dResult, tokenBalanceResult, vUsdBalanceResult, totalSupplyResult, accRewardPerSharePResult] = await batch.execute();
        if (aResult &&
            dResult &&
            tokenBalanceResult &&
            vUsdBalanceResult &&
            totalSupplyResult &&
            accRewardPerSharePResult &&
            !aResult.error &&
            !dResult.error &&
            !tokenBalanceResult.error &&
            !vUsdBalanceResult.error &&
            !totalSupplyResult.error &&
            !accRewardPerSharePResult.error) {
            const tokenBalanceStr = web3_1.Web3.utils.toBigInt(tokenBalanceResult.result).toString();
            const vUsdBalanceStr = web3_1.Web3.utils.toBigInt(vUsdBalanceResult.result).toString();
            const imbalance = (0, calculation_1.calculatePoolInfoImbalance)({ tokenBalance: tokenBalanceStr, vUsdBalance: vUsdBalanceStr });
            return {
                aValue: web3_1.Web3.utils.toBigInt(aResult.result).toString(),
                dValue: web3_1.Web3.utils.toBigInt(dResult.result).toString(),
                tokenBalance: tokenBalanceStr,
                vUsdBalance: vUsdBalanceStr,
                totalLpAmount: web3_1.Web3.utils.toBigInt(totalSupplyResult.result).toString(),
                accRewardPerShareP: web3_1.Web3.utils.toBigInt(accRewardPerSharePResult.result).toString(),
                p: this.P,
                imbalance,
            };
        }
        throw new Error("Batched failed");
    }
    async getPoolInfoPerProperty(token) {
        if (!this.tronWeb.defaultAddress.base58) {
            this.tronWeb.setAddress(token.poolAddress);
        }
        const poolContract = this.getContract(token.poolAddress);
        const [aValue, dValue, tokenBalance, vUsdBalance, totalLpAmount, accRewardPerShareP] = await Promise.all([
            poolContract.methods.a().call(),
            poolContract.methods.d().call(),
            poolContract.methods.tokenBalance().call(),
            poolContract.methods.vUsdBalance().call(),
            poolContract.methods.totalSupply().call(),
            poolContract.methods.accRewardPerShareP().call(),
        ]);
        const tokenBalanceStr = tokenBalance.toString();
        const vUsdBalanceStr = vUsdBalance.toString();
        const imbalance = (0, calculation_1.calculatePoolInfoImbalance)({ tokenBalance: tokenBalanceStr, vUsdBalance: vUsdBalanceStr });
        return {
            aValue: aValue.toString(),
            dValue: dValue.toString(),
            tokenBalance: tokenBalanceStr,
            vUsdBalance: vUsdBalanceStr,
            totalLpAmount: totalLpAmount.toString(),
            accRewardPerShareP: accRewardPerShareP.toString(),
            p: this.P,
            imbalance,
        };
    }
    buildRawTransactionDeposit(params) {
        const { amount, accountAddress } = params;
        const parameter = [{ type: "uint256", value: amount }];
        const methodSignature = "deposit(uint256)";
        return this.buildRawTransaction(params.token.poolAddress, methodSignature, parameter, "0", accountAddress);
    }
    buildRawTransactionWithdraw(params) {
        const { amount, accountAddress } = params;
        const parameter = [{ type: "uint256", value: amount }];
        const methodSignature = "withdraw(uint256)";
        return this.buildRawTransaction(params.token.poolAddress, methodSignature, parameter, "0", accountAddress);
    }
    buildRawTransactionClaimRewards(params) {
        const { accountAddress } = params;
        const parameter = [];
        const methodSignature = "claimRewards()";
        return this.buildRawTransaction(params.token.poolAddress, methodSignature, parameter, "0", accountAddress);
    }
    async buildRawTransaction(contractAddress, methodSignature, parameter, value, fromAddress) {
        const transactionObject = await this.tronWeb.transactionBuilder.triggerSmartContract(contractAddress, methodSignature, {
            callValue: +value,
        }, parameter, fromAddress);
        if (!transactionObject?.result?.result) {
            throw new exceptions_1.SdkError("Unknown error: " + JSON.stringify(transactionObject, null, 2));
        }
        return transactionObject.transaction;
    }
    getContract(contractAddress) {
        return this.tronWeb.contract(Pool_1.default.abi, contractAddress);
    }
}
exports.TronPoolService = TronPoolService;
//# sourceMappingURL=index.js.map