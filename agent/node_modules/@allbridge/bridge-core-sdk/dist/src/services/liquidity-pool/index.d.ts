import { NodeRpcUrlsConfig } from "..";
import { AllbridgeCoreClient } from "../../client/core-api/core-client-base";
import { AllbridgeCoreClientFiltered } from "../../client/core-api/core-client-filtered";
import { AllbridgeCoreSdkOptions } from "../../index";
import { PoolInfo, TokenWithChainDetails } from "../../tokens-info";
import { Provider, TransactionResponse } from "../models";
import { TokenService } from "../token";
import { ApproveParams, ChainPoolService, CheckAllowanceParams, GetAllowanceParams, UserBalanceInfo } from "./models";
import { RawPoolTransactionBuilder } from "./raw-pool-transaction-builder";
export interface LiquidityPoolService {
    rawTxBuilder: RawPoolTransactionBuilder;
    /**
     * Get amount of tokens approved for poolInfo
     * @param provider - will be used to access the network
     * @param params See {@link GetAllowanceParams}
     * @returns the amount of approved tokens
     */
    getAllowance(provider: Provider, params: GetAllowanceParams): Promise<string>;
    /**
     * Get amount of tokens approved for poolInfo
     * @param params See {@link GetAllowanceParams}
     * @returns the amount of approved tokens
     */
    getAllowance(params: GetAllowanceParams): Promise<string>;
    /**
     * Check if the amount of approved tokens is enough
     * @param provider - will be used to access the network
     * @param params See {@link CheckAllowanceParams}
     * @returns true if the amount of approved tokens is enough to make a transfer
     */
    checkAllowance(provider: Provider, params: CheckAllowanceParams): Promise<boolean>;
    /**
     * Check if the amount of approved tokens is enough
     * @param params See {@link CheckAllowanceParams}
     * @returns true if the amount of approved tokens is enough to make a transfer
     */
    checkAllowance(params: CheckAllowanceParams): Promise<boolean>;
    /**
     * @deprecated Use {@link rawTxBuilder}.{@link RawPoolTransactionBuilder.approve}<p>
     * Approve tokens usage by another address on chains
     * <p>
     * For ETH/USDT: due to specificity of the USDT contract:<br/>
     * If the current allowance is not 0, this function will perform an additional transaction to set allowance to 0 before setting the new allowance value.
     * @param provider - will be used to access the network
     * @param approveData
     */
    approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;
    /**
     * Calculates the amount of LP tokens that will be deposited
     * @param amount The float amount of tokens that will be sent
     * @param token
     * @param provider - will be used to access the network
     * @returns amount
     */
    getAmountToBeDeposited(amount: string, token: TokenWithChainDetails, provider?: Provider): Promise<string>;
    /**
     * Calculates the amount of tokens will be withdrawn
     * @param amount The float amount of tokens that will be sent
     * @param accountAddress
     * @param token
     * @param provider - will be used to access the network
     * @returns amount
     */
    getAmountToBeWithdrawn(amount: string, accountAddress: string, token: TokenWithChainDetails, provider?: Provider): Promise<string>;
    /**
     * Get User Balance Info on Liquidity poolInfo
     * @param accountAddress
     * @param token
     * @param provider
     * @returns UserBalanceInfo
     */
    getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails, provider?: Provider): Promise<UserBalanceInfo>;
    /**
     * Gets information about the poolInfo from chain
     * @param token
     * @param provider - will be used to access the network
     * @returns poolInfo
     */
    getPoolInfoFromChain(token: TokenWithChainDetails, provider?: Provider): Promise<Required<PoolInfo>>;
}
export declare class DefaultLiquidityPoolService implements LiquidityPoolService {
    private api;
    private nodeRpcUrlsConfig;
    private params;
    private tokenService;
    rawTxBuilder: RawPoolTransactionBuilder;
    private cache;
    constructor(api: AllbridgeCoreClientFiltered, nodeRpcUrlsConfig: NodeRpcUrlsConfig, params: AllbridgeCoreSdkOptions, tokenService: TokenService);
    getAllowance(a: Provider | GetAllowanceParams, b?: GetAllowanceParams): Promise<string>;
    checkAllowance(a: Provider | CheckAllowanceParams, b?: CheckAllowanceParams): Promise<boolean>;
    approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;
    getAmountToBeDeposited(amount: string, token: TokenWithChainDetails, provider?: Provider): Promise<string>;
    getAmountToBeWithdrawn(amount: string, accountAddress: string, token: TokenWithChainDetails, provider?: Provider): Promise<string>;
    getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails, provider?: Provider): Promise<UserBalanceInfo>;
    getPoolInfoFromChain(token: TokenWithChainDetails, provider?: Provider): Promise<PoolInfo>;
}
export declare function getChainPoolService(chainSymbol: string, api: AllbridgeCoreClient, nodeRpcUrlsConfig: NodeRpcUrlsConfig, params: AllbridgeCoreSdkOptions, provider?: Provider): ChainPoolService;
