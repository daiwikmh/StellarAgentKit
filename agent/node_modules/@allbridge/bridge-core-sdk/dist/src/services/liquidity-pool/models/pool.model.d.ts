import { Big } from "big.js";
import { FeePaymentMethod, TxFeeParams } from "../../../models";
import { PoolInfo, TokenWithChainDetails } from "../../../tokens-info";
export interface ApproveParams {
    /**
     * The token info
     */
    token: TokenWithChainDetails;
    /**
     *  The address of the token owner who is granting permission to use tokens
     */
    owner: string;
    /**
     * The integer amount of tokens to approve.
     * Optional.
     * The maximum amount by default.
     */
    amount?: string | number | Big;
}
export interface GetAllowanceParams {
    token: TokenWithChainDetails;
    owner: string;
    gasFeePaymentMethod?: FeePaymentMethod;
}
export type GetAllowanceParamsDto = GetAllowanceParams;
export interface CheckAllowanceParams extends GetAllowanceParams {
    /**
     * The float amount of tokens to check the allowance.
     */
    amount: string | number | Big;
}
export interface LiquidityPoolsParams {
    /**
     * The account address to operate tokens with.
     */
    accountAddress: string;
    /**
     * {@link TokenWithChainDetails |The token info object} of operation token.
     */
    token: TokenWithChainDetails;
    txFeeParams?: TxFeeParams;
}
export interface LiquidityPoolsParamsWithAmount extends LiquidityPoolsParams {
    /**
     * The float amount of tokens.
     */
    amount: string;
}
export interface UserBalanceInfoDTO {
    lpAmount: string;
    rewardDebt: string;
}
export interface UserBalanceInfo extends UserBalanceInfoDTO {
    userLiquidity: string;
    earned(poolInfo: PoolInfo, decimals?: number): string;
}
export declare class UserBalance implements UserBalanceInfo {
    lpAmount: string;
    rewardDebt: string;
    constructor(userInfo: UserBalanceInfoDTO);
    get userLiquidity(): string;
    earned(poolInfo: PoolInfo, decimals?: number): string;
}
