{"version":3,"file":"raw-pool-transaction-builder.js","sourceRoot":"","sources":["../../../../src/services/liquidity-pool/raw-pool-transaction-builder.ts"],"names":[],"mappings":";;;AAGA,yDAAkE;AAClE,iEAAqE;AACrE,6CAAiF;AAIjF,mCAA8C;AAqC9C,MAAa,gCAAgC;IAEjC;IACA;IACA;IACA;IAJV,YACU,GAAwB,EACxB,iBAAoC,EACpC,MAA+B,EAC/B,YAA0B;QAH1B,QAAG,GAAH,GAAG,CAAqB;QACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,WAAM,GAAN,MAAM,CAAyB;QAC/B,iBAAY,GAAZ,YAAY,CAAc;IACjC,CAAC;IAEJ,KAAK,CAAC,OAAO,CAAC,CAA2B,EAAE,CAAiB;QAC1D,IAAI,CAAC,EAAE,CAAC;YACN,MAAM,QAAQ,GAAG,CAAa,CAAC;YAC/B,MAAM,WAAW,GAAkB,CAAC,CAAC;YACrC,OAAO,IAAI,CAAC,YAAY,CAAC,0BAA0B,CACjD;gBACE,GAAG,WAAW;gBACd,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,WAAW;aACvC,EACD,QAAQ,CACT,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,WAAW,GAAkB,CAAkB,CAAC;YACtD,OAAO,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC;gBAClD,GAAG,WAAW;gBACd,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,WAAW;aACvC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,MAAsC,EAAE,QAAmB;QACvE,IAAA,4BAAoB,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACpC,IAAA,8BAAsB,EAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACvE,MAAM,CAAC,MAAM,GAAG,IAAA,qCAAuB,EAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC;QACxF,OAAO,IAAA,2BAAmB,EACxB,MAAM,CAAC,KAAK,CAAC,WAAW,EACxB,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,MAAM,EACX,QAAQ,CACT,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,MAAsC,EAAE,QAAmB;QACxE,IAAA,4BAAoB,EAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACpC,IAAA,8BAAsB,EAAC,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACvE,MAAM,CAAC,MAAM,GAAG,IAAA,qCAAuB,EAAC,MAAM,CAAC,MAAM,EAAE,4BAAgB,CAAC,CAAC,OAAO,EAAE,CAAC;QACnF,OAAO,IAAA,2BAAmB,EACxB,MAAM,CAAC,KAAK,CAAC,WAAW,EACxB,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,MAAM,EACX,QAAQ,CACT,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,MAA4B,EAAE,QAAmB;QAClE,OAAO,IAAA,2BAAmB,EACxB,MAAM,CAAC,KAAK,CAAC,WAAW,EACxB,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,iBAAiB,EACtB,IAAI,CAAC,MAAM,EACX,QAAQ,CACT,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC;IAC5C,CAAC;CACF;AA/DD,4EA+DC","sourcesContent":["import { NodeRpcUrlsConfig } from \"..\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport { AllbridgeCoreSdkOptions } from \"../../index\";\nimport { convertFloatAmountToInt } from \"../../utils/calculation\";\nimport { SYSTEM_PRECISION } from \"../../utils/calculation/constants\";\nimport { validateAmountDecimals, validateAmountGtZero } from \"../../utils/utils\";\nimport { Provider, RawTransaction } from \"../models\";\nimport { TokenService } from \"../token\";\nimport { ApproveParams, LiquidityPoolsParams, LiquidityPoolsParamsWithAmount } from \"./models\";\nimport { getChainPoolService } from \"./index\";\n\nexport interface RawPoolTransactionBuilder {\n  /**\n   * Creates a Raw Transaction for approving tokens usage by the bridge\n   * @param provider - will be used to access the network\n   * @param approveData\n   */\n  approve(provider: Provider, approveData: ApproveParams): Promise<RawTransaction>;\n  /**\n   * Creates a Raw Transaction for approving tokens usage by the bridge\n   * @param approveData\n   */\n  approve(approveData: ApproveParams): Promise<RawTransaction>;\n\n  /**\n   * Creates a Raw Transaction for depositing tokens to Liquidity pools\n   * @param params\n   * @param provider - will be used to access the network\n   */\n  deposit(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction>;\n\n  /**\n   * Creates a Raw Transaction for withdrawing tokens from Liquidity pools\n   * @param params\n   * @param provider - will be used to access the network\n   */\n  withdraw(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction>;\n\n  /**\n   * Creates a Raw Transaction for claiming rewards from Liquidity pools\n   * @param params\n   * @param provider - will be used to access the network\n   */\n  claimRewards(params: LiquidityPoolsParams, provider?: Provider): Promise<RawTransaction>;\n}\n\nexport class DefaultRawPoolTransactionBuilder implements RawPoolTransactionBuilder {\n  constructor(\n    private api: AllbridgeCoreClient,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    private params: AllbridgeCoreSdkOptions,\n    private tokenService: TokenService\n  ) {}\n\n  async approve(a: Provider | ApproveParams, b?: ApproveParams): Promise<RawTransaction> {\n    if (b) {\n      const provider = a as Provider;\n      const approveData: ApproveParams = b;\n      return this.tokenService.buildRawTransactionApprove(\n        {\n          ...approveData,\n          spender: approveData.token.poolAddress,\n        },\n        provider\n      );\n    } else {\n      const approveData: ApproveParams = a as ApproveParams;\n      return this.tokenService.buildRawTransactionApprove({\n        ...approveData,\n        spender: approveData.token.poolAddress,\n      });\n    }\n  }\n\n  async deposit(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction> {\n    validateAmountGtZero(params.amount);\n    validateAmountDecimals(\"amount\", params.amount, params.token.decimals);\n    params.amount = convertFloatAmountToInt(params.amount, params.token.decimals).toFixed();\n    return getChainPoolService(\n      params.token.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).buildRawTransactionDeposit(params);\n  }\n\n  async withdraw(params: LiquidityPoolsParamsWithAmount, provider?: Provider): Promise<RawTransaction> {\n    validateAmountGtZero(params.amount);\n    validateAmountDecimals(\"amount\", params.amount, params.token.decimals);\n    params.amount = convertFloatAmountToInt(params.amount, SYSTEM_PRECISION).toFixed();\n    return getChainPoolService(\n      params.token.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).buildRawTransactionWithdraw(params);\n  }\n\n  async claimRewards(params: LiquidityPoolsParams, provider?: Provider): Promise<RawTransaction> {\n    return getChainPoolService(\n      params.token.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).buildRawTransactionClaimRewards(params);\n  }\n}\n"]}