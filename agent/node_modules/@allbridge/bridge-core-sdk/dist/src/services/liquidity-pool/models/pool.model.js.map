{"version":3,"file":"pool.model.js","sourceRoot":"","sources":["../../../../../src/services/liquidity-pool/models/pool.model.ts"],"names":[],"mappings":";;;AAGA,4DAAgF;AAChF,oEAAwE;AAmExE,MAAa,WAAW;IACtB,QAAQ,CAAS;IACjB,UAAU,CAAS;IAEnB,YAAY,QAA4B;QACtC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;IACxC,CAAC;IAED,IAAI,aAAa;QACf,OAAO,IAAA,qCAAuB,EAAC,IAAI,CAAC,QAAQ,EAAE,4BAAgB,CAAC,CAAC,OAAO,EAAE,CAAC;IAC5E,CAAC;IAED,MAAM,CAAC,QAAkB,EAAE,QAAiB;QAC1C,MAAM,MAAM,GAAG,IAAA,uBAAS,EAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QAClG,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,IAAA,qCAAuB,EAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC;QAC7D,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;CACF;AApBD,kCAoBC","sourcesContent":["import { Big } from \"big.js\";\nimport { FeePaymentMethod, TxFeeParams } from \"../../../models\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../../tokens-info\";\nimport { convertIntAmountToFloat, getEarned } from \"../../../utils/calculation\";\nimport { SYSTEM_PRECISION } from \"../../../utils/calculation/constants\";\n\nexport interface ApproveParams {\n  /**\n   * The token info\n   */\n  token: TokenWithChainDetails;\n\n  /**\n   *  The address of the token owner who is granting permission to use tokens\n   */\n  owner: string;\n\n  /**\n   * The integer amount of tokens to approve.\n   * Optional.\n   * The maximum amount by default.\n   */\n  amount?: string | number | Big;\n}\n\nexport interface GetAllowanceParams {\n  token: TokenWithChainDetails;\n  owner: string;\n  gasFeePaymentMethod?: FeePaymentMethod;\n}\n\nexport type GetAllowanceParamsDto = GetAllowanceParams;\n\nexport interface CheckAllowanceParams extends GetAllowanceParams {\n  /**\n   * The float amount of tokens to check the allowance.\n   */\n  amount: string | number | Big;\n}\n\nexport interface LiquidityPoolsParams {\n  /**\n   * The account address to operate tokens with.\n   */\n  accountAddress: string;\n  /**\n   * {@link TokenWithChainDetails |The token info object} of operation token.\n   */\n  token: TokenWithChainDetails;\n\n  txFeeParams?: TxFeeParams;\n}\n\nexport interface LiquidityPoolsParamsWithAmount extends LiquidityPoolsParams {\n  /**\n   * The float amount of tokens.\n   */\n  amount: string;\n}\n\nexport interface UserBalanceInfoDTO {\n  lpAmount: string;\n  rewardDebt: string;\n}\n\nexport interface UserBalanceInfo extends UserBalanceInfoDTO {\n  userLiquidity: string;\n\n  earned(poolInfo: PoolInfo, decimals?: number): string;\n}\n\nexport class UserBalance implements UserBalanceInfo {\n  lpAmount: string;\n  rewardDebt: string;\n\n  constructor(userInfo: UserBalanceInfoDTO) {\n    this.lpAmount = userInfo.lpAmount;\n    this.rewardDebt = userInfo.rewardDebt;\n  }\n\n  get userLiquidity(): string {\n    return convertIntAmountToFloat(this.lpAmount, SYSTEM_PRECISION).toFixed();\n  }\n\n  earned(poolInfo: PoolInfo, decimals?: number): string {\n    const earned = getEarned(this.lpAmount, this.rewardDebt, poolInfo.accRewardPerShareP, poolInfo.p);\n    if (decimals) {\n      return convertIntAmountToFloat(earned, decimals).toFixed();\n    }\n    return earned;\n  }\n}\n"]}