{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/services/liquidity-pool/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Big } from \"big.js\";\nimport Cache from \"timed-cache\";\nimport { TronWeb } from \"tronweb\";\nimport { FMT_BYTES, FMT_NUMBER, Web3 } from \"web3\";\nimport { NodeRpcUrlsConfig } from \"..\";\nimport { Chains } from \"../../chains\";\nimport { AllbridgeCoreClient } from \"../../client/core-api/core-client-base\";\nimport { AllbridgeCoreClientFiltered } from \"../../client/core-api/core-client-filtered\";\nimport { AllbridgeCoreSdkOptions, ChainType, EssentialWeb3 } from \"../../index\";\nimport { PoolInfo, PoolKeyObject, TokenWithChainDetails } from \"../../tokens-info\";\nimport { convertIntAmountToFloat, fromSystemPrecision } from \"../../utils/calculation\";\nimport { SYSTEM_PRECISION } from \"../../utils/calculation/constants\";\nimport { validateAmountDecimals, validateAmountGtZero } from \"../../utils/utils\";\nimport { Provider, TransactionResponse } from \"../models\";\nimport { TokenService } from \"../token\";\nimport { depositAmountToVUsd, vUsdToWithdrawalAmount } from \"../utils/calculation\";\nimport { EvmPoolService } from \"./evm\";\nimport { ApproveParams, ChainPoolService, CheckAllowanceParams, GetAllowanceParams, UserBalanceInfo } from \"./models\";\nimport { DefaultRawPoolTransactionBuilder, RawPoolTransactionBuilder } from \"./raw-pool-transaction-builder\";\nimport { SolanaPoolService } from \"./sol\";\nimport { SrbPoolService } from \"./srb\";\nimport { SuiPoolService } from \"./sui\";\nimport { TronPoolService } from \"./trx\";\n\nexport interface LiquidityPoolService {\n  rawTxBuilder: RawPoolTransactionBuilder;\n\n  /**\n   * Get amount of tokens approved for poolInfo\n   * @param provider - will be used to access the network\n   * @param params See {@link GetAllowanceParams}\n   * @returns the amount of approved tokens\n   */\n  getAllowance(provider: Provider, params: GetAllowanceParams): Promise<string>;\n\n  /**\n   * Get amount of tokens approved for poolInfo\n   * @param params See {@link GetAllowanceParams}\n   * @returns the amount of approved tokens\n   */\n  getAllowance(params: GetAllowanceParams): Promise<string>;\n\n  /**\n   * Check if the amount of approved tokens is enough\n   * @param provider - will be used to access the network\n   * @param params See {@link CheckAllowanceParams}\n   * @returns true if the amount of approved tokens is enough to make a transfer\n   */\n  checkAllowance(provider: Provider, params: CheckAllowanceParams): Promise<boolean>;\n\n  /**\n   * Check if the amount of approved tokens is enough\n   * @param params See {@link CheckAllowanceParams}\n   * @returns true if the amount of approved tokens is enough to make a transfer\n   */\n  checkAllowance(params: CheckAllowanceParams): Promise<boolean>;\n\n  /**\n   * @deprecated Use {@link rawTxBuilder}.{@link RawPoolTransactionBuilder.approve}<p>\n   * Approve tokens usage by another address on chains\n   * <p>\n   * For ETH/USDT: due to specificity of the USDT contract:<br/>\n   * If the current allowance is not 0, this function will perform an additional transaction to set allowance to 0 before setting the new allowance value.\n   * @param provider - will be used to access the network\n   * @param approveData\n   */\n  approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;\n\n  /**\n   * Calculates the amount of LP tokens that will be deposited\n   * @param amount The float amount of tokens that will be sent\n   * @param token\n   * @param provider - will be used to access the network\n   * @returns amount\n   */\n  getAmountToBeDeposited(amount: string, token: TokenWithChainDetails, provider?: Provider): Promise<string>;\n\n  /**\n   * Calculates the amount of tokens will be withdrawn\n   * @param amount The float amount of tokens that will be sent\n   * @param accountAddress\n   * @param token\n   * @param provider - will be used to access the network\n   * @returns amount\n   */\n  getAmountToBeWithdrawn(\n    amount: string,\n    accountAddress: string,\n    token: TokenWithChainDetails,\n    provider?: Provider\n  ): Promise<string>;\n\n  /**\n   * Get User Balance Info on Liquidity poolInfo\n   * @param accountAddress\n   * @param token\n   * @param provider\n   * @returns UserBalanceInfo\n   */\n  getUserBalanceInfo(\n    accountAddress: string,\n    token: TokenWithChainDetails,\n    provider?: Provider\n  ): Promise<UserBalanceInfo>;\n\n  /**\n   * Gets information about the poolInfo from chain\n   * @param token\n   * @param provider - will be used to access the network\n   * @returns poolInfo\n   */\n  getPoolInfoFromChain(token: TokenWithChainDetails, provider?: Provider): Promise<Required<PoolInfo>>;\n}\n\nexport class DefaultLiquidityPoolService implements LiquidityPoolService {\n  public rawTxBuilder: RawPoolTransactionBuilder;\n  private cache: Cache<PoolInfo>;\n\n  constructor(\n    private api: AllbridgeCoreClientFiltered,\n    private nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    private params: AllbridgeCoreSdkOptions,\n    private tokenService: TokenService\n  ) {\n    this.rawTxBuilder = new DefaultRawPoolTransactionBuilder(api, nodeRpcUrlsConfig, this.params, tokenService);\n    const ttl = params.cachePoolInfoChainSec > 0 ? params.cachePoolInfoChainSec * 1000 : 20 * 1000;\n    this.cache = new Cache<PoolInfo>({ defaultTtl: ttl });\n  }\n\n  async getAllowance(a: Provider | GetAllowanceParams, b?: GetAllowanceParams): Promise<string> {\n    if (b) {\n      const provider = a as Provider;\n      const params = b;\n      return await this.tokenService.getAllowance({ ...params, spender: params.token.poolAddress }, provider);\n    } else {\n      const params = a as GetAllowanceParams;\n      return await this.tokenService.getAllowance({ ...params, spender: params.token.poolAddress });\n    }\n  }\n\n  async checkAllowance(a: Provider | CheckAllowanceParams, b?: CheckAllowanceParams): Promise<boolean> {\n    if (b) {\n      const provider = a as Provider;\n      const params = b;\n      return this.tokenService.checkAllowance({ ...params, spender: params.token.poolAddress }, provider);\n    } else {\n      const params = a as CheckAllowanceParams;\n      return this.tokenService.checkAllowance({ ...params, spender: params.token.poolAddress });\n    }\n  }\n\n  async approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse> {\n    return this.tokenService.approve(provider, { ...approveData, spender: approveData.token.poolAddress });\n  }\n\n  async getAmountToBeDeposited(amount: string, token: TokenWithChainDetails, provider?: Provider): Promise<string> {\n    validateAmountGtZero(amount);\n    validateAmountDecimals(\"amount\", amount, token.decimals);\n    const pool = await this.getPoolInfoFromChain(token, provider);\n    const { vUsdBalance, tokenBalance, aValue, dValue } = pool;\n    const vUsd = depositAmountToVUsd(amount, aValue, dValue, tokenBalance, vUsdBalance);\n    return convertIntAmountToFloat(vUsd, SYSTEM_PRECISION).toFixed();\n  }\n\n  async getAmountToBeWithdrawn(\n    amount: string,\n    accountAddress: string,\n    token: TokenWithChainDetails,\n    provider?: Provider\n  ): Promise<string> {\n    validateAmountGtZero(amount);\n    validateAmountDecimals(\"amount\", amount, token.decimals);\n    const pool = await this.getPoolInfoFromChain(token, provider);\n    const tokenAmountInSP = vUsdToWithdrawalAmount(amount);\n    const tokenAmount = fromSystemPrecision(tokenAmountInSP, token.decimals);\n    const userBalanceInfo = await this.getUserBalanceInfo(accountAddress, token, provider);\n    const earned = userBalanceInfo.earned(pool) || \"0\";\n    const commonAmount = Big(tokenAmount).plus(earned).toFixed();\n    return convertIntAmountToFloat(commonAmount, token.decimals).toFixed();\n  }\n\n  async getUserBalanceInfo(\n    accountAddress: string,\n    token: TokenWithChainDetails,\n    provider?: Provider\n  ): Promise<UserBalanceInfo> {\n    return getChainPoolService(\n      token.chainSymbol,\n      this.api,\n      this.nodeRpcUrlsConfig,\n      this.params,\n      provider\n    ).getUserBalanceInfo(accountAddress, token);\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails, provider?: Provider): Promise<PoolInfo> {\n    const poolKey: PoolKeyObject = { chainSymbol: token.chainSymbol, poolAddress: token.poolAddress };\n    const fromCache = this.cache.get(poolKey);\n    if (fromCache) {\n      return fromCache;\n    } else {\n      const poolInfo = await getChainPoolService(\n        token.chainSymbol,\n        this.api,\n        this.nodeRpcUrlsConfig,\n        this.params,\n        provider\n      ).getPoolInfoFromChain(token);\n      this.cache.put(poolKey, poolInfo);\n      this.api.cachePut({ chainSymbol: token.chainSymbol, poolAddress: token.poolAddress }, poolInfo);\n      return poolInfo;\n    }\n  }\n}\n\nexport function getChainPoolService(\n  chainSymbol: string,\n  api: AllbridgeCoreClient,\n  nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n  params: AllbridgeCoreSdkOptions,\n  provider?: Provider\n): ChainPoolService {\n  switch (Chains.getChainProperty(chainSymbol).chainType) {\n    case ChainType.EVM: {\n      if (provider) {\n        return new EvmPoolService(provider as EssentialWeb3, api);\n      } else {\n        const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n        const web3 = new Web3(nodeRpcUrl);\n        web3.defaultReturnFormat = { number: FMT_NUMBER.STR, bytes: FMT_BYTES.HEX };\n        return new EvmPoolService(web3, api);\n      }\n    }\n    case ChainType.TRX: {\n      const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n      const tronJsonRpc = params.tronJsonRpc;\n      if (provider) {\n        return new TronPoolService(provider as TronWeb, api, tronJsonRpc);\n      } else {\n        const tronWeb = new TronWeb({ fullHost: nodeRpcUrl });\n        return new TronPoolService(tronWeb, api, tronJsonRpc);\n      }\n    }\n    case ChainType.SOLANA: {\n      const nodeRpcUrl = nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol);\n      return new SolanaPoolService(nodeRpcUrl, api);\n    }\n    case ChainType.SRB: {\n      return new SrbPoolService(nodeRpcUrlsConfig, params, api);\n    }\n    case ChainType.SUI: {\n      return new SuiPoolService(nodeRpcUrlsConfig.getNodeRpcUrl(chainSymbol), api);\n    }\n  }\n}\n"]}