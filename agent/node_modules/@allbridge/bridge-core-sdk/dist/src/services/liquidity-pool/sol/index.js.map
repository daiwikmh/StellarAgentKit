{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/liquidity-pool/sol/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnchorProvider, BN, Program, Provider, Spl, web3 } from \"@project-serum/anchor\";\nimport { Connection, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { PoolInfo, TokenWithChainDetails } from \"../../../tokens-info\";\nimport { calculatePoolInfoImbalance } from \"../../../utils/calculation\";\nimport { RawTransaction } from \"../../models\";\nimport { Bridge as BridgeType, IDL as bridgeIdl } from \"../../models/sol/types/bridge\";\nimport { getTokenAccountData } from \"../../utils/sol\";\nimport {\n  getAssociatedAccount,\n  getAuthorityAccount,\n  getBridgeTokenAccount,\n  getConfigAccount,\n  getUserDepositAccount,\n} from \"../../utils/sol/accounts\";\nimport { addUnitLimitAndUnitPriceToTx } from \"../../utils/sol/compute-budget\";\nimport { LiquidityPoolsParams, LiquidityPoolsParamsWithAmount, UserBalance, UserBalanceInfo } from \"../models\";\nimport { ChainPoolService } from \"../models/pool\";\n\ninterface LPAccounts {\n  mint: PublicKey;\n  user: PublicKey;\n  config: PublicKey;\n  pool: PublicKey;\n  bridgeAuthority: PublicKey;\n  userDeposit: PublicKey;\n  userToken: PublicKey;\n  bridgeToken: PublicKey;\n}\n\ninterface LPTransactionData {\n  accounts: LPAccounts;\n  preInstructions: TransactionInstruction[];\n}\n\nexport class SolanaPoolService extends ChainPoolService {\n  chainType: ChainType.SOLANA = ChainType.SOLANA;\n  private P = 48;\n\n  constructor(\n    public solanaRpcUrl: string,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  async getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo> {\n    const provider = this.buildAnchorProvider(accountAddress);\n    const bridge = this.getBridge(token.bridgeAddress, provider);\n    const poolAccount = new PublicKey(token.poolAddress);\n    const poolAccountInfo = await bridge.account.pool.fetch(poolAccount);\n    try {\n      const userDepositAccount = await getUserDepositAccount(\n        new PublicKey(accountAddress),\n        poolAccountInfo.mint,\n        bridge.programId\n      );\n      const { lpAmount, rewardDebt } = await bridge.account.userDeposit.fetch(userDepositAccount);\n      return new UserBalance({\n        lpAmount: lpAmount.toString(),\n        rewardDebt: rewardDebt.toString(),\n      });\n    } catch (ignoreError) {\n      return new UserBalance({ lpAmount: \"0\", rewardDebt: \"0\" });\n    }\n  }\n\n  async getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo> {\n    const provider = this.buildAnchorProvider(token.bridgeAddress);\n    const pool = await this.getBridge(token.bridgeAddress, provider).account.pool.fetch(token.poolAddress);\n    const vUsdBalance = pool.vUsdBalance.toString();\n    const tokenBalance = pool.tokenBalance.toString();\n    const imbalance = calculatePoolInfoImbalance({ tokenBalance, vUsdBalance });\n    return {\n      dValue: pool.d.toString(),\n      aValue: pool.a.toString(),\n      totalLpAmount: pool.totalLpAmount.toString(),\n      vUsdBalance,\n      tokenBalance,\n      accRewardPerShareP: pool.accRewardPerShareP.toString(),\n      p: this.P,\n      imbalance,\n    };\n  }\n\n  async buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const { bridge, accounts, preInstructions } = await this.prepareDataForTransaction(params);\n\n    const tx = await bridge.methods\n      .deposit(new BN(params.amount))\n      .accounts(accounts)\n      .preInstructions(preInstructions)\n      .transaction();\n    tx.recentBlockhash = (\n      await this.buildAnchorProvider(params.accountAddress).connection.getLatestBlockhash()\n    ).blockhash;\n    tx.feePayer = new PublicKey(params.accountAddress);\n    await addUnitLimitAndUnitPriceToTx(tx, params.txFeeParams, this.solanaRpcUrl);\n    return tx;\n  }\n\n  async buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction> {\n    const { bridge, accounts, preInstructions } = await this.prepareDataForTransaction(params);\n\n    const tx = await bridge.methods\n      .withdraw(new BN(params.amount))\n      .accounts(accounts)\n      .preInstructions(preInstructions)\n      .transaction();\n    tx.recentBlockhash = (\n      await this.buildAnchorProvider(params.accountAddress).connection.getLatestBlockhash()\n    ).blockhash;\n    tx.feePayer = new PublicKey(params.accountAddress);\n    await addUnitLimitAndUnitPriceToTx(tx, params.txFeeParams, this.solanaRpcUrl);\n    return tx;\n  }\n\n  async buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawTransaction> {\n    const { bridge, accounts, preInstructions } = await this.prepareDataForTransaction(params);\n\n    const tx = await bridge.methods.claimRewards().accounts(accounts).preInstructions(preInstructions).transaction();\n    tx.recentBlockhash = (\n      await this.buildAnchorProvider(params.accountAddress).connection.getLatestBlockhash()\n    ).blockhash;\n    tx.feePayer = new PublicKey(params.accountAddress);\n    await addUnitLimitAndUnitPriceToTx(tx, params.txFeeParams, this.solanaRpcUrl);\n    return tx;\n  }\n\n  private async prepareDataForTransaction(params: LiquidityPoolsParams) {\n    const provider = this.buildAnchorProvider(params.accountAddress);\n    const bridge = this.getBridge(params.token.bridgeAddress, provider);\n\n    const { accounts, preInstructions } = await this._getLPTransactionData(\n      bridge,\n      params.token.poolAddress,\n      params.accountAddress,\n      provider\n    );\n    return { bridge, accounts, preInstructions };\n  }\n\n  private getBridge(bridgeAddress: string, provider: Provider): Program<BridgeType> {\n    return new Program<BridgeType>(bridgeIdl, bridgeAddress, provider);\n  }\n\n  private buildAnchorProvider(accountAddress: string): Provider {\n    const connection = new Connection(this.solanaRpcUrl, \"confirmed\");\n\n    const publicKey = new PublicKey(accountAddress);\n\n    return new AnchorProvider(\n      connection,\n      // @ts-expect-error enough wallet for fetch actions\n      { publicKey: publicKey },\n      {\n        preflightCommitment: \"confirmed\",\n        commitment: \"confirmed\",\n      }\n    );\n  }\n\n  private async _getLPTransactionData(\n    bridge: Program<BridgeType>,\n    poolAddress: string,\n    account: string,\n    provider: Provider\n  ): Promise<LPTransactionData> {\n    const user = new PublicKey(account);\n    const configAccount = await getConfigAccount(bridge.programId);\n    const bridgeAuthority = await getAuthorityAccount(bridge.programId);\n    const poolAccount = new PublicKey(poolAddress);\n    const poolAccountInfo = await bridge.account.pool.fetch(poolAccount);\n    const tokenMintAccount = poolAccountInfo.mint;\n    const userToken = await getAssociatedAccount(user, tokenMintAccount);\n    const bridgeTokenAccount = await getBridgeTokenAccount(tokenMintAccount, bridge.programId);\n    const userDepositAccount = await getUserDepositAccount(user, tokenMintAccount, bridge.programId);\n\n    const preInstructions: TransactionInstruction[] = [\n      web3.ComputeBudgetProgram.setComputeUnitLimit({\n        units: 1000000,\n      }),\n    ];\n\n    try {\n      await getTokenAccountData(userToken, provider);\n    } catch (ignoreError) {\n      const associatedProgram = Spl.associatedToken(provider);\n      const createUserTokenInstruction: TransactionInstruction = await associatedProgram.methods\n        .create()\n        .accounts({\n          mint: tokenMintAccount,\n          owner: user,\n          associatedAccount: userToken,\n        })\n        .instruction();\n      preInstructions.push(createUserTokenInstruction);\n    }\n\n    try {\n      await bridge.account.userDeposit.fetch(userDepositAccount);\n    } catch (ignoreError) {\n      const instruction: TransactionInstruction = await bridge.methods\n        .initDepositAccount()\n        .accounts({\n          mint: tokenMintAccount,\n          user,\n          userDeposit: userDepositAccount,\n        })\n        .instruction();\n      preInstructions.push(instruction);\n    }\n\n    const accounts: LPAccounts = {\n      mint: tokenMintAccount,\n      user,\n      config: configAccount,\n      pool: poolAccount,\n      bridgeAuthority: bridgeAuthority,\n      userDeposit: userDepositAccount,\n      userToken,\n      bridgeToken: bridgeTokenAccount,\n    };\n\n    return { accounts, preInstructions };\n  }\n}\n"]}