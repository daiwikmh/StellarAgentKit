import { ChainType } from "../../../chains/chain.enums";
import { AllbridgeCoreClient } from "../../../client/core-api/core-client-base";
import { PoolInfo, TokenWithChainDetails } from "../../../tokens-info";
import { EssentialWeb3, RawTransaction } from "../../models";
import { ChainPoolService, LiquidityPoolsParams, LiquidityPoolsParamsWithAmount, UserBalanceInfo } from "../models";
export declare class EvmPoolService extends ChainPoolService {
    web3: EssentialWeb3;
    api: AllbridgeCoreClient;
    chainType: ChainType.EVM;
    private P;
    constructor(web3: EssentialWeb3, api: AllbridgeCoreClient);
    getUserBalanceInfo(accountAddress: string, token: TokenWithChainDetails): Promise<UserBalanceInfo>;
    getPoolInfoFromChain(token: TokenWithChainDetails): Promise<PoolInfo>;
    private getUserBalanceInfoByBatch;
    private getUserBalanceInfoPerProperty;
    private getPoolInfoByBatch;
    private getPoolInfoPerProperty;
    buildRawTransactionDeposit(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction>;
    buildRawTransactionWithdraw(params: LiquidityPoolsParamsWithAmount): Promise<RawTransaction>;
    buildRawTransactionClaimRewards(params: LiquidityPoolsParams): Promise<RawTransaction>;
    buildTxParams(params: LiquidityPoolsParams): {
        from: string;
        to: string;
        value: string;
    };
    private getPoolContract;
}
