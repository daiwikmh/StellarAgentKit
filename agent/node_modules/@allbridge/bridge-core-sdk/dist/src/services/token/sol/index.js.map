{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/token/sol/index.ts"],"names":[],"mappings":";;;AAAA,sDAAsD;AACtD,kDAAiE;AACjE,6CAAwD;AACxD,6DAAwD;AAExD,oDAA8D;AAG9D,yCAAsD;AACtD,uDAAgE;AAEhE,2CAAoD;AAEpD,MAAa,kBAAmB,SAAQ,yBAAiB;IAI9C;IACA;IAJT,SAAS,GAAqB,uBAAS,CAAC,MAAM,CAAC;IAE/C,YACS,YAAoB,EACpB,GAAwB;QAE/B,KAAK,EAAE,CAAC;QAHD,iBAAY,GAAZ,YAAY,CAAQ;QACpB,QAAG,GAAH,GAAG,CAAqB;IAGjC,CAAC;IAED,OAAO,CAAC,MAAwB;QAC9B,MAAM,IAAI,oCAAuB,EAAE,CAAC;IACtC,CAAC;IAED,0BAA0B,CAAC,MAAwB;QACjD,MAAM,IAAI,oCAAuB,EAAE,CAAC;IACtC,CAAC;IAEO,mBAAmB,CAAC,cAAsB;QAChD,MAAM,UAAU,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;QAElE,MAAM,SAAS,GAAG,IAAI,mBAAS,CAAC,cAAc,CAAC,CAAC;QAEhD,OAAO,IAAI,uBAAc,CACvB,UAAU;QACV,mDAAmD;QACnD,EAAE,SAAS,EAAE,SAAS,EAAE,EACxB;YACE,mBAAmB,EAAE,WAAW;YAChC,UAAU,EAAE,WAAW;SACxB,CACF,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,MAA6B;QACxC,MAAM,IAAI,oCAAuB,EAAE,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,MAA6B;QACjD,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;QAClC,IAAI,CAAC;YACH,MAAM,iBAAiB,GAAG,MAAM,IAAA,+BAAoB,EAAC,IAAI,mBAAS,CAAC,OAAO,CAAC,EAAE,IAAI,mBAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;YAChH,MAAM,WAAW,GAAG,MAAM,IAAA,yBAAmB,EAAC,iBAAiB,EAAE,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;YACpG,OAAO,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACvC,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,IAAI,CAAC,YAAY,KAAK,EAAE,CAAC;gBACvB,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,wBAAwB,CAAC,CAAC;gBAC/C,OAAO,GAAG,CAAC;YACb,CAAC;YACD,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,MAAmC;QAC7D,OAAO,CACL,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,mBAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CACpG,CAAC,QAAQ,EAAE,CAAC;IACf,CAAC;CACF;AA1DD,gDA0DC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { AnchorProvider, Provider } from \"@project-serum/anchor\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport { ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { MethodNotSupportedError } from \"../../../exceptions\";\nimport { GetNativeTokenBalanceParams } from \"../../bridge/models\";\nimport { RawTransaction, TransactionResponse } from \"../../models\";\nimport { getTokenAccountData } from \"../../utils/sol\";\nimport { getAssociatedAccount } from \"../../utils/sol/accounts\";\nimport { ApproveParamsDto, GetAllowanceParamsDto, GetTokenBalanceParams } from \"../models\";\nimport { ChainTokenService } from \"../models/token\";\n\nexport class SolanaTokenService extends ChainTokenService {\n  chainType: ChainType.SOLANA = ChainType.SOLANA;\n\n  constructor(\n    public solanaRpcUrl: string,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  approve(params: ApproveParamsDto): Promise<TransactionResponse> {\n    throw new MethodNotSupportedError();\n  }\n\n  buildRawTransactionApprove(params: ApproveParamsDto): Promise<RawTransaction> {\n    throw new MethodNotSupportedError();\n  }\n\n  private buildAnchorProvider(accountAddress: string): Provider {\n    const connection = new Connection(this.solanaRpcUrl, \"confirmed\");\n\n    const publicKey = new PublicKey(accountAddress);\n\n    return new AnchorProvider(\n      connection,\n      // @ts-expect-error enough wallet for fetch actions\n      { publicKey: publicKey },\n      {\n        preflightCommitment: \"confirmed\",\n        commitment: \"confirmed\",\n      }\n    );\n  }\n\n  getAllowance(params: GetAllowanceParamsDto): Promise<string> {\n    throw new MethodNotSupportedError();\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams): Promise<string> {\n    const { account, token } = params;\n    try {\n      const associatedAccount = await getAssociatedAccount(new PublicKey(account), new PublicKey(token.tokenAddress));\n      const accountData = await getTokenAccountData(associatedAccount, this.buildAnchorProvider(account));\n      return accountData.amount.toString();\n    } catch (e) {\n      if (e instanceof Error) {\n        e.message.startsWith(\"Account does not exist\");\n        return \"0\";\n      }\n      throw e;\n    }\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams): Promise<string> {\n    return (\n      await this.buildAnchorProvider(params.account).connection.getBalance(new PublicKey(params.account))\n    ).toString();\n  }\n}\n"]}