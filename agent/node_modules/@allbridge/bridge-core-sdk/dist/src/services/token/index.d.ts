import { AllbridgeCoreClient } from "../../client/core-api/core-client-base";
import { AllbridgeCoreSdkOptions } from "../../index";
import { AmountFormatted } from "../../models";
import { GetNativeTokenBalanceParams } from "../bridge/models";
import { NodeRpcUrlsConfig } from "../index";
import { Provider, RawTransaction, TransactionResponse } from "../models";
import { ApproveParams, CheckAllowanceParams, CheckAllowanceParamsDto, GetAllowanceParams, GetTokenBalanceParams } from "./models";
export interface TokenService {
    getAllowance(params: GetAllowanceParams, provider?: Provider): Promise<string>;
    checkAllowance(params: CheckAllowanceParams, provider?: Provider): Promise<boolean>;
    approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;
    buildRawTransactionApprove(approveData: ApproveParams, provider?: Provider): Promise<RawTransaction>;
    getTokenBalance(params: GetTokenBalanceParams, provider?: Provider): Promise<string>;
    getNativeTokenBalance(params: GetNativeTokenBalanceParams, provider?: Provider): Promise<AmountFormatted>;
}
export declare class DefaultTokenService implements TokenService {
    readonly api: AllbridgeCoreClient;
    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig;
    readonly params: AllbridgeCoreSdkOptions;
    constructor(api: AllbridgeCoreClient, nodeRpcUrlsConfig: NodeRpcUrlsConfig, params: AllbridgeCoreSdkOptions);
    getAllowance(params: GetAllowanceParams, provider?: Provider): Promise<string>;
    checkAllowance(params: CheckAllowanceParams, provider?: Provider): Promise<boolean>;
    approve(provider: Provider, approveData: ApproveParams): Promise<TransactionResponse>;
    buildRawTransactionApprove(approveData: ApproveParams, provider?: Provider): Promise<RawTransaction>;
    getTokenBalance(params: GetTokenBalanceParams, provider?: Provider): Promise<string>;
    getNativeTokenBalance(params: GetNativeTokenBalanceParams, provider?: Provider): Promise<AmountFormatted>;
    private getChainTokenService;
    prepareCheckAllowanceParams(params: CheckAllowanceParams): CheckAllowanceParamsDto;
    private prepareApproveParams;
}
