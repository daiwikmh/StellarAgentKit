{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/token/srb/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Horizon, NotFoundError } from \"@stellar/stellar-sdk\";\nimport { Chains } from \"../../../chains\";\nimport { ChainSymbol } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { AllbridgeCoreSdkOptions, ChainType, SdkError } from \"../../../index\";\nimport { GetTokenBalanceParams, MethodNotSupportedError, TransactionResponse } from \"../../../models\";\nimport { convertFloatAmountToInt } from \"../../../utils/calculation\";\nimport { GetNativeTokenBalanceParams } from \"../../bridge/models\";\nimport { NodeRpcUrlsConfig } from \"../../index\";\nimport { RawTransaction } from \"../../models\";\nimport { ChainTokenService } from \"../models\";\n\nimport BalanceLineAsset = Horizon.HorizonApi.BalanceLineAsset;\nimport BalanceLineNative = Horizon.HorizonApi.BalanceLineNative;\n\nexport class SrbTokenService extends ChainTokenService {\n  chainType: ChainType.SRB = ChainType.SRB;\n\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions,\n    readonly api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  getAllowance(): Promise<string> {\n    throw new MethodNotSupportedError();\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams): Promise<string> {\n    if (!params.token.originTokenAddress) {\n      throw new SdkError(\"OriginTokenAddress missing\");\n    }\n    const [symbol, srbTokenAddress] = params.token.originTokenAddress.split(\":\");\n\n    const stellar = new Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR));\n    let stellarAccount;\n    try {\n      stellarAccount = await stellar.loadAccount(params.account);\n    } catch (err) {\n      if (err instanceof NotFoundError) {\n        return \"0\";\n      }\n      throw err;\n    }\n    const balances = stellarAccount.balances;\n\n    const balanceInfo = balances.find(\n      (balance): balance is BalanceLineAsset =>\n        (balance.asset_type === \"credit_alphanum4\" || balance.asset_type === \"credit_alphanum12\") &&\n        balance.asset_code == symbol &&\n        balance.asset_issuer == srbTokenAddress\n    );\n    if (balanceInfo?.balance) {\n      return convertFloatAmountToInt(\n        balanceInfo.balance,\n        Chains.getChainDecimalsByType(Chains.getChainProperty(params.token.chainSymbol).chainType)\n      ).toFixed();\n    }\n    return \"0\";\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams): Promise<string> {\n    const stellar = new Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR));\n    const stellarAccount = await stellar.loadAccount(params.account);\n    const balances = stellarAccount.balances;\n\n    const nativeBalance = balances.find((balance): balance is BalanceLineNative => balance.asset_type === \"native\");\n    if (nativeBalance?.balance) {\n      return convertFloatAmountToInt(\n        nativeBalance.balance,\n        Chains.getChainDecimalsByType(Chains.getChainProperty(params.chainSymbol).chainType)\n      ).toFixed();\n    }\n    return \"0\";\n  }\n\n  approve(): Promise<TransactionResponse> {\n    throw new MethodNotSupportedError();\n  }\n\n  buildRawTransactionApprove(): Promise<RawTransaction> {\n    throw new MethodNotSupportedError();\n  }\n}\n"]}