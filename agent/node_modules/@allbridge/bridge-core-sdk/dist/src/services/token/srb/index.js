"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SrbTokenService = void 0;
const stellar_sdk_1 = require("@stellar/stellar-sdk");
const chains_1 = require("../../../chains");
const chain_enums_1 = require("../../../chains/chain.enums");
const index_1 = require("../../../index");
const models_1 = require("../../../models");
const calculation_1 = require("../../../utils/calculation");
const models_2 = require("../models");
class SrbTokenService extends models_2.ChainTokenService {
    nodeRpcUrlsConfig;
    params;
    api;
    chainType = index_1.ChainType.SRB;
    constructor(nodeRpcUrlsConfig, params, api) {
        super();
        this.nodeRpcUrlsConfig = nodeRpcUrlsConfig;
        this.params = params;
        this.api = api;
    }
    getAllowance() {
        throw new models_1.MethodNotSupportedError();
    }
    async getTokenBalance(params) {
        if (!params.token.originTokenAddress) {
            throw new index_1.SdkError("OriginTokenAddress missing");
        }
        const [symbol, srbTokenAddress] = params.token.originTokenAddress.split(":");
        const stellar = new stellar_sdk_1.Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(chain_enums_1.ChainSymbol.STLR));
        let stellarAccount;
        try {
            stellarAccount = await stellar.loadAccount(params.account);
        }
        catch (err) {
            if (err instanceof stellar_sdk_1.NotFoundError) {
                return "0";
            }
            throw err;
        }
        const balances = stellarAccount.balances;
        const balanceInfo = balances.find((balance) => (balance.asset_type === "credit_alphanum4" || balance.asset_type === "credit_alphanum12") &&
            balance.asset_code == symbol &&
            balance.asset_issuer == srbTokenAddress);
        if (balanceInfo?.balance) {
            return (0, calculation_1.convertFloatAmountToInt)(balanceInfo.balance, chains_1.Chains.getChainDecimalsByType(chains_1.Chains.getChainProperty(params.token.chainSymbol).chainType)).toFixed();
        }
        return "0";
    }
    async getNativeTokenBalance(params) {
        const stellar = new stellar_sdk_1.Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(chain_enums_1.ChainSymbol.STLR));
        const stellarAccount = await stellar.loadAccount(params.account);
        const balances = stellarAccount.balances;
        const nativeBalance = balances.find((balance) => balance.asset_type === "native");
        if (nativeBalance?.balance) {
            return (0, calculation_1.convertFloatAmountToInt)(nativeBalance.balance, chains_1.Chains.getChainDecimalsByType(chains_1.Chains.getChainProperty(params.chainSymbol).chainType)).toFixed();
        }
        return "0";
    }
    approve() {
        throw new models_1.MethodNotSupportedError();
    }
    buildRawTransactionApprove() {
        throw new models_1.MethodNotSupportedError();
    }
}
exports.SrbTokenService = SrbTokenService;
//# sourceMappingURL=index.js.map