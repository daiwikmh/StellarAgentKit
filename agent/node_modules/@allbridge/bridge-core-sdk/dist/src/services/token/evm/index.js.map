{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/services/token/evm/index.ts"],"names":[],"mappings":"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","sourcesContent":["import BN from \"bn.js\";\nimport { Contract, Transaction as Web3Transaction } from \"web3\";\nimport { ChainSymbol, ChainType } from \"../../../chains/chain.enums\";\nimport { AllbridgeCoreClient } from \"../../../client/core-api/core-client-base\";\nimport { GetTokenBalanceParams, EssentialWeb3, TransactionResponse } from \"../../../models\";\nimport { GetNativeTokenBalanceParams } from \"../../bridge/models\";\nimport { RawTransaction } from \"../../models\";\nimport ERC20 from \"../../models/abi/ERC20\";\nimport { amountToHex } from \"../../utils\";\nimport { ApproveParamsDto, GetAllowanceParamsDto, ChainTokenService } from \"../models\";\n\nexport const MAX_AMOUNT = \"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\nconst USDT_TOKEN_ADDRESS = \"0xdac17f958d2ee523a2206206994597c13d831ec7\";\nconst POLYGON_GAS_LIMIT = 100_000;\n\nexport class EvmTokenService extends ChainTokenService {\n  chainType: ChainType.EVM = ChainType.EVM;\n\n  constructor(\n    public web3: EssentialWeb3,\n    public api: AllbridgeCoreClient\n  ) {\n    super();\n  }\n\n  getAllowance(params: GetAllowanceParamsDto): Promise<string> {\n    const tokenAddress = params.token.tokenAddress;\n    const owner = params.owner;\n    const spender = params.spender;\n    return this.getAllowanceByTokenAddress(tokenAddress, owner, spender);\n  }\n\n  getAllowanceByTokenAddress(tokenAddress: string, owner: string, spender: string): Promise<string> {\n    const tokenContract = this.getERC20Contract(tokenAddress);\n    return tokenContract.methods.allowance(owner, spender).call();\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams): Promise<string> {\n    return await this.getERC20Contract(params.token.tokenAddress).methods.balanceOf(params.account).call();\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams): Promise<string> {\n    return (await this.web3.eth.getBalance(params.account)).toString();\n  }\n\n  async approve(params: ApproveParamsDto): Promise<TransactionResponse> {\n    if (this.isUsdt(params.tokenAddress)) {\n      const allowance = await this.getAllowanceByTokenAddress(params.tokenAddress, params.owner, params.spender);\n      if (allowance !== \"0\") {\n        const rawTransaction = await this.buildRawTransactionApprove({\n          ...params,\n          amount: \"0\",\n        });\n        await this.sendRawTransaction(rawTransaction, params.chainSymbol);\n      }\n    }\n    const rawTransaction = await this.buildRawTransactionApprove(params);\n    return await this.sendRawTransaction(rawTransaction, params.chainSymbol);\n  }\n\n  isUsdt(tokenAddress: string): boolean {\n    return tokenAddress.toLowerCase() === USDT_TOKEN_ADDRESS;\n  }\n\n  buildRawTransactionApprove(params: ApproveParamsDto): Promise<RawTransaction> {\n    const { tokenAddress, spender, owner, amount } = params;\n    const tokenContract = this.getERC20Contract(tokenAddress);\n\n    const approveMethod = tokenContract.methods.approve(\n      spender,\n      amount == undefined ? MAX_AMOUNT : amountToHex(amount)\n    );\n\n    return Promise.resolve({\n      from: owner,\n      to: tokenAddress,\n      value: \"0\",\n      data: approveMethod.encodeABI(),\n    });\n  }\n\n  private async sendRawTransaction(rawTransaction: RawTransaction, chainSymbol: string) {\n    const transactionConfig: Web3Transaction = rawTransaction as Web3Transaction;\n    // prettier-ignore\n    const feeOptions: {\n      maxPriorityFeePerGas?: number | string | BN;\n      maxFeePerGas?: number | string | BN\n    } = {maxPriorityFeePerGas: undefined, maxFeePerGas: undefined};\n    if ((chainSymbol as ChainSymbol) === ChainSymbol.POL) {\n      transactionConfig.gas = POLYGON_GAS_LIMIT;\n    } else {\n      transactionConfig.gas = await this.web3.eth.estimateGas(rawTransaction as Web3Transaction);\n    }\n    const { transactionHash } = await this.web3.eth.sendTransaction({\n      ...transactionConfig,\n      ...feeOptions,\n    } as Web3Transaction);\n    return { txId: transactionHash.toString() };\n  }\n\n  private getERC20Contract(contractAddress: string) {\n    return new this.web3.eth.Contract(ERC20.abi, contractAddress) as Contract<typeof ERC20.abi>;\n  }\n}\n"]}