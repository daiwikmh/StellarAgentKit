{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/services/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Big } from \"big.js\";\nimport { Chains } from \"../chains\";\nimport { ApiClientImpl } from \"../client/core-api/api-client\";\nimport { ApiClientCaching } from \"../client/core-api/api-client-caching\";\nimport {\n  AddressStatus,\n  CheckAddressResponse,\n  GasBalanceResponse,\n  Messenger,\n  PendingInfoDTO,\n  TransferStatusResponse,\n} from \"../client/core-api/core-api.model\";\nimport { AllbridgeCoreClientImpl } from \"../client/core-api/core-client-base\";\nimport { AllbridgeCoreClientFiltered, AllbridgeCoreClientFilteredImpl } from \"../client/core-api/core-client-filtered\";\nimport { AllbridgeCoreClientPoolInfoCaching } from \"../client/core-api/core-client-pool-info-caching\";\nimport { mainnet } from \"../configs\";\nimport { AllbridgeCoreSdkOptions, BasicChainProperties, NodeRpcUrls, SdkError } from \"../index\";\nimport {\n  AmountFormat,\n  AmountFormatted,\n  AmountsAndGasFeeOptions,\n  CCTPDoesNotSupportedError,\n  ExtraGasMaxLimitResponse,\n  GasFeeOptions,\n  GetTokenBalanceParams,\n  InsufficientPoolLiquidityError,\n  NodeRpcUrlNotInitializedError,\n  PendingStatusInfoResponse,\n  Provider,\n  SendAmountDetails,\n  SwapAndBridgeCalculationData,\n} from \"../models\";\nimport { ChainDetailsMap, PoolInfo, PoolKeyObject, TokenWithChainDetails } from \"../tokens-info\";\nimport {\n  aprInPercents,\n  convertAmountPrecision,\n  convertFloatAmountToInt,\n  convertIntAmountToFloat,\n  fromSystemPrecision,\n  getFeePercent,\n  getSwapFromVUsdPoolInfo,\n  swapFromVUsd,\n  swapFromVUsdReverse,\n  swapToVUsd,\n  swapToVUsdReverse,\n} from \"../utils/calculation\";\nimport { SYSTEM_PRECISION } from \"../utils/calculation/constants\";\nimport { getSendAmountDetails } from \"../utils/calculation/swap-and-bridge-details\";\nimport {\n  swapAndBridgeFeeCalculation,\n  swapAndBridgeFeeCalculationReverse,\n} from \"../utils/calculation/swap-and-bridge-fee-calc\";\nimport { getPoolInfoByToken, validateAmountDecimals, validateAmountGtZero } from \"../utils/utils\";\nimport { BridgeService, DefaultBridgeService } from \"./bridge\";\nimport { GetNativeTokenBalanceParams } from \"./bridge/models\";\nimport { getExtraGasMaxLimits, getGasFeeOptions } from \"./bridge/utils\";\nimport { DefaultLiquidityPoolService, LiquidityPoolService } from \"./liquidity-pool\";\nimport { DefaultTokenService, TokenService } from \"./token\";\n\nexport class NodeRpcUrlsConfig {\n  constructor(private nodeRpcUrls: NodeRpcUrls) {}\n\n  getNodeRpcUrl(chainSymbol: string): string {\n    const nodeRpcUrl = this.nodeRpcUrls[chainSymbol];\n    if (nodeRpcUrl !== undefined) {\n      return nodeRpcUrl;\n    } else {\n      throw new NodeRpcUrlNotInitializedError(chainSymbol);\n    }\n  }\n}\n\nexport class AllbridgeCoreSdkService {\n  private readonly api: AllbridgeCoreClientFiltered;\n\n  private readonly tokenService: TokenService;\n\n  readonly params: AllbridgeCoreSdkOptions;\n\n  bridge: BridgeService;\n  pool: LiquidityPoolService;\n\n  constructor(nodeRpcUrlsConfig: NodeRpcUrlsConfig, params: AllbridgeCoreSdkOptions = mainnet) {\n    Chains.addChainsProperties(params.additionalChainsProperties as Record<string, BasicChainProperties>);\n    const apiClient = new ApiClientImpl(params);\n    const apiClientCaching = new ApiClientCaching(apiClient);\n    const coreClient = new AllbridgeCoreClientImpl(apiClientCaching);\n    const coreClientPoolInfoCaching = new AllbridgeCoreClientPoolInfoCaching(coreClient);\n    this.api = new AllbridgeCoreClientFilteredImpl(coreClientPoolInfoCaching, params);\n    this.tokenService = new DefaultTokenService(this.api, nodeRpcUrlsConfig, params);\n    this.bridge = new DefaultBridgeService(this.api, nodeRpcUrlsConfig, params, this.tokenService);\n    this.pool = new DefaultLiquidityPoolService(this.api, nodeRpcUrlsConfig, params, this.tokenService);\n    this.params = params;\n  }\n\n  async chainDetailsMap(type: \"swap\" | \"pool\"): Promise<ChainDetailsMap> {\n    return this.api.getChainDetailsMap(type);\n  }\n\n  async tokens(type: \"swap\" | \"pool\"): Promise<TokenWithChainDetails[]> {\n    return this.api.tokens(type);\n  }\n\n  async tokensByChain(chainSymbol: string, type: \"swap\" | \"pool\"): Promise<TokenWithChainDetails[]> {\n    const map = await this.api.getChainDetailsMap(type);\n    const chainDetails = map[chainSymbol];\n    if (!chainDetails) {\n      return [];\n    }\n    return chainDetails.tokens;\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return this.api.getTransferStatus(chainSymbol, txId);\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.api.getGasBalance(chainSymbol, address);\n  }\n\n  async checkAddress(): Promise<CheckAddressResponse> {\n    return new Promise((resolve) => {\n      resolve({\n        status: AddressStatus.OK,\n        gasBalance: null,\n      });\n    });\n  }\n\n  async getPendingStatusInfo(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<PendingStatusInfoResponse> {\n    validateAmountGtZero(amount);\n    let amountInTokenPrecision;\n    if (amountFormat == AmountFormat.FLOAT) {\n      validateAmountDecimals(\"amount\", amount, sourceToken.decimals);\n      amountInTokenPrecision = convertFloatAmountToInt(amount, sourceToken.decimals).toFixed();\n    } else {\n      amountInTokenPrecision = amount;\n    }\n\n    const vUsdAmountInt = swapToVUsd(\n      amountInTokenPrecision,\n      sourceToken,\n      await getPoolInfoByToken(this.api, sourceToken)\n    );\n    const destPoolInfo = await getPoolInfoByToken(this.api, destToken);\n    const amountResultIntFormatted: AmountFormatted = this.getAmountFromVUsdFormatted(\n      vUsdAmountInt,\n      destToken,\n      destPoolInfo\n    );\n\n    let pendingInfoDTO: PendingInfoDTO | undefined;\n    const pendingInfo = await this.api.getPendingInfo();\n    for (const tokenAddress in pendingInfo[destToken.chainSymbol]) {\n      const info = pendingInfo[destToken.chainSymbol];\n      if (!info) {\n        throw new SdkError(\"Cannot find pending info for \" + destToken.chainSymbol);\n      }\n      pendingInfoDTO = info[tokenAddress];\n    }\n    if (pendingInfoDTO) {\n      const destPoolAfterPending = getSwapFromVUsdPoolInfo(pendingInfoDTO.totalSentAmount, destPoolInfo);\n      const amountResultIntAfterPendingFormatted: AmountFormatted = this.getAmountFromVUsdFormatted(\n        vUsdAmountInt,\n        destToken,\n        destPoolAfterPending\n      );\n\n      let estimatedAmount: { min: AmountFormatted; max: AmountFormatted };\n      if (Big(amountResultIntAfterPendingFormatted.int).gt(amountResultIntFormatted.int)) {\n        estimatedAmount = { min: amountResultIntFormatted, max: amountResultIntAfterPendingFormatted };\n      } else {\n        estimatedAmount = { min: amountResultIntAfterPendingFormatted, max: amountResultIntFormatted };\n      }\n\n      return {\n        pendingTxs: pendingInfoDTO.pendingTxs,\n        pendingAmount: {\n          [AmountFormat.INT]: convertAmountPrecision(\n            pendingInfoDTO.totalSentAmount,\n            SYSTEM_PRECISION,\n            destToken.decimals\n          ).toFixed(0),\n          [AmountFormat.FLOAT]: convertIntAmountToFloat(pendingInfoDTO.totalSentAmount, SYSTEM_PRECISION).toFixed(),\n        },\n        estimatedAmount,\n      };\n    }\n    return {\n      pendingTxs: 0,\n      pendingAmount: {\n        [AmountFormat.INT]: \"0\",\n        [AmountFormat.FLOAT]: \"0\",\n      },\n      estimatedAmount: {\n        min: amountResultIntFormatted,\n        max: amountResultIntFormatted,\n      },\n    };\n  }\n\n  async getTokenBalance(params: GetTokenBalanceParams, provider?: Provider): Promise<string> {\n    return this.tokenService.getTokenBalance(params, provider);\n  }\n\n  async getNativeTokenBalance(params: GetNativeTokenBalanceParams, provider?: Provider): Promise<AmountFormatted> {\n    return this.tokenService.getNativeTokenBalance(params, provider);\n  }\n\n  async calculateFeePercentOnSourceChain(\n    amountFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails\n  ): Promise<number> {\n    validateAmountGtZero(amountFloat);\n    validateAmountDecimals(\"amountFloat\", amountFloat, sourceChainToken.decimals);\n    const amountInt = convertFloatAmountToInt(amountFloat, sourceChainToken.decimals);\n    if (amountInt.eq(0)) {\n      return 0;\n    }\n    const vUsdInSystemPrecision = swapToVUsd(\n      amountInt,\n      sourceChainToken,\n      await getPoolInfoByToken(this.api, sourceChainToken)\n    );\n    const vUsdInSourcePrecision = fromSystemPrecision(vUsdInSystemPrecision, sourceChainToken.decimals);\n    return getFeePercent(amountInt, vUsdInSourcePrecision);\n  }\n\n  async calculateFeePercentOnDestinationChain(\n    amountFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails\n  ): Promise<number> {\n    validateAmountGtZero(amountFloat);\n    validateAmountDecimals(\"amountFloat\", amountFloat, sourceChainToken.decimals);\n    const amountInt = convertFloatAmountToInt(amountFloat, sourceChainToken.decimals);\n    if (amountInt.eq(0)) {\n      return 0;\n    }\n    const vUsdInSystemPrecision = swapToVUsd(\n      amountInt,\n      sourceChainToken,\n      await getPoolInfoByToken(this.api, sourceChainToken)\n    );\n    const usd = swapFromVUsd(\n      vUsdInSystemPrecision,\n      destinationChainToken,\n      await getPoolInfoByToken(this.api, destinationChainToken)\n    );\n    const vUsdInDestinationPrecision = fromSystemPrecision(vUsdInSystemPrecision, destinationChainToken.decimals);\n    return getFeePercent(vUsdInDestinationPrecision, usd);\n  }\n\n  async getAmountToBeReceivedAndGasFeeOptions(\n    amountToSendFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<AmountsAndGasFeeOptions> {\n    validateAmountGtZero(amountToSendFloat);\n    validateAmountDecimals(\"amountToSendFloat\", amountToSendFloat, sourceChainToken.decimals);\n    return {\n      amountToSendFloat: Big(amountToSendFloat).toFixed(),\n      amountToBeReceivedFloat: await this.getAmountToBeReceived(\n        amountToSendFloat,\n        sourceChainToken,\n        destinationChainToken,\n        messenger\n      ),\n      gasFeeOptions: await this.getGasFeeOptions(sourceChainToken, destinationChainToken, messenger),\n    };\n  }\n\n  async getAmountToSendAndGasFeeOptions(\n    amountToBeReceivedFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<AmountsAndGasFeeOptions> {\n    validateAmountGtZero(amountToBeReceivedFloat);\n    validateAmountDecimals(\"amountToBeReceivedFloat\", amountToBeReceivedFloat, destinationChainToken.decimals);\n    return {\n      amountToSendFloat: await this.getAmountToSend(\n        amountToBeReceivedFloat,\n        sourceChainToken,\n        destinationChainToken,\n        messenger\n      ),\n      amountToBeReceivedFloat: Big(amountToBeReceivedFloat).toFixed(),\n      gasFeeOptions: await this.getGasFeeOptions(sourceChainToken, destinationChainToken, messenger),\n    };\n  }\n\n  async getAmountToBeReceived(\n    amountToSendFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger?: Messenger\n  ): Promise<string> {\n    const sourcePool: PoolInfo = await getPoolInfoByToken(this.api, sourceChainToken);\n    const destPool: PoolInfo = await getPoolInfoByToken(this.api, destinationChainToken);\n    return this.getAmountToBeReceivedFromPools(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destPool,\n      messenger\n    );\n  }\n\n  async getAmountToBeReceivedFromChain(\n    amountToSendFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger?: Messenger,\n    sourceProvider?: Provider,\n    destinationProvider?: Provider\n  ): Promise<string> {\n    const sourcePool: PoolInfo = await this.pool.getPoolInfoFromChain(sourceChainToken, sourceProvider);\n    const destPool: PoolInfo = await this.pool.getPoolInfoFromChain(destinationChainToken, destinationProvider);\n    return this.getAmountToBeReceivedFromPools(\n      amountToSendFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destPool,\n      messenger\n    );\n  }\n\n  getAmountToBeReceivedFromPools(\n    amountToSendFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    sourcePool: PoolInfo,\n    destinationPool: PoolInfo,\n    messenger?: Messenger\n  ): string {\n    validateAmountGtZero(amountToSendFloat);\n    validateAmountDecimals(\"amountToSendFloat\", amountToSendFloat, sourceChainToken.decimals);\n    const amountToSend = convertFloatAmountToInt(amountToSendFloat, sourceChainToken.decimals);\n\n    if (messenger && messenger == Messenger.CCTP) {\n      if (!sourceChainToken.cctpAddress || !destinationChainToken.cctpAddress || !sourceChainToken.cctpFeeShare) {\n        throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n      }\n      const result = amountToSend.mul(Big(1).minus(sourceChainToken.cctpFeeShare)).round(0, Big.roundUp);\n      const resultInDestPrecision = convertAmountPrecision(\n        result,\n        sourceChainToken.decimals,\n        destinationChainToken.decimals\n      ).round(0);\n      return convertIntAmountToFloat(resultInDestPrecision, destinationChainToken.decimals).toFixed();\n    }\n\n    if (messenger && messenger == Messenger.CCTP_V2) {\n      if (!sourceChainToken.cctpV2Address || !destinationChainToken.cctpV2Address || !sourceChainToken.cctpV2FeeShare) {\n        throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP V2 protocol\");\n      }\n      const result = amountToSend.mul(Big(1).minus(sourceChainToken.cctpV2FeeShare)).round(0, Big.roundUp);\n      const resultInDestPrecision = convertAmountPrecision(\n        result,\n        sourceChainToken.decimals,\n        destinationChainToken.decimals\n      ).round(0);\n\n      return convertIntAmountToFloat(resultInDestPrecision, destinationChainToken.decimals).toFixed();\n    }\n\n    const vUsd = swapToVUsd(amountToSend, sourceChainToken, sourcePool);\n    return this.getAmountFromVUsdFormatted(vUsd, destinationChainToken, destinationPool).float;\n  }\n\n  async getAmountToSend(\n    amountToBeReceivedFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger?: Messenger\n  ): Promise<string> {\n    const sourcePool: PoolInfo = await getPoolInfoByToken(this.api, sourceChainToken);\n    const destPool: PoolInfo = await getPoolInfoByToken(this.api, destinationChainToken);\n    return this.getAmountToSendFromPools(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destPool,\n      messenger\n    );\n  }\n\n  async getAmountToSendFromChain(\n    amountToBeReceivedFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger?: Messenger,\n    sourceProvider?: Provider,\n    destinationProvider?: Provider\n  ): Promise<string> {\n    const sourcePool: PoolInfo = await this.pool.getPoolInfoFromChain(sourceChainToken, sourceProvider);\n    const destPool: PoolInfo = await this.pool.getPoolInfoFromChain(destinationChainToken, destinationProvider);\n    return this.getAmountToSendFromPools(\n      amountToBeReceivedFloat,\n      sourceChainToken,\n      destinationChainToken,\n      sourcePool,\n      destPool,\n      messenger\n    );\n  }\n\n  getAmountToSendFromPools(\n    amountToBeReceivedFloat: number | string | Big,\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    sourcePool: PoolInfo,\n    destinationPool: PoolInfo,\n    messenger?: Messenger\n  ): string {\n    validateAmountGtZero(amountToBeReceivedFloat);\n    validateAmountDecimals(\"amountToBeReceivedFloat\", amountToBeReceivedFloat, destinationChainToken.decimals);\n    const amountToBeReceived = convertFloatAmountToInt(amountToBeReceivedFloat, destinationChainToken.decimals);\n\n    if (messenger && messenger == Messenger.CCTP) {\n      if (!sourceChainToken.cctpAddress || !destinationChainToken.cctpAddress || !sourceChainToken.cctpFeeShare) {\n        throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP protocol\");\n      }\n      const result = amountToBeReceived.div(Big(1).minus(sourceChainToken.cctpFeeShare)).round(0, Big.roundDown);\n      const resultInSourcePrecision = convertAmountPrecision(\n        result,\n        destinationChainToken.decimals,\n        sourceChainToken.decimals\n      ).round(0);\n      return convertIntAmountToFloat(resultInSourcePrecision, sourceChainToken.decimals).toFixed();\n    }\n\n    if (messenger && messenger == Messenger.CCTP_V2) {\n      if (!sourceChainToken.cctpV2Address || !destinationChainToken.cctpV2Address || !sourceChainToken.cctpV2FeeShare) {\n        throw new CCTPDoesNotSupportedError(\"Such route does not support CCTP V2 protocol\");\n      }\n      const result = amountToBeReceived.div(Big(1).minus(sourceChainToken.cctpV2FeeShare)).round(0, Big.roundDown);\n      const resultInSourcePrecision = convertAmountPrecision(\n        result,\n        destinationChainToken.decimals,\n        sourceChainToken.decimals\n      ).round(0);\n      return convertIntAmountToFloat(resultInSourcePrecision, sourceChainToken.decimals).toFixed();\n    }\n\n    const vUsd = swapFromVUsdReverse(amountToBeReceived, destinationChainToken, destinationPool);\n    const resultInt = swapToVUsdReverse(vUsd, sourceChainToken, sourcePool);\n    if (Big(resultInt).lte(0)) {\n      throw new InsufficientPoolLiquidityError();\n    }\n    return convertIntAmountToFloat(resultInt, sourceChainToken.decimals).toFixed();\n  }\n\n  async getGasFeeOptions(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): Promise<GasFeeOptions> {\n    return getGasFeeOptions(\n      sourceChainToken.allbridgeChainId,\n      sourceChainToken.chainType,\n      destinationChainToken.allbridgeChainId,\n      sourceChainToken.decimals,\n      messenger,\n      this.api\n    );\n  }\n\n  getAverageTransferTime(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails,\n    messenger: Messenger\n  ): number | null {\n    return sourceChainToken.transferTime?.[destinationChainToken.chainSymbol]?.[messenger] ?? null;\n  }\n\n  async getPoolInfoByToken(token: TokenWithChainDetails): Promise<PoolInfo> {\n    return await this.api.getPoolInfoByKey({ chainSymbol: token.chainSymbol, poolAddress: token.poolAddress });\n  }\n\n  async refreshPoolInfo(tokens?: TokenWithChainDetails | TokenWithChainDetails[]): Promise<void> {\n    if (tokens) {\n      const tokensArray = tokens instanceof Array ? tokens : [tokens];\n      const poolKeys: PoolKeyObject[] = tokensArray.map((t) => {\n        return { chainSymbol: t.chainSymbol, poolAddress: t.poolAddress };\n      });\n      return this.api.refreshPoolInfo(poolKeys);\n    }\n    return this.api.refreshPoolInfo();\n  }\n\n  aprInPercents(apr: string): string {\n    return aprInPercents(apr);\n  }\n\n  async getExtraGasMaxLimits(\n    sourceChainToken: TokenWithChainDetails,\n    destinationChainToken: TokenWithChainDetails\n  ): Promise<ExtraGasMaxLimitResponse> {\n    return await getExtraGasMaxLimits(sourceChainToken, destinationChainToken, this.api);\n  }\n\n  async getVUsdFromAmount(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails\n  ): Promise<AmountFormatted> {\n    validateAmountGtZero(amount);\n    let amountInTokenPrecision;\n    if (amountFormat == AmountFormat.FLOAT) {\n      validateAmountDecimals(\"amount\", amount, sourceToken.decimals);\n      amountInTokenPrecision = convertFloatAmountToInt(amount, sourceToken.decimals).toFixed();\n    } else {\n      amountInTokenPrecision = amount;\n    }\n\n    const vUsdAmount = swapToVUsd(amountInTokenPrecision, sourceToken, await getPoolInfoByToken(this.api, sourceToken));\n    return {\n      [AmountFormat.INT]: vUsdAmount,\n      [AmountFormat.FLOAT]: convertIntAmountToFloat(vUsdAmount, SYSTEM_PRECISION).toFixed(),\n    };\n  }\n\n  async getAmountFromVUsd(vUsdAmount: string, destToken: TokenWithChainDetails): Promise<AmountFormatted> {\n    return this.getAmountFromVUsdFormatted(vUsdAmount, destToken, await getPoolInfoByToken(this.api, destToken));\n  }\n\n  private getAmountFromVUsdFormatted(\n    vUsdAmountInt: string,\n    destToken: TokenWithChainDetails,\n    destPoolInfo: Pick<PoolInfo, \"vUsdBalance\" | \"aValue\" | \"dValue\" | \"tokenBalance\">\n  ): AmountFormatted {\n    validateAmountGtZero(vUsdAmountInt);\n    const amountResultInt = swapFromVUsd(vUsdAmountInt, destToken, destPoolInfo);\n    if (Big(amountResultInt).lt(0)) {\n      throw new InsufficientPoolLiquidityError();\n    }\n    return {\n      [AmountFormat.INT]: amountResultInt,\n      [AmountFormat.FLOAT]: convertIntAmountToFloat(amountResultInt, destToken.decimals).toFixed(),\n    };\n  }\n\n  async swapAndBridgeFeeCalculation(\n    amountInTokenPrecision: string,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SwapAndBridgeCalculationData> {\n    return swapAndBridgeFeeCalculation(\n      amountInTokenPrecision,\n      {\n        decimals: sourceToken.decimals,\n        feeShare: sourceToken.feeShare,\n        poolInfo: await getPoolInfoByToken(this.api, sourceToken),\n      },\n      {\n        decimals: destToken.decimals,\n        feeShare: destToken.feeShare,\n        poolInfo: await getPoolInfoByToken(this.api, destToken),\n      }\n    );\n  }\n\n  async swapAndBridgeFeeCalculationReverse(\n    amountInTokenPrecision: string,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SwapAndBridgeCalculationData> {\n    const result = swapAndBridgeFeeCalculationReverse(\n      amountInTokenPrecision,\n      {\n        decimals: sourceToken.decimals,\n        feeShare: sourceToken.feeShare,\n        poolInfo: await getPoolInfoByToken(this.api, sourceToken),\n      },\n      {\n        decimals: destToken.decimals,\n        feeShare: destToken.feeShare,\n        poolInfo: await getPoolInfoByToken(this.api, destToken),\n      }\n    );\n    const newAmount = result.swapFromVUsdCalcResult.amountIncludingCommissionInTokenPrecision;\n    if (Big(newAmount).lt(0)) {\n      throw new InsufficientPoolLiquidityError();\n    }\n    return result;\n  }\n\n  async getSendAmountDetails(\n    amount: string,\n    amountFormat: AmountFormat,\n    sourceToken: TokenWithChainDetails,\n    destToken: TokenWithChainDetails\n  ): Promise<SendAmountDetails> {\n    validateAmountGtZero(amount);\n    let amountInTokenPrecision;\n    if (amountFormat == AmountFormat.FLOAT) {\n      validateAmountDecimals(\"amount\", amount, sourceToken.decimals);\n      amountInTokenPrecision = convertFloatAmountToInt(amount, sourceToken.decimals).toFixed();\n    } else {\n      amountInTokenPrecision = amount;\n    }\n\n    return getSendAmountDetails(\n      amountInTokenPrecision,\n      sourceToken,\n      await getPoolInfoByToken(this.api, sourceToken),\n      destToken,\n      await getPoolInfoByToken(this.api, destToken)\n    );\n  }\n}\n"]}