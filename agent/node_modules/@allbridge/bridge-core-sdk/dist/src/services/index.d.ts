import { Big } from "big.js";
import { CheckAddressResponse, GasBalanceResponse, Messenger, TransferStatusResponse } from "../client/core-api/core-api.model";
import { AllbridgeCoreSdkOptions, NodeRpcUrls } from "../index";
import { AmountFormat, AmountFormatted, AmountsAndGasFeeOptions, ExtraGasMaxLimitResponse, GasFeeOptions, GetTokenBalanceParams, PendingStatusInfoResponse, Provider, SendAmountDetails, SwapAndBridgeCalculationData } from "../models";
import { ChainDetailsMap, PoolInfo, TokenWithChainDetails } from "../tokens-info";
import { BridgeService } from "./bridge";
import { GetNativeTokenBalanceParams } from "./bridge/models";
import { LiquidityPoolService } from "./liquidity-pool";
export declare class NodeRpcUrlsConfig {
    private nodeRpcUrls;
    constructor(nodeRpcUrls: NodeRpcUrls);
    getNodeRpcUrl(chainSymbol: string): string;
}
export declare class AllbridgeCoreSdkService {
    private readonly api;
    private readonly tokenService;
    readonly params: AllbridgeCoreSdkOptions;
    bridge: BridgeService;
    pool: LiquidityPoolService;
    constructor(nodeRpcUrlsConfig: NodeRpcUrlsConfig, params?: AllbridgeCoreSdkOptions);
    chainDetailsMap(type: "swap" | "pool"): Promise<ChainDetailsMap>;
    tokens(type: "swap" | "pool"): Promise<TokenWithChainDetails[]>;
    tokensByChain(chainSymbol: string, type: "swap" | "pool"): Promise<TokenWithChainDetails[]>;
    getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse>;
    getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse>;
    checkAddress(): Promise<CheckAddressResponse>;
    getPendingStatusInfo(amount: string, amountFormat: AmountFormat, sourceToken: TokenWithChainDetails, destToken: TokenWithChainDetails): Promise<PendingStatusInfoResponse>;
    getTokenBalance(params: GetTokenBalanceParams, provider?: Provider): Promise<string>;
    getNativeTokenBalance(params: GetNativeTokenBalanceParams, provider?: Provider): Promise<AmountFormatted>;
    calculateFeePercentOnSourceChain(amountFloat: number | string | Big, sourceChainToken: TokenWithChainDetails): Promise<number>;
    calculateFeePercentOnDestinationChain(amountFloat: number | string | Big, sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails): Promise<number>;
    getAmountToBeReceivedAndGasFeeOptions(amountToSendFloat: number | string | Big, sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, messenger: Messenger): Promise<AmountsAndGasFeeOptions>;
    getAmountToSendAndGasFeeOptions(amountToBeReceivedFloat: number | string | Big, sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, messenger: Messenger): Promise<AmountsAndGasFeeOptions>;
    getAmountToBeReceived(amountToSendFloat: number | string | Big, sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, messenger?: Messenger): Promise<string>;
    getAmountToBeReceivedFromChain(amountToSendFloat: number | string | Big, sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, messenger?: Messenger, sourceProvider?: Provider, destinationProvider?: Provider): Promise<string>;
    getAmountToBeReceivedFromPools(amountToSendFloat: number | string | Big, sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, sourcePool: PoolInfo, destinationPool: PoolInfo, messenger?: Messenger): string;
    getAmountToSend(amountToBeReceivedFloat: number | string | Big, sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, messenger?: Messenger): Promise<string>;
    getAmountToSendFromChain(amountToBeReceivedFloat: number | string | Big, sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, messenger?: Messenger, sourceProvider?: Provider, destinationProvider?: Provider): Promise<string>;
    getAmountToSendFromPools(amountToBeReceivedFloat: number | string | Big, sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, sourcePool: PoolInfo, destinationPool: PoolInfo, messenger?: Messenger): string;
    getGasFeeOptions(sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, messenger: Messenger): Promise<GasFeeOptions>;
    getAverageTransferTime(sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails, messenger: Messenger): number | null;
    getPoolInfoByToken(token: TokenWithChainDetails): Promise<PoolInfo>;
    refreshPoolInfo(tokens?: TokenWithChainDetails | TokenWithChainDetails[]): Promise<void>;
    aprInPercents(apr: string): string;
    getExtraGasMaxLimits(sourceChainToken: TokenWithChainDetails, destinationChainToken: TokenWithChainDetails): Promise<ExtraGasMaxLimitResponse>;
    getVUsdFromAmount(amount: string, amountFormat: AmountFormat, sourceToken: TokenWithChainDetails): Promise<AmountFormatted>;
    getAmountFromVUsd(vUsdAmount: string, destToken: TokenWithChainDetails): Promise<AmountFormatted>;
    private getAmountFromVUsdFormatted;
    swapAndBridgeFeeCalculation(amountInTokenPrecision: string, sourceToken: TokenWithChainDetails, destToken: TokenWithChainDetails): Promise<SwapAndBridgeCalculationData>;
    swapAndBridgeFeeCalculationReverse(amountInTokenPrecision: string, sourceToken: TokenWithChainDetails, destToken: TokenWithChainDetails): Promise<SwapAndBridgeCalculationData>;
    getSendAmountDetails(amount: string, amountFormat: AmountFormat, sourceToken: TokenWithChainDetails, destToken: TokenWithChainDetails): Promise<SendAmountDetails>;
}
