{"version":3,"file":"core-client-base.js","sourceRoot":"","sources":["../../../../src/client/core-api/core-client-base.ts"],"names":[],"mappings":";;;AA8CA,MAAa,uBAAuB;IACd;IAApB,YAAoB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;IAAG,CAAC;IAE5C,KAAK,CAAC,kBAAkB;QACtB,OAAO,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,eAAe,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,MAAM;QACV,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5C,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC3E,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,WAAmB,EAAE,OAAe;QACtD,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC5D,CAAC;IAED,KAAK,CAAC,gCAAgC;QAIpC,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,WAAmB,EAAE,IAAY;QACvD,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACnE,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,IAAmC;QACjE,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;IAC9D,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,KAAsC;QACzD,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC;CACF;AAtCD,0DAsCC","sourcesContent":["import {\n  ChainDetailsMapWithFlags,\n  PoolInfoMap,\n  PoolKeyObject,\n  TokenWithChainDetailsWithFlags,\n} from \"../../tokens-info\";\nimport { ApiClient } from \"./api-client\";\nimport {\n  GasBalanceResponse,\n  PendingInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\n\nexport interface AllbridgeCoreClientParams {\n  coreApiUrl: string;\n  coreApiHeaders?: Record<string, string>;\n  coreApiQueryParams?: Record<string, string>;\n}\n\nexport interface AllbridgeCoreClient {\n  getPendingInfo(): Promise<PendingInfoResponse>;\n\n  getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse>;\n\n  getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse>;\n\n  getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse>;\n}\n\nexport interface AllbridgeCoreClientWithTokens extends AllbridgeCoreClient {\n  getChainDetailsMap(): Promise<ChainDetailsMapWithFlags>;\n\n  tokens(): Promise<TokenWithChainDetailsWithFlags[]>;\n}\n\nexport interface AllbridgeCoreClientWithPoolInfo extends AllbridgeCoreClientWithTokens {\n  getChainDetailsMapAndPoolInfoMap(): Promise<{\n    chainDetailsMap: ChainDetailsMapWithFlags;\n    poolInfoMap: PoolInfoMap;\n  }>;\n\n  getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap>;\n}\n\nexport class AllbridgeCoreClientImpl implements AllbridgeCoreClientWithPoolInfo {\n  constructor(private apiClient: ApiClient) {}\n\n  async getChainDetailsMap(): Promise<ChainDetailsMapWithFlags> {\n    return (await this.apiClient.getTokenInfo()).chainDetailsMap;\n  }\n\n  async tokens(): Promise<TokenWithChainDetailsWithFlags[]> {\n    const map = await this.getChainDetailsMap();\n    return Object.values(map).flatMap((chainDetails) => chainDetails.tokens);\n  }\n\n  async getPendingInfo(): Promise<PendingInfoResponse> {\n    return this.apiClient.getPendingInfo();\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.apiClient.getGasBalance(chainSymbol, address);\n  }\n\n  async getChainDetailsMapAndPoolInfoMap(): Promise<{\n    chainDetailsMap: ChainDetailsMapWithFlags;\n    poolInfoMap: PoolInfoMap;\n  }> {\n    return await this.apiClient.getTokenInfo();\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return await this.apiClient.getTransferStatus(chainSymbol, txId);\n  }\n\n  async getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    return await this.apiClient.getReceiveTransactionCost(args);\n  }\n\n  async getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap> {\n    return await this.apiClient.getPoolInfoMap(pools);\n  }\n}\n"]}