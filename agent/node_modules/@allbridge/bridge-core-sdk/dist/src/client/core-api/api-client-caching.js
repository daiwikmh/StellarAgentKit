"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClientCaching = void 0;
const timed_cache_1 = __importDefault(require("timed-cache"));
const _20_SECONDS_TTL = 20 * 1000;
const _55_SECONDS_TTL = 55 * 1000;
class ApiClientCaching {
    apiClient;
    tokenInfoCache;
    pendingInfoCache;
    gasBalanceCache;
    receivedTransactionCache;
    constructor(apiClient) {
        this.apiClient = apiClient;
        this.tokenInfoCache = new timed_cache_1.default({ defaultTtl: _55_SECONDS_TTL });
        this.receivedTransactionCache = new timed_cache_1.default({ defaultTtl: _20_SECONDS_TTL });
        this.pendingInfoCache = new timed_cache_1.default({ defaultTtl: _20_SECONDS_TTL });
        this.gasBalanceCache = new timed_cache_1.default({ defaultTtl: _20_SECONDS_TTL });
    }
    getTokenInfo() {
        const TOKEN_INFO_CACHE_KEY = "TOKEN_INFO_CACHE_KEY";
        const tokenInfo = this.tokenInfoCache.get(TOKEN_INFO_CACHE_KEY);
        if (tokenInfo) {
            return tokenInfo;
        }
        const tokenInfoPromise = this.apiClient.getTokenInfo();
        this.tokenInfoCache.put(TOKEN_INFO_CACHE_KEY, tokenInfoPromise);
        return tokenInfoPromise;
    }
    async getGasBalance(chainSymbol, address) {
        const GAS_BALANCE_CACHE_KEY = `GAS_BALANCE_${chainSymbol}_${address}`;
        const gasBalance = this.gasBalanceCache.get(GAS_BALANCE_CACHE_KEY);
        if (gasBalance) {
            return gasBalance;
        }
        const gasBalancePromise = this.apiClient.getGasBalance(chainSymbol, address);
        this.gasBalanceCache.put(GAS_BALANCE_CACHE_KEY, gasBalancePromise);
        return gasBalancePromise;
    }
    async getPendingInfo() {
        const PENDING_INFO_CACHE_KEY = "PENDING_INFO_CACHE_KEY";
        const pendingInfo = this.pendingInfoCache.get(PENDING_INFO_CACHE_KEY);
        if (pendingInfo) {
            return pendingInfo;
        }
        const pendingInfoPromise = this.apiClient.getPendingInfo();
        this.pendingInfoCache.put(PENDING_INFO_CACHE_KEY, pendingInfoPromise);
        return pendingInfoPromise;
    }
    async getReceiveTransactionCost(args) {
        const RECEIVE_TX_COST_KEY = `RECEIVE_TX_COST_${args.sourceChainId}_${args.destinationChainId}_${args.messenger}`;
        const transactionCost = this.receivedTransactionCache.get(RECEIVE_TX_COST_KEY);
        if (transactionCost) {
            return transactionCost;
        }
        const fetchedTransactionCost = await this.apiClient.getReceiveTransactionCost(args);
        this.receivedTransactionCache.put(RECEIVE_TX_COST_KEY, fetchedTransactionCost);
        return fetchedTransactionCost;
    }
    async getTransferStatus(chainSymbol, txId) {
        return this.apiClient.getTransferStatus(chainSymbol, txId);
    }
    async getPoolInfoMap(pools) {
        return this.apiClient.getPoolInfoMap(pools);
    }
}
exports.ApiClientCaching = ApiClientCaching;
//# sourceMappingURL=api-client-caching.js.map