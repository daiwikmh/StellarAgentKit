import { AllbridgeCoreSdkOptions } from "../../index";
import { ChainDetailsMap, PoolInfo, PoolKeyObject, TokenWithChainDetails } from "../../tokens-info";
import { GasBalanceResponse, PendingInfoResponse, ReceiveTransactionCostRequest, ReceiveTransactionCostResponse, TransferStatusResponse } from "./core-api.model";
import { AllbridgeCoreClient, AllbridgeCoreClientWithTokens } from "./core-client-base";
import { AllbridgeCoreClientPoolsExt } from "./core-client-pool-info-caching";
export interface AllbridgeCoreClientFiltered extends AllbridgeCoreClient, AllbridgeCoreClientPoolsExt {
    getChainDetailsMap(type: "swap" | "pool"): Promise<ChainDetailsMap>;
    tokens(type: "swap" | "pool"): Promise<TokenWithChainDetails[]>;
}
export declare class AllbridgeCoreClientFilteredImpl implements AllbridgeCoreClientFiltered {
    private client;
    private readonly isStaging;
    constructor(client: AllbridgeCoreClientWithTokens & AllbridgeCoreClientPoolsExt, params: AllbridgeCoreSdkOptions);
    getChainDetailsMap(type: "swap" | "pool"): Promise<ChainDetailsMap>;
    tokens(type: "swap" | "pool"): Promise<TokenWithChainDetails[]>;
    getPendingInfo(): Promise<PendingInfoResponse>;
    getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse>;
    getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse>;
    getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse>;
    cachePut(poolKeyObject: PoolKeyObject, poolInfo: PoolInfo): void;
    getPoolInfoByKey(poolKeyObject: PoolKeyObject): Promise<PoolInfo>;
    refreshPoolInfo(poolKeyObjects?: PoolKeyObject | PoolKeyObject[]): Promise<void>;
}
