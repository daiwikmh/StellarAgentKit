{"version":3,"file":"api-client-caching.js","sourceRoot":"","sources":["../../../../src/client/core-api/api-client-caching.ts"],"names":[],"mappings":"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","sourcesContent":["import Cache from \"timed-cache\";\nimport { PoolInfoMap, PoolKeyObject } from \"../../tokens-info\";\nimport { ApiClient, TokenInfo } from \"./api-client\";\nimport {\n  GasBalanceResponse,\n  PendingInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\n\nconst _20_SECONDS_TTL = 20 * 1000;\nconst _55_SECONDS_TTL = 55 * 1000;\n\nexport class ApiClientCaching implements ApiClient {\n  private tokenInfoCache: Cache<Promise<TokenInfo>>;\n  private pendingInfoCache: Cache<Promise<PendingInfoResponse>>;\n  private gasBalanceCache: Cache<Promise<GasBalanceResponse>>;\n  private receivedTransactionCache: Cache<ReceiveTransactionCostResponse>;\n\n  constructor(private apiClient: ApiClient) {\n    this.tokenInfoCache = new Cache({ defaultTtl: _55_SECONDS_TTL });\n    this.receivedTransactionCache = new Cache({ defaultTtl: _20_SECONDS_TTL });\n    this.pendingInfoCache = new Cache({ defaultTtl: _20_SECONDS_TTL });\n    this.gasBalanceCache = new Cache({ defaultTtl: _20_SECONDS_TTL });\n  }\n\n  getTokenInfo(): Promise<TokenInfo> {\n    const TOKEN_INFO_CACHE_KEY = \"TOKEN_INFO_CACHE_KEY\";\n    const tokenInfo = this.tokenInfoCache.get(TOKEN_INFO_CACHE_KEY);\n    if (tokenInfo) {\n      return tokenInfo;\n    }\n    const tokenInfoPromise = this.apiClient.getTokenInfo();\n    this.tokenInfoCache.put(TOKEN_INFO_CACHE_KEY, tokenInfoPromise);\n    return tokenInfoPromise;\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    const GAS_BALANCE_CACHE_KEY = `GAS_BALANCE_${chainSymbol}_${address}`;\n    const gasBalance = this.gasBalanceCache.get(GAS_BALANCE_CACHE_KEY);\n    if (gasBalance) {\n      return gasBalance;\n    }\n    const gasBalancePromise = this.apiClient.getGasBalance(chainSymbol, address);\n    this.gasBalanceCache.put(GAS_BALANCE_CACHE_KEY, gasBalancePromise);\n    return gasBalancePromise;\n  }\n\n  async getPendingInfo(): Promise<PendingInfoResponse> {\n    const PENDING_INFO_CACHE_KEY = \"PENDING_INFO_CACHE_KEY\";\n    const pendingInfo = this.pendingInfoCache.get(PENDING_INFO_CACHE_KEY);\n    if (pendingInfo) {\n      return pendingInfo;\n    }\n    const pendingInfoPromise = this.apiClient.getPendingInfo();\n    this.pendingInfoCache.put(PENDING_INFO_CACHE_KEY, pendingInfoPromise);\n    return pendingInfoPromise;\n  }\n\n  async getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    const RECEIVE_TX_COST_KEY = `RECEIVE_TX_COST_${args.sourceChainId}_${args.destinationChainId}_${args.messenger}`;\n    const transactionCost = this.receivedTransactionCache.get(RECEIVE_TX_COST_KEY);\n    if (transactionCost) {\n      return transactionCost;\n    }\n    const fetchedTransactionCost = await this.apiClient.getReceiveTransactionCost(args);\n    this.receivedTransactionCache.put(RECEIVE_TX_COST_KEY, fetchedTransactionCost);\n    return fetchedTransactionCost;\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return this.apiClient.getTransferStatus(chainSymbol, txId);\n  }\n\n  async getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap> {\n    return this.apiClient.getPoolInfoMap(pools);\n  }\n}\n"]}