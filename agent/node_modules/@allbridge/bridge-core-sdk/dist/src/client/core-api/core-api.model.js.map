{"version":3,"file":"core-api.model.js","sourceRoot":"","sources":["../../../../src/client/core-api/core-api.model.ts"],"names":[],"mappings":";;;AAeA,IAAY,aAOX;AAPD,WAAY,aAAa;IACvB,0BAAS,CAAA;IACT,oCAAmB,CAAA;IACnB,wCAAuB,CAAA;IACvB,gDAA+B,CAAA;IAC/B,sDAAqC,CAAA;IACrC,kFAAiE,CAAA;AACnE,CAAC,EAPW,aAAa,6BAAb,aAAa,QAOxB;AA8BD,IAAY,eAKX;AALD,WAAY,eAAe;IACzB,0CAAuB,CAAA;IACvB,wCAAqB,CAAA;IACrB,gCAAa,CAAA;IACb,qCAAkB,CAAA;AACpB,CAAC,EALW,eAAe,+BAAf,eAAe,QAK1B;AAcD,IAAY,SAKX;AALD,WAAY,SAAS;IACnB,mDAAa,CAAA;IACb,iDAAY,CAAA;IACZ,yCAAQ,CAAA;IACR,+CAAW,CAAA;AACb,CAAC,EALW,SAAS,yBAAT,SAAS,QAKpB","sourcesContent":["import { ChainSymbol } from \"../../chains/chain.enums\";\nimport { PoolInfo, SuiAddresses } from \"../../tokens-info\";\n\nexport type ChainDetailsResponse = Record<string, ChainDetailsDTO>;\n\nexport interface ChainDetailsDTO {\n  tokens: TokenDTO[];\n  chainId: number;\n  bridgeAddress: string;\n  transferTime: TransferTimeDTO;\n  txCostAmount: TxCostAmountDTO;\n  confirmations: number;\n  suiAddresses?: SuiAddresses;\n}\n\nexport enum AddressStatus {\n  OK = \"OK\",\n  INVALID = \"INVALID\",\n  FORBIDDEN = \"FORBIDDEN\",\n  UNINITIALIZED = \"UNINITIALIZED\",\n  CONTRACT_ADDRESS = \"CONTRACT_ADDRESS\",\n  WRONG_ASSOCIATED_ACCOUNT_OWNER = \"WRONG_ASSOCIATED_ACCOUNT_OWNER\",\n}\n\nexport interface TokenDTO {\n  symbol: string;\n  name: string;\n  decimals: number;\n  poolAddress: string;\n  tokenAddress: string;\n  poolInfo: PoolInfoDTO;\n  feeShare: string;\n  apr: string;\n  apr7d: string;\n  apr30d: string;\n  lpRate: string;\n  flags: {\n    swap: boolean;\n    pool: boolean;\n  };\n}\n\nexport interface PoolInfoDTO {\n  aValue: string;\n  dValue: string;\n  tokenBalance: string;\n  vUsdBalance: string;\n  totalLpAmount: string;\n  accRewardPerShareP: string;\n  p: number;\n}\n\nexport enum MessengerKeyDTO {\n  ALLBRIDGE = \"allbridge\",\n  WORMHOLE = \"wormhole\",\n  CCTP = \"cctp\",\n  CCTP_V2 = \"cctpV2\",\n}\n\nexport type TransferTimeDTO = Record<string, MessengerTransferTimeDTO>;\n\nexport interface TxCostAmountDTO {\n  maxAmount: string;\n  swap: string;\n  transfer: string;\n}\n\nexport type MessengerTransferTimeDTO = {\n  [messenger in MessengerKeyDTO]: number;\n};\n\nexport enum Messenger {\n  ALLBRIDGE = 1,\n  WORMHOLE = 2,\n  CCTP = 3,\n  CCTP_V2 = 4,\n}\n\nexport interface ReceiveTransactionCostRequest {\n  sourceChainId: number;\n  destinationChainId: number;\n  messenger: Messenger;\n}\n\nexport interface ReceiveTransactionCostResponse {\n  exchangeRate: string;\n  fee: string;\n  sourceNativeTokenPrice: string;\n}\n\nexport interface GasBalanceResponse {\n  gasBalance: string | null;\n  status: AddressStatus;\n}\n\nexport interface CheckAddressResponse {\n  gasBalance: string | null;\n  status: AddressStatus;\n}\n\nexport interface TransferStatusResponse {\n  txId: string;\n\n  sourceChainSymbol: ChainSymbol;\n  destinationChainSymbol: ChainSymbol;\n\n  sendAmount: string;\n  sendAmountFormatted: number;\n\n  stableFee: string;\n  stableFeeFormatted: number;\n\n  sourceTokenAddress: string;\n  destinationTokenAddress: string;\n\n  originSourceTokenAddress?: string;\n  originDestinationTokenAddress?: string;\n\n  senderAddress: string;\n  recipientAddress: string;\n\n  signaturesCount: number;\n  signaturesNeeded: number;\n\n  send: BridgeTransaction;\n  receive?: BridgeTransaction;\n\n  responseTime?: number;\n}\n\nexport interface BridgeTransaction {\n  txId: string;\n\n  sourceChainId: number;\n  destinationChainId: number;\n\n  fee: string;\n  feeFormatted: number;\n\n  stableFee: string;\n  stableFeeFormatted: number;\n\n  amount: string;\n  amountFormatted: number;\n  virtualAmount: string;\n\n  bridgeContract: string;\n  sender: string;\n  recipient: string;\n\n  sourceTokenAddress: string;\n  destinationTokenAddress: string;\n\n  originSourceTokenAddress?: string;\n  originDestinationTokenAddress?: string;\n\n  hash: string;\n\n  messenger: Messenger;\n\n  blockTime: number;\n  blockId: string;\n\n  confirmations: number;\n  confirmationsNeeded: number;\n\n  isClaimable?: boolean;\n}\n\nexport type PoolInfoResponse = Record<ChainSymbol, PoolInfo>;\nexport type PendingInfoResponse = Partial<Record<ChainSymbol, TokenPendingInfoDTO>>;\nexport type TokenPendingInfoDTO = Record<string, PendingInfoDTO>;\n\nexport interface PendingInfoDTO {\n  pendingTxs: number;\n  totalSentAmount: string;\n}\n"]}