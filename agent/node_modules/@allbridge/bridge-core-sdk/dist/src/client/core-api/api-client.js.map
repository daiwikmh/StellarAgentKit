{"version":3,"file":"api-client.js","sourceRoot":"","sources":["../../../../src/client/core-api/api-client.ts"],"names":[],"mappings":";;;;;;AAAA,kDAAqC;AAErC,2CAAwC;AACxC,uDAI2B;AA+B3B,MAAa,aAAa;IAChB,GAAG,CAAQ;IAEnB,YAAY,MAAiC;QAC3C,IAAI,CAAC,GAAG,GAAG,eAAK,CAAC,MAAM,CAAC;YACtB,OAAO,EAAE,MAAM,CAAC,UAAU;YAC1B,OAAO,EAAE;gBACP,MAAM,EAAE,kBAAkB;gBAC1B,GAAG,MAAM,CAAC,cAAc;gBACxB,aAAa,EAAE,mBAAmB,GAAG,iBAAO;aAC7C;YACD,MAAM,EAAE,MAAM,CAAC,kBAAkB;SAClC,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,YAAY;QAChB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAuB,aAAa,EAAE,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QACxG,OAAO;YACL,eAAe,EAAE,IAAA,0DAAwC,EAAC,IAAI,CAAC;YAC/D,WAAW,EAAE,IAAA,sDAAoC,EAAC,IAAI,CAAC;SACxD,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAsB,eAAe,CAAC,CAAC;QAC1E,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,WAAmB,EAAE,OAAe;QACtD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAqB,UAAU,WAAW,IAAI,OAAO,EAAE,CAAC,CAAC;QAC5F,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,WAAmB,EAAE,IAAY;QACvD,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAyB,UAAU,WAAW,IAAI,IAAI,EAAE,CAAC,CAAC;QAC7F,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,IAAmC;QACjE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAiC,cAAc,EAAE,IAAI,EAAE;YACzF,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;SACF,CAAC,CAAC;QACH,OAAO;YACL,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,sBAAsB,EAAE,IAAI,CAAC,sBAAsB;SACpD,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,KAAsC;QACzD,MAAM,QAAQ,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAC1D,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAClC,YAAY,EACZ,EAAE,KAAK,EAAE,QAAQ,EAAE,EACnB;YACE,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;aACnC;SACF,CACF,CAAC;QACF,OAAO,IAAA,kDAAgC,EAAC,IAAI,CAAC,CAAC;IAChD,CAAC;CACF;AAhED,sCAgEC","sourcesContent":["import axios, { Axios } from \"axios\";\nimport { ChainDetailsMapWithFlags, PoolInfoMap, PoolKeyObject } from \"../../tokens-info\";\nimport { VERSION } from \"../../version\";\nimport {\n  mapChainDetailsResponseToChainDetailsMap,\n  mapChainDetailsResponseToPoolInfoMap,\n  mapPoolInfoResponseToPoolInfoMap,\n} from \"./core-api-mapper\";\nimport {\n  ChainDetailsResponse,\n  GasBalanceResponse,\n  PendingInfoResponse,\n  PoolInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\nimport { AllbridgeCoreClientParams } from \"./core-client-base\";\n\nexport interface TokenInfo {\n  chainDetailsMap: ChainDetailsMapWithFlags;\n  poolInfoMap: PoolInfoMap;\n}\n\nexport interface ApiClient {\n  getTokenInfo(): Promise<TokenInfo>;\n\n  getPendingInfo(): Promise<PendingInfoResponse>;\n\n  getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse>;\n\n  getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse>;\n\n  getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse>;\n\n  getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap>;\n}\n\nexport class ApiClientImpl implements ApiClient {\n  private api: Axios;\n\n  constructor(params: AllbridgeCoreClientParams) {\n    this.api = axios.create({\n      baseURL: params.coreApiUrl,\n      headers: {\n        Accept: \"application/json\",\n        ...params.coreApiHeaders,\n        \"x-Sdk-Agent\": \"AllbridgeCoreSDK/\" + VERSION,\n      },\n      params: params.coreApiQueryParams,\n    });\n  }\n\n  async getTokenInfo(): Promise<TokenInfo> {\n    const { data } = await this.api.get<ChainDetailsResponse>(\"/token-info\", { params: { filter: \"all\" } });\n    return {\n      chainDetailsMap: mapChainDetailsResponseToChainDetailsMap(data),\n      poolInfoMap: mapChainDetailsResponseToPoolInfoMap(data),\n    };\n  }\n\n  async getPendingInfo(): Promise<PendingInfoResponse> {\n    const { data } = await this.api.get<PendingInfoResponse>(\"/pending-info\");\n    return data;\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    const { data } = await this.api.get<GasBalanceResponse>(`/check/${chainSymbol}/${address}`);\n    return data;\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    const { data } = await this.api.get<TransferStatusResponse>(`/chain/${chainSymbol}/${txId}`);\n    return data;\n  }\n\n  async getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    const { data } = await this.api.post<ReceiveTransactionCostResponse>(\"/receive-fee\", args, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n    return {\n      exchangeRate: data.exchangeRate,\n      fee: data.fee,\n      sourceNativeTokenPrice: data.sourceNativeTokenPrice,\n    };\n  }\n\n  async getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap> {\n    const poolKeys = pools instanceof Array ? pools : [pools];\n    const { data } = await this.api.post<PoolInfoResponse>(\n      \"/pool-info\",\n      { pools: poolKeys },\n      {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    return mapPoolInfoResponseToPoolInfoMap(data);\n  }\n}\n"]}