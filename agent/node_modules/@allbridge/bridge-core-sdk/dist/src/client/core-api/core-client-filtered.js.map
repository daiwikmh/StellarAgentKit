{"version":3,"file":"core-client-filtered.js","sourceRoot":"","sources":["../../../../src/client/core-api/core-client-filtered.ts"],"names":[],"mappings":";;;AAwBA,MAAa,+BAA+B;IAIhC;IAHO,SAAS,CAAU;IAEpC,YACU,MAAmE,EAC3E,MAA+B;QADvB,WAAM,GAAN,MAAM,CAA6D;QAG3E,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,kBAAkB,EAAE,OAAO,KAAK,MAAM,CAAC;IACjE,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,IAAqB;QAC5C,MAAM,wBAAwB,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC;QACxE,MAAM,MAAM,GAAoB,EAAE,CAAC;QAEnC,KAAK,MAAM,GAAG,IAAI,wBAAwB,EAAE,CAAC;YAC3C,MAAM,8BAA8B,GAAG,wBAAwB,CAAC,GAAG,CAAC,CAAC;YACrE,IAAI,8BAA8B,EAAE,CAAC;gBACnC,MAAM,CAAC,GAAG,CAAC,GAAG;oBACZ,GAAG,8BAA8B;oBACjC,MAAM,EAAE,uCAAuC,CAAC,8BAA8B,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC;iBAC7G,CAAC;YACJ,CAAC;QACH,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,IAAqB;QAChC,OAAO,uCAAuC,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IACnG,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC;IACtC,CAAC;IAED,KAAK,CAAC,aAAa,CAAC,WAAmB,EAAE,OAAe;QACtD,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,iBAAiB,CAAC,WAAmB,EAAE,IAAY;QACvD,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,yBAAyB,CAAC,IAAmC;QACjE,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;IAED,QAAQ,CAAC,aAA4B,EAAE,QAAkB;QACvD,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IAED,gBAAgB,CAAC,aAA4B;QAC3C,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;IACrD,CAAC;IAED,eAAe,CAAC,cAAgD;QAC9D,OAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;IACrD,CAAC;CACF;AAzDD,0EAyDC;AAED,SAAS,uCAAuC,CAC9C,MAAwC,EACxC,IAAqB,EACrB,SAAkB;IAElB,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;AAC9G,CAAC;AAED,SAAS,8BAA8B,CAAC,KAAqC;IAC3E,6DAA6D;IAC7D,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,CAAC;IACjC,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { AllbridgeCoreSdkOptions } from \"../../index\";\nimport {\n  ChainDetailsMap,\n  PoolInfo,\n  PoolKeyObject,\n  TokenWithChainDetails,\n  TokenWithChainDetailsWithFlags,\n} from \"../../tokens-info\";\nimport {\n  GasBalanceResponse,\n  PendingInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\nimport { AllbridgeCoreClient, AllbridgeCoreClientWithTokens } from \"./core-client-base\";\nimport { AllbridgeCoreClientPoolsExt } from \"./core-client-pool-info-caching\";\n\nexport interface AllbridgeCoreClientFiltered extends AllbridgeCoreClient, AllbridgeCoreClientPoolsExt {\n  getChainDetailsMap(type: \"swap\" | \"pool\"): Promise<ChainDetailsMap>;\n\n  tokens(type: \"swap\" | \"pool\"): Promise<TokenWithChainDetails[]>;\n}\n\nexport class AllbridgeCoreClientFilteredImpl implements AllbridgeCoreClientFiltered {\n  private readonly isStaging: boolean;\n\n  constructor(\n    private client: AllbridgeCoreClientWithTokens & AllbridgeCoreClientPoolsExt,\n    params: AllbridgeCoreSdkOptions\n  ) {\n    this.isStaging = params.coreApiQueryParams?.staging === \"true\";\n  }\n\n  async getChainDetailsMap(type: \"swap\" | \"pool\"): Promise<ChainDetailsMap> {\n    const chainDetailsMapWithFlags = await this.client.getChainDetailsMap();\n    const result: ChainDetailsMap = {};\n\n    for (const key in chainDetailsMapWithFlags) {\n      const chainDetailsWithTokensWithFlag = chainDetailsMapWithFlags[key];\n      if (chainDetailsWithTokensWithFlag) {\n        result[key] = {\n          ...chainDetailsWithTokensWithFlag,\n          tokens: filterAndConvertToTokenWithChainDetails(chainDetailsWithTokensWithFlag.tokens, type, this.isStaging),\n        };\n      }\n    }\n    return result;\n  }\n\n  async tokens(type: \"swap\" | \"pool\"): Promise<TokenWithChainDetails[]> {\n    return filterAndConvertToTokenWithChainDetails(await this.client.tokens(), type, this.isStaging);\n  }\n\n  async getPendingInfo(): Promise<PendingInfoResponse> {\n    return this.client.getPendingInfo();\n  }\n\n  async getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.client.getGasBalance(chainSymbol, address);\n  }\n\n  async getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return await this.client.getTransferStatus(chainSymbol, txId);\n  }\n\n  async getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    return await this.client.getReceiveTransactionCost(args);\n  }\n\n  cachePut(poolKeyObject: PoolKeyObject, poolInfo: PoolInfo): void {\n    return this.client.cachePut(poolKeyObject, poolInfo);\n  }\n\n  getPoolInfoByKey(poolKeyObject: PoolKeyObject): Promise<PoolInfo> {\n    return this.client.getPoolInfoByKey(poolKeyObject);\n  }\n\n  refreshPoolInfo(poolKeyObjects?: PoolKeyObject | PoolKeyObject[]): Promise<void> {\n    return this.client.refreshPoolInfo(poolKeyObjects);\n  }\n}\n\nfunction filterAndConvertToTokenWithChainDetails(\n  tokens: TokenWithChainDetailsWithFlags[],\n  type: \"swap\" | \"pool\",\n  isStaging: boolean\n): TokenWithChainDetails[] {\n  return tokens.filter((token) => (isStaging ? true : token.flags[type])).map(convertToTokenWithChainDetails);\n}\n\nfunction convertToTokenWithChainDetails(token: TokenWithChainDetailsWithFlags): TokenWithChainDetails {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { flags, ...rest } = token;\n  return rest;\n}\n"]}