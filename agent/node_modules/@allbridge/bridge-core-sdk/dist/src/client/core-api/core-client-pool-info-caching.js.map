{"version":3,"file":"core-client-pool-info-caching.js","sourceRoot":"","sources":["../../../../src/client/core-api/core-client-pool-info-caching.ts"],"names":[],"mappings":"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","sourcesContent":["import Cache from \"timed-cache\";\nimport { SdkError } from \"../../exceptions\";\nimport {\n  ChainDetailsMapWithFlags,\n  PoolInfo,\n  PoolInfoMap,\n  PoolKeyObject,\n  TokenWithChainDetailsWithFlags,\n} from \"../../tokens-info\";\nimport { mapChainDetailsMapToPoolKeyObjects, mapPoolKeyObjectToPoolKey } from \"./core-api-mapper\";\nimport {\n  GasBalanceResponse,\n  PendingInfoResponse,\n  ReceiveTransactionCostRequest,\n  ReceiveTransactionCostResponse,\n  TransferStatusResponse,\n} from \"./core-api.model\";\nimport { AllbridgeCoreClientWithPoolInfo, AllbridgeCoreClientWithTokens } from \"./core-client-base\";\n\nconst _55_SECONDS_TTL = 55 * 1000;\n\nexport interface AllbridgeCoreClientPoolsExt {\n  getPoolInfoByKey(poolKeyObject: PoolKeyObject): Promise<PoolInfo>;\n  refreshPoolInfo(poolKeyObjects?: PoolKeyObject | PoolKeyObject[]): Promise<void>;\n  cachePut(poolKeyObject: PoolKeyObject, poolInfo: PoolInfo): void;\n}\n\nexport class AllbridgeCoreClientPoolInfoCaching implements AllbridgeCoreClientWithTokens, AllbridgeCoreClientPoolsExt {\n  private readonly poolInfoCache;\n\n  constructor(private readonly client: AllbridgeCoreClientWithPoolInfo) {\n    this.poolInfoCache = new PoolInfoCache();\n  }\n\n  async getChainDetailsMap(): Promise<ChainDetailsMapWithFlags> {\n    const result = await this.client.getChainDetailsMapAndPoolInfoMap();\n    return result.chainDetailsMap;\n  }\n\n  async tokens(): Promise<TokenWithChainDetailsWithFlags[]> {\n    return await this.client.tokens();\n  }\n\n  getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse> {\n    return this.client.getTransferStatus(chainSymbol, txId);\n  }\n\n  getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse> {\n    return this.client.getReceiveTransactionCost(args);\n  }\n\n  getPendingInfo(): Promise<PendingInfoResponse> {\n    return this.client.getPendingInfo();\n  }\n\n  getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse> {\n    return this.client.getGasBalance(chainSymbol, address);\n  }\n\n  async getPoolInfoByKey(poolKeyObject: PoolKeyObject): Promise<PoolInfo> {\n    this.poolInfoCache.putAllIfNotExists((await this.client.getChainDetailsMapAndPoolInfoMap()).poolInfoMap);\n    const poolInfo = this.poolInfoCache.get(poolKeyObject);\n\n    if (poolInfo) {\n      return poolInfo;\n    } else {\n      const poolInfoMap = await this.client.getPoolInfoMap(poolKeyObject);\n      this.poolInfoCache.putAll(poolInfoMap);\n      const result = poolInfoMap[mapPoolKeyObjectToPoolKey(poolKeyObject)];\n      if (result) {\n        return result;\n      }\n      throw new SdkError(\n        \"Cannot find pool info for \" + poolKeyObject.poolAddress + \" on chain \" + poolKeyObject.chainSymbol\n      );\n    }\n  }\n\n  async refreshPoolInfo(poolKeyObjects?: PoolKeyObject | PoolKeyObject[]): Promise<void> {\n    let poolInfoMap;\n    if (poolKeyObjects) {\n      this.poolInfoCache.putAllIfNotExists((await this.client.getChainDetailsMapAndPoolInfoMap()).poolInfoMap);\n      poolInfoMap = await this.client.getPoolInfoMap(poolKeyObjects);\n    } else {\n      const result = await this.client.getChainDetailsMapAndPoolInfoMap();\n      poolInfoMap = await this.client.getPoolInfoMap(mapChainDetailsMapToPoolKeyObjects(result.chainDetailsMap));\n    }\n    this.poolInfoCache.putAll(poolInfoMap);\n  }\n\n  cachePut(poolKeyObject: PoolKeyObject, poolInfo: PoolInfo): void {\n    this.poolInfoCache.put(mapPoolKeyObjectToPoolKey(poolKeyObject), poolInfo);\n  }\n}\n\nclass PoolInfoCache {\n  private cache;\n\n  constructor() {\n    this.cache = new Cache<PoolInfo>({ defaultTtl: _55_SECONDS_TTL });\n  }\n\n  putAll(poolInfoMap: PoolInfoMap) {\n    for (const [key, value] of Object.entries(poolInfoMap)) {\n      this.cache.put(key, value);\n    }\n  }\n\n  putAllIfNotExists(poolInfoMap: PoolInfoMap) {\n    for (const [key, value] of Object.entries(poolInfoMap)) {\n      if (!this.cache.get(key)) {\n        this.cache.put(key, value);\n      }\n    }\n  }\n\n  put(key: string, poolInfo: PoolInfo) {\n    this.cache.put(key, poolInfo);\n  }\n\n  get(poolKeyObject: PoolKeyObject): PoolInfo | undefined {\n    const key = mapPoolKeyObjectToPoolKey(poolKeyObject);\n    return this.cache.get(key);\n  }\n}\n"]}