"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClientImpl = void 0;
const axios_1 = __importDefault(require("axios"));
const version_1 = require("../../version");
const core_api_mapper_1 = require("./core-api-mapper");
class ApiClientImpl {
    api;
    constructor(params) {
        this.api = axios_1.default.create({
            baseURL: params.coreApiUrl,
            headers: {
                Accept: "application/json",
                ...params.coreApiHeaders,
                "x-Sdk-Agent": "AllbridgeCoreSDK/" + version_1.VERSION,
            },
            params: params.coreApiQueryParams,
        });
    }
    async getTokenInfo() {
        const { data } = await this.api.get("/token-info", { params: { filter: "all" } });
        return {
            chainDetailsMap: (0, core_api_mapper_1.mapChainDetailsResponseToChainDetailsMap)(data),
            poolInfoMap: (0, core_api_mapper_1.mapChainDetailsResponseToPoolInfoMap)(data),
        };
    }
    async getPendingInfo() {
        const { data } = await this.api.get("/pending-info");
        return data;
    }
    async getGasBalance(chainSymbol, address) {
        const { data } = await this.api.get(`/check/${chainSymbol}/${address}`);
        return data;
    }
    async getTransferStatus(chainSymbol, txId) {
        const { data } = await this.api.get(`/chain/${chainSymbol}/${txId}`);
        return data;
    }
    async getReceiveTransactionCost(args) {
        const { data } = await this.api.post("/receive-fee", args, {
            headers: {
                "Content-Type": "application/json",
            },
        });
        return {
            exchangeRate: data.exchangeRate,
            fee: data.fee,
            sourceNativeTokenPrice: data.sourceNativeTokenPrice,
        };
    }
    async getPoolInfoMap(pools) {
        const poolKeys = pools instanceof Array ? pools : [pools];
        const { data } = await this.api.post("/pool-info", { pools: poolKeys }, {
            headers: {
                "Content-Type": "application/json",
            },
        });
        return (0, core_api_mapper_1.mapPoolInfoResponseToPoolInfoMap)(data);
    }
}
exports.ApiClientImpl = ApiClientImpl;
//# sourceMappingURL=api-client.js.map