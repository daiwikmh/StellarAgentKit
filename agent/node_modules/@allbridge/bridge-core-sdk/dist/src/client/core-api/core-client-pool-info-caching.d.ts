import { ChainDetailsMapWithFlags, PoolInfo, PoolKeyObject, TokenWithChainDetailsWithFlags } from "../../tokens-info";
import { GasBalanceResponse, PendingInfoResponse, ReceiveTransactionCostRequest, ReceiveTransactionCostResponse, TransferStatusResponse } from "./core-api.model";
import { AllbridgeCoreClientWithPoolInfo, AllbridgeCoreClientWithTokens } from "./core-client-base";
export interface AllbridgeCoreClientPoolsExt {
    getPoolInfoByKey(poolKeyObject: PoolKeyObject): Promise<PoolInfo>;
    refreshPoolInfo(poolKeyObjects?: PoolKeyObject | PoolKeyObject[]): Promise<void>;
    cachePut(poolKeyObject: PoolKeyObject, poolInfo: PoolInfo): void;
}
export declare class AllbridgeCoreClientPoolInfoCaching implements AllbridgeCoreClientWithTokens, AllbridgeCoreClientPoolsExt {
    private readonly client;
    private readonly poolInfoCache;
    constructor(client: AllbridgeCoreClientWithPoolInfo);
    getChainDetailsMap(): Promise<ChainDetailsMapWithFlags>;
    tokens(): Promise<TokenWithChainDetailsWithFlags[]>;
    getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse>;
    getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse>;
    getPendingInfo(): Promise<PendingInfoResponse>;
    getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse>;
    getPoolInfoByKey(poolKeyObject: PoolKeyObject): Promise<PoolInfo>;
    refreshPoolInfo(poolKeyObjects?: PoolKeyObject | PoolKeyObject[]): Promise<void>;
    cachePut(poolKeyObject: PoolKeyObject, poolInfo: PoolInfo): void;
}
