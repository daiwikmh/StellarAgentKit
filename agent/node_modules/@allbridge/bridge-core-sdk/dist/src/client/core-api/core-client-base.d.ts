import { ChainDetailsMapWithFlags, PoolInfoMap, PoolKeyObject, TokenWithChainDetailsWithFlags } from "../../tokens-info";
import { ApiClient } from "./api-client";
import { GasBalanceResponse, PendingInfoResponse, ReceiveTransactionCostRequest, ReceiveTransactionCostResponse, TransferStatusResponse } from "./core-api.model";
export interface AllbridgeCoreClientParams {
    coreApiUrl: string;
    coreApiHeaders?: Record<string, string>;
    coreApiQueryParams?: Record<string, string>;
}
export interface AllbridgeCoreClient {
    getPendingInfo(): Promise<PendingInfoResponse>;
    getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse>;
    getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse>;
    getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse>;
}
export interface AllbridgeCoreClientWithTokens extends AllbridgeCoreClient {
    getChainDetailsMap(): Promise<ChainDetailsMapWithFlags>;
    tokens(): Promise<TokenWithChainDetailsWithFlags[]>;
}
export interface AllbridgeCoreClientWithPoolInfo extends AllbridgeCoreClientWithTokens {
    getChainDetailsMapAndPoolInfoMap(): Promise<{
        chainDetailsMap: ChainDetailsMapWithFlags;
        poolInfoMap: PoolInfoMap;
    }>;
    getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap>;
}
export declare class AllbridgeCoreClientImpl implements AllbridgeCoreClientWithPoolInfo {
    private apiClient;
    constructor(apiClient: ApiClient);
    getChainDetailsMap(): Promise<ChainDetailsMapWithFlags>;
    tokens(): Promise<TokenWithChainDetailsWithFlags[]>;
    getPendingInfo(): Promise<PendingInfoResponse>;
    getGasBalance(chainSymbol: string, address: string): Promise<GasBalanceResponse>;
    getChainDetailsMapAndPoolInfoMap(): Promise<{
        chainDetailsMap: ChainDetailsMapWithFlags;
        poolInfoMap: PoolInfoMap;
    }>;
    getTransferStatus(chainSymbol: string, txId: string): Promise<TransferStatusResponse>;
    getReceiveTransactionCost(args: ReceiveTransactionCostRequest): Promise<ReceiveTransactionCostResponse>;
    getPoolInfoMap(pools: PoolKeyObject[] | PoolKeyObject): Promise<PoolInfoMap>;
}
