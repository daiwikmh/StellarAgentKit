import { Big, BigSource } from "big.js";
import { AllbridgeCoreClientPoolsExt } from "../client/core-api/core-client-pool-info-caching";
import { PoolInfo, TokenWithChainDetails } from "../tokens-info";
export declare function getPoolInfoByToken(api: AllbridgeCoreClientPoolsExt, sourceChainToken: TokenWithChainDetails): Promise<PoolInfo>;
export declare function validateAmountGtZero(amount: BigSource): void;
export declare function validateAmountDecimals(argName: string, amountFloat: number | string | Big, decimalRequired: number): void;
export declare function promiseWithTimeout<T>(promise: Promise<T>, msg: string, timeoutMs: number): Promise<T>;
export declare function promiseWithTimeoutAndRetries<T>(toTry: () => Promise<T>, msg: string, maxRetries: number, timeoutMs: number): Promise<T>;
/**
 * Keep calling a `fn` for `secondsToWait` seconds, if `keepWaitingIf` is true.
 * Returns an array of all attempts to call the function.
 */
export declare function withExponentialBackoff<T>(fn: (previousFailure?: T) => Promise<T>, keepWaitingIf: (result: T) => boolean, secondsToWait: number, exponentialFactor?: number, verbose?: boolean): Promise<T[]>;
