{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/utils/srb/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Asset as StellarAsset,\n  BASE_FEE,\n  contract,\n  Horizon,\n  Operation,\n  Operation as StellarOperation,\n  rpc as SorobanRpc,\n  TimeoutInfinite,\n  Transaction,\n  TransactionBuilder,\n  TransactionBuilder as StellarTransactionBuilder,\n} from \"@stellar/stellar-sdk\";\nimport { ChainSymbol } from \"../../chains/chain.enums\";\nimport { AllbridgeCoreSdkOptions, SdkError } from \"../../index\";\nimport { NodeRpcUrlsConfig } from \"../../services\";\nimport { TokenContract } from \"../../services/models/srb/token-contract\";\nimport { getViewResultSoroban, isErrorSorobanResult } from \"../../services/models/srb/utils\";\nimport { withExponentialBackoff } from \"../utils\";\nimport ContractClientOptions = contract.ClientOptions;\nimport BalanceLineAsset = Horizon.HorizonApi.BalanceLineAsset;\n\n/**\n * Contains usefully Soroban methods\n */\nexport interface SrbUtils {\n  /**\n   * Build change Trust line Tx\n   * @param params see {@link TrustLineParams}\n   * @returns xdr Tx\n   */\n  buildChangeTrustLineXdrTx(params: TrustLineParams): Promise<string>;\n\n  /**\n   * Get Balance Line information if exists\n   * @param sender\n   * @param tokenAddress\n   */\n  getBalanceLine(sender: string, tokenAddress: string): Promise<Horizon.HorizonApi.BalanceLineAsset | undefined>;\n\n  /**\n   * Submit tx\n   * @param xdrTx\n   */\n  submitTransactionStellar(xdrTx: string): Promise<Horizon.HorizonApi.SubmitTransactionResponse>;\n\n  /**\n   * Simulate and check if Restore needed\n   * @param xdrTx - restore\n   * @param sourceAccount\n   * @returns xdrTx restore transaction if it required after check\n   */\n  simulateAndCheckRestoreTxRequiredSoroban(xdrTx: string, sourceAccount: string): Promise<string | undefined>;\n\n  /**\n   * Submit tx\n   * @param xdrTx\n   */\n  sendTransactionSoroban(xdrTx: string): Promise<SorobanRpc.Api.SendTransactionResponse>;\n\n  /**\n   * Confirm tx\n   */\n  confirmTx(hash: string, secondsToWait?: number): Promise<SorobanRpc.Api.GetTransactionResponse>;\n}\n\nexport interface TrustLineParams {\n  /**\n   * Float amount of tokens, default is Number.MAX_SAFE_INTEGER\n   */\n  limit?: string;\n  sender: string;\n  tokenAddress: string;\n}\n\nconst FEE = 100;\nconst SEND_TRANSACTION_TIMEOUT = 180;\n\nexport class DefaultSrbUtils implements SrbUtils {\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions\n  ) {}\n\n  async buildChangeTrustLineXdrTx(params: TrustLineParams): Promise<string> {\n    const stellar = new Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR));\n    const stellarAccount = await stellar.loadAccount(params.sender);\n    const tokenContract = this.getContract(TokenContract, params.tokenAddress);\n    const result = await tokenContract.name();\n    if (isErrorSorobanResult(result)) {\n      throw new SdkError();\n    }\n    const tokenName = getViewResultSoroban(result);\n    if (!tokenName) {\n      throw new SdkError();\n    }\n\n    const [symbol, srbTokenAddress] = tokenName.split(\":\");\n    if (symbol === undefined || srbTokenAddress === undefined) {\n      throw new SdkError(`Invalid token name format. Expected format 'symbol:srbTokenAddress'`);\n    }\n    const asset = new StellarAsset(symbol, srbTokenAddress);\n    const changeTrust = StellarOperation.changeTrust({\n      asset: asset,\n      limit: params.limit,\n    });\n\n    return new StellarTransactionBuilder(stellarAccount, {\n      fee: FEE.toString(10),\n      networkPassphrase: this.params.sorobanNetworkPassphrase,\n    })\n      .addOperation(changeTrust)\n      .setTimeout(SEND_TRANSACTION_TIMEOUT)\n      .build()\n      .toXDR();\n  }\n\n  async getBalanceLine(sender: string, tokenAddress: string): Promise<Horizon.HorizonApi.BalanceLineAsset | undefined> {\n    const tokenContract = this.getContract(TokenContract, tokenAddress);\n    const result = await tokenContract.name();\n    if (isErrorSorobanResult(result)) {\n      throw new SdkError();\n    }\n    const tokenName = getViewResultSoroban(result);\n    if (!tokenName) {\n      throw new SdkError();\n    }\n\n    const [symbol, srbTokenAddress] = tokenName.split(\":\");\n    const nodeRpcUrl = this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR);\n    const stellar = new Horizon.Server(nodeRpcUrl);\n    const stellarAccount = await stellar.loadAccount(sender);\n    const balanceInfo = stellarAccount.balances;\n\n    return balanceInfo.find(\n      (balance): balance is BalanceLineAsset =>\n        (balance.asset_type === \"credit_alphanum4\" || balance.asset_type === \"credit_alphanum12\") &&\n        balance.asset_code == symbol &&\n        balance.asset_issuer == srbTokenAddress\n    );\n  }\n\n  async submitTransactionStellar(xdrTx: string): Promise<Horizon.HorizonApi.SubmitTransactionResponse> {\n    const stellar = new Horizon.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR));\n    const transaction = StellarTransactionBuilder.fromXDR(\n      xdrTx,\n      this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.STLR)\n    );\n    return await stellar.submitTransaction(transaction);\n  }\n\n  async simulateAndCheckRestoreTxRequiredSoroban(xdrTx: string, sourceAccount: string): Promise<string | undefined> {\n    const server = new SorobanRpc.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB));\n    const account = await server.getAccount(sourceAccount);\n    const transaction = TransactionBuilder.fromXDR(xdrTx, this.params.sorobanNetworkPassphrase) as Transaction;\n    const simulation = await server.simulateTransaction(transaction);\n    if (SorobanRpc.Api.isSimulationRestore(simulation)) {\n      return new TransactionBuilder(account, {\n        fee: (+BASE_FEE + +simulation.restorePreamble.minResourceFee).toString(),\n        networkPassphrase: this.params.sorobanNetworkPassphrase,\n      })\n        .setSorobanData(simulation.restorePreamble.transactionData.build())\n        .addOperation(Operation.restoreFootprint({}))\n        .setTimeout(TimeoutInfinite)\n        .build()\n        .toXDR();\n    }\n    return undefined;\n  }\n\n  async sendTransactionSoroban(xdrTx: string): Promise<SorobanRpc.Api.SendTransactionResponse> {\n    const server = new SorobanRpc.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB));\n    const transaction = TransactionBuilder.fromXDR(xdrTx, this.params.sorobanNetworkPassphrase) as Transaction;\n    return server.sendTransaction(transaction);\n  }\n\n  async confirmTx(hash: string, secondsToWait = 15): Promise<SorobanRpc.Api.GetTransactionResponse> {\n    const server = new SorobanRpc.Server(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB));\n    const getTransactionResponseAll = await withExponentialBackoff(\n      () => server.getTransaction(hash),\n      (resp) => resp.status === SorobanRpc.Api.GetTransactionStatus.NOT_FOUND,\n      secondsToWait\n    );\n\n    if (getTransactionResponseAll.length === 0) {\n      throw new SdkError(\"No transaction responses found.\");\n    }\n\n    const lastResponse = getTransactionResponseAll[getTransactionResponseAll.length - 1];\n    if (!lastResponse) {\n      throw new SdkError(\"Unexpected error: last response is undefined.\");\n    }\n\n    return lastResponse;\n  }\n\n  private getContract<T>(contract: new (args: ContractClientOptions) => T, address: string): T {\n    const config: ContractClientOptions = {\n      contractId: address,\n      networkPassphrase: this.params.sorobanNetworkPassphrase,\n      rpcUrl: this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SRB),\n    };\n    return new contract(config);\n  }\n}\n"]}