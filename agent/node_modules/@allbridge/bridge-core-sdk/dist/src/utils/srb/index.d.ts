import { Horizon, rpc as SorobanRpc } from "@stellar/stellar-sdk";
import { AllbridgeCoreSdkOptions } from "../../index";
import { NodeRpcUrlsConfig } from "../../services";
/**
 * Contains usefully Soroban methods
 */
export interface SrbUtils {
    /**
     * Build change Trust line Tx
     * @param params see {@link TrustLineParams}
     * @returns xdr Tx
     */
    buildChangeTrustLineXdrTx(params: TrustLineParams): Promise<string>;
    /**
     * Get Balance Line information if exists
     * @param sender
     * @param tokenAddress
     */
    getBalanceLine(sender: string, tokenAddress: string): Promise<Horizon.HorizonApi.BalanceLineAsset | undefined>;
    /**
     * Submit tx
     * @param xdrTx
     */
    submitTransactionStellar(xdrTx: string): Promise<Horizon.HorizonApi.SubmitTransactionResponse>;
    /**
     * Simulate and check if Restore needed
     * @param xdrTx - restore
     * @param sourceAccount
     * @returns xdrTx restore transaction if it required after check
     */
    simulateAndCheckRestoreTxRequiredSoroban(xdrTx: string, sourceAccount: string): Promise<string | undefined>;
    /**
     * Submit tx
     * @param xdrTx
     */
    sendTransactionSoroban(xdrTx: string): Promise<SorobanRpc.Api.SendTransactionResponse>;
    /**
     * Confirm tx
     */
    confirmTx(hash: string, secondsToWait?: number): Promise<SorobanRpc.Api.GetTransactionResponse>;
}
export interface TrustLineParams {
    /**
     * Float amount of tokens, default is Number.MAX_SAFE_INTEGER
     */
    limit?: string;
    sender: string;
    tokenAddress: string;
}
export declare class DefaultSrbUtils implements SrbUtils {
    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig;
    readonly params: AllbridgeCoreSdkOptions;
    constructor(nodeRpcUrlsConfig: NodeRpcUrlsConfig, params: AllbridgeCoreSdkOptions);
    buildChangeTrustLineXdrTx(params: TrustLineParams): Promise<string>;
    getBalanceLine(sender: string, tokenAddress: string): Promise<Horizon.HorizonApi.BalanceLineAsset | undefined>;
    submitTransactionStellar(xdrTx: string): Promise<Horizon.HorizonApi.SubmitTransactionResponse>;
    simulateAndCheckRestoreTxRequiredSoroban(xdrTx: string, sourceAccount: string): Promise<string | undefined>;
    sendTransactionSoroban(xdrTx: string): Promise<SorobanRpc.Api.SendTransactionResponse>;
    confirmTx(hash: string, secondsToWait?: number): Promise<SorobanRpc.Api.GetTransactionResponse>;
    private getContract;
}
