{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/utils/sol/utils.ts"],"names":[],"mappings":";;AAGA,sFAmBC;AAtBD,6CAA8F;AAC9F,iDAA4C;AAErC,KAAK,UAAU,qCAAqC,CACzD,WAAiC,EACjC,UAAsB;IAEtB,OAAO,MAAM,OAAO,CAAC,GAAG,CACtB,WAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QAC3D,OAAO,IAAI,mCAAyB,CAAC;YACnC,GAAG,EAAE,MAAM,CAAC,UAAU;YACtB,KAAK,EAAE,mCAAyB,CAAC,WAAW,CAC1C,MAAM,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;gBAC9D,IAAI,CAAC,GAAG,EAAE,CAAC;oBACT,MAAM,IAAI,qBAAQ,CAAC,wBAAwB,CAAC,CAAC;gBAC/C,CAAC;gBACD,OAAO,GAAG,CAAC,IAAI,CAAC;YAClB,CAAC,CAAC,CACH;SACF,CAAC,CAAC;IACL,CAAC,CAAC,CACH,CAAC;AACJ,CAAC","sourcesContent":["import { AddressLookupTableAccount, Connection, VersionedTransaction } from \"@solana/web3.js\";\nimport { SdkError } from \"../../exceptions\";\n\nexport async function fetchAddressLookupTableAccountsFromTx(\n  transaction: VersionedTransaction,\n  connection: Connection\n): Promise<AddressLookupTableAccount[]> {\n  return await Promise.all(\n    transaction.message.addressTableLookups.map(async (lookup) => {\n      return new AddressLookupTableAccount({\n        key: lookup.accountKey,\n        state: AddressLookupTableAccount.deserialize(\n          await connection.getAccountInfo(lookup.accountKey).then((res) => {\n            if (!res) {\n              throw new SdkError(\"Cannot get AccountInfo\");\n            }\n            return res.data;\n          })\n        ),\n      });\n    })\n  );\n}\n"]}