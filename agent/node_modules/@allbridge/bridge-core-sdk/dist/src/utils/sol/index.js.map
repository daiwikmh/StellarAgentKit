{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/utils/sol/index.ts"],"names":[],"mappings":";;;AAAA,6CAAkG;AAClG,0DAAuD;AACvD,uCAAgE;AAEhE,mCAAgE;AAchE,MAAa,eAAe;IAEf;IACA;IAFX,YACW,iBAAoC,EACpC,MAA+B;QAD/B,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,WAAM,GAAN,MAAM,CAAyB;IACvC,CAAC;IAEJ,KAAK,CAAC,WAAW,CAAC,WAAiC,EAAE,IAAY;QAC/D,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,EAAE,CAAC;YACrB,MAAM,IAAI,gBAAQ,CAAC,iEAAiE,CAAC,CAAC;QACxF,CAAC;QACD,MAAM,UAAU,GAAG,IAAI,oBAAU,CAAC,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,yBAAW,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC;QACtG,MAAM,0BAA0B,GAAG,MAAM,IAAA,6CAAqC,EAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QACxG,MAAM,OAAO,GAAG,4BAAkB,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,EAAE;YAChE,0BAA0B,EAAE,0BAA0B;SACvD,CAAC,CAAC;QACH,MAAM,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC9E,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC;YAC3B,MAAM,IAAI,gBAAQ,CAAC,2CAA2C,CAAC,CAAC;QAClE,CAAC;QAED,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;YACxB,MAAM,EAAE,IAAI,mBAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxC,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,KAAK;SAClB,CAAC,CAAC;QACH,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,CAAC;IAC/E,CAAC;CACF;AA3BD,0CA2BC","sourcesContent":["import { Connection, PublicKey, TransactionMessage, VersionedTransaction } from \"@solana/web3.js\";\nimport { ChainSymbol } from \"../../chains/chain.enums\";\nimport { AllbridgeCoreSdkOptions, SdkError } from \"../../index\";\nimport { NodeRpcUrlsConfig } from \"../../services\";\nimport { fetchAddressLookupTableAccountsFromTx } from \"./utils\";\n\n/**\n * Contains usefully Solana methods\n */\nexport interface SolUtils {\n  /**\n   * Add memo to solana's transaction\n   * @param transaction transaction to add memo\n   * @param memo memo to add (28 char max)\n   */\n  addMemoToTx(transaction: VersionedTransaction, memo: string): Promise<void>;\n}\n\nexport class DefaultSolUtils implements SolUtils {\n  constructor(\n    readonly nodeRpcUrlsConfig: NodeRpcUrlsConfig,\n    readonly params: AllbridgeCoreSdkOptions\n  ) {}\n\n  async addMemoToTx(transaction: VersionedTransaction, memo: string): Promise<void> {\n    if (memo.length > 28) {\n      throw new SdkError(\"InvalidArgumentException memo cannot be more than 28 characters\");\n    }\n    const connection = new Connection(this.nodeRpcUrlsConfig.getNodeRpcUrl(ChainSymbol.SOL), \"confirmed\");\n    const addressLookupTableAccounts = await fetchAddressLookupTableAccountsFromTx(transaction, connection);\n    const message = TransactionMessage.decompile(transaction.message, {\n      addressLookupTableAccounts: addressLookupTableAccounts,\n    });\n    const lastInstruction = message.instructions[message.instructions.length - 1];\n    if (!lastInstruction?.keys) {\n      throw new SdkError(\"Last instruction or its keys are invalid.\");\n    }\n\n    lastInstruction.keys.push({\n      pubkey: new PublicKey(Buffer.from(memo)),\n      isSigner: false,\n      isWritable: false,\n    });\n    transaction.message = message.compileToV0Message(addressLookupTableAccounts);\n  }\n}\n"]}