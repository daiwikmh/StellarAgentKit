"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorCode = exports.TxTooLargeError = exports.CCTPDoesNotSupportedError = exports.NodeRpcUrlNotInitializedError = exports.TimeoutError = exports.ArgumentInvalidDecimalsError = exports.ExtraGasMaxLimitExceededError = exports.InvalidTxError = exports.VerifyTxError = exports.MethodNotSupportedError = exports.InvalidMessengerOptionError = exports.InvalidGasFeePaymentOptionError = exports.JupiterError = exports.InsufficientPoolLiquidityError = exports.AmountNotEnoughError = exports.InvalidAmountError = exports.SdkError = exports.SdkRootError = void 0;
class SdkRootError extends Error {
    errorCode;
    constructor(code, message) {
        super(message);
        this.errorCode = code;
    }
}
exports.SdkRootError = SdkRootError;
class SdkError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.SDK_ERROR, message);
    }
}
exports.SdkError = SdkError;
class InvalidAmountError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.INVALID_AMOUNT_ERROR, message);
    }
}
exports.InvalidAmountError = InvalidAmountError;
class AmountNotEnoughError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.AMOUNT_NOT_ENOUGH_ERROR, message);
    }
}
exports.AmountNotEnoughError = AmountNotEnoughError;
class InsufficientPoolLiquidityError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.INSUFFICIENT_POOL_LIQUIDITY_ERROR, message);
    }
}
exports.InsufficientPoolLiquidityError = InsufficientPoolLiquidityError;
class JupiterError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.JUPITER_ERROR, message);
    }
}
exports.JupiterError = JupiterError;
class InvalidGasFeePaymentOptionError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.INVALID_GAS_FEE_PAYMENT_OPTION_ERROR, message);
    }
}
exports.InvalidGasFeePaymentOptionError = InvalidGasFeePaymentOptionError;
class InvalidMessengerOptionError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.INVALID_MESSENGER_OPTION_ERROR, message);
    }
}
exports.InvalidMessengerOptionError = InvalidMessengerOptionError;
class MethodNotSupportedError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.METHOD_NOT_SUPPORTED_ERROR, message);
    }
}
exports.MethodNotSupportedError = MethodNotSupportedError;
class VerifyTxError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.VERIFY_TX_ERROR, message);
    }
}
exports.VerifyTxError = VerifyTxError;
class InvalidTxError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.INVALID_TX_ERROR, message);
    }
}
exports.InvalidTxError = InvalidTxError;
class ExtraGasMaxLimitExceededError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.EXTRA_GAS_MAX_LIMIT_EXCEEDED_ERROR, message);
    }
}
exports.ExtraGasMaxLimitExceededError = ExtraGasMaxLimitExceededError;
class ArgumentInvalidDecimalsError extends SdkRootError {
    constructor(argName, decimalsIs, decimalsRequired) {
        super(ErrorCode.ARGUMENT_INVALID_DECIMALS_ERROR, `Argument '${argName}' decimals '${decimalsIs}' cannot be greater than '${decimalsRequired}'`);
    }
}
exports.ArgumentInvalidDecimalsError = ArgumentInvalidDecimalsError;
class TimeoutError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.TIMEOUT_ERROR, message);
    }
}
exports.TimeoutError = TimeoutError;
class NodeRpcUrlNotInitializedError extends SdkRootError {
    constructor(chainSymbol) {
        super(ErrorCode.NODE_RPC_URL_NOT_INITIALIZED_ERROR, `For chain '${chainSymbol}' Node RPC URL not initialized`);
    }
}
exports.NodeRpcUrlNotInitializedError = NodeRpcUrlNotInitializedError;
class CCTPDoesNotSupportedError extends SdkRootError {
    constructor(message) {
        super(ErrorCode.CCTP_DOES_NOT_SUPPORTED_ERROR, message);
    }
}
exports.CCTPDoesNotSupportedError = CCTPDoesNotSupportedError;
class TxTooLargeError extends SdkRootError {
    constructor() {
        super(ErrorCode.TX_TOO_LARGE, "Transaction too large: try again later or switch to another messenger or pay relayer fee in native gas currency");
    }
}
exports.TxTooLargeError = TxTooLargeError;
var ErrorCode;
(function (ErrorCode) {
    ErrorCode["SDK_ERROR"] = "SdkError";
    ErrorCode["INVALID_AMOUNT_ERROR"] = "InvalidAmountError";
    ErrorCode["AMOUNT_NOT_ENOUGH_ERROR"] = "AmountNotEnoughError";
    ErrorCode["INSUFFICIENT_POOL_LIQUIDITY_ERROR"] = "InsufficientPoolLiquidityError";
    ErrorCode["JUPITER_ERROR"] = "JupiterError";
    ErrorCode["INVALID_GAS_FEE_PAYMENT_OPTION_ERROR"] = "InvalidGasFeePaymentOptionError";
    ErrorCode["INVALID_MESSENGER_OPTION_ERROR"] = "InvalidMessengerOptionError";
    ErrorCode["METHOD_NOT_SUPPORTED_ERROR"] = "MethodNotSupportedError";
    ErrorCode["VERIFY_TX_ERROR"] = "VerifyTxError";
    ErrorCode["INVALID_TX_ERROR"] = "InvalidTxError";
    ErrorCode["EXTRA_GAS_MAX_LIMIT_EXCEEDED_ERROR"] = "ExtraGasMaxLimitExceededError";
    ErrorCode["ARGUMENT_INVALID_DECIMALS_ERROR"] = "ArgumentInvalidDecimalsError";
    ErrorCode["TIMEOUT_ERROR"] = "TimeoutError";
    ErrorCode["NODE_RPC_URL_NOT_INITIALIZED_ERROR"] = "NodeRpcUrlNotInitializedError";
    ErrorCode["CCTP_DOES_NOT_SUPPORTED_ERROR"] = "CCTPDoesNotSupportedError";
    ErrorCode["TX_TOO_LARGE"] = "TxTooLargeError";
})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));
//# sourceMappingURL=exceptions.js.map