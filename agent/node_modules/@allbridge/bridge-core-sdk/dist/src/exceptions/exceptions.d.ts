export declare abstract class SdkRootError extends Error {
    errorCode: ErrorCode;
    protected constructor(code: ErrorCode, message?: string);
}
export declare class SdkError extends SdkRootError {
    constructor(message?: string);
}
export declare class InvalidAmountError extends SdkRootError {
    constructor(message?: string);
}
export declare class AmountNotEnoughError extends SdkRootError {
    constructor(message?: string);
}
export declare class InsufficientPoolLiquidityError extends SdkRootError {
    constructor(message?: string);
}
export declare class JupiterError extends SdkRootError {
    constructor(message?: string);
}
export declare class InvalidGasFeePaymentOptionError extends SdkRootError {
    constructor(message?: string);
}
export declare class InvalidMessengerOptionError extends SdkRootError {
    constructor(message?: string);
}
export declare class MethodNotSupportedError extends SdkRootError {
    constructor(message?: string);
}
export declare class VerifyTxError extends SdkRootError {
    constructor(message?: string);
}
export declare class InvalidTxError extends SdkRootError {
    constructor(message?: string);
}
export declare class ExtraGasMaxLimitExceededError extends SdkRootError {
    constructor(message?: string);
}
export declare class ArgumentInvalidDecimalsError extends SdkRootError {
    constructor(argName: string, decimalsIs: number, decimalsRequired: number);
}
export declare class TimeoutError extends SdkRootError {
    constructor(message?: string);
}
export declare class NodeRpcUrlNotInitializedError extends SdkRootError {
    constructor(chainSymbol: string);
}
export declare class CCTPDoesNotSupportedError extends SdkRootError {
    constructor(message?: string);
}
export declare class TxTooLargeError extends SdkRootError {
    constructor();
}
export declare enum ErrorCode {
    SDK_ERROR = "SdkError",
    INVALID_AMOUNT_ERROR = "InvalidAmountError",
    AMOUNT_NOT_ENOUGH_ERROR = "AmountNotEnoughError",
    INSUFFICIENT_POOL_LIQUIDITY_ERROR = "InsufficientPoolLiquidityError",
    JUPITER_ERROR = "JupiterError",
    INVALID_GAS_FEE_PAYMENT_OPTION_ERROR = "InvalidGasFeePaymentOptionError",
    INVALID_MESSENGER_OPTION_ERROR = "InvalidMessengerOptionError",
    METHOD_NOT_SUPPORTED_ERROR = "MethodNotSupportedError",
    VERIFY_TX_ERROR = "VerifyTxError",
    INVALID_TX_ERROR = "InvalidTxError",
    EXTRA_GAS_MAX_LIMIT_EXCEEDED_ERROR = "ExtraGasMaxLimitExceededError",
    ARGUMENT_INVALID_DECIMALS_ERROR = "ArgumentInvalidDecimalsError",
    TIMEOUT_ERROR = "TimeoutError",
    NODE_RPC_URL_NOT_INITIALIZED_ERROR = "NodeRpcUrlNotInitializedError",
    CCTP_DOES_NOT_SUPPORTED_ERROR = "CCTPDoesNotSupportedError",
    TX_TOO_LARGE = "TxTooLargeError"
}
