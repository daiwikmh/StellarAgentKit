"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Chains = void 0;
const exceptions_1 = require("../exceptions");
const chain_enums_1 = require("./chain.enums");
/**
 * Native gas tokens decimals by ChainType
 */
const chainDecimalsByType = {
    EVM: 18,
    SOLANA: 9,
    TRX: 6,
    SRB: 7,
    SUI: 9,
};
const defaultProperties = {
    [chain_enums_1.ChainSymbol.BSC]: {
        chainSymbol: chain_enums_1.ChainSymbol.BSC,
        chainId: "0x38",
        name: "BNB Chain",
        chainType: chain_enums_1.ChainType.EVM,
    },
    [chain_enums_1.ChainSymbol.ETH]: {
        chainSymbol: chain_enums_1.ChainSymbol.ETH,
        chainId: "0x1",
        name: "Ethereum",
        chainType: chain_enums_1.ChainType.EVM,
    },
    [chain_enums_1.ChainSymbol.BAS]: {
        chainSymbol: chain_enums_1.ChainSymbol.BAS,
        chainId: "0x2105",
        name: "Base",
        chainType: chain_enums_1.ChainType.EVM,
    },
    [chain_enums_1.ChainSymbol.ARB]: {
        chainSymbol: chain_enums_1.ChainSymbol.ARB,
        chainId: "0xa4b1",
        name: "Arbitrum",
        chainType: chain_enums_1.ChainType.EVM,
    },
    [chain_enums_1.ChainSymbol.AVA]: {
        chainSymbol: chain_enums_1.ChainSymbol.AVA,
        chainId: "0xa86a",
        name: "Avalanche",
        chainType: chain_enums_1.ChainType.EVM,
    },
    [chain_enums_1.ChainSymbol.CEL]: {
        chainSymbol: chain_enums_1.ChainSymbol.CEL,
        chainId: "0xa4ec",
        name: "Celo",
        chainType: chain_enums_1.ChainType.EVM,
    },
    [chain_enums_1.ChainSymbol.POL]: {
        chainSymbol: chain_enums_1.ChainSymbol.POL,
        chainId: "0x89",
        name: "Polygon",
        chainType: chain_enums_1.ChainType.EVM,
    },
    [chain_enums_1.ChainSymbol.OPT]: {
        chainSymbol: chain_enums_1.ChainSymbol.OPT,
        chainId: "0xa",
        name: "OP Mainnet",
        chainType: chain_enums_1.ChainType.EVM,
    },
    [chain_enums_1.ChainSymbol.SOL]: {
        chainSymbol: chain_enums_1.ChainSymbol.SOL,
        name: "Solana",
        chainType: chain_enums_1.ChainType.SOLANA,
    },
    [chain_enums_1.ChainSymbol.TRX]: {
        chainSymbol: chain_enums_1.ChainSymbol.TRX,
        name: "Tron",
        chainType: chain_enums_1.ChainType.TRX,
    },
    [chain_enums_1.ChainSymbol.SRB]: {
        chainSymbol: chain_enums_1.ChainSymbol.SRB,
        name: "Stellar",
        chainType: chain_enums_1.ChainType.SRB,
    },
    [chain_enums_1.ChainSymbol.STLR]: {
        chainSymbol: chain_enums_1.ChainSymbol.STLR,
        name: "Stellar",
        chainType: chain_enums_1.ChainType.SRB,
    },
    [chain_enums_1.ChainSymbol.SUI]: {
        chainSymbol: chain_enums_1.ChainSymbol.SUI,
        name: "Sui",
        chainType: chain_enums_1.ChainType.SUI,
    },
};
exports.Chains = (() => {
    let chainProperties = { ...defaultProperties };
    return {
        addChainsProperties(additionalProperties) {
            chainProperties = { ...chainProperties, ...additionalProperties };
        },
        getChainProperty(chainSymbol) {
            const property = chainProperties[chainSymbol];
            if (!property) {
                throw new exceptions_1.SdkError(`Cannot find chain properties for ${chainSymbol}`);
            }
            return property;
        },
        getChainsProperties() {
            return chainProperties;
        },
        getChainDecimalsByType(chainType) {
            return chainDecimalsByType[chainType];
        },
    };
})();
//# sourceMappingURL=index.js.map