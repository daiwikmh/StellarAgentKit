{"version":3,"sources":["../src/signers/base-signer.ts","../src/signers/local-signer.ts","../src/signers/wallet-signer.ts","../src/agent.ts","../src/constants/price-feed.ts","../src/tools/amnis/stake-token.ts","../src/tools/amnis/withdraw-stake.ts","../src/tools/aptos/balance.ts","../src/tools/aptos/burn-nft.ts","../src/tools/aptos/burn-token.ts","../src/tools/aptos/transfer-nft.ts","../src/tools/aptos/transfer-token.ts","../src/tools/aptos/mint-token.ts","../src/tools/aptos/create-token.ts","../src/tools/aptos/get-transaction.ts","../src/tools/aptos/get-token-details.ts","../src/tools/aptos/get-token-price.ts","../src/tools/joule/lend.ts","../src/tools/joule/borrow.ts","../src/tools/joule/repay.ts","../src/tools/joule/withdraw.ts","../src/tools/joule/pool-detail.ts","../src/tools/joule/user-position.ts","../src/utils/clean-joule-all-positions-list.ts","../src/tools/joule/user-all-positions.ts","../src/tools/joule/claim-reward.ts","../src/tools/aries/create-profile.ts","../src/tools/aries/lend.ts","../src/tools/aries/borrow.ts","../src/tools/aries/withdraw.ts","../src/tools/aries/repay.ts","../src/tools/echelon/lend.ts","../src/tools/echelon/withdraw.ts","../src/tools/echelon/repay.ts","../src/tools/echelon/borrow.ts","../src/tools/echo/stake.ts","../src/tools/echo/unstake.ts","../src/tools/liquidswap/swap.ts","../src/tools/liquidswap/create-pool.ts","../src/tools/liquidswap/add-liquidity.ts","../src/tools/liquidswap/remove-liquidity.ts","../src/tools/panora/swap.ts","../src/tools/openai/create-image.ts","../src/tools/thala/stake.ts","../src/tools/thala/unstake.ts","../src/tools/thala/mint-mod.ts","../src/tools/thala/redeem-mod.ts","../src/tools/thala/add-liquidity.ts","../src/tools/thala/remove-liquidity.ts","../src/tools/thala/create-pool.ts","../src/tools/merkletrade/place-limit-order.ts","../src/tools/merkletrade/error.ts","../src/tools/merkletrade/place-market-order.ts","../src/tools/merkletrade/close-position.ts","../src/tools/merkletrade/get-positions.ts","../src/utils/get-pool-address-by-token-name.ts","../src/langchain/account/address.ts","../src/langchain/amnis/stake.ts","../src/langchain/amnis/withdraw-stake.ts","../src/langchain/aptos/balance.ts","../src/langchain/aptos/get-token-details.ts","../src/langchain/aptos/transfer-token.ts","../src/langchain/aptos/burn-token.ts","../src/langchain/aptos/mint-token.ts","../src/langchain/aptos/create-token.ts","../src/langchain/aptos/get-transaction.ts","../src/langchain/aptos/get-token-price.ts","../src/langchain/aries/create-profile.ts","../src/langchain/aries/lend-token.ts","../src/utils/parse-json.ts","../src/langchain/aries/withdraw-token.ts","../src/langchain/aries/borrow-token.ts","../src/langchain/aries/repay-token.ts","../src/langchain/joule/lend-token.ts","../src/langchain/joule/borrow-token.ts","../src/langchain/joule/withdraw-token.ts","../src/langchain/joule/repay-token.ts","../src/langchain/joule/get-pool-details.ts","../src/langchain/joule/get-user-position.ts","../src/langchain/joule/get-user-all-positions.ts","../src/langchain/joule/claim-reward.ts","../src/langchain/liquidswap/swap.ts","../src/langchain/liquidswap/create-pool.ts","../src/utils/parse-fungible-asset-to-wrapped-asset.ts","../src/langchain/liquidswap/add-liquidity.ts","../src/langchain/liquidswap/remove-liquidity.ts","../src/langchain/echelon/lend-token.ts","../src/langchain/echelon/withdraw-token.ts","../src/langchain/echelon/repay-token.ts","../src/langchain/echelon/borrow-token.ts","../src/langchain/echo/stake.ts","../src/langchain/echo/unstake.ts","../src/langchain/merkletrade/get-position.ts","../src/langchain/merkletrade/place-limit-order.ts","../src/langchain/merkletrade/place-market-order.ts","../src/langchain/merkletrade/close-position.ts","../src/langchain/openai/create-image.ts","../src/langchain/panora/swap.ts","../src/langchain/thala/stake.ts","../src/langchain/thala/unstake.ts","../src/langchain/thala/mint-mod.ts","../src/langchain/thala/redeem-mod.ts","../src/langchain/thala/add-liquidity.ts","../src/langchain/thala/remove-liquidity.ts","../src/langchain/thala/create-pool.ts","../src/langchain/index.ts"],"sourcesContent":["// src/signers/base-signer.ts\n\nimport type { Account, AccountAddress, AnyRawTransaction, Aptos } from \"@aptos-labs/ts-sdk\"\nimport type {\n\tAptosSignMessageInput,\n\tAptosSignMessageOutput,\n\tInputTransactionData,\n} from \"@aptos-labs/wallet-adapter-react\"\nimport type { SignedTransactionResponse } from \"../types\"\n\nexport abstract class BaseSigner {\n\tprotected constructor(\n\t\tprotected readonly account: Account,\n\t\tprotected readonly aptos: Aptos\n\t) {}\n\n\tpublic getAddress(): AccountAddress {\n\t\treturn this.account.accountAddress\n\t}\n\n\t//  abstract getAccount(): Account;\n\tabstract signTransaction(transaction: AnyRawTransaction): Promise<SignedTransactionResponse>\n\tabstract sendTransaction(transaction: InputTransactionData | AnyRawTransaction): Promise<string>\n\tabstract signMessage(message: AptosSignMessageInput | string): Promise<AptosSignMessageOutput | string>\n}\n","// src/signers/local-signer.ts\n\nimport {\n\ttype Account,\n\ttype AccountAddress,\n\ttype AnyRawTransaction,\n\tAptos,\n\tAptosConfig,\n\tNetwork,\n} from \"@aptos-labs/ts-sdk\"\nimport { BaseSigner } from \"./base-signer\"\n\nexport class LocalSigner extends BaseSigner {\n\tconstructor(account: Account, network: Network = Network.DEVNET) {\n\t\tconst config = new AptosConfig({ network })\n\t\tconst aptos = new Aptos(config)\n\t\tsuper(account, aptos)\n\t}\n\n\tpublic getAddress(): AccountAddress {\n\t\treturn this.account.accountAddress\n\t}\n\n\tasync signTransaction(transaction: AnyRawTransaction) {\n\t\tconst senderAuthenticator = this.aptos.transaction.sign({\n\t\t\tsigner: this.account,\n\t\t\ttransaction,\n\t\t})\n\n\t\treturn {\n\t\t\tsenderAuthenticator,\n\t\t}\n\t}\n\n\tasync sendTransaction(transaction: AnyRawTransaction) {\n\t\tconst signedTx = await this.signTransaction(transaction)\n\n\t\tconst submittedTx = await this.aptos.transaction.submit.simple({\n\t\t\ttransaction,\n\t\t\tsenderAuthenticator: signedTx.senderAuthenticator,\n\t\t})\n\n\t\tconst result = await this.aptos.waitForTransaction({\n\t\t\ttransactionHash: submittedTx.hash,\n\t\t})\n\n\t\treturn result.hash\n\t}\n\n\tasync signMessage(message: any): Promise<string> {\n\t\tconst signedMessage = this.account.signWithAuthenticator(message)\n\n\t\treturn signedMessage.toString()\n\t}\n}\n","import { type Account, AccountAddress, type AnyRawTransaction, Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\"\nimport type { AptosSignMessageInput, InputTransactionData, WalletContextState } from \"@aptos-labs/wallet-adapter-react\"\nimport type { SignedTransactionResponse } from \"../types\"\nimport { BaseSigner } from \"./base-signer\"\n\nexport class WalletSigner extends BaseSigner {\n\tconstructor(\n\t\taccount: Account,\n\t\tprivate readonly wallet: WalletContextState,\n\t\tnetwork: Network = Network.DEVNET\n\t) {\n\t\tconst config = new AptosConfig({ network })\n\t\tconst aptos = new Aptos(config)\n\t\tsuper(account, aptos)\n\t}\n\n\tpublic override getAddress(): AccountAddress {\n\t\tconst walletAddress = this.wallet?.account?.address\n\t\treturn walletAddress ? AccountAddress.fromString(walletAddress.toString()) : this.account.accountAddress\n\t}\n\n\tasync signTransaction(transaction: AnyRawTransaction): Promise<SignedTransactionResponse> {\n\t\tconst senderAuthenticator = await this.wallet.signTransaction({\n\t\t\ttransactionOrPayload: transaction,\n\t\t})\n\t\treturn {\n\t\t\tsenderAuthenticator: senderAuthenticator.authenticator,\n\t\t}\n\t}\n\n\tasync sendTransaction(transaction: InputTransactionData): Promise<string> {\n\t\tconst txHash = await this.wallet.signAndSubmitTransaction(transaction)\n\n\t\treturn txHash.hash\n\t}\n\n\tasync signMessage(message: AptosSignMessageInput) {\n\t\treturn this.wallet.signMessage(message)\n\t}\n}\n","import type { AccountAddress, Aptos, MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport { AptosPriceServiceConnection } from \"@pythnetwork/pyth-aptos-js\"\nimport { priceFeed } from \"./constants/price-feed\"\nimport type { BaseSigner } from \"./signers\"\nimport {\n\tborrowToken,\n\tburnNFT,\n\tburnToken,\n\tclaimReward,\n\tcreateToken,\n\tgetBalance,\n\tgetPoolDetails,\n\tgetTokenDetails,\n\tgetTokenPrice,\n\tgetTransaction,\n\tgetUserAllPositions,\n\tgetUserPosition,\n\tlendToken,\n\tmintToken,\n\trepayToken,\n\tstakeTokens,\n\ttransferNFT,\n\ttransferTokens,\n\tunstakeTokens,\n\twithdrawToken,\n} from \"./tools\"\nimport {\n\tborrowAriesToken,\n\tcreateAriesProfile,\n\tlendAriesToken,\n\trepayAriesToken,\n\twithdrawAriesToken,\n} from \"./tools/aries\"\nimport {\n\tborrowTokenWithEchelon,\n\tlendTokenWithEchelon,\n\trepayTokenWithEchelon,\n\twithdrawTokenWithEchelon,\n} from \"./tools/echelon\"\nimport { stakeTokenWithEcho, unstakeTokenWithEcho } from \"./tools/echo\"\nimport { addLiquidity, createPool, removeLiquidity, swap } from \"./tools/liquidswap\"\nimport {\n\tclosePositionWithMerkleTrade,\n\tgetPositionsWithMerkleTrade,\n\tplaceLimitOrderWithMerkleTrade,\n\tplaceMarketOrderWithMerkleTrade,\n} from \"./tools/merkletrade\"\nimport { createImage } from \"./tools/openai\"\nimport { swapWithPanora } from \"./tools/panora\"\nimport {\n\taddLiquidityWithThala,\n\tcreatePoolWithThala,\n\tmintMODWithThala,\n\tredeemMODWithThala,\n\tremoveLiquidityWithThala,\n\tstakeTokenWithThala,\n\tunstakeAPTWithThala,\n} from \"./tools/thala\"\nimport { getTokenByTokenName } from \"./utils/get-pool-address-by-token-name\"\n\nexport class AgentRuntime {\n\tpublic account: BaseSigner\n\tpublic aptos: Aptos\n\tpublic config: any\n\n\tconstructor(account: BaseSigner, aptos: Aptos, config?: any) {\n\t\tthis.account = account\n\t\tthis.aptos = aptos\n\t\tthis.config = config ? config : {}\n\t}\n\n\tasync getPythData() {\n\t\tconst connection = new AptosPriceServiceConnection(\"https://hermes.pyth.network\")\n\n\t\treturn await connection.getPriceFeedsUpdateData(priceFeed)\n\t}\n\n\tgetBalance(mint?: string | MoveStructId) {\n\t\treturn getBalance(this, mint)\n\t}\n\n\tgetTokenDetails(token: string) {\n\t\treturn getTokenDetails(token)\n\t}\n\n\tgetTokenByTokenName(name: string) {\n\t\treturn getTokenByTokenName(name)\n\t}\n\n\tgetTokenPrice(query: string) {\n\t\treturn getTokenPrice(query)\n\t}\n\n\ttransferTokens(to: AccountAddress, amount: number, mint: string) {\n\t\treturn transferTokens(this, to, amount, mint)\n\t}\n\n\tgetTransaction(hash: string) {\n\t\treturn getTransaction(this, hash)\n\t}\n\n\tburnToken(amount: number, mint: string) {\n\t\treturn burnToken(this, amount, mint)\n\t}\n\n\tcreateToken(name: string, symbol: string, iconURI: string, projectURI: string) {\n\t\treturn createToken(this, name, symbol, iconURI, projectURI)\n\t}\n\n\tmintToken(to: AccountAddress, mint: string, amount: number) {\n\t\treturn mintToken(this, to, mint, amount)\n\t}\n\n\tstakeTokensWithAmnis(to: AccountAddress, amount: number) {\n\t\treturn stakeTokens(this, to, amount)\n\t}\n\n\twithdrawStakeFromAmnis(to: AccountAddress, amount: number) {\n\t\treturn unstakeTokens(this, to, amount)\n\t}\n\n\ttransferNFT(to: AccountAddress, mint: AccountAddress) {\n\t\treturn transferNFT(this, to, mint)\n\t}\n\n\tburnNFT(mint: AccountAddress) {\n\t\treturn burnNFT(this, mint)\n\t}\n\n\tlendToken(amount: number, mint: MoveStructId, positionId: string, newPosition: boolean, fungibleAsset: boolean) {\n\t\treturn lendToken(this, amount, mint, positionId, newPosition, fungibleAsset)\n\t}\n\n\tborrowToken(amount: number, mint: MoveStructId, positionId: string, fungibleAsset: boolean) {\n\t\treturn borrowToken(this, amount, mint, positionId, fungibleAsset)\n\t}\n\n\twithdrawToken(amount: number, mint: MoveStructId, positionId: string, fungibleAsset: boolean) {\n\t\treturn withdrawToken(this, amount, mint, positionId, fungibleAsset)\n\t}\n\n\trepayToken(amount: number, mint: MoveStructId, positionId: string, fungibleAsset: boolean) {\n\t\treturn repayToken(this, amount, mint, positionId, fungibleAsset)\n\t}\n\n\tgetUserPosition(userAddress: AccountAddress, positionId: string) {\n\t\treturn getUserPosition(this, userAddress, positionId)\n\t}\n\n\tgetUserAllPositions(userAddress: AccountAddress) {\n\t\treturn getUserAllPositions(this, userAddress)\n\t}\n\tgetPoolDetails(mint: string) {\n\t\treturn getPoolDetails(this, mint)\n\t}\n\n\taddLiquidity(mintX: MoveStructId, mintY: MoveStructId, mintXAmount: number, mintYAmount: number) {\n\t\treturn addLiquidity(this, mintX, mintY, mintXAmount, mintYAmount)\n\t}\n\n\tremoveLiquidity(mintX: MoveStructId, mintY: MoveStructId, lpAmount: number, minMintX = 0, minMintY = 0) {\n\t\treturn removeLiquidity(this, mintX, mintY, lpAmount, minMintX, minMintY)\n\t}\n\n\tswap(mintX: MoveStructId, mintY: MoveStructId, swapAmount: number, minCoinOut?: number) {\n\t\treturn swap(this, mintX, mintY, swapAmount, minCoinOut)\n\t}\n\n\tcreatePool(mintX: MoveStructId, mintY: MoveStructId) {\n\t\treturn createPool(this, mintX, mintY)\n\t}\n\n\tclaimReward(rewardCoinType: MoveStructId | string) {\n\t\treturn claimReward(this, rewardCoinType)\n\t}\n\n\t// Aries\n\n\tcreateAriesProfile() {\n\t\treturn createAriesProfile(this)\n\t}\n\n\tlendAriesToken(mintType: MoveStructId, amount: number) {\n\t\treturn lendAriesToken(this, mintType, amount)\n\t}\n\n\tborrowAriesToken(mintType: MoveStructId, amount: number) {\n\t\treturn borrowAriesToken(this, mintType, amount)\n\t}\n\n\twithdrawAriesToken(mintType: MoveStructId, amount: number) {\n\t\treturn withdrawAriesToken(this, mintType, amount)\n\t}\n\n\trepayAriesToken(mintType: MoveStructId, amount: number) {\n\t\treturn repayAriesToken(this, mintType, amount)\n\t}\n\n\t// Thala\n\n\tstakeTokensWithThala(amount: number) {\n\t\treturn stakeTokenWithThala(this, amount)\n\t}\n\n\tunstakeTokensWithThala(amount: number) {\n\t\treturn unstakeAPTWithThala(this, amount)\n\t}\n\n\tmintMODWithThala(mintType: MoveStructId, amount: number) {\n\t\treturn mintMODWithThala(this, mintType, amount)\n\t}\n\n\tredeemMODWithThala(mintType: MoveStructId, amount: number) {\n\t\treturn redeemMODWithThala(this, mintType, amount)\n\t}\n\n\taddLiquidityWithThala(mintX: MoveStructId, mintY: MoveStructId, mintXAmount: number, mintYAmount: number) {\n\t\treturn addLiquidityWithThala(this, mintX, mintY, mintXAmount, mintYAmount)\n\t}\n\n\tremoveLiquidityWithThala(mintX: MoveStructId, mintY: MoveStructId, lpAmount: number) {\n\t\treturn removeLiquidityWithThala(this, mintX, mintY, lpAmount)\n\t}\n\n\tcreatePoolWithThala(\n\t\tmintX: MoveStructId | string,\n\t\tmintY: MoveStructId | string,\n\t\tamountX: number,\n\t\tamountY: number,\n\t\tfeeTier: number,\n\t\tamplificationFactor: number\n\t) {\n\t\treturn createPoolWithThala(this, mintX, mintY, amountX, amountY, feeTier, amplificationFactor)\n\t}\n\n\t// panora\n\n\tswapWithPanora(fromToken: string, toToken: string, swapAmount: number, toWalletAddress?: string) {\n\t\treturn swapWithPanora(this, fromToken, toToken, swapAmount, toWalletAddress)\n\t}\n\n\t// openai\n\n\tcreateImageWithOpenAI(prompt: string, size: \"256x256\" | \"512x512\" | \"1024x1024\", n: number) {\n\t\treturn createImage(this, prompt, size, n)\n\t}\n\n\t// Echo\n\n\tstakeTokenWithEcho(amount: number) {\n\t\treturn stakeTokenWithEcho(this, amount)\n\t}\n\n\tunstakeTokenWithEcho(amount: number) {\n\t\treturn unstakeTokenWithEcho(this, amount)\n\t}\n\n\t// Echelon\n\n\tlendTokenWithEchelon(mintType: MoveStructId, amount: number, poolAddress: string, fungibleAsset: boolean) {\n\t\treturn lendTokenWithEchelon(this, mintType, amount, poolAddress, fungibleAsset)\n\t}\n\n\twithdrawTokenWithEchelon(mintType: MoveStructId, amount: number, poolAddress: string, fungibleAsset: boolean) {\n\t\treturn withdrawTokenWithEchelon(this, mintType, amount, poolAddress, fungibleAsset)\n\t}\n\n\trepayTokenWithEchelon(mintType: MoveStructId, amount: number, poolAddress: string, fungibleAsset: boolean) {\n\t\treturn repayTokenWithEchelon(this, mintType, amount, poolAddress, fungibleAsset)\n\t}\n\n\tborrowTokenWithEchelon(mintType: MoveStructId, amount: number, poolAddress: string, fungibleAsset: boolean) {\n\t\treturn borrowTokenWithEchelon(this, mintType, amount, poolAddress, fungibleAsset)\n\t}\n\n\t// MerkleTrade\n\n\tplaceMarketOrderWithMerkleTrade(pair: string, isLong: boolean, sizeDelta: number, collateralDelta: number) {\n\t\treturn placeMarketOrderWithMerkleTrade(this, pair, isLong, sizeDelta, collateralDelta)\n\t}\n\n\tplaceLimitOrderWithMerkleTrade(\n\t\tpair: string,\n\t\tisLong: boolean,\n\t\tsizeDelta: number,\n\t\tcollateralDelta: number,\n\t\tprice: number\n\t) {\n\t\treturn placeLimitOrderWithMerkleTrade(this, pair, isLong, sizeDelta, collateralDelta, price)\n\t}\n\n\tclosePositionWithMerkleTrade(pair: string, isLong: boolean) {\n\t\treturn closePositionWithMerkleTrade(this, pair, isLong)\n\t}\n\n\tgetPositionsWithMerkleTrade() {\n\t\treturn getPositionsWithMerkleTrade(this)\n\t}\n}\n","export const priceFeed = [\n\t\"0xeaa020c61cc479712813461ce153894a96a6c00b21ed0cfc2798d1f9a9e9c94a\",\n\t\"0x2b89b9dc8fdf9f34709a5b106b472f0f39bb6ca9ce04b0fd7f2e971688e2e53b\",\n\t\"0x2b89b9dc8fdf9f34709a5b106b472f0f39bb6ca9ce04b0fd7f2e971688e2e53b\",\n\t\"0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5\",\n\t\"0x9d4294bbcd1174d6f2003ec365831e64cc31d9f6f15a2b85399db8d5000960f6\",\n\t\"0x03ae4db29ed4ae33d323568895aa00337e658e348b37509f5372ae51f0af00d5\",\n\t\"0xc9d8b075a5c69303365ae23633d4e085199bf5c520a3b90fed1322a0342ffc33\",\n\t\"0xe62df6c8b4a85fe1a67db44dc12de5db330f7ac66b72dc658afedf0f4a415b43\",\n]\n","import { type AccountAddress, convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Stake APT or any tokens on Amnis\n * @param agent MoveAgentKit instance\n * @param to Recipient's public key\n * @param amount Amount to transfer\n * @returns Transaction signature\n */\nexport async function stakeTokens(agent: AgentRuntime, to: AccountAddress, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::router::deposit_and_stake_entry\",\n\t\t\t\tfunctionArguments: [amount, to.toString()],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token staking failed\")\n\t\t\tthrow new Error(\"Token staking failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Token staking failed: ${error.message}`)\n\t}\n}\n","import type { AccountAddress } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Unstake APT or any tokens on Amnis\n * @param agent MoveAgentKit instance\n * @param to Recipient's public key\n * @param amount Amount to unstake\n * @returns Transaction signature\n */\nexport async function unstakeTokens(agent: AgentRuntime, to: AccountAddress, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::router::unstake_entry\",\n\t\t\t\tfunctionArguments: [amount, to.toString()],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token unstaking failed\")\n\t\t\tthrow new Error(\"Token unstaking failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Token unstaking failed: ${error.message}`)\n\t}\n}\n","import { type MoveStructId, convertAmountFromOnChainToHumanReadable } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Fetches balance of an aptos account\n * @param agent MoveAgentKit instance\n * @returns Transaction signature\n * @example\n * ```ts\n * const balance = await getBalance(agent)\n * ```\n */\nexport async function getBalance(agent: AgentRuntime, mint?: string | MoveStructId): Promise<number> {\n\ttry {\n\t\tif (mint) {\n\t\t\tlet balance: number\n\t\t\tif (mint.split(\"::\").length !== 3) {\n\t\t\t\tconst balances = await agent.aptos.getCurrentFungibleAssetBalances({\n\t\t\t\t\toptions: {\n\t\t\t\t\t\twhere: {\n\t\t\t\t\t\t\towner_address: {\n\t\t\t\t\t\t\t\t_eq: agent.account.getAddress().toStringLong(),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tasset_type: { _eq: mint },\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tbalance = balances[0].amount ?? 0\n\t\t\t} else {\n\t\t\t\tbalance = await agent.aptos.getAccountCoinAmount({\n\t\t\t\t\taccountAddress: agent.account.getAddress(),\n\t\t\t\t\tcoinType: mint as MoveStructId,\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn balance\n\t\t}\n\t\tconst balance = await agent.aptos.getAccountAPTAmount({\n\t\t\taccountAddress: agent.account.getAddress(),\n\t\t})\n\n\t\tconst convertedBalance = convertAmountFromOnChainToHumanReadable(balance, 8)\n\n\t\treturn convertedBalance\n\t} catch (error: any) {\n\t\tthrow new Error(`Token transfer failed: ${error.message}`)\n\t}\n}\n","import { type AccountAddress, Aptos, AptosConfig } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Burn NFT\n * @param agent MoveAgentKit instance\n * @param mint NFT mint address\n * @returns Transaction signature\n */\nexport async function burnNFT(agent: AgentRuntime, mint: AccountAddress): Promise<string> {\n\treturn \"\"\n\t//  try {\n\t//    const transaction = await agent.aptos.burnDigitalAssetTransaction({\n\t//      creator: agent.account.getAccount(),\n\t//      digitalAssetAddress: mint,\n\t//    });\n\n\t//    const committedTransactionHash = await agent.account.sendTransaction(transaction);\n\n\t//    const signedTransaction = await agent.aptos.waitForTransaction({\n\t//      transactionHash: committedTransactionHash,\n\t//    });\n\n\t//    if (!signedTransaction.success) {\n\t//      console.error(signedTransaction, \"NFT burn failed\");\n\t//      throw new Error(\"NFT burn failed\");\n\t//    }\n\n\t//    return signedTransaction.hash;\n\t//  } catch (error: any) {\n\t//    throw new Error(`NFT burn failed: ${error.message}`);\n\t//  }\n}\n","import type { AgentRuntime } from \"../../agent\"\n\n/**\n * Burn fungible asset token\n * @param agent MoveAgentKit instance\n * @param amount Amount to burn\n * @param mint Fungible asset address to burn\n * @returns Transaction signature\n */\nexport async function burnToken(agent: AgentRuntime, amount: number, mint: string): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x67c8564aee3799e9ac669553fdef3a3828d4626f24786b6a5642152fa09469dd::launchpad::burn_fa\",\n\t\t\t\tfunctionArguments: [mint, amount],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token burn failed\")\n\t\t\tthrow new Error(\"Token burn failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Token burn failed: ${error.message}`)\n\t}\n}\n","import { type AccountAddress, Aptos, AptosConfig } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Transfer NFT\n * @param agent MoveAgentKit instance\n * @param to Recipient's public key\n * @param mint NFT mint address\n * @returns Transaction signature\n */\nexport async function transferNFT(\n\tagent: AgentRuntime, // Replace with the actual type of the move-agent\n\tto: AccountAddress,\n\tmint: AccountAddress\n): Promise<string> {\n\treturn \"\"\n\t//  try {\n\t//    const transaction = await agent.aptos.transferDigitalAssetTransaction({\n\t//      sender: agent.account.getAccount(),\n\t//      digitalAssetAddress: mint,\n\t//      recipient: to,\n\t//    });\n\n\t//    const committedTransaction = await agent.aptos.signAndSubmitTransaction({\n\t//      signer: agent.account.getAccount(),\n\t//      transaction,\n\t//    });\n\n\t//    const signedTransaction = await agent.aptos.waitForTransaction({\n\t//      transactionHash: committedTransaction.hash,\n\t//    });\n\n\t//    if (!signedTransaction.success) {\n\t//      console.error(signedTransaction, \"NFT transfer failed\");\n\t//      throw new Error(\"NFT transfer failed\");\n\t//    }\n\n\t//    return signedTransaction.hash;\n\t//  } catch (error: any) {\n\t//    throw new Error(`NFT transfer failed: ${error.message}`);\n\t//  }\n}\n","import {\n\ttype AccountAddress,\n\ttype InputGenerateTransactionPayloadData,\n\tconvertAmountFromHumanReadableToOnChain,\n} from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Transfer APT, tokens or fungible asset to a recipient\n * @param agent MoveAgentKit instance\n * @param to Recipient's public key\n * @param amount Amount to transfer\n * @param mint Move struct ID or address of the token / fungible asset to transfer\n * @returns Transaction signature\n * @example\n * ```ts\n * const transactionHash = await transferTokens(agent, recipientAddress, amount, APTOS_COIN); // For APT\n * const otherTransactionHash = await transferTokens(agent, recipientAddress, amount, OTHER_TOKEN); // For another token\n * const fungibleAssetTransactionHash = await transferTokens(agent, recipientAddress, amount, fungibleAssetAddress); // For fungible asset\n * ```\n */\nexport async function transferTokens(\n\tagent: AgentRuntime,\n\tto: AccountAddress,\n\tamount: number,\n\tmint: string\n): Promise<string> {\n\tconst COIN_STANDARD_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x1::coin::transfer\",\n\t\ttypeArguments: [mint],\n\t\tfunctionArguments: [to.toString(), amount],\n\t}\n\n\tconst FUNGIBLE_ASSET_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x1::primary_fungible_store::transfer\",\n\t\ttypeArguments: [\"0x1::fungible_asset::Metadata\"],\n\t\tfunctionArguments: [mint, to.toString(), amount],\n\t}\n\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: mint.split(\"::\").length === 3 ? COIN_STANDARD_DATA : FUNGIBLE_ASSET_DATA,\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token transfer failed\")\n\t\t\tthrow new Error(\"Token transfer failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Token transfer failed: ${error.message}`)\n\t}\n}\n","import { Account, type AccountAddress } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Mint a fungible asset token\n * @param agent MoveAgentKit instance\n * @param name Name of the token\n * @param symbol Symbol of the token\n * @param iconURI URI of the token icon\n * @param projectURI URI of the token project\n */\nexport async function mintToken(\n\tagent: AgentRuntime,\n\tto: AccountAddress,\n\tmint: string,\n\tamount: number\n): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x67c8564aee3799e9ac669553fdef3a3828d4626f24786b6a5642152fa09469dd::launchpad::mint_to_address\",\n\t\t\t\tfunctionArguments: [to.toString(), mint, amount],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token mint failed\")\n\t\t\tthrow new Error(\"Token mint failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Token mint failed: ${error.message}`)\n\t}\n}\n","import type { AgentRuntime } from \"../../agent\"\n\n/**\n * Create a fungible asset token\n * @param agent MoveAgentKit instance\n * @param name Name of the token\n * @param symbol Symbol of the token\n * @param iconURI URI of the token icon\n * @param projectURI URI of the token project\n */\nexport async function createToken(\n\tagent: AgentRuntime,\n\tname: string,\n\tsymbol: string,\n\ticonURI: string,\n\tprojectURI: string\n): Promise<{\n\thash: string\n\ttoken: any\n}> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x67c8564aee3799e9ac669553fdef3a3828d4626f24786b6a5642152fa09469dd::launchpad::create_fa_simple\",\n\t\t\t\tfunctionArguments: [name, symbol, iconURI, projectURI],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token creation failed\")\n\t\t\tthrow new Error(\"Token creation failed\")\n\t\t}\n\n\t\treturn {\n\t\t\thash: signedTransaction.hash,\n\t\t\t// @ts-ignore\n\t\t\ttoken: signedTransaction.events[0].data.fa_obj.inner,\n\t\t}\n\t} catch (error: any) {\n\t\tthrow new Error(`Token creation failed: ${error.message}`)\n\t}\n}\n","import type { TransactionResponse } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Fetches transaction from aptos\n * @param agent MoveAgentKit instance\n * @param hash Transaction Hash\n * @returns Transaction signature\n * @example\n * ```ts\n * const transaction = await getTransaction(agent, \"HASH\")\n * ```\n */\nexport async function getTransaction(agent: AgentRuntime, hash: string): Promise<TransactionResponse> {\n\ttry {\n\t\tconst transaction = await agent.aptos.getTransactionByHash({\n\t\t\ttransactionHash: hash,\n\t\t})\n\n\t\treturn transaction\n\t} catch (error: any) {\n\t\tthrow new Error(`Token transfer failed: ${error.message}`)\n\t}\n}\n","import axios from \"axios\"\nimport { AgentRuntime } from \"../../agent\"\n\n/**\n * Fetches balance of an aptos account\n * @param agent MoveAgentKit instance\n * @returns Transaction signature\n * @example\n * ```ts\n * const balance = await getBalance(agent)\n * ```\n */\nexport async function getTokenDetails(tokenAddress: string): Promise<any> {\n\ttry {\n\t\tconst res = await axios.get(\n\t\t\t\"https://raw.githubusercontent.com/PanoraExchange/Aptos-Tokens/refs/heads/main/token-list.json\"\n\t\t)\n\t\tconst tokenData = await res.data\n\n\t\tif (!tokenAddress || tokenAddress === \"\") return tokenData[0]\n\n\t\tconst token = tokenData.find(\n\t\t\t(tokenAddr: any) => (tokenAddr.tokenAddress || tokenAddr.faAddress).toLowerCase() === tokenAddress.toLowerCase()\n\t\t)\n\n\t\tif (!token && tokenAddress.includes(\"fa_to_coin_wrapper::WrappedUSDT\")) {\n\t\t\treturn tokenData.find(\n\t\t\t\t(e: any) => e.faAddress === \"0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\"\n\t\t\t)\n\t\t}\n\t\tif (!token) throw new Error(\"Cannot find token\")\n\n\t\treturn token\n\t} catch (error: any) {\n\t\tthrow new Error(`Token transfer failed: ${error.message}`)\n\t}\n}\n","/**\n * Fetches token price from the Pyth network\n * @param query Token query to search for\n * @returns Price feed data\n */\nexport async function getTokenPrice(query: string): Promise<any> {\n\ttry {\n\t\tconst assetDataResponse = await fetch(`https://hermes.pyth.network/v2/price_feeds?query=${query}&asset_type=crypto`)\n\n\t\tconst assetData = await assetDataResponse.json()\n\n\t\tconst formattedData = assetData.map((data: any) => {\n\t\t\treturn {\n\t\t\t\tid: data.id,\n\t\t\t\tdisplayName: data.attributes.display_symbol,\n\t\t\t\tsymbol: data.attributes.symbol,\n\t\t\t}\n\t\t})\n\n\t\tconst assetIdArray = formattedData.map((data: any) => data.id)\n\n\t\tif (assetIdArray.length === 0) {\n\t\t\tthrow new Error(\"No assets found for the given query\")\n\t\t}\n\t\tconst assetPriceDataResponse = await fetch(\n\t\t\t`https://hermes.pyth.network/v2/updates/price/latest?ids[]=${assetIdArray.join(\"&ids[]=\")}`\n\t\t)\n\n\t\tconst assetPriceData = await assetPriceDataResponse.json()\n\n\t\tconst priceFeed = formattedData.map((data: any) => {\n\t\t\tconst priceData = assetPriceData.parsed.find((price: any) => price.id === data.id)\n\n\t\t\treturn {\n\t\t\t\t...data,\n\t\t\t\tprice:\n\t\t\t\t\t(Number(priceData.price.price) / 10 ** Math.abs(priceData.price.expo)).toLocaleString() ||\n\t\t\t\t\tNumber(priceData.price.price).toLocaleString(),\n\t\t\t}\n\t\t})\n\n\t\treturn priceFeed\n\t} catch (error: any) {\n\t\tthrow new Error(`Token transfer failed: ${error.message}`)\n\t}\n}\n","import { AccountAddress, type InputGenerateTransactionPayloadData, type MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Lend APT, tokens or fungible asset to a position\n * @param agent MoveAgentKit instance\n * @param amount Amount to mint\n * @param mint The Move struct ID of the token to lend\n * @param positionId The position ID to lend to\n * @param newPosition Whether to create a new position or not\n * @param fungibleAssetAddress The address of the fungible asset if the token is fungible (optional)\n * @returns Transaction signature and position ID\n * @example\n * ```ts\n * const transactionHash = await lendToken(agent, amount, APTOS_COIN, positionId, false); // For APT\n * const otherTransactionHash = await lendToken(agent, amount, OTHER_TOKEN, positionId, false); // For another token\n * const fungibleAssetTransactionHash = await lendToken(agent, amount, APTOS_COIN, positionId, false, fungibleAssetAddress); // For fungible asset\n */\nexport async function lendToken(\n\tagent: AgentRuntime,\n\tamount: number,\n\tmint: MoveStructId,\n\tpositionId: string,\n\tnewPosition: boolean,\n\tfungibleAsset: boolean\n): Promise<{ hash: string; positionId: string }> {\n\tconst DEFAULT_FUNCTIONAL_ARGS = [positionId, amount, newPosition]\n\n\tconst COIN_STANDARD_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::lend\",\n\t\ttypeArguments: [mint.toString()],\n\t\tfunctionArguments: DEFAULT_FUNCTIONAL_ARGS,\n\t}\n\n\tconst FUNGIBLE_ASSET_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::lend_fa\",\n\t\tfunctionArguments: [positionId, mint.toString(), newPosition, amount],\n\t}\n\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA,\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\t// check transaction receipt\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token mint failed\")\n\t\t\tthrow new Error(\"Token mint failed\")\n\t\t}\n\n\t\treturn {\n\t\t\thash: signedTransaction.hash,\n\t\t\t// @ts-ignore\n\t\t\tpositionId: signedTransaction.events[0].data.position_id,\n\t\t}\n\t} catch (error: any) {\n\t\tthrow new Error(`Token mint failed: ${error.message}`)\n\t}\n}\n","import { AccountAddress, type InputGenerateTransactionPayloadData, type MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Borrow APT, tokens or fungible asset from a position\n * @param agent MoveAgentKit instance\n * @param amount Amount to mint\n * @param mint The Move struct ID of the token to borrow\n * @param positionId The position ID to borrow from\n * @param fungibleAsset boolean value for fungible asset\n * @returns Transaction signature and position ID\n * @example\n * ```ts\n * const transactionHash = await borrowToken(agent, amount, APTOS_COIN, positionId); // For APT\n * const otherTransactionHash = await borrowToken(agent, amount, OTHER_TOKEN, positionId); // For another token\n * const fungibleAssetTransactionHash = await borrowToken(agent, amount, APTOS_COIN, positionId, fungibleAssetAddress); // For fungible asset\n */\nexport async function borrowToken(\n\tagent: AgentRuntime,\n\tamount: number,\n\tmint: MoveStructId,\n\tpositionId: string,\n\tfungibleAsset: boolean\n): Promise<{\n\thash: string\n\tpositionId: string\n}> {\n\tconst pyth_update_data = await agent.getPythData()\n\n\tconst DEFAULT_FUNCTIONAL_ARGS = [positionId, amount, pyth_update_data]\n\n\tconst COIN_STANDARD_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::borrow\",\n\t\ttypeArguments: [mint.toString()],\n\t\tfunctionArguments: DEFAULT_FUNCTIONAL_ARGS,\n\t}\n\n\tconst FUNGIBLE_ASSET_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::borrow_fa\",\n\t\tfunctionArguments: [positionId, mint.toString(), amount, pyth_update_data],\n\t}\n\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA,\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token borrow failed\")\n\t\t\tthrow new Error(\"Token borrow failed\")\n\t\t}\n\n\t\treturn {\n\t\t\thash: signedTransaction.hash,\n\t\t\tpositionId,\n\t\t}\n\t} catch (error: any) {\n\t\tthrow new Error(`Token borrow failed: ${error.message}`)\n\t}\n}\n","import { AccountAddress, type InputGenerateTransactionPayloadData, type MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Repay APT, tokens or fungible asset from a position\n * @param agent MoveAgentKit instance\n * @param amount Amount to mint\n * @param mint The Move struct ID of the token to repay\n * @param positionId The position ID to repay\n * @param fungibleAssetAddress The address of the fungible asset if the token is fungible (optional)\n * @returns Transaction signature and position ID\n * @example\n * ```ts\n * const transactionHash = await repayToken(agent, amount, APTOS_COIN, positionId); // For APT\n * const otherTransactionHash = await repayToken(agent, amount, OTHER_TOKEN, positionId); // For another token\n * const fungibleAssetTransactionHash = await repayToken(agent, amount, APTOS_COIN, positionId, fungibleAssetAddress); // For fungible asset\n */\nexport async function repayToken(\n\tagent: AgentRuntime,\n\tamount: number,\n\tmint: MoveStructId,\n\tpositionId: string,\n\tfungibleAsset: boolean\n): Promise<{\n\thash: string\n\tpositionId: string\n}> {\n\tconst DEFAULT_FUNCTIONAL_ARGS = [positionId, amount]\n\n\tconst COIN_STANDARD_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::repay\",\n\t\ttypeArguments: [mint.toString()],\n\t\tfunctionArguments: DEFAULT_FUNCTIONAL_ARGS,\n\t}\n\n\tconst FUNGIBLE_ASSET_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::repay_fa\",\n\t\tfunctionArguments: [positionId, mint.toString(), amount],\n\t}\n\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA,\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token repay failed\")\n\t\t\tthrow new Error(\"Token repay failed\")\n\t\t}\n\n\t\treturn {\n\t\t\thash: signedTransaction.hash,\n\t\t\tpositionId,\n\t\t}\n\t} catch (error: any) {\n\t\tthrow new Error(`Token repay failed: ${error.message}`)\n\t}\n}\n","import { AccountAddress, type InputGenerateTransactionPayloadData, type MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Withdraw APT, tokens or fungible asset from a position\n * @param agent MoveAgentKit instance\n * @param amount Amount to mint\n * @param mint The Move struct ID of the token to withdraw\n * @param positionId The position ID to withdraw from\n * @param fungibleAssetAddress The address of the fungible asset if the token is fungible (optional)\n * @returns Transaction signature and position ID\n * @example\n * ```ts\n * const transactionHash = await withdrawToken(agent, amount, APTOS_COIN, positionId); // For APT\n * const otherTransactionHash = await withdrawToken(agent, amount, OTHER_TOKEN, positionId); // For another token\n * const fungibleAssetTransactionHash = await withdrawToken(agent, amount, APTOS_COIN, positionId, fungibleAssetAddress); // For fungible asset\n */\nexport async function withdrawToken(\n\tagent: AgentRuntime,\n\tamount: number,\n\tmint: MoveStructId,\n\tpositionId: string,\n\tfungibleAsset: boolean\n): Promise<{\n\thash: string\n\tpositionId: string\n}> {\n\tconst pyth_update_data = await agent.getPythData()\n\n\tconst DEFAULT_FUNCTIONAL_ARGS = [positionId, amount, pyth_update_data]\n\n\tconst COIN_STANDARD_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::withdraw\",\n\t\ttypeArguments: [mint.toString()],\n\t\tfunctionArguments: DEFAULT_FUNCTIONAL_ARGS,\n\t}\n\n\tconst FUNGIBLE_ASSET_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::withdraw_fa\",\n\t\tfunctionArguments: [positionId, mint.toString(), amount, pyth_update_data],\n\t}\n\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA,\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Token withdraw failed\")\n\t\t\tthrow new Error(\"Token withdraw failed\")\n\t\t}\n\n\t\treturn {\n\t\t\thash: signedTransaction.hash,\n\t\t\tpositionId,\n\t\t}\n\t} catch (error: any) {\n\t\tthrow new Error(`Token withdraw failed: ${error.message}`)\n\t}\n}\n","import type { AgentRuntime } from \"../../agent\"\n\n/**\n * Get details about a specific pool\n * @param agent MoveAgentKit instance\n * @param mint The Move struct ID of the token to get details for\n * @returns Pool details\n * @example\n * ```ts\n * const poolDetails = await getPoolDetails(agent, \"0x1::aptos_coin::AptosCoin\"); // For APT pool\n * const otherPoolDetails = await getPoolDetails(agent, otherCoinAddress); // For other token pool\n * ```\n */\nexport async function getPoolDetails(agent: AgentRuntime, mint: string): Promise<any> {\n\ttry {\n\t\tconst allPoolDetailsResponse = await fetch(\"https://price-api.joule.finance/api/market\")\n\n\t\tconst allPoolDetails = await allPoolDetailsResponse.json()\n\n\t\tconst poolDetail = allPoolDetails.data.find((pool: any) => pool.asset.type.includes(mint))\n\n\t\tif (!poolDetail) {\n\t\t\tthrow new Error(\"Pool not found\")\n\t\t}\n\n\t\treturn {\n\t\t\tassetName: poolDetail.asset.assetName,\n\t\t\ttokenAddress: mint,\n\t\t\tltv: poolDetail.ltv,\n\t\t\tdecimals: poolDetail.asset.decimals,\n\t\t\tmarketSize: Number(poolDetail.marketSize) / poolDetail.asset.decimals,\n\t\t\ttotalBorrowed: Number(poolDetail.totalBorrowed) / poolDetail.asset.decimals,\n\t\t\tdepositApy: poolDetail.depositApy,\n\t\t\textraDepositApy: poolDetail.extraAPY.depositAPY,\n\t\t\tborrowApy: poolDetail.borrowApy,\n\t\t\tprice: poolDetail.priceInfo.price,\n\t\t}\n\t} catch (error: any) {\n\t\tthrow new Error(`Failed to get pool details: ${error.message}`)\n\t}\n}\n","import type { AccountAddress } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Get details about a user's position\n * @param agent MoveAgentKit instance\n * @param userAddress The address of the user\n * @param positionId The ID of the position to query\n * @returns Position details\n * @example\n * ```ts\n * const positionDetails = await getUserPosition(agent, userAddress, positionId);\n * ```\n */\nexport async function getUserPosition(\n\tagent: AgentRuntime,\n\tuserAddress: AccountAddress | string,\n\tpositionId: string\n): Promise<any> {\n\ttry {\n\t\tconst transaction = await agent.aptos.view({\n\t\t\tpayload: {\n\t\t\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::user_position_details\",\n\t\t\t\tfunctionArguments: [userAddress.toString(), positionId],\n\t\t\t},\n\t\t})\n\n\t\tif (!transaction) {\n\t\t\tthrow new Error(\"Failed to fetch user position\")\n\t\t}\n\n\t\treturn transaction\n\t} catch (error: any) {\n\t\tthrow new Error(`Failed to get user position: ${error.message}`)\n\t}\n}\n","export const removeLastInterestRateIndex = (obj: any): any => {\n\tif (!obj || typeof obj !== \"object\") {\n\t\treturn obj\n\t}\n\n\tif (Array.isArray(obj)) {\n\t\treturn obj.map((item) => removeLastInterestRateIndex(item))\n\t}\n\n\treturn Object.entries(obj).reduce((acc: { [key: string]: any }, [key, value]) => {\n\t\tif (key === \"last_interest_rate_index\") {\n\t\t\treturn acc\n\t\t}\n\n\t\tacc[key] = removeLastInterestRateIndex(value)\n\t\treturn acc\n\t}, {})\n}\n","import type { AccountAddress } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { removeLastInterestRateIndex } from \"../../utils/clean-joule-all-positions-list\"\n\n/**\n * Get details about a user's all positions\n * @param agent MoveAgentKit instance\n * @param userAddress The address of the user\n * @returns List of user positions\n */\nexport async function getUserAllPositions(agent: AgentRuntime, userAddress: AccountAddress | string): Promise<any> {\n\ttry {\n\t\tconst transaction = await agent.aptos.view({\n\t\t\tpayload: {\n\t\t\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::user_positions_map\",\n\t\t\t\tfunctionArguments: [userAddress.toString()],\n\t\t\t},\n\t\t})\n\n\t\tif (!transaction) {\n\t\t\tthrow new Error(\"Failed to fetch user all positions\")\n\t\t}\n\n\t\t// TODO : make the amounts human readable // sync with shivam for all view function\n\n\t\tconst cleanedTransaction = removeLastInterestRateIndex(transaction)\n\n\t\treturn cleanedTransaction\n\t} catch (error: any) {\n\t\tthrow new Error(`Failed to get user all positions: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Claim rewards from Joule pool\n * @param agent MoveAgentKit instance\n * @param rewardCoinType The coin type of the reward\n * @returns Transaction signature\n */\nexport async function claimReward(agent: AgentRuntime, rewardCoinType: MoveStructId | string): Promise<string> {\n\ttry {\n\t\tconst coinReward = `${rewardCoinType}1111`.replace(\"0x\", \"@\")\n\n\t\tconst isCoinTypeSTApt =\n\t\t\trewardCoinType === \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::stapt_token::StakedApt\"\n\n\t\tconsole.log({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::claim_rewards\",\n\t\t\t\ttypeArguments: [\n\t\t\t\t\tisCoinTypeSTApt\n\t\t\t\t\t\t? \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::amapt_token::AmnisApt\"\n\t\t\t\t\t\t: \"0x1::aptos_coin::AptosCoin\",\n\t\t\t\t],\n\t\t\t\tfunctionArguments: [coinReward, isCoinTypeSTApt ? \"amAPTIncentives\" : \"APTIncentives\"],\n\t\t\t},\n\t\t})\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x2fe576faa841347a9b1b32c869685deb75a15e3f62dfe37cbd6d52cc403a16f6::pool::claim_rewards\",\n\t\t\t\ttypeArguments: [\n\t\t\t\t\tisCoinTypeSTApt\n\t\t\t\t\t\t? \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::amapt_token::AmnisApt\"\n\t\t\t\t\t\t: \"0x1::aptos_coin::AptosCoin\",\n\t\t\t\t],\n\t\t\t\tfunctionArguments: [coinReward, isCoinTypeSTApt ? \"amAPTIncentives\" : \"APTIncentives\"],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Claim rewards failed\")\n\t\t\tthrow new Error(\"Claim rewards failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Claim rewards failed: ${error.message}`)\n\t}\n}\n","import type { AgentRuntime } from \"../../agent\"\n\n/**\n * Create a profile in Aries\n * @param agent MoveAgentKit instance\n * @returns Transaction signature\n */\nexport async function createAriesProfile(agent: AgentRuntime): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::register_user\",\n\t\t\t\tfunctionArguments: [\"Main account\"],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Create profile failed\")\n\t\t\tthrow new Error(\"Create profile failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Create profile failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Lend tokens in Aries\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to lend\n * @param amount Amount to lend\n * @returns Transaction signature\n */\nexport async function lendAriesToken(agent: AgentRuntime, mintType: MoveStructId, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::deposit\",\n\t\t\t\ttypeArguments: [mintType],\n\t\t\t\tfunctionArguments: [\"Main account\", amount, false],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Lend failed\")\n\t\t\tthrow new Error(\"Lend failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Lend failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Borrow tokens from Aries\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to borrow\n * @param amount Amount to borrow\n * @returns Transaction signature\n */\nexport async function borrowAriesToken(agent: AgentRuntime, mintType: MoveStructId, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::withdraw\",\n\t\t\t\ttypeArguments: [mintType],\n\t\t\t\tfunctionArguments: [\"Main account\", amount, true],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Borrow failed\")\n\t\t\tthrow new Error(\"Borrow failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Borrow failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Withdraw tokens from Aries\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to withdraw\n * @param amount Amount to withdraw\n * @returns Transaction signature\n */\nexport async function withdrawAriesToken(agent: AgentRuntime, mintType: MoveStructId, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::withdraw\",\n\t\t\t\ttypeArguments: [mintType],\n\t\t\t\tfunctionArguments: [\"Main account\", amount, false],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Withdraw failed\")\n\t\t\tthrow new Error(\"Withdraw failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Withdraw failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Repay tokens in Aries\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to repay\n * @param amount Amount to repay\n * @returns Transaction signature\n */\nexport async function repayAriesToken(agent: AgentRuntime, mintType: MoveStructId, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::controller::deposit\",\n\t\t\t\ttypeArguments: [mintType],\n\t\t\t\tfunctionArguments: [\"Main account\", amount, true],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Repay failed\")\n\t\t\tthrow new Error(\"Repay failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Repay failed: ${error.message}`)\n\t}\n}\n","import type { InputGenerateTransactionPayloadData, MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Lend tokens in Echelon\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to lend\n * @param amount Amount to lend\n * @param poolAddress Pool address\n * @param fungibleAsset Whether the asset is fungible\n * @returns Transaction signature\n */\nexport async function lendTokenWithEchelon(\n\tagent: AgentRuntime,\n\tmintType: MoveStructId,\n\tamount: number,\n\tpoolAddress: string,\n\tfungibleAsset: boolean\n): Promise<string> {\n\ttry {\n\t\tconst FUNCTIONAL_ARGS_DATA = [poolAddress, amount]\n\n\t\tconst COIN_STANDARD_DATA: InputGenerateTransactionPayloadData = {\n\t\t\tfunction: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::supply\",\n\t\t\ttypeArguments: [mintType.toString()],\n\t\t\tfunctionArguments: FUNCTIONAL_ARGS_DATA,\n\t\t}\n\n\t\tconst FUNGIBLE_ASSET_DATA: InputGenerateTransactionPayloadData = {\n\t\t\tfunction: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::supply_fa\",\n\t\t\tfunctionArguments: FUNCTIONAL_ARGS_DATA,\n\t\t}\n\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA,\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Lend failed\")\n\t\t\tthrow new Error(\"Lend failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Lend failed: ${error.message}`)\n\t}\n}\n","import type { InputGenerateTransactionPayloadData, MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Withdraw tokens from Echelon\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to lend\n * @param amount Amount to lend\n * @param poolAddress Pool address\n * @param fungibleAsset Whether the asset is fungible\n * @returns Transaction signature\n */\nexport async function withdrawTokenWithEchelon(\n\tagent: AgentRuntime,\n\tmintType: MoveStructId,\n\tamount: number,\n\tpoolAddress: string,\n\tfungibleAsset: boolean\n): Promise<string> {\n\ttry {\n\t\tconst FUNCTIONAL_ARGS_DATA = [poolAddress, amount]\n\n\t\tconst COIN_STANDARD_DATA: InputGenerateTransactionPayloadData = {\n\t\t\tfunction: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::withdraw\",\n\t\t\ttypeArguments: [mintType.toString()],\n\t\t\tfunctionArguments: FUNCTIONAL_ARGS_DATA,\n\t\t}\n\n\t\tconst FUNGIBLE_ASSET_DATA: InputGenerateTransactionPayloadData = {\n\t\t\tfunction: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::withdraw_fa\",\n\t\t\tfunctionArguments: FUNCTIONAL_ARGS_DATA,\n\t\t}\n\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA,\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Withdraw failed\")\n\t\t\tthrow new Error(\"Withdraw failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Withdraw failed: ${error.message}`)\n\t}\n}\n","import type { InputGenerateTransactionPayloadData, MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Repay tokens in Echelon\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to lend\n * @param amount Amount to lend\n * @param poolAddress Pool address\n * @param fungibleAsset Whether the asset is fungible\n * @returns Transaction signature\n */\nexport async function repayTokenWithEchelon(\n\tagent: AgentRuntime,\n\tmintType: MoveStructId,\n\tamount: number,\n\tpoolAddress: string,\n\tfungibleAsset: boolean\n): Promise<string> {\n\ttry {\n\t\tconst FUNCTIONAL_ARGS_DATA = [poolAddress, amount]\n\n\t\tconst COIN_STANDARD_DATA: InputGenerateTransactionPayloadData = {\n\t\t\tfunction: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::repay\",\n\t\t\ttypeArguments: [mintType.toString()],\n\t\t\tfunctionArguments: FUNCTIONAL_ARGS_DATA,\n\t\t}\n\n\t\tconst FUNGIBLE_ASSET_DATA: InputGenerateTransactionPayloadData = {\n\t\t\tfunction: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::repay_fa\",\n\t\t\tfunctionArguments: FUNCTIONAL_ARGS_DATA,\n\t\t}\n\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA,\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Repay failed\")\n\t\t\tthrow new Error(\"Repay failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Repay failed: ${error.message}`)\n\t}\n}\n","import type { InputGenerateTransactionPayloadData, MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Borrow tokens from Echelon\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to lend\n * @param amount Amount to lend\n * @param poolAddress Pool address\n * @param fungibleAsset Whether the asset is fungible\n * @returns Transaction signature\n */\nexport async function borrowTokenWithEchelon(\n\tagent: AgentRuntime,\n\tmintType: MoveStructId,\n\tamount: number,\n\tpoolAddress: string,\n\tfungibleAsset: boolean\n): Promise<string> {\n\tconst FUNCTIONAL_ARGS_DATA = [poolAddress, amount]\n\n\tconst COIN_STANDARD_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::borrow\",\n\t\ttypeArguments: [mintType.toString()],\n\t\tfunctionArguments: FUNCTIONAL_ARGS_DATA,\n\t}\n\n\tconst FUNGIBLE_ASSET_DATA: InputGenerateTransactionPayloadData = {\n\t\tfunction: \"0xc6bc659f1649553c1a3fa05d9727433dc03843baac29473c817d06d39e7621ba::scripts::borrow_fa\",\n\t\tfunctionArguments: FUNCTIONAL_ARGS_DATA,\n\t}\n\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: fungibleAsset ? FUNGIBLE_ASSET_DATA : COIN_STANDARD_DATA,\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Borrow failed\")\n\t\t\tthrow new Error(\"Borrow failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Borrow failed: ${error.message}`)\n\t}\n}\n","import type { AgentRuntime } from \"../../agent\"\n\n/**\n * Stake tokens in Echo\n * @param agent MoveAgentKit instance\n * @param amount Amount of token to stake\n * @returns Transaction signature\n */\nexport async function stakeTokenWithEcho(agent: AgentRuntime, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0xa0281660ff6ca6c1b68b55fcb9b213c2276f90ad007ad27fd003cf2f3478e96e::lsdmanage::stake\",\n\t\t\t\tfunctionArguments: [amount],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Stake token in Echo failed\")\n\t\t\tthrow new Error(\"Stake token in Echo failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Stake token in Echo failed: ${error.message}`)\n\t}\n}\n","import type { AgentRuntime } from \"../../agent\"\n\n/**\n * Unstake tokens in Echo\n * @param agent MoveAgentKit instance\n * @param amount Amount of APT to unstake\n * @returns Transaction signature\n */\nexport async function unstakeTokenWithEcho(agent: AgentRuntime, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0xa0281660ff6ca6c1b68b55fcb9b213c2276f90ad007ad27fd003cf2f3478e96e::lsdmanage::unstake\",\n\t\t\t\tfunctionArguments: [amount],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Unstake token in Echo failed\")\n\t\t\tthrow new Error(\"Unstake token in Echo failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Unstake token in Echo failed: ${error.message}`)\n\t}\n}\n","import { type MoveStructId, convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Swap tokens in liquidswap\n * @param agent MoveAgentKit instance\n * @param mintX MoveStructId of the token to swap from\n * @param mintY MoveStructId of the token to swap to\n * @param swapAmount Amount of tokens to swap\n * @param minCoinOut Minimum amount of tokens to receive (default 0)\n * @returns Transaction signature\n */\nexport async function swap(\n\tagent: AgentRuntime,\n\tmintX: MoveStructId,\n\tmintY: MoveStructId,\n\tswapAmount: number,\n\tminCoinOut = 0\n): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12::scripts_v2::swap\",\n\t\t\t\ttypeArguments: [\n\t\t\t\t\tmintX,\n\t\t\t\t\tmintY,\n\t\t\t\t\t\"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12::curves::Uncorrelated\",\n\t\t\t\t],\n\t\t\t\tfunctionArguments: [swapAmount, minCoinOut],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Swap failed\")\n\t\t\tthrow new Error(\"Swap failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Swap failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Create a new pool in liquidswap\n * @param agent MoveAgentKit instance\n * @param mintX MoveStructId of the first token\n * @param mintY MoveStructId of the second token\n * @returns Transaction signature\n */\nexport async function createPool(agent: AgentRuntime, mintX: MoveStructId, mintY: MoveStructId): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12::scripts_v2::register_pool\",\n\t\t\t\ttypeArguments: [\n\t\t\t\t\tmintX,\n\t\t\t\t\tmintY,\n\t\t\t\t\t\"0x190d44266241744264b964a37b8f09863167a12d3e70cda39376cfb4e3561e12::curves::Uncorrelated\",\n\t\t\t\t],\n\t\t\t\tfunctionArguments: [],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Create pool failed\")\n\t\t\tthrow new Error(\"Create pool failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Create pool failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Add liquidity in liquidswap\n * @param agent MoveAgentKit instance\n * @param mintX MoveStructId of the first token\n * @param mintY MoveStructId of the second token\n * @param mintXAmount Amount of the first token to add\n * @param mintYAmount Amount of the second token to add\n * @returns Transaction signature\n */\nexport async function addLiquidity(\n\tagent: AgentRuntime,\n\tmintX: MoveStructId,\n\tmintY: MoveStructId,\n\tmintXAmount: number,\n\tmintYAmount: number\n): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x9dd974aea0f927ead664b9e1c295e4215bd441a9fb4e53e5ea0bf22f356c8a2b::router::add_liquidity_v05\",\n\t\t\t\ttypeArguments: [\n\t\t\t\t\tmintX,\n\t\t\t\t\tmintY,\n\t\t\t\t\t\"0x163df34fccbf003ce219d3f1d9e70d140b60622cb9dd47599c25fb2f797ba6e::curves::Uncorrelated\",\n\t\t\t\t],\n\t\t\t\tfunctionArguments: [\n\t\t\t\t\tmintXAmount,\n\t\t\t\t\t0, //coin_x_min,\n\t\t\t\t\tmintYAmount,\n\t\t\t\t\t0, // coin_y_min\n\t\t\t\t],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Add liquidity failed\")\n\t\t\tthrow new Error(\"Add liquidity failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tconsole.error(error, \"Add liquidity failed\")\n\t\tthrow new Error(`Add liquidity failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Remove liquidity from liquidswap\n * @param agent MoveAgentKit instance\n * @param mintX MoveStructId of the first token\n * @param mintY MoveStructId of the second token\n * @param lpAmount Amount of Liquidity Provider tokens to remove\n * @param minMintX Minimum amount of first token to receive (default 0)\n * @param minMintY Minimum amount of second token to receive (default 0)\n * @returns Transaction signature\n */\nexport async function removeLiquidity(\n\tagent: AgentRuntime,\n\tmintX: MoveStructId,\n\tmintY: MoveStructId,\n\tlpAmount: number,\n\tminMintX = 0,\n\tminMintY = 0\n): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x9dd974aea0f927ead664b9e1c295e4215bd441a9fb4e53e5ea0bf22f356c8a2b::router::remove_liquidity_v05\",\n\t\t\t\ttypeArguments: [\n\t\t\t\t\tmintX,\n\t\t\t\t\tmintY,\n\t\t\t\t\t\"0x163df34fccbf003ce219d3f1d9e70d140b60622cb9dd47599c25fb2f797ba6e::curves::Uncorrelated\",\n\t\t\t\t],\n\t\t\t\tfunctionArguments: [lpAmount, minMintX, minMintY],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Remove liquidity failed\")\n\t\t\tthrow new Error(\"Remove liquidity failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Remove liquidity failed: ${error.message}`)\n\t}\n}\n","import axios from \"axios\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Swap tokens in panora\n * @param agent MoveAgentKit instance\n * @param fromToken Address of the token to swap from\n * @param toToken Address of the token to swap to\n * @param swapAmount Amount of tokens to swap\n * @param minCoinOut Minimum amount of tokens to receive (default 0)\n * @returns Transaction signature\n */\nexport async function swapWithPanora(\n\tagent: AgentRuntime,\n\tfromToken: string,\n\ttoToken: string,\n\tswapAmount: number,\n\ttoWalletAddress?: string\n): Promise<string> {\n\ttry {\n\t\tconst panoraParameters = {\n\t\t\tfromTokenAddress: fromToken,\n\t\t\ttoTokenAddress: toToken,\n\t\t\tfromTokenAmount: swapAmount.toString(),\n\t\t\ttoWalletAddress: toWalletAddress ? toWalletAddress : agent.account.getAddress().toString(),\n\t\t}\n\n\t\tconst url = `https://api.panora.exchange/swap?${new URLSearchParams(panoraParameters).toString()}`\n\n\t\tconst panoraApiKey = agent.config.PANORA_API_KEY\n\t\tif (!panoraApiKey) {\n\t\t\tthrow new Error(\"No PANORA_API_KEY in config\")\n\t\t}\n\n\t\tconst res = await axios.post(\n\t\t\turl,\n\t\t\t{},\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t\"x-api-key\": panoraApiKey,\n\t\t\t\t},\n\t\t\t}\n\t\t)\n\t\tconst response = await res.data\n\n\t\tif (response.quotes.length <= 0) {\n\t\t\tthrow new Error(\"no quotes available from panora\")\n\t\t}\n\n\t\tconst transactionData = response.quotes[0].txData\n\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: transactionData.function,\n\t\t\t\ttypeArguments: transactionData.type_arguments,\n\t\t\t\tfunctionArguments: transactionData.arguments,\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Swap failed\")\n\t\t\tthrow new Error(\"Swap tx failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Swap failed: ${error.message}`)\n\t}\n}\n","import OpenAI from \"openai\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Generate an image using OpenAI's DALL-E\n * @param agent MoveAgentKit instance\n * @param prompt Text description of the image to generate\n * @param size Image size ('256x256', '512x512', or '1024x1024') (default: '1024x1024')\n * @param n Number of images to generate (default: 1)\n * @returns Object containing the generated image URLs\n */\nexport async function createImage(\n\tagent: AgentRuntime,\n\tprompt: string,\n\tsize: \"256x256\" | \"512x512\" | \"1024x1024\" = \"1024x1024\",\n\tn = 1\n) {\n\ttry {\n\t\tconst apiKey = agent.config.OPENAI_API_KEY\n\t\tif (!apiKey) {\n\t\t\tthrow new Error(\"No OPENAI_API_KEY in config\")\n\t\t}\n\n\t\tconst openai = new OpenAI({ apiKey })\n\n\t\tconst response = await openai.images.generate({\n\t\t\tprompt,\n\t\t\tn,\n\t\t\tsize,\n\t\t})\n\n\t\treturn {\n\t\t\timages: response.data.map((img: any) => img.url),\n\t\t}\n\t} catch (error: any) {\n\t\tthrow new Error(`Image generation failed: ${error.message}`)\n\t}\n}\n","import type { AgentRuntime } from \"../../agent\"\n\n/**\n * Stake tokens in Thala\n * @param agent MoveAgentKit instance\n * @param amount Amount of token to stake\n * @returns Transaction signature\n */\nexport async function stakeTokenWithThala(agent: AgentRuntime, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0xfaf4e633ae9eb31366c9ca24214231760926576c7b625313b3688b5e900731f6::scripts::stake_APT_and_thAPT\",\n\t\t\t\tfunctionArguments: [amount],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Stake APT failed\")\n\t\t\tthrow new Error(\"Stake APT failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Stake APT failed: ${error.message}`)\n\t}\n}\n","import type { AgentRuntime } from \"../../agent\"\n\n/**\n * Unstake tokens in Thala\n * @param agent MoveAgentKit instance\n * @param amount Amount of APT to unstake\n * @returns Transaction signature\n */\nexport async function unstakeAPTWithThala(agent: AgentRuntime, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0xfaf4e633ae9eb31366c9ca24214231760926576c7b625313b3688b5e900731f6::scripts::unstake_thAPT\",\n\t\t\t\tfunctionArguments: [amount],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Unstake token failed\")\n\t\t\tthrow new Error(\"Unstake token failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Unstake token failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Mint Move Dollar in Thala\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to mint MOD with\n * @param amount Amount to mint\n * @returns Transaction signature\n */\nexport async function mintMODWithThala(agent: AgentRuntime, mintType: MoveStructId, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x6f986d146e4a90b828d8c12c14b6f4e003fdff11a8eecceceb63744363eaac01::psm_scripts::mint\",\n\t\t\t\ttypeArguments: [mintType],\n\t\t\t\tfunctionArguments: [amount],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Mint MOD failed\")\n\t\t\tthrow new Error(\"Mint MOD failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Mint MOD failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Redeem MOD in Thala\n * @param agent MoveAgentKit instance\n * @param mintType Type of coin to redeem MOD for\n * @param amount Amount to redeem\n * @returns Transaction signature\n */\nexport async function redeemMODWithThala(agent: AgentRuntime, mintType: MoveStructId, amount: number): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction: \"0x6f986d146e4a90b828d8c12c14b6f4e003fdff11a8eecceceb63744363eaac01::psm_scripts::redeem\",\n\t\t\t\ttypeArguments: [mintType],\n\t\t\t\tfunctionArguments: [amount],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Redeem MOD failed\")\n\t\t\tthrow new Error(\"Redeem MOD failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Redeem MOD failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Add liquidity to Thala pool\n * @param agent MoveAgentKit instance\n * @param mintTypeX First coin type\n * @param mintTypeY Second coin type\n * @param mintXAmount Amount of first coin\n * @param mintYAmount Amount of second coin\n * @returns Transaction signature\n */\nexport async function addLiquidityWithThala(\n\tagent: AgentRuntime,\n\tmintTypeX: MoveStructId,\n\tmintTypeY: MoveStructId,\n\tmintXAmount: number,\n\tmintYAmount: number\n): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction:\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool_scripts::add_liquidity\",\n\t\t\t\ttypeArguments: [\n\t\t\t\t\tmintTypeX,\n\t\t\t\t\tmintTypeY,\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool::Weight_50\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool::Weight_50\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n\t\t\t\t],\n\t\t\t\tfunctionArguments: [mintXAmount, mintYAmount, 0, 0, 0, 0, 0, 0],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Add liquidity failed\")\n\t\t\tthrow new Error(\"Add liquidity failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Add liquidity failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Remove liquidity from Thala pool\n * @param agent MoveAgentKit instance\n * @param mintTypeX First coin type\n * @param mintTypeY Second coin type\n * @param lpAmount Amount of LP tokens to remove\n * @returns Transaction signature\n */\nexport async function removeLiquidityWithThala(\n\tagent: AgentRuntime,\n\tmintTypeX: MoveStructId,\n\tmintTypeY: MoveStructId,\n\tlpAmount: number\n): Promise<string> {\n\ttry {\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction:\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool_scripts::remove_liquidity\",\n\t\t\t\ttypeArguments: [\n\t\t\t\t\tmintTypeX,\n\t\t\t\t\tmintTypeY,\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool::Weight_50\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::weighted_pool::Weight_50\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n\t\t\t\t\t\"0x48271d39d0b05bd6efca2278f22277d6fcc375504f9839fd73f74ace240861af::base_pool::Null\",\n\t\t\t\t],\n\t\t\t\tfunctionArguments: [lpAmount, 0, 0, 0, 0],\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Remove liquidity failed\")\n\t\t\tthrow new Error(\"Remove liquidity failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Remove liquidity failed: ${error.message}`)\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Create a new pool in Thala\n * @param agent MoveAgentKit instance\n * @param mintX First coin type or FA address\n * @param mintY Second coin type or FA address\n * @param amountX Amount of first coin\n * @param amountY Amount of second coin\n * @param options Pool creation options\n * @returns Transaction signature\n */\n\nconst NOTACOIN = \"0x007730cd28ee1cdc9e999336cbc430f99e7c44397c0aa77516f6f23a78559bb5::coin_wrapper::Notacoin\"\nexport async function createPoolWithThala(\n\tagent: AgentRuntime,\n\tmintX: MoveStructId | string,\n\tmintY: MoveStructId | string,\n\tamountX: number,\n\tamountY: number,\n\tfeeTier: number,\n\tamplificationFactor: number\n): Promise<string> {\n\ttry {\n\t\tconst isCoinX = mintX === \"0x1::aptos_coin::AptosCoin\" || mintX.includes(\"::\")\n\t\tconst isCoinY = mintY === \"0x1::aptos_coin::AptosCoin\" || mintY.includes(\"::\")\n\n\t\tconst functionArgs = [\n\t\t\t[isCoinX ? \"0xa\" : mintX, isCoinY ? \"0xa\" : mintY],\n\t\t\t[amountX, amountY],\n\t\t\tfeeTier,\n\t\t\tamplificationFactor,\n\t\t]\n\n\t\tconst typeArgs = [isCoinX ? mintX : NOTACOIN, isCoinY ? mintY : NOTACOIN, NOTACOIN, NOTACOIN, NOTACOIN, NOTACOIN]\n\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: {\n\t\t\t\tfunction:\n\t\t\t\t\t\"0x007730cd28ee1cdc9e999336cbc430f99e7c44397c0aa77516f6f23a78559bb5::coin_wrapper::create_pool_stable\",\n\t\t\t\ttypeArguments: typeArgs,\n\t\t\t\tfunctionArguments: functionArgs,\n\t\t\t},\n\t\t})\n\n\t\tconst committedTransactionHash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: committedTransactionHash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tconsole.error(signedTransaction, \"Create pool failed\")\n\t\t\tthrow new Error(\"Create pool failed\")\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tthrow new Error(`Create pool failed: ${error.message}`)\n\t}\n}\n","import { MerkleClient, MerkleClientConfig, fromNumber } from \"@merkletrade/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { FailedSendTransactionError, MerkleBaseError } from \"./error\"\n\n/**\n * Place limit order on MerkleTrade\n * @param agent MoveAgentKit instance\n * @param pair Pair ID, e.g. \"BTC_USD\"\n * @param isLong True for long, false for short\n * @param sizeDelta Amount of tokens to buy/sell (in USDC, 10 USDC = 10)\n * @param collateralDelta Amount of collateral to buy/sell (in USDC, 10 USDC = 10)\n * @param price Price of the order (in USD)\n * @returns Transaction signature\n */\nexport async function placeLimitOrderWithMerkleTrade(\n\tagent: AgentRuntime,\n\tpair: string,\n\tisLong: boolean,\n\tsizeDelta: number, // in USDC\n\tcollateralDelta: number, // in USDC\n\tprice: number // in USD\n) {\n\ttry {\n\t\tconst merkle = new MerkleClient(await MerkleClientConfig.mainnet())\n\n\t\tconst payload = merkle.payloads.placeLimitOrder({\n\t\t\tpair: pair,\n\t\t\tuserAddress: agent.account.getAddress(),\n\t\t\tsizeDelta: fromNumber(sizeDelta, 6),\n\t\t\tcollateralDelta: fromNumber(collateralDelta, 6),\n\t\t\tprice: fromNumber(price, 10),\n\t\t\tisLong: isLong,\n\t\t\tisIncrease: true,\n\t\t})\n\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: payload,\n\t\t})\n\n\t\tconst txhash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: txhash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tthrow new FailedSendTransactionError(\"Place limit order failed\", signedTransaction)\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tif (error instanceof MerkleBaseError) {\n\t\t\tthrow error\n\t\t}\n\t\tthrow new Error(`Place market order failed: ${error.message}`)\n\t}\n}\n","import type { CommittedTransactionResponse } from \"@aptos-labs/ts-sdk\"\n\nexport class MerkleBaseError extends Error {\n\treadonly code: string\n\treadonly status: string\n\n\tconstructor(status: string, code: string, message: string) {\n\t\tsuper(message)\n\t\tthis.code = code\n\t\tthis.status = status\n\n\t\tObject.setPrototypeOf(this, MerkleBaseError.prototype)\n\t}\n}\n\nexport class PositionNotFoundError extends MerkleBaseError {\n\treadonly pair: string\n\treadonly isLong: boolean\n\n\tconstructor(pair: string, isLong: boolean, message: string) {\n\t\tsuper(\"error\", \"POSITION_NOT_FOUND\", message)\n\t\tthis.pair = pair\n\t\tthis.isLong = isLong\n\t}\n}\n\nexport class FailedSendTransactionError extends MerkleBaseError {\n\treadonly tx: CommittedTransactionResponse\n\tconstructor(message: string, tx: CommittedTransactionResponse) {\n\t\tsuper(\"error\", \"FAILED_SEND_TRANSACTION\", message)\n\t\tthis.tx = tx\n\t}\n}\n","import { MerkleClient, MerkleClientConfig, fromNumber } from \"@merkletrade/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { FailedSendTransactionError, MerkleBaseError } from \"./error\"\n\n/**\n * Place market order on MerkleTrade\n * @param agent MoveAgentKit instance\n * @param pair Pair ID, e.g. \"BTC_USD\"\n * @param isLong True for long, false for short\n * @param sizeDelta Amount of tokens to buy/sell (in USDC, 10 USDC = 10)\n * @param collateralDelta Amount of collateral to buy/sell (in USDC, 10 USDC = 10)\n * @returns Transaction signature\n */\nexport async function placeMarketOrderWithMerkleTrade(\n\tagent: AgentRuntime,\n\tpair: string,\n\tisLong: boolean,\n\tsizeDelta: number, // in USDC\n\tcollateralDelta: number // in USDC\n) {\n\ttry {\n\t\tconst merkle = new MerkleClient(await MerkleClientConfig.mainnet())\n\n\t\tconst payload = merkle.payloads.placeMarketOrder({\n\t\t\tpair: pair,\n\t\t\tuserAddress: agent.account.getAddress(),\n\t\t\tsizeDelta: fromNumber(sizeDelta, 6),\n\t\t\tcollateralDelta: fromNumber(collateralDelta, 6),\n\t\t\tisLong: isLong,\n\t\t\tisIncrease: true,\n\t\t})\n\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: payload,\n\t\t})\n\n\t\tconst txhash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: txhash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tthrow new FailedSendTransactionError(\"Place market order failed\", signedTransaction)\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tif (error instanceof MerkleBaseError) {\n\t\t\tthrow error\n\t\t}\n\t\tthrow new Error(`Place market order failed: ${error.message}`)\n\t}\n}\n","import { MerkleClient, MerkleClientConfig } from \"@merkletrade/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { FailedSendTransactionError, MerkleBaseError, PositionNotFoundError } from \"./error\"\n\n/**\n * Close position on MerkleTrade\n * @param agent MoveAgentKit instance\n * @param pair Pair ID, e.g. \"BTC_USD\"\n * @param isLong True for long, false for short\n * @returns Transaction signature\n */\nexport async function closePositionWithMerkleTrade(agent: AgentRuntime, pair: string, isLong: boolean) {\n\ttry {\n\t\tconst merkle = new MerkleClient(await MerkleClientConfig.mainnet())\n\n\t\tconst positions = await merkle.getPositions({\n\t\t\taddress: agent.account.getAddress().toString(),\n\t\t})\n\n\t\tconst position = positions.find((position) => position.pairType === pair && position.isLong === isLong)\n\t\tif (!position) {\n\t\t\tthrow new PositionNotFoundError(pair, isLong, \"Position not found\")\n\t\t}\n\n\t\tconst payload = merkle.payloads.placeMarketOrder({\n\t\t\tpair: pair,\n\t\t\tuserAddress: agent.account.getAddress(),\n\t\t\tsizeDelta: position.size,\n\t\t\tcollateralDelta: position.collateral,\n\t\t\tisLong: position.isLong,\n\t\t\tisIncrease: false,\n\t\t})\n\n\t\tconst transaction = await agent.aptos.transaction.build.simple({\n\t\t\tsender: agent.account.getAddress(),\n\t\t\tdata: payload,\n\t\t})\n\n\t\tconst txhash = await agent.account.sendTransaction(transaction)\n\n\t\tconst signedTransaction = await agent.aptos.waitForTransaction({\n\t\t\ttransactionHash: txhash,\n\t\t})\n\n\t\tif (!signedTransaction.success) {\n\t\t\tthrow new FailedSendTransactionError(\"Close position failed\", signedTransaction)\n\t\t}\n\n\t\treturn signedTransaction.hash\n\t} catch (error: any) {\n\t\tif (error instanceof MerkleBaseError) {\n\t\t\tthrow error\n\t\t}\n\t\tthrow new Error(`Close position failed: ${error.message}`)\n\t}\n}\n","import { MerkleClient, MerkleClientConfig, toNumber } from \"@merkletrade/ts-sdk\"\nimport type { AgentRuntime } from \"../../agent\"\n\n/**\n * Get positions from MerkleTrade\n * @param agent MoveAgentKit instance\n * @returns Positions\n */\nexport async function getPositionsWithMerkleTrade(agent: AgentRuntime) {\n\ttry {\n\t\tconst merkle = new MerkleClient(await MerkleClientConfig.mainnet())\n\n\t\tconst positions = await merkle.getPositions({\n\t\t\taddress: agent.account.getAddress().toString(),\n\t\t})\n\n\t\tconst humanReadablePositions = positions.map((position) => ({\n\t\t\t...position,\n\t\t\tsize: toNumber(position.size, 6),\n\t\t\tcollateral: toNumber(position.collateral, 6),\n\t\t\tavgPrice: toNumber(position.avgPrice, 10),\n\t\t\tstopLossTriggerPrice: toNumber(position.stopLossTriggerPrice, 10),\n\t\t\ttakeProfitTriggerPrice: toNumber(position.takeProfitTriggerPrice, 10),\n\t\t}))\n\n\t\treturn humanReadablePositions\n\t} catch (error: any) {\n\t\tthrow new Error(`Get positions failed: ${error.message}`)\n\t}\n}\n","export const tokensList = [\n\t{\n\t\tname: \"USDt\",\n\t\tpoolAddress: \"0xac00e90cdadec06d81e0d5ce7a3e93d63d563e982dea0ca15bad2b067f42d2be\",\n\t\tdecimals: 6,\n\t\ttokenAddress: \"0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\",\n\t},\n\t{\n\t\tname: \"zUSDT\",\n\t\tpoolAddress: \"0x447b3b516546f28e8c4f6825a6287b09161659e7c500c599c29c28a8492844b8\",\n\t\tdecimals: 6,\n\t\ttokenAddress: \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\",\n\t},\n\t{\n\t\tname: \"zUSDC\",\n\t\tpoolAddress: \"0xa9c51ca3bcd93978d0c4aada7c4cf47c0791caced3cdc4e15f2c8e0797d1f93c\",\n\t\tdecimals: 6,\n\t\ttokenAddress: \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDC\",\n\t},\n\t{\n\t\tname: \"APT\",\n\t\tpoolAddress: \"0x761a97787fa8b3ae0cef91ebc2d96e56cc539df5bc88dadabee98ae00363a831\",\n\t\tdecimals: 8,\n\t\ttokenAddress: \"0x1::aptos_coin::AptosCoin\",\n\t},\n\t{\n\t\tname: \"sthAPT\",\n\t\tpoolAddress: \"0xed6bf9fe7e3f42c6831ffac91824a545c4b8bfcb40a59b3f4ccfe203cafb7f42\",\n\t\tdecimals: 8,\n\t\ttokenAddress: \"0xfaf4e633ae9eb31366c9ca24214231760926576c7b625313b3688b5e900731f6::staking::StakedThalaAPT\",\n\t},\n\t{\n\t\tname: \"MOD\",\n\t\tpoolAddress: \"0xef2ae89796725d0eb363326ecb7df159feb949f6d1f400f76deeeebccbac00f1\",\n\t\tdecimals: 8,\n\t\ttokenAddress: \"0x6f986d146e4a90b828d8c12c14b6f4e003fdff11a8eecceceb63744363eaac01::mod_coin::MOD\",\n\t},\n\t{\n\t\tname: \"THL\",\n\t\tpoolAddress: \"0x127ea5b4c450be695e488da1c3bc013e2e93d8cf00270ef90385189844bc9755\",\n\t\tdecimals: 8,\n\t\ttokenAddress: \"0x7fd500c11216f0fe3095d0c4b8aa4d64a4e2e04f83758462f2b127255643615::thl_coin::THL\",\n\t},\n\t{\n\t\tname: \"wUSDC\",\n\t\tpoolAddress: \"0xa76ebfb432982c864783fdb33cdf5a9edb18ac1b950deb8037f5cf8c984da3d2\",\n\t\tdecimals: 6,\n\t\ttokenAddress: \"0x5e156f1207d0ebfa19a9eeff00d62a282278fb8719f4fab3a586a0a2c0fffbea::coin::T\",\n\t},\n\t{\n\t\tname: \"zWETH\",\n\t\tpoolAddress: \"0x548cf587bd918a0005b3372a1d23e64b18ace3c61962f087a21eac52cf228504\",\n\t\tdecimals: 6,\n\t\ttokenAddress: \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::WETH\",\n\t},\n\t{\n\t\tname: \"wWETH\",\n\t\tpoolAddress: \"0x114ee519ffa1e8697784bd1a350822cb37601a1476289051b8295165597a4538\",\n\t\tdecimals: 6,\n\t\ttokenAddress: \"0xcc8a89c8dce9693d354449f1f73e60e14e347417854f029db5bc8e7454008abb::coin::T\",\n\t},\n\t{\n\t\tname: \"CAKE\",\n\t\tpoolAddress: \"0x41b039e5518b1a3786ee798d895e0ddf3141fbbc20009284323fa51ea279c819\",\n\t\tdecimals: 8,\n\t\ttokenAddress: \"0x159df6b7689437016108a019fd5bef736bac692b6d4a1f10c941f6fbb9a74ca6::oft::CakeOFT\",\n\t},\n\t{\n\t\tname: \"stAPT\",\n\t\tpoolAddress: \"0xc3c9cc885a52004e0490f6a8291b3bc5854f0e42d931fb124736bd189c9f0f45\",\n\t\tdecimals: 8,\n\t\ttokenAddress: \"0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::stapt_token::StakedApt\",\n\t},\n\t{\n\t\tname: \"aBTC\",\n\t\tpoolAddress: \"0xacb7262b33a147b47b950a3a26d7699e1a58bcaa475ef636cb0fea53fa0eb872\",\n\t\tdecimals: 10,\n\t\ttokenAddress: \"0x4e1854f6d332c9525e258fb6e66f84b6af8aba687bbcb832a24768c4e175feec::abtc::ABTC\",\n\t},\n\t{\n\t\tname: \"STONE\",\n\t\tpoolAddress: \"0x075c39f18c7bc00ac0f81a0f9ab7e319e23790d7d8c3df968d84a23699584bd9\",\n\t\tdecimals: 8,\n\t\ttokenAddress:\n\t\t\t\"0x543c5660aa4d496687e2068c11765f04607c4f4b639a83233a9333604fb8ce59::stakestone_ether::StakeStoneEther\",\n\t},\n\t{\n\t\tname: \"truAPT\",\n\t\tpoolAddress: \"0x7bd5be03df0fb3841fed337b8e7a353818b917cce6db28b807b691002a122d73\",\n\t\tdecimals: 8,\n\t\ttokenAddress: \"0xaef6a8c3182e076db72d64324617114cacf9a52f28325edc10b483f7f05da0e7\",\n\t},\n\t{\n\t\tname: \"sBTC\",\n\t\tpoolAddress: \"0x754114c656e26498a8c0b20fa24af663fed5e4b24acb471c103daea0f7006b40\",\n\t\tdecimals: 8,\n\t\ttokenAddress:\n\t\t\t\"0x5dee1d4b13fae338a1e1780f9ad2709a010e824388efd169171a26e3ea9029bb::stakestone_bitcoin::StakeStoneBitcoin\",\n\t},\n]\n\nexport const getTokenByTokenName = (name: string) => {\n\tconst token = tokensList.find(\n\t\t(token) => token.name.toLowerCase() === name.toLowerCase() || token.name.toLowerCase().includes(name.toLowerCase())\n\t)\n\n\treturn token\n}\n\nexport const getTokenByTokenAddress = (address: string) => {\n\tconst token = tokensList.find((token) => token.tokenAddress.toLowerCase() === address.toLowerCase())\n\n\treturn token\n}\n","import { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../..\"\n\nexport class AptosAccountAddressTool extends Tool {\n\tname = \"aptos_get_wallet_address\"\n\tdescription = \"Get the wallet address of the agent\"\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tasync _call(_input: string): Promise<string> {\n\t\treturn this.agent.account.getAddress().toString()\n\t}\n}\n","import { AccountAddress, convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AmnisStakeTool extends Tool {\n\tname = \"amnis_stake\"\n\tdescription = `this tool can be used to stake APT (Aptos) to amnis validator and receive its liquid staking token stAPT (staked APT)\n\n\tkeep recipient blank if user themselves wants to receive stAPT and not send to anybody else\n\n  Inputs ( input is a JSON string ) (required):\n  amount: number, eg 1 or 0.01 (required)\n  recipient: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst recipient = AccountAddress.from(parsedInput.recipient) || this.agent.account.getAddress()\n\n\t\t\tconst stakeTransactionHash = await this.agent.stakeTokensWithAmnis(\n\t\t\t\trecipient,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tstakeTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: \"stAPT\",\n\t\t\t\t\tdecimals: 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { AccountAddress, convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AmnisWithdrawStakeTool extends Tool {\n\tname = \"amnis_withdraw_stake\"\n\tdescription = `this tool can be used to withdraw staked APT (Aptos) from amnis validator and receive back APT\n\n\tkeep recipient blank if user themselves wants to receive APT and not send to anybody else\n\n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required)\n  recipient: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst recipient = AccountAddress.from(parsedInput.recipient) || this.agent.account.getAddress()\n\n\t\t\tconst withdrawStakeTransactionHash = await this.agent.withdrawStakeFromAmnis(\n\t\t\t\trecipient,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\twithdrawStakeTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: \"APT\",\n\t\t\t\t\tdecimals: 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AptosBalanceTool extends Tool {\n\tname = \"aptos_balance\"\n\tdescription = `Get the balance of a Aptos account.\n\n  If you want to get the balance of your wallet, you don't need to provide the mint.\n  If no mint is provided, the balance will be in APT.\n  if you want to get balance of a fungible asset, you need to provide the asset address as mint\n\n  Inputs ( input is a JSON string ):\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"\n  0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\" (optional)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\t\t\tconst mint = parsedInput.mint || undefined\n\t\t\tconst mintDetails: any = this.agent.getTokenDetails(mint)\n\t\t\tconst balance = await this.agent.getBalance(mint)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tbalance,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetails.name || \"APT\",\n\t\t\t\t\tdecimals: mintDetails.decimals || 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AptosGetTokenDetailTool extends Tool {\n\tname = \"aptos_token_details\"\n\tdescription = `Get the detail of any aptos tokens\n\n  details also include decimals which you can use to make onchain values readable to a human user\n\n  Inputs ( input is a JSON string ):\n  token: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (optional)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\t\t\tconst mint = parsedInput.token || \"\"\n\n\t\t\tconst tokenData = await this.agent.getTokenDetails(mint)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\ttokenData,\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { AccountAddress, convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AptosTransferTokenTool extends Tool {\n\tname = \"aptos_transfer_token\"\n\tdescription = `this tool can be used to transfer APT, any token or fungible asset to a recipient\n\n  if you want to transfer APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n  if you want to transfer token other than APT, you need to provide the mint of that specific token\n  if you want to transfer fungible asset, add fungible asset address as mint\n\n  keep to blank if user themselves wants to receive the token and not send to anybody else\n\n  Inputs ( input is a JSON string ):\n  to: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" \n  or \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst recipient = AccountAddress.from(parsedInput.to) || this.agent.account.getAddress()\n\n\t\t\tconst transferTokenTransactionHash = await this.agent.transferTokens(\n\t\t\t\trecipient,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 6),\n\t\t\t\tparsedInput.mint\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\ttransferTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name,\n\t\t\t\t\tdecimals: mintDetail.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AptosBurnTokenTool extends Tool {\n\tname = \"aptos_burn_token\"\n\tdescription = `this tool can be used to burn a fungible asset\n\n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required) \n  mint: string, \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst burnTransactionHash = await this.agent.burnToken(\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8),\n\t\t\t\tparsedInput.mint\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tburnTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name,\n\t\t\t\t\tdecimals: mintDetail.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { AccountAddress } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AptosMintTokenTool extends Tool {\n\tname = \"aptos_mint_token\"\n\tdescription = `this tool can be used to create fungible asset to a recipient\n\nif the recipient wants to receive the token and not send to anybody else, keep to blank\n\n  Inputs ( input is a JSON string ):\n  to: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst recipient = AccountAddress.from(parsedInput.to) || this.agent.account.getAddress()\n\t\t\tconst mintTokenTransactionHash = await this.agent.mintToken(recipient, parsedInput.mint, parsedInput.amount)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tmintTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name || \"APT\",\n\t\t\t\t\tdecimals: 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AptosCreateTokenTool extends Tool {\n\tname = \"aptos_create_token\"\n\tdescription = `this tool can be used to create fungible asset to a recipient\n\n  Inputs ( input is a JSON string ):\n  name: string, eg \"USDT\" (required)\n  symbol: string, eg \"USDT\" (required)\n  iconURI: string, eg \"https://example.com/icon.png\" (required)\n  projectURI: string, eg \"https://example.com/project\" (required)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst createTokenTransactionHash = await this.agent.createToken(\n\t\t\t\tparsedInput.name,\n\t\t\t\tparsedInput.symbol,\n\t\t\t\tparsedInput.iconURI,\n\t\t\t\tparsedInput.projectURI\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tcreateTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: parsedInput.name,\n\t\t\t\t\tdecimals: 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AptosTransactionTool extends Tool {\n\tname = \"aptos_get_transaction\"\n\tdescription = `Fetches a transaction from aptos blockchain\n\n  Inputs ( input is a JSON string ):\n  transactionHash: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst aptosTransaction = await this.agent.getTransaction(parsedInput.transactionHash)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\taptosTransaction,\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class AptosGetTokenPriceTool extends Tool {\n\tname = \"aptos_token_price\"\n\tdescription = `Get the live price of any aptos tokens in USD.\n\tdo not do any decimals conversion here, the price is already in USD\n\n  details also include decimals which you can use to make onchain values readable to a human user\n\n  Inputs ( input is a JSON string - this is IMPORTANT):\n  token: string, eg usdt, btc etc.`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\tconsole.log(\"input\", input)\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\t\t\tconst token = parsedInput.token || input || \"usdt\"\n\n\t\t\tconst tokenData = await this.agent.getTokenPrice(token)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\ttokenData,\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../..\"\n\nexport class AriesCreateProfileTool extends Tool {\n\tname = \"aries_create_profile\"\n\tdescription = `this tool can be used to create a profile in Aries\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(): Promise<string> {\n\t\ttry {\n\t\t\tconst createProfileTransactionHash = await this.agent.createAriesProfile()\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tcreateProfileTransactionHash,\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class AriesLendTool extends Tool {\n\tname = \"aries_lend\"\n\tdescription = `this tool can be used to lend tokens in Aries\n\n    if you want to lend APT, mintType will be \"0x1::aptos_coin::AptosCoin\"\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst lendTokenTransactionHash = await this.agent.lendAriesToken(\n\t\t\t\tparsedInput.mintType,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tlendTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name,\n\t\t\t\t\tdecimals: mintDetail.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","export const parseJson = (input: string) => {\n\ttry {\n\t\tconst forbiddenWords = [\"null\", \"undefined\", \"{}\"]\n\t\tif (input in forbiddenWords) throw new Error()\n\n\t\tconst parsedInput = JSON.parse(input)\n\n\t\treturn parsedInput\n\t} catch (e) {\n\t\treturn {}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class AriesWithdrawTool extends Tool {\n\tname = \"aries_withdraw\"\n\tdescription = `this tool can be used to withdraw tokens from Aries\n\n    if you want to withdraw APT, mintType will be \"0x1::aptos_coin::AptosCoin\"\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst withdrawTokenTransactionHash = await this.agent.withdrawAriesToken(\n\t\t\t\tparsedInput.mintType,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\twithdrawTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name,\n\t\t\t\t\tdecimals: mintDetail.decimals || 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class AriesBorrowTool extends Tool {\n\tname = \"aries_borrow\"\n\tdescription = `this tool can be used to borrow tokens from Aries\n\n    if you want to borrow APT, mintType will be \"0x1::aptos_coin::AptosCoin\"\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst borrowTokenTransactionHash = await this.agent.borrowAriesToken(\n\t\t\t\tparsedInput.mintType,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tborrowTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name,\n\t\t\t\t\tdecimals: mintDetail.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class AriesRepayTool extends Tool {\n\tname = \"aries_repay\"\n\tdescription = `this tool can be used to repay tokens in Aries\n\n    if you want to repay APT, mintType will be \"0x1::aptos_coin::AptosCoin\"\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst repayTokenTransactionHash = await this.agent.repayAriesToken(\n\t\t\t\tparsedInput.mintType,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\trepayTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name,\n\t\t\t\t\tdecimals: mintDetail.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class JouleLendTokenTool extends Tool {\n\tname = \"joule_lend_token\"\n\tdescription = `this tool can be used to lend APT, tokens or fungible asset to a position\n\n  if you want to lend APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n  if you want to lend token other than APT, you need to provide the mint of that specific token\n  if you want to lend fungible asset, add \"0x1::aptos_coin::AptosCoin\" as mint and provide fungible asset address\n\n  if positionId is not provided, the positionId will be 1234 and newPosition should be true\n  \n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n  positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  newPosition: boolean, (required)  \n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst fungibleAsset = mintDetail.faAddress.toLowerCase() === parsedInput.mint.toLowerCase()\n\n\t\t\tconst lendTokenTransactionHash = await this.agent.lendToken(\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8),\n\t\t\t\tparsedInput.mint,\n\t\t\t\tparsedInput.positionId,\n\t\t\t\tparsedInput.newPosition,\n\t\t\t\tfungibleAsset\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tlendTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name,\n\t\t\t\t\tdecimals: mintDetail.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class JouleBorrowTokenTool extends Tool {\n\tname = \"joule_borrow_token\"\n\tdescription = `this tool can be used to borrow APT, tokens or fungible asset from a position\n\n  if you want to borrow APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n  if you want to borrow token other than APT, you need to provide the mint of that specific token\n  if you want to borrow fungible asset, add \"0x1::aptos_coin::AptosCoin\" as mint and provide fungible asset address\n  \n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n  positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst fungibleAsset = mintDetail.faAddress.toLowerCase() === parsedInput.mint.toLowerCase()\n\n\t\t\tconst borrowTokenTransactionHash = await this.agent.borrowToken(\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8),\n\t\t\t\tparsedInput.mint,\n\t\t\t\tparsedInput.positionId,\n\t\t\t\tfungibleAsset\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tborrowTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name || \"APT\",\n\t\t\t\t\tdecimals: mintDetail.decimals || 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class JouleWithdrawTokenTool extends Tool {\n\tname = \"joule_withdraw_token\"\n\tdescription = `this tool can be used to withdraw APT, tokens or fungible asset from a position\n\n  if you want to withdraw APT, add \"0x1::aptos_coin::AptosCoin\" as mint\n  if you want to withdraw token other than APT, you need to provide the mint of that specific token\n  if you want to withdraw fungible asset, add \"0x1::aptos_coin::AptosCoin\" as mint and provide fungible asset address\n  \n  Inputs ( input is a JSON string ):\n\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n  positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst fungibleAsset = mintDetail.faAddress.toLowerCase() === parsedInput.mint.toLowerCase()\n\n\t\t\tconst withdrawTokenTransactionHash = await this.agent.withdrawToken(\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8),\n\t\t\t\tparsedInput.mint,\n\t\t\t\tparsedInput.positionId,\n\t\t\t\tfungibleAsset\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\twithdrawTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name,\n\t\t\t\t\tdecimals: mintDetail.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class JouleRepayTokenTool extends Tool {\n\tname = \"joule_repay_token\"\n\tdescription = `this tool can be used to repay APT, tokens or fungible asset from a position\n\n  if you want to repay APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n  if you want to repay token other than APT, you need to provide the mint of that specific token\n  if you want to repay fungible asset, add \"0x1::aptos_coin::AptosCoin\" as mint and provide fungible asset address\n  \n  Inputs ( input is a JSON string ):\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n  positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  fungibleAssetAddress: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(parsedInput.mint)\n\n\t\t\tconst repayTokenTransactionHash = await this.agent.repayToken(\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8),\n\t\t\t\tparsedInput.mint,\n\t\t\t\tparsedInput.positionId,\n\t\t\t\tparsedInput.fungibleAssetAddress\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\trepayTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name,\n\t\t\t\t\tdecimals: mintDetail.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class JouleGetPoolDetails extends Tool {\n\tname = \"joule_get_pool_details\"\n\tdescription = `the tool can be used to get a token / fungible asset pool details\n\n  Inputs ( input is a JSON string ):\n     mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n\n  Example: '{\"mint\": \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\"}'\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst pool = await this.agent.getPoolDetails(parsedInput.mint)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tpool,\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { AccountAddress } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class JouleGetUserPosition extends Tool {\n\tname = \"joule_get_user_position\"\n\tdescription = `the tool can be used to get details about a user's position\n\n\tkeep userAddress blank if user wants to get their own position or didn't provide any other user's address\n\n\task user to provide positionId from the list of positions they have if they want to get details about a specific position.\n\tdo not fill random positionId if the user didn't provide any positionId\n\n  Inputs ( input is a JSON string ):\n     userAddress: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n     positionId: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (required)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst userAddress = AccountAddress.from(parsedInput.userAddress) || this.agent.account.getAddress()\n\n\t\t\tconst jouleUserPosition = await this.agent.getUserPosition(userAddress, parsedInput.positionId)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tjouleUserPosition,\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { AccountAddress } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\nimport { tokensList } from \"../../utils/get-pool-address-by-token-name\"\n\nexport class JouleGetUserAllPositions extends Tool {\n\tname = \"joule_get_user_all_positions\"\n\tdescription = `the tool can be used to get details about a user's all positions\n\n\tkeep userAddress blank if user wants to get their own position or didn't provide any other user's address\n\n  Inputs ( input is a JSON string ):\n     userAddress: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst userAddress = AccountAddress.from(parsedInput.userAddress) || this.agent.account.getAddress()\n\n\t\t\tconst jouleUserAllPositions = await this.agent.getUserAllPositions(userAddress)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tjouleUserAllPositions,\n\t\t\t\ttokens: tokensList.map((token) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: token.name,\n\t\t\t\t\t\tdecimals: token.decimals,\n\t\t\t\t\t\ttokenAddress: token.tokenAddress,\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class JouleClaimRewardTool extends Tool {\n\tname = \"joule_claim_rewards\"\n\tdescription = `this tool can be used to claim rewards from Joule pools\n\n    Supports claiming both APT incentives and amAPT incentives.\n\n    User can only claim rewards for coin - \n    usdt - 0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\n    usdc - 0xbae207659db88bea0cbead6da0ed00aac12edcdda169e591cd41c94180b46f3b\n    weth - 0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\n    stapt - 0x111ae3e5bc816a5e63c2da97d0aa3886519e0cd5e4b046659fa35796bd11542a::stapt_token::StakedApt\n\n    Inputs (input is a JSON string):\n    rewardCoinType: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst claimRewardsTransactionHash = await this.agent.claimReward(parsedInput.rewardCoinType)\n\n\t\t\tconst tokenDetails = await this.agent.getTokenDetails(parsedInput.rewardCoinType)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tclaimRewardsTransactionHash,\n\t\t\t\treward: {\n\t\t\t\t\tcoinType: parsedInput.rewardCoinType,\n\t\t\t\t\tname: tokenDetails.name,\n\t\t\t\t\ttype: parsedInput.rewardName,\n\t\t\t\t\tdecimals: tokenDetails.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\nimport { getTokenByTokenName } from \"../../utils/get-pool-address-by-token-name\"\nimport { parseFungibleAssetAddressToWrappedAssetAddress } from \"../../utils/parse-fungible-asset-to-wrapped-asset\"\n\nexport class LiquidSwapSwapTool extends Tool {\n\tname = \"liquidswap_swap\"\n\tdescription = `this tool can be used to swap tokens in liquidswap\n\nwant to swap APT and one of the token, mint is 0x1::aptos_coin::AptosCoin\none of the token is USDT, use 0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\n\nif user added mintX or mintY as asset name, and you don't have the address of the asset, use these token names:\nusdt,zusdt,zusdc,apt,sthapt,mod,thl,wusdc,zweth,wweth,cake,stapt,abtc,stone,truapt,sbtc\nor whatever name the user has provided, you can use the token name to get the address of the token \n\ncant swap any fungible tokens. only coin standard swap allowed. if user trying to swap fungible token, ask it to swap via panora.\n\ncoin standard format : string::string::string\n\nInputs (input is a JSON string):\nmintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\nmintY: string, eg (same as mintX) (required)\nswapAmount: number, eg 1 or 0.01 (required)\nminCoinOut: number, eg 1 or 0.01 (optional)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tlet mintX = parsedInput.mintX\n\t\t\tconst tokenX = getTokenByTokenName(mintX)\n\t\t\tif (tokenX) {\n\t\t\t\tmintX = tokenX.tokenAddress\n\t\t\t}\n\n\t\t\tlet mintY = parsedInput.mintY\n\t\t\tconst tokenY = getTokenByTokenName(mintY)\n\t\t\tif (tokenY) {\n\t\t\t\tmintY = tokenY.tokenAddress\n\t\t\t}\n\n\t\t\tconst mintXDetail = await this.agent.getTokenDetails(mintX)\n\n\t\t\tconst mintYDetail = await this.agent.getTokenDetails(mintY)\n\n\t\t\tconst swapTransactionHash = await this.agent.swap(\n\t\t\t\tmintX,\n\t\t\t\tmintY,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.swapAmount, mintXDetail.decimals),\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.minCoinOut, mintXDetail.decimals) || 0\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tswapTransactionHash,\n\t\t\t\ttoken: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmintX: mintXDetail.name,\n\t\t\t\t\t\tdecimals: mintXDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmintY: mintYDetail.name,\n\t\t\t\t\t\tdecimals: mintYDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\nimport { getTokenByTokenName } from \"../../utils/get-pool-address-by-token-name\"\nimport { parseFungibleAssetAddressToWrappedAssetAddress } from \"../../utils/parse-fungible-asset-to-wrapped-asset\"\n\nexport class LiquidSwapCreatePoolTool extends Tool {\n\tname = \"liquidswap_create_pool\"\n\tdescription = `this tool can be used to create a new pool in liquidswap\n\n    if you want to create a pool with APT and one of the token, mint will be \"0x1::aptos_coin::AptosCoin\"\n\n\tif user added mintX or mintY as asset name, and you don't have the address of the asset, you can use the following token names:\n\t['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n\tor whatever name the user has provided, you can use the token name to get the address of the token \n\n    Inputs ( input is a JSON string ):\n    mintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    mintY: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\t// Resolve token names to addresses\n\t\t\tlet mintX = parsedInput.mintX\n\t\t\tconst tokenX = getTokenByTokenName(mintX)\n\t\t\tif (tokenX) {\n\t\t\t\tmintX = tokenX.tokenAddress\n\t\t\t}\n\n\t\t\tlet mintY = parsedInput.mintY\n\t\t\tconst tokenY = getTokenByTokenName(mintY)\n\t\t\tif (tokenY) {\n\t\t\t\tmintY = tokenY.tokenAddress\n\t\t\t}\n\n\t\t\tconst mintXDetail = await this.agent.getTokenDetails(mintX)\n\n\t\t\tconst mintYDetail = await this.agent.getTokenDetails(mintY)\n\n\t\t\tconst createPoolTransactionHash = await this.agent.createPool(\n\t\t\t\tparseFungibleAssetAddressToWrappedAssetAddress(mintX),\n\t\t\t\tparseFungibleAssetAddressToWrappedAssetAddress(mintY)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tcreatePoolTransactionHash,\n\t\t\t\ttoken: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmintX: mintXDetail.name,\n\t\t\t\t\t\tdecimals: mintXDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmintY: mintYDetail.name,\n\t\t\t\t\t\tdecimals: mintYDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import type { MoveStructId } from \"@aptos-labs/ts-sdk\"\n\nexport const parseFungibleAssetAddressToWrappedAssetAddress = (assetAddress: MoveStructId | string): MoveStructId => {\n\tif (assetAddress === \"0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\") {\n\t\treturn \"0x9770fa9c725cbd97eb50b2be5f7416efdfd1f1554beb0750d4dae4c64e860da3::fa_to_coin_wrapper::WrappedUSDT\"\n\t}\n\treturn assetAddress as MoveStructId\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\nimport { getTokenByTokenName } from \"../../utils/get-pool-address-by-token-name\"\nimport { parseFungibleAssetAddressToWrappedAssetAddress } from \"../../utils/parse-fungible-asset-to-wrapped-asset\"\n\nexport class LiquidSwapAddLiquidityTool extends Tool {\n\tname = \"liquidswap_add_liquidity\"\n\tdescription = `this tool can be used to add liquidity in liquidswap\n\n    if you want to add APT and one of the token, mint will be \"0x1::aptos_coin::AptosCoin\"\n\n\tif user added mintX or mintY as asset name, and you don't have the address of the asset, you can use the following token names:\n\t['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n\tor whatever name the user has provided, you can use the token name to get the address of the token \n\n\n    Inputs ( input is a JSON string ):\n    mintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    mintY: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    mintXAmount: number, eg 1 or 0.01 (required)\n    mintYAmount: number, eg 1 or 0.01 (required)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\t// Resolve token names to addresses\n\t\t\tlet mintX = parsedInput.mintX\n\t\t\tconst tokenX = getTokenByTokenName(mintX)\n\t\t\tif (tokenX) {\n\t\t\t\tmintX = tokenX.tokenAddress\n\t\t\t}\n\n\t\t\tlet mintY = parsedInput.mintY\n\t\t\tconst tokenY = getTokenByTokenName(mintY)\n\t\t\tif (tokenY) {\n\t\t\t\tmintY = tokenY.tokenAddress\n\t\t\t}\n\n\t\t\tconst wrappedMintX = parseFungibleAssetAddressToWrappedAssetAddress(mintX)\n\t\t\tconst wrappedMintY = parseFungibleAssetAddressToWrappedAssetAddress(mintY)\n\n\t\t\tconst mintXDetail = await this.agent.getTokenDetails(wrappedMintX)\n\t\t\tconst mintYDetail = await this.agent.getTokenDetails(wrappedMintY)\n\n\t\t\tconst swapTransactionHash = await this.agent.addLiquidity(\n\t\t\t\twrappedMintX,\n\t\t\t\twrappedMintY,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.mintXAmount, mintXDetail.decimals),\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.mintYAmount, mintYDetail.decimals)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tswapTransactionHash,\n\t\t\t\ttoken: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmintX: mintXDetail.name,\n\t\t\t\t\t\tdecimals: mintXDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmintY: mintYDetail.name,\n\t\t\t\t\t\tdecimals: mintYDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\nimport { getTokenByTokenName } from \"../../utils/get-pool-address-by-token-name\"\nimport { parseFungibleAssetAddressToWrappedAssetAddress } from \"../../utils/parse-fungible-asset-to-wrapped-asset\"\n\nexport class LiquidSwapRemoveLiquidityTool extends Tool {\n\tname = \"liquidswap_remove_liquidity\"\n\tdescription = `this tool can be used to remove liquidity from liquidswap\n\nif you want to remove APT and one of the token, mint will be \"0x1::aptos_coin::AptosCoin\"\n\nif user added mintX or mintY as asset name, and you don't have the address of the asset, use these token names:\nusdt,zusdt,zusdc,apt,sthapt,mod,thl,wusdc,zweth,wweth,cake,stapt,abtc,stone,truapt,sbtc\nor whatever name the user has provided, you can use the token name to get the address of the token \n\nminMintX and minMintY are minimum amount of tokens to receive, default is 0\n\ndeposit liquidity in one of the pools to get LP tokens if you don't have LP tokens\n\nInputs (input is a JSON string):\nmintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\nmintY: string, eg same as mintX (required)\nlpAmount: number, eg 1 or 0.01 (required)\nminMintX: number, eg 1 or 0.01 (optional)\nminMintY: number, eg 1 or 0.01 (optional)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\t// Resolve token names to addresses\n\t\t\tlet mintX = parsedInput.mintX\n\t\t\tconst tokenX = getTokenByTokenName(mintX)\n\t\t\tif (tokenX) {\n\t\t\t\tmintX = tokenX.tokenAddress\n\t\t\t}\n\n\t\t\tlet mintY = parsedInput.mintY\n\t\t\tconst tokenY = getTokenByTokenName(mintY)\n\t\t\tif (tokenY) {\n\t\t\t\tmintY = tokenY.tokenAddress\n\t\t\t}\n\n\t\t\tconst mintXDetail = await this.agent.getTokenDetails(mintX)\n\t\t\tconst mintYDetail = await this.agent.getTokenDetails(mintY)\n\n\t\t\tconst removeLiquidityTransactionHash = await this.agent.removeLiquidity(\n\t\t\t\tparseFungibleAssetAddressToWrappedAssetAddress(mintX),\n\t\t\t\tparseFungibleAssetAddressToWrappedAssetAddress(mintY),\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.lpAmount, 6),\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.minMintX || 0, mintXDetail.decimals),\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.minMintY || 0, mintYDetail.decimals)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tremoveLiquidityTransactionHash,\n\t\t\t\ttoken: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmintX: mintXDetail.name,\n\t\t\t\t\t\tdecimals: mintXDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmintY: mintYDetail.name,\n\t\t\t\t\t\tdecimals: mintYDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { type MoveStructId, convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\nimport { getTokenByTokenAddress, getTokenByTokenName } from \"../../utils/get-pool-address-by-token-name\"\n\nexport class EchelonLendTokenTool extends Tool {\n\tname = \"echelon_lend_token\"\n\tdescription = `this tool can be used to lend APT, tokens or fungible asset to a position\n\n    if you want to lend APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n    if user added mint as asset name, and you don't have the address of the asset, you can use the following token names:\n    ['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n    or whatever name the user has provided, you can use the token name to get the address of the token\n\n    Inputs ( input is a JSON string ) (IMPORTANT):\n    amount: number, eg 1 or 0.01 (required)\n    mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst token = getTokenByTokenName(parsedInput.mint) || getTokenByTokenAddress(parsedInput.mint)\n\n\t\t\tif (!token) throw new Error(\"Token not found\")\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(token.tokenAddress)\n\n\t\t\tconsole.log(\"mintDetail\", mintDetail)\n\n\t\t\tconst lendTokenTransactionHash = await this.agent.lendTokenWithEchelon(\n\t\t\t\ttoken.tokenAddress as MoveStructId,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8),\n\t\t\t\ttoken.poolAddress,\n\t\t\t\ttoken.tokenAddress.split(\"::\").length !== 3\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tlendTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name || \"APT\",\n\t\t\t\t\tdecimals: mintDetail.decimals || 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { type MoveStructId, convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\nimport { getTokenByTokenAddress, getTokenByTokenName } from \"../../utils/get-pool-address-by-token-name\"\n\nexport class EchelonWithdrawTokenTool extends Tool {\n\tname = \"echelon_withdraw_token\"\n\tdescription = `this tool can be used to withdraw APT, tokens or fungible asset from a position\n\n    if you want to withdraw APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n    if user added mint as asset name, and you don't have the address of the asset, you can use the following token names:\n    ['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n    or whatever name the user has provided, you can use the token name to get the address of the token\n\n    Inputs ( input is a JSON string ) (IMPORTANT):\n    amount: number, eg 1 or 0.01 (required)\n    mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst token = getTokenByTokenName(parsedInput.mint) || getTokenByTokenAddress(parsedInput.mint)\n\n\t\t\tif (!token) throw new Error(\"Token not found\")\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(token.tokenAddress)\n\n\t\t\tconsole.log(\"mintDetail\", mintDetail)\n\n\t\t\tconst withdrawTokenTransactionHash = await this.agent.withdrawTokenWithEchelon(\n\t\t\t\ttoken.tokenAddress as MoveStructId,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8),\n\t\t\t\ttoken.poolAddress,\n\t\t\t\ttoken.tokenAddress.split(\"::\").length !== 3\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\twithdrawTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name || \"APT\",\n\t\t\t\t\tdecimals: mintDetail.decimals || 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { type MoveStructId, convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\nimport { getTokenByTokenAddress, getTokenByTokenName } from \"../../utils/get-pool-address-by-token-name\"\n\nexport class EchelonRepayTokenTool extends Tool {\n\tname = \"echelon_repay_token\"\n\tdescription = `this tool can be used to repay APT, tokens or fungible asset from a position\n\n    if you want to repay APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n    if user added mint as asset name, and you don't have the address of the asset, you can use the following token names:\n    ['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n    or whatever name the user has provided, you can use the token name to get the address of the token\n\n    Inputs ( input is a JSON string ) (IMPORTANT):\n    amount: number, eg 1 or 0.01 (required)\n    mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst token = getTokenByTokenName(parsedInput.mint) || getTokenByTokenAddress(parsedInput.mint)\n\n\t\t\tif (!token) throw new Error(\"Token not found\")\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(token.tokenAddress)\n\n\t\t\tconst repayTokenTransactionHash = await this.agent.repayTokenWithEchelon(\n\t\t\t\ttoken.tokenAddress as MoveStructId,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8),\n\t\t\t\ttoken.poolAddress,\n\t\t\t\ttoken.tokenAddress.split(\"::\").length !== 3\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\trepayTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name || \"APT\",\n\t\t\t\t\tdecimals: mintDetail.decimals || 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { type MoveStructId, convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\nimport { getTokenByTokenAddress, getTokenByTokenName } from \"../../utils/get-pool-address-by-token-name\"\n\nexport class EchelonBorrowTokenTool extends Tool {\n\tname = \"echelon_borrow_token\"\n\tdescription = `this tool can be used to borrow APT, tokens or fungible asset from a position\n\n  if you want to borrow APT, mint will be \"0x1::aptos_coin::AptosCoin\"\n\n  if user added mint as asset name, and you don't have the address of the asset, you can use the following token names:\n  ['usdt', 'zusdt', 'zusdc', 'apt', 'sthapt', 'mod', 'thl', 'wusdc' , 'zweth', 'wweth', 'cake', 'stapt', 'abtc', 'stone' , 'truapt', 'sbtc']\n  or whatever name the user has provided, you can use the token name to get the address of the token \n\n\n  Inputs ( input is a JSON string ) (IMPORTANT):\n  amount: number, eg 1 or 0.01 (required)\n  mint: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" or \"usdt (name of the token)\" (required)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst token = getTokenByTokenName(parsedInput.mint) || getTokenByTokenAddress(parsedInput.mint)\n\n\t\t\tif (!token) throw new Error(\"Token not found\")\n\n\t\t\tconst mintDetail = await this.agent.getTokenDetails(token.tokenAddress)\n\n\t\t\tconst borrowTokenTransactionHash = await this.agent.borrowTokenWithEchelon(\n\t\t\t\ttoken.tokenAddress as MoveStructId,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, mintDetail.decimals || 8),\n\t\t\t\ttoken.poolAddress,\n\t\t\t\ttoken.tokenAddress.split(\"::\").length !== 3\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tborrowTokenTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: mintDetail.name || \"APT\",\n\t\t\t\t\tdecimals: mintDetail.decimals || 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class EchoStakeTokenTool extends Tool {\n\tname = \"echo_stake_token\"\n\tdescription = `this tool can be used to stake token in Echo\n\n    Inputs ( input is a JSON string ):\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst stakeTransactionHash = await this.agent.stakeTokenWithEcho(\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tstakeTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: \"eAPT\",\n\t\t\t\t\tdecimals: 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\nexport class EchoUnstakeTokenTool extends Tool {\n\tname = \"echo_unstake_token\"\n\tdescription = `this tool can be used to unstake token in Echo\n\n    Inputs ( input is a JSON string ):\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst unstakeTransactionHash = await this.agent.unstakeTokenWithEcho(\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tunstakeTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: \"APT\",\n\t\t\t\t\tdecimals: 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\n\nexport class MerkleTradeGetPositionTool extends Tool {\n\tname = \"merkle_trade_get_position\"\n\tdescription = `this tool can be used to get position on MerkleTrade\n    No inputs required, this tool will return the current position of the agent\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(): Promise<string> {\n\t\ttry {\n\t\t\tconst position = await this.agent.getPositionsWithMerkleTrade()\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tposition: position,\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class MerkleTradePlaceLimitOrderTool extends Tool {\n\tname = \"merkle_trade_place_limit_order\"\n\tdescription = `this tool can be used to place limit order on MerkleTrade\n\n  if you want to place a limit order to buy BTC at 100000, pair will be \"BTC_USD\" and isLong will be true, price will be 100000\n  \n\tInputs ( input is a JSON string ):\n\tpair: string, eg \"BTC_USD\" (required)\n\tisLong: boolean, eg true (required)\n\tsizeDelta: number, eg 10 (required)\n\tcollateralDelta: number, eg 10 (required)\n\tprice: number, eg 10000 (required)\n\t`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst txhash = await this.agent.placeLimitOrderWithMerkleTrade(\n\t\t\t\tparsedInput.pair,\n\t\t\t\tparsedInput.isLong,\n\t\t\t\tparsedInput.sizeDelta,\n\t\t\t\tparsedInput.collateralDelta,\n\t\t\t\tparsedInput.price\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tlimitOrderTransactionHash: txhash,\n\t\t\t\tposition: {\n\t\t\t\t\tpair: parsedInput.pair,\n\t\t\t\t\tisLong: parsedInput.isLong,\n\t\t\t\t\tsizeDelta: parsedInput.sizeDelta,\n\t\t\t\t\tcollateralDelta: parsedInput.collateralDelta,\n\t\t\t\t\tprice: parsedInput.price,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class MerkleTradePlaceMarketOrderTool extends Tool {\n\tname = \"merkle_trade_place_market_order\"\n\tdescription = `this tool can be used to place market order on MerkleTrade\n\n  if you want to place a market order to buy BTC, pair will be \"BTC_USD\" and isLong will be true, \n  if you want to place a market order to sell BTC, pair will be \"BTC_USD\" and isLong will be false\n  if you want to place a market order to size 100, collateral 10, sizeDelta will be 100, collateralDelta will be 10\n\n\tInputs ( input is a JSON string ):\n\tpair: string, eg \"BTC_USD\" (required)\n\tisLong: boolean, eg true (required)\n\tsizeDelta: number, eg 10 (required)\n\tcollateralDelta: number, eg 10 (required)\n\t`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst txhash = await this.agent.placeMarketOrderWithMerkleTrade(\n\t\t\t\tparsedInput.pair,\n\t\t\t\tparsedInput.isLong,\n\t\t\t\tparsedInput.sizeDelta,\n\t\t\t\tparsedInput.collateralDelta\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tmarketOrderTransactionHash: txhash,\n\t\t\t\tposition: {\n\t\t\t\t\tpair: parsedInput.pair,\n\t\t\t\t\tisLong: parsedInput.isLong,\n\t\t\t\t\tsizeDelta: parsedInput.sizeDelta,\n\t\t\t\t\tcollateralDelta: parsedInput.collateralDelta,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class MerkleTradeClosePositionTool extends Tool {\n\tname = \"merkle_trade_close_position\"\n\tdescription = `this tool can be used to close position on MerkleTrade\n\n  if you want to close a position, pair will be \"BTC_USD\" and isLong will be true\n  \n\tInputs ( input is a JSON string ):\n\tpair: string, eg \"BTC_USD\" (required)\n\tisLong: boolean, eg true (required)\n\t`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst txhash = await this.agent.closePositionWithMerkleTrade(parsedInput.pair, parsedInput.isLong)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tclosePositionTransactionHash: txhash,\n\t\t\t\tposition: {\n\t\t\t\t\tpair: parsedInput.pair,\n\t\t\t\t\tisLong: parsedInput.isLong,\n\t\t\t\t\tsizeDelta: parsedInput.sizeDelta,\n\t\t\t\t\tcollateralDelta: parsedInput.collateralDelta,\n\t\t\t\t\tprice: parsedInput.price,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class OpenAICreateImageTool extends Tool {\n\tname = \"openai_create_image\"\n\tdescription = `\n    Generate an image using OpenAI's DALL-E\n\n    Inputs ( input is a JSON string ):\n    prompt: string, Text description of the image to generate (required)\n    size: string, Image size ('256x256', '512x512', or '1024x1024') (default: '1024x1024')\n    n: number, Number of images to generate (default: 1)`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst response = await this.agent.createImageWithOpenAI(parsedInput.prompt, parsedInput.size, parsedInput.n)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tresponse,\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class PanoraSwapTool extends Tool {\n\tname = \"panora_aggregator_swap\"\n\tdescription = `this tool can be used to swap tokens in panora - liquidity aggregator on aptos\n\n\tif you want to swap APT and one of the token, fromToken will be \"0x1::aptos_coin::AptosCoin\"\n\n\tInputs ( input is a JSON string ):\n\tfromToken: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n\ttoToken: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n\tswapAmount: number, eg 1 or 0.01 (required)\n\ttoWalletAddress: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa\" (optional)\n\t`\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintXDetail = await this.agent.getTokenDetails(parsedInput.fromToken)\n\n\t\t\tconst mintYDetail = await this.agent.getTokenDetails(parsedInput.toToken)\n\n\t\t\tconst swapTransactionHash = await this.agent.swapWithPanora(\n\t\t\t\tparsedInput.fromToken,\n\t\t\t\tparsedInput.toToken,\n\t\t\t\tparsedInput.swapAmount,\n\t\t\t\tparsedInput.toWalletAddress\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tswapTransactionHash,\n\t\t\t\ttoken: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmintX: mintXDetail.name,\n\t\t\t\t\t\tdecimals: mintXDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmintY: mintYDetail.name,\n\t\t\t\t\t\tdecimals: mintYDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport { type AgentRuntime, parseJson } from \"../..\"\n\nexport class ThalaStakeTokenTool extends Tool {\n\tname = \"thala_stake_token\"\n\tdescription = `this tool can be used to stake thAPT in Thala\n\n    Inputs ( input is a JSON string ):\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst stakeTransactionHash = await this.agent.stakeTokensWithThala(\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tstakeTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: \"thAPT\",\n\t\t\t\t\tdecimals: 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\nexport class ThalaUnstakeTokenTool extends Tool {\n\tname = \"thala_unstake_token\"\n\tdescription = `this tool can be used to unstake thAPT in Thala\n\n    Inputs ( input is a JSON string ):\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst unstakeTransactionHash = await this.agent.unstakeTokensWithThala(\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, 8)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tunstakeTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: \"APT\",\n\t\t\t\t\tdecimals: 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class ThalaMintMODTool extends Tool {\n\tname = \"thala_mint_mod\"\n\tdescription = `this tool can be used to mint move dollar (MOD) in Thala\n\n    Only supported coin types: lzUSDC, whUSDC, or USDt\n\n\tif the user coin is not in the list , default to lzUSDC\n\n\tmintType for lzUSDC - 0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDC\n\tmintType for wUSDC - 0x5e156f1207d0ebfa19a9eeff00d62a282278fb8719f4fab3a586a0a2c0fffbea::coin::T\n\tmintType for USDt - 0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\n\n    Inputs ( input is a JSON string ):\n    mintType: eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintMODTransactionHash = await this.agent.mintMODWithThala(\n\t\t\t\tparsedInput.mintType,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, 6)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tmintMODTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: \"MOD\",\n\t\t\t\t\tdecimals: 8,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\nexport class ThalaRedeemMODTool extends Tool {\n\tname = \"thala_redeem_mod\"\n\tdescription = `this tool can be used to redeem move dollar (MOD) in Thala\n\n  Only supported coin types: lzUSDC, whUSDC, or USDt\n\n\tif the user coin is not in the list , default to lzUSDC\n\n\tmintType for lzUSDC - 0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDC\n\tmintType for wUSDC - 0x5e156f1207d0ebfa19a9eeff00d62a282278fb8719f4fab3a586a0a2c0fffbea::coin::T\n\tmintType for USDt - 0x357b0b74bc833e95a115ad22604854d6b0fca151cecd94111770e5d6ffc9dc2b\n\n\n    Inputs ( input is a JSON string ):\n    mintType: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    amount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst tokenDetails = await this.agent.getTokenDetails(parsedInput.mintType)\n\n\t\t\tconst redeemMODTransactionHash = await this.agent.redeemMODWithThala(\n\t\t\t\tparsedInput.mintType,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amount, 6)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tredeemMODTransactionHash,\n\t\t\t\ttoken: {\n\t\t\t\t\tname: tokenDetails.name,\n\t\t\t\t\tdecimals: tokenDetails.decimals,\n\t\t\t\t},\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\nexport class ThalaAddLiquidityTool extends Tool {\n\tname = \"thala_add_liquidity\"\n\tdescription = `this tool can be used to add liquidity to a Thala pool\n\n    If you want to add APT, use \"0x1::aptos_coin::AptosCoin\" as the coin type\n\n    Inputs ( input is a JSON string ) (IMPORTANT):\n    mintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    mintY: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    mintXAmount: number, eg 1 or 0.01 (required)\n    mintYAmount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintXDetail = await this.agent.getTokenDetails(parsedInput.mintX)\n\t\t\tconst mintYDetail = await this.agent.getTokenDetails(parsedInput.mintY)\n\n\t\t\tconst addLiquidityTransactionHash = await this.agent.addLiquidityWithThala(\n\t\t\t\tparsedInput.mintX,\n\t\t\t\tparsedInput.mintY,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.mintXAmount, mintXDetail.decimals),\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.mintYAmount, mintYDetail.decimals)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\taddLiquidityTransactionHash,\n\t\t\t\ttokens: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmintX: mintXDetail.name,\n\t\t\t\t\t\tdecimals: mintXDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmintY: mintYDetail.name,\n\t\t\t\t\t\tdecimals: mintYDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class ThalaRemoveLiquidityTool extends Tool {\n\tname = \"thala_remove_liquidity\"\n\tdescription = `this tool can be used to remove liquidity from a Thala pool\n\n    If one of your coins is APT, use \"0x1::aptos_coin::AptosCoin\" as the coin type\n\n    Inputs ( input is a JSON string ):\n    mintX: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    mintY: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    lpAmount: number, eg 1 or 0.01 (required)\n    `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintXDetail = await this.agent.getTokenDetails(parsedInput.mintX)\n\n\t\t\tconst mintYDetail = await this.agent.getTokenDetails(parsedInput.mintY)\n\n\t\t\tconst removeLiquidityTransactionHash = await this.agent.removeLiquidityWithThala(\n\t\t\t\tparsedInput.mintX,\n\t\t\t\tparsedInput.mintY,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.lpAmount, 6)\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tremoveLiquidityTransactionHash,\n\t\t\t\ttokens: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmintX: mintXDetail.name,\n\t\t\t\t\t\tdecimals: 6,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmintY: mintYDetail.name,\n\t\t\t\t\t\tdecimals: 6,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import { convertAmountFromHumanReadableToOnChain } from \"@aptos-labs/ts-sdk\"\nimport { Tool } from \"langchain/tools\"\nimport type { AgentRuntime } from \"../../agent\"\nimport { parseJson } from \"../../utils\"\n\nexport class ThalaCreatePoolTool extends Tool {\n\tname = \"thala_create_pool\"\n\tdescription = `this tool can be used to create a new pool in Thala\n\n    If you want to create a pool with APT, use \"0x1::aptos_coin::AptosCoin\" as the coin type\n    For other coins use their respective addresses\n\n    Fee tiers:\n    - 1 for 0.01%\n    - 5 for 0.05%\n    - 30 for 0.3%\n    - 100 for 1%\n\n    Amplification factors: 10, 100, or 1000\n\n    If the user did not provide any input for fee tiers or amplification, do not fill any fee tiers or amplification. \n    Ask the user to provide fee tiers and amplification.\n\n    Inputs (input is a JSON string):\n    mintX: string, eg \"0x1::aptos_coin::AptosCoin\" (required)\n    mintY: string, eg \"0xf22bede237a07e121b56d91a491eb7bcdfd1f5907926a9e58338f964a01b17fa::asset::USDT\" (required)\n    amountX: number, eg 1 or 0.01 (required)\n    amountY: number, eg 1 or 0.01 (required)\n    feeTier: number, eg 1, 5, 30, or 100 (required)\n    amplificationFactor: number, eg 10, 100, or 1000 (required)\n  `\n\n\tconstructor(private agent: AgentRuntime) {\n\t\tsuper()\n\t}\n\n\tprotected async _call(input: string): Promise<string> {\n\t\ttry {\n\t\t\tconst parsedInput = parseJson(input)\n\n\t\t\tconst mintXDetail = await this.agent.getTokenDetails(parsedInput.mintX)\n\t\t\tconst mintYDetail = await this.agent.getTokenDetails(parsedInput.mintY)\n\n\t\t\tconst createPoolTransactionHash = await this.agent.createPoolWithThala(\n\t\t\t\tparsedInput.mintX,\n\t\t\t\tparsedInput.mintY,\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amountX, mintXDetail.decimals),\n\t\t\t\tconvertAmountFromHumanReadableToOnChain(parsedInput.amountY, mintYDetail.decimals),\n\t\t\t\tparsedInput.feeTier,\n\t\t\t\tparsedInput.amplificationFactor\n\t\t\t)\n\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"success\",\n\t\t\t\tcreatePoolTransactionHash,\n\t\t\t\ttokens: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmintX: mintXDetail.name,\n\t\t\t\t\t\tdecimals: mintXDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tmintY: mintYDetail.name,\n\t\t\t\t\t\tdecimals: mintYDetail.decimals,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t})\n\t\t} catch (error: any) {\n\t\t\treturn JSON.stringify({\n\t\t\t\tstatus: \"error\",\n\t\t\t\tmessage: error.message,\n\t\t\t\tcode: error.code || \"UNKNOWN_ERROR\",\n\t\t\t})\n\t\t}\n\t}\n}\n","import type { AgentRuntime } from \"../agent\"\nimport { AptosAccountAddressTool } from \"./account\"\nimport { AmnisStakeTool, AmnisWithdrawStakeTool } from \"./amnis\"\nimport {\n\tAptosBalanceTool,\n\tAptosBurnTokenTool,\n\tAptosCreateTokenTool,\n\tAptosGetTokenDetailTool,\n\tAptosGetTokenPriceTool,\n\tAptosMintTokenTool,\n\tAptosTransactionTool,\n\tAptosTransferTokenTool,\n} from \"./aptos\"\nimport { AriesBorrowTool, AriesCreateProfileTool, AriesLendTool, AriesRepayTool, AriesWithdrawTool } from \"./aries\"\nimport {\n\tJouleBorrowTokenTool,\n\tJouleClaimRewardTool,\n\tJouleGetPoolDetails,\n\tJouleGetUserAllPositions,\n\tJouleGetUserPosition,\n\tJouleLendTokenTool,\n\tJouleRepayTokenTool,\n\tJouleWithdrawTokenTool,\n} from \"./joule\"\nimport {\n\tLiquidSwapAddLiquidityTool,\n\tLiquidSwapCreatePoolTool,\n\tLiquidSwapRemoveLiquidityTool,\n\tLiquidSwapSwapTool,\n} from \"./liquidswap\"\n\nimport type { ToolsNameList } from \"../types\"\nimport {\n\tEchelonBorrowTokenTool,\n\tEchelonLendTokenTool,\n\tEchelonRepayTokenTool,\n\tEchelonWithdrawTokenTool,\n} from \"./echelon\"\nimport { EchoStakeTokenTool, EchoUnstakeTokenTool } from \"./echo\"\nimport {\n\tMerkleTradeClosePositionTool,\n\tMerkleTradeGetPositionTool,\n\tMerkleTradePlaceLimitOrderTool,\n\tMerkleTradePlaceMarketOrderTool,\n} from \"./merkletrade\"\nimport { OpenAICreateImageTool } from \"./openai\"\nimport { PanoraSwapTool } from \"./panora\"\nimport {\n\tThalaAddLiquidityTool,\n\tThalaMintMODTool,\n\tThalaRedeemMODTool,\n\tThalaRemoveLiquidityTool,\n\tThalaStakeTokenTool,\n\tThalaUnstakeTokenTool,\n} from \"./thala\"\nimport { ThalaCreatePoolTool } from \"./thala/create-pool\"\n\nexport const createAptosTools = (agent: AgentRuntime, config: { filter?: ToolsNameList[] } = {}) => {\n\tconst tools = [\n\t\t// Aptos tools\n\t\tnew AptosBalanceTool(agent),\n\t\tnew AptosAccountAddressTool(agent),\n\t\tnew AptosTransferTokenTool(agent),\n\t\t// new AptosBurnNFTTool(agent),\n\t\tnew AptosBurnTokenTool(agent),\n\t\t// new AptosTransferNFTTool(agent),\n\t\tnew AptosTransactionTool(agent),\n\t\tnew AptosGetTokenDetailTool(agent),\n\t\tnew AptosMintTokenTool(agent),\n\t\tnew AptosCreateTokenTool(agent),\n\t\tnew AptosGetTokenPriceTool(agent),\n\t\t// Amnis tools\n\t\tnew AmnisStakeTool(agent),\n\t\tnew AmnisWithdrawStakeTool(agent),\n\t\t// Joule tools\n\t\tnew JouleLendTokenTool(agent),\n\t\tnew JouleWithdrawTokenTool(agent),\n\t\tnew JouleBorrowTokenTool(agent),\n\t\tnew JouleRepayTokenTool(agent),\n\t\tnew JouleGetPoolDetails(agent),\n\t\tnew JouleGetUserPosition(agent),\n\t\tnew JouleGetUserAllPositions(agent),\n\t\tnew JouleClaimRewardTool(agent),\n\t\t// LiquidSwap tools\n\t\tnew LiquidSwapCreatePoolTool(agent),\n\t\tnew LiquidSwapAddLiquidityTool(agent),\n\t\tnew LiquidSwapRemoveLiquidityTool(agent),\n\t\tnew LiquidSwapSwapTool(agent),\n\t\t// Aries tools\n\t\tnew AriesCreateProfileTool(agent),\n\t\tnew AriesWithdrawTool(agent),\n\t\tnew AriesBorrowTool(agent),\n\t\tnew AriesLendTool(agent),\n\t\tnew AriesRepayTool(agent),\n\t\t// Thala tools\n\t\tnew ThalaAddLiquidityTool(agent),\n\t\tnew ThalaRemoveLiquidityTool(agent),\n\t\tnew ThalaMintMODTool(agent),\n\t\tnew ThalaRedeemMODTool(agent),\n\t\tnew ThalaUnstakeTokenTool(agent),\n\t\tnew ThalaStakeTokenTool(agent),\n\t\tnew ThalaCreatePoolTool(agent),\n\t\t// Panora tools\n\t\tnew PanoraSwapTool(agent),\n\t\t// OpenAI tools\n\t\tnew OpenAICreateImageTool(agent),\n\t\t// Echo tools\n\t\tnew EchoStakeTokenTool(agent),\n\t\tnew EchoUnstakeTokenTool(agent),\n\t\t// Echelon tools\n\t\tnew EchelonLendTokenTool(agent),\n\t\tnew EchelonWithdrawTokenTool(agent),\n\t\tnew EchelonRepayTokenTool(agent),\n\t\tnew EchelonBorrowTokenTool(agent),\n\t\t// Merkletrade Tools\n\t\tnew MerkleTradeClosePositionTool(agent),\n\t\tnew MerkleTradeGetPositionTool(agent),\n\t\tnew MerkleTradePlaceLimitOrderTool(agent),\n\t\tnew MerkleTradePlaceMarketOrderTool(agent),\n\t]\n\n\treturn config.filter ? tools.filter((tool) => config?.filter?.includes(tool.name as ToolsNameList)) : tools\n}\n\nexport * from \"./account\"\nexport * from \"./amnis\"\nexport * from \"./aptos\"\nexport * from \"./joule\"\nexport * from \"./aries\"\nexport * from \"./echelon\"\nexport * from \"./echo\"\nexport * from \"./liquidswap\"\nexport * from \"./panora\"\nexport * from \"./openai\"\nexport * from \"./thala\"\n"],"mappings":";AAUO,IAAe,aAAf,MAA0B;AAAA,EACtB,YACU,SACA,OAClB;AAFkB;AACA;AAAA,EACjB;AAAA,EAEI,aAA6B;AACnC,WAAO,KAAK,QAAQ;AAAA,EACrB;AAMD;;;ACtBA;AAAA,EAIC;AAAA,EACA;AAAA,EACA;AAAA,OACM;AAGA,IAAM,cAAN,cAA0B,WAAW;AAAA,EAC3C,YAAY,SAAkB,UAAmB,QAAQ,QAAQ;AAChE,UAAM,SAAS,IAAI,YAAY,EAAE,QAAQ,CAAC;AAC1C,UAAM,QAAQ,IAAI,MAAM,MAAM;AAC9B,UAAM,SAAS,KAAK;AAAA,EACrB;AAAA,EAEO,aAA6B;AACnC,WAAO,KAAK,QAAQ;AAAA,EACrB;AAAA,EAEA,MAAM,gBAAgB,aAAgC;AACrD,UAAM,sBAAsB,KAAK,MAAM,YAAY,KAAK;AAAA,MACvD,QAAQ,KAAK;AAAA,MACb;AAAA,IACD,CAAC;AAED,WAAO;AAAA,MACN;AAAA,IACD;AAAA,EACD;AAAA,EAEA,MAAM,gBAAgB,aAAgC;AACrD,UAAM,WAAW,MAAM,KAAK,gBAAgB,WAAW;AAEvD,UAAM,cAAc,MAAM,KAAK,MAAM,YAAY,OAAO,OAAO;AAAA,MAC9D;AAAA,MACA,qBAAqB,SAAS;AAAA,IAC/B,CAAC;AAED,UAAM,SAAS,MAAM,KAAK,MAAM,mBAAmB;AAAA,MAClD,iBAAiB,YAAY;AAAA,IAC9B,CAAC;AAED,WAAO,OAAO;AAAA,EACf;AAAA,EAEA,MAAM,YAAY,SAA+B;AAChD,UAAM,gBAAgB,KAAK,QAAQ,sBAAsB,OAAO;AAEhE,WAAO,cAAc,SAAS;AAAA,EAC/B;AACD;;;ACtDA,SAAuB,gBAAwC,SAAAA,QAAO,eAAAC,cAAa,WAAAC,gBAAe;AAK3F,IAAM,eAAN,cAA2B,WAAW;AAAA,EAC5C,YACC,SACiB,QACjB,UAAmBC,SAAQ,QAC1B;AACD,UAAM,SAAS,IAAIC,aAAY,EAAE,QAAQ,CAAC;AAC1C,UAAM,QAAQ,IAAIC,OAAM,MAAM;AAC9B,UAAM,SAAS,KAAK;AALH;AAAA,EAMlB;AAAA,EAEgB,aAA6B;AAC5C,UAAM,gBAAgB,KAAK,QAAQ,SAAS;AAC5C,WAAO,gBAAgB,eAAe,WAAW,cAAc,SAAS,CAAC,IAAI,KAAK,QAAQ;AAAA,EAC3F;AAAA,EAEA,MAAM,gBAAgB,aAAoE;AACzF,UAAM,sBAAsB,MAAM,KAAK,OAAO,gBAAgB;AAAA,MAC7D,sBAAsB;AAAA,IACvB,CAAC;AACD,WAAO;AAAA,MACN,qBAAqB,oBAAoB;AAAA,IAC1C;AAAA,EACD;AAAA,EAEA,MAAM,gBAAgB,aAAoD;AACzE,UAAM,SAAS,MAAM,KAAK,OAAO,yBAAyB,WAAW;AAErE,WAAO,OAAO;AAAA,EACf;AAAA,EAEA,MAAM,YAAY,SAAgC;AACjD,WAAO,KAAK,OAAO,YAAY,OAAO;AAAA,EACvC;AACD;;;ACtCA,SAAS,mCAAmC;;;ACDrC,IAAM,YAAY;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACD;;;ACCA,eAAsB,YAAY,OAAqB,IAAoB,QAAiC;AAC3G,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,QAAQ,GAAG,SAAS,CAAC;AAAA,MAC1C;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,sBAAsB;AACvD,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACvC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,yBAAyB,MAAM,OAAO,EAAE;AAAA,EACzD;AACD;;;ACzBA,eAAsB,cAAc,OAAqB,IAAoB,QAAiC;AAC7G,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,QAAQ,GAAG,SAAS,CAAC;AAAA,MAC1C;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,wBAAwB;AACzD,YAAM,IAAI,MAAM,wBAAwB;AAAA,IACzC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,2BAA2B,MAAM,OAAO,EAAE;AAAA,EAC3D;AACD;;;ACnCA,SAA4B,+CAA+C;AAY3E,eAAsB,WAAW,OAAqB,MAA+C;AACpG,MAAI;AACH,QAAI,MAAM;AACT,UAAIC;AACJ,UAAI,KAAK,MAAM,IAAI,EAAE,WAAW,GAAG;AAClC,cAAM,WAAW,MAAM,MAAM,MAAM,gCAAgC;AAAA,UAClE,SAAS;AAAA,YACR,OAAO;AAAA,cACN,eAAe;AAAA,gBACd,KAAK,MAAM,QAAQ,WAAW,EAAE,aAAa;AAAA,cAC9C;AAAA,cACA,YAAY,EAAE,KAAK,KAAK;AAAA,YACzB;AAAA,UACD;AAAA,QACD,CAAC;AAED,QAAAA,WAAU,SAAS,CAAC,EAAE,UAAU;AAAA,MACjC,OAAO;AACN,QAAAA,WAAU,MAAM,MAAM,MAAM,qBAAqB;AAAA,UAChD,gBAAgB,MAAM,QAAQ,WAAW;AAAA,UACzC,UAAU;AAAA,QACX,CAAC;AAAA,MACF;AACA,aAAOA;AAAA,IACR;AACA,UAAM,UAAU,MAAM,MAAM,MAAM,oBAAoB;AAAA,MACrD,gBAAgB,MAAM,QAAQ,WAAW;AAAA,IAC1C,CAAC;AAED,UAAM,mBAAmB,wCAAwC,SAAS,CAAC;AAE3E,WAAO;AAAA,EACR,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,0BAA0B,MAAM,OAAO,EAAE;AAAA,EAC1D;AACD;;;ACtCA,eAAsB,QAAQ,OAAqB,MAAuC;AACzF,SAAO;AAsBR;;;ACvBA,eAAsB,UAAU,OAAqB,QAAgB,MAA+B;AACnG,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,MAAM,MAAM;AAAA,MACjC;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,mBAAmB;AACpD,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACpC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,sBAAsB,MAAM,OAAO,EAAE;AAAA,EACtD;AACD;;;ACxBA,eAAsB,YACrB,OACA,IACA,MACkB;AAClB,SAAO;AA0BR;;;ACpBA,eAAsB,eACrB,OACA,IACA,QACA,MACkB;AAClB,QAAM,qBAA0D;AAAA,IAC/D,UAAU;AAAA,IACV,eAAe,CAAC,IAAI;AAAA,IACpB,mBAAmB,CAAC,GAAG,SAAS,GAAG,MAAM;AAAA,EAC1C;AAEA,QAAM,sBAA2D;AAAA,IAChE,UAAU;AAAA,IACV,eAAe,CAAC,+BAA+B;AAAA,IAC/C,mBAAmB,CAAC,MAAM,GAAG,SAAS,GAAG,MAAM;AAAA,EAChD;AAEA,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM,KAAK,MAAM,IAAI,EAAE,WAAW,IAAI,qBAAqB;AAAA,IAC5D,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,uBAAuB;AACxD,YAAM,IAAI,MAAM,uBAAuB;AAAA,IACxC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,0BAA0B,MAAM,OAAO,EAAE;AAAA,EAC1D;AACD;;;ACjDA,eAAsB,UACrB,OACA,IACA,MACA,QACkB;AAClB,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,GAAG,SAAS,GAAG,MAAM,MAAM;AAAA,MAChD;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,mBAAmB;AACpD,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACpC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,sBAAsB,MAAM,OAAO,EAAE;AAAA,EACtD;AACD;;;AC/BA,eAAsB,YACrB,OACA,MACA,QACA,SACA,YAIE;AACF,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,MAAM,QAAQ,SAAS,UAAU;AAAA,MACtD;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,uBAAuB;AACxD,YAAM,IAAI,MAAM,uBAAuB;AAAA,IACxC;AAEA,WAAO;AAAA,MACN,MAAM,kBAAkB;AAAA;AAAA,MAExB,OAAO,kBAAkB,OAAO,CAAC,EAAE,KAAK,OAAO;AAAA,IAChD;AAAA,EACD,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,0BAA0B,MAAM,OAAO,EAAE;AAAA,EAC1D;AACD;;;ACnCA,eAAsB,eAAe,OAAqB,MAA4C;AACrG,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,qBAAqB;AAAA,MAC1D,iBAAiB;AAAA,IAClB,CAAC;AAED,WAAO;AAAA,EACR,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,0BAA0B,MAAM,OAAO,EAAE;AAAA,EAC1D;AACD;;;ACvBA,OAAO,WAAW;AAYlB,eAAsB,gBAAgB,cAAoC;AACzE,MAAI;AACH,UAAM,MAAM,MAAM,MAAM;AAAA,MACvB;AAAA,IACD;AACA,UAAM,YAAY,MAAM,IAAI;AAE5B,QAAI,CAAC,gBAAgB,iBAAiB,GAAI,QAAO,UAAU,CAAC;AAE5D,UAAM,QAAQ,UAAU;AAAA,MACvB,CAAC,eAAoB,UAAU,gBAAgB,UAAU,WAAW,YAAY,MAAM,aAAa,YAAY;AAAA,IAChH;AAEA,QAAI,CAAC,SAAS,aAAa,SAAS,iCAAiC,GAAG;AACvE,aAAO,UAAU;AAAA,QAChB,CAAC,MAAW,EAAE,cAAc;AAAA,MAC7B;AAAA,IACD;AACA,QAAI,CAAC,MAAO,OAAM,IAAI,MAAM,mBAAmB;AAE/C,WAAO;AAAA,EACR,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,0BAA0B,MAAM,OAAO,EAAE;AAAA,EAC1D;AACD;;;AC/BA,eAAsB,cAAc,OAA6B;AAChE,MAAI;AACH,UAAM,oBAAoB,MAAM,MAAM,oDAAoD,KAAK,oBAAoB;AAEnH,UAAM,YAAY,MAAM,kBAAkB,KAAK;AAE/C,UAAM,gBAAgB,UAAU,IAAI,CAAC,SAAc;AAClD,aAAO;AAAA,QACN,IAAI,KAAK;AAAA,QACT,aAAa,KAAK,WAAW;AAAA,QAC7B,QAAQ,KAAK,WAAW;AAAA,MACzB;AAAA,IACD,CAAC;AAED,UAAM,eAAe,cAAc,IAAI,CAAC,SAAc,KAAK,EAAE;AAE7D,QAAI,aAAa,WAAW,GAAG;AAC9B,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACtD;AACA,UAAM,yBAAyB,MAAM;AAAA,MACpC,6DAA6D,aAAa,KAAK,SAAS,CAAC;AAAA,IAC1F;AAEA,UAAM,iBAAiB,MAAM,uBAAuB,KAAK;AAEzD,UAAMC,aAAY,cAAc,IAAI,CAAC,SAAc;AAClD,YAAM,YAAY,eAAe,OAAO,KAAK,CAAC,UAAe,MAAM,OAAO,KAAK,EAAE;AAEjF,aAAO;AAAA,QACN,GAAG;AAAA,QACH,QACE,OAAO,UAAU,MAAM,KAAK,IAAI,MAAM,KAAK,IAAI,UAAU,MAAM,IAAI,GAAG,eAAe,KACtF,OAAO,UAAU,MAAM,KAAK,EAAE,eAAe;AAAA,MAC/C;AAAA,IACD,CAAC;AAED,WAAOA;AAAA,EACR,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,0BAA0B,MAAM,OAAO,EAAE;AAAA,EAC1D;AACD;;;AC3BA,eAAsB,UACrB,OACA,QACA,MACA,YACA,aACA,eACgD;AAChD,QAAM,0BAA0B,CAAC,YAAY,QAAQ,WAAW;AAEhE,QAAM,qBAA0D;AAAA,IAC/D,UAAU;AAAA,IACV,eAAe,CAAC,KAAK,SAAS,CAAC;AAAA,IAC/B,mBAAmB;AAAA,EACpB;AAEA,QAAM,sBAA2D;AAAA,IAChE,UAAU;AAAA,IACV,mBAAmB,CAAC,YAAY,KAAK,SAAS,GAAG,aAAa,MAAM;AAAA,EACrE;AAEA,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM,gBAAgB,sBAAsB;AAAA,IAC7C,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAID,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,mBAAmB;AACpD,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACpC;AAEA,WAAO;AAAA,MACN,MAAM,kBAAkB;AAAA;AAAA,MAExB,YAAY,kBAAkB,OAAO,CAAC,EAAE,KAAK;AAAA,IAC9C;AAAA,EACD,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,sBAAsB,MAAM,OAAO,EAAE;AAAA,EACtD;AACD;;;ACjDA,eAAsB,YACrB,OACA,QACA,MACA,YACA,eAIE;AACF,QAAM,mBAAmB,MAAM,MAAM,YAAY;AAEjD,QAAM,0BAA0B,CAAC,YAAY,QAAQ,gBAAgB;AAErE,QAAM,qBAA0D;AAAA,IAC/D,UAAU;AAAA,IACV,eAAe,CAAC,KAAK,SAAS,CAAC;AAAA,IAC/B,mBAAmB;AAAA,EACpB;AAEA,QAAM,sBAA2D;AAAA,IAChE,UAAU;AAAA,IACV,mBAAmB,CAAC,YAAY,KAAK,SAAS,GAAG,QAAQ,gBAAgB;AAAA,EAC1E;AAEA,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM,gBAAgB,sBAAsB;AAAA,IAC7C,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,qBAAqB;AACtD,YAAM,IAAI,MAAM,qBAAqB;AAAA,IACtC;AAEA,WAAO;AAAA,MACN,MAAM,kBAAkB;AAAA,MACxB;AAAA,IACD;AAAA,EACD,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,wBAAwB,MAAM,OAAO,EAAE;AAAA,EACxD;AACD;;;ACjDA,eAAsB,WACrB,OACA,QACA,MACA,YACA,eAIE;AACF,QAAM,0BAA0B,CAAC,YAAY,MAAM;AAEnD,QAAM,qBAA0D;AAAA,IAC/D,UAAU;AAAA,IACV,eAAe,CAAC,KAAK,SAAS,CAAC;AAAA,IAC/B,mBAAmB;AAAA,EACpB;AAEA,QAAM,sBAA2D;AAAA,IAChE,UAAU;AAAA,IACV,mBAAmB,CAAC,YAAY,KAAK,SAAS,GAAG,MAAM;AAAA,EACxD;AAEA,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM,gBAAgB,sBAAsB;AAAA,IAC7C,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,oBAAoB;AACrD,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACrC;AAEA,WAAO;AAAA,MACN,MAAM,kBAAkB;AAAA,MACxB;AAAA,IACD;AAAA,EACD,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,uBAAuB,MAAM,OAAO,EAAE;AAAA,EACvD;AACD;;;AC/CA,eAAsB,cACrB,OACA,QACA,MACA,YACA,eAIE;AACF,QAAM,mBAAmB,MAAM,MAAM,YAAY;AAEjD,QAAM,0BAA0B,CAAC,YAAY,QAAQ,gBAAgB;AAErE,QAAM,qBAA0D;AAAA,IAC/D,UAAU;AAAA,IACV,eAAe,CAAC,KAAK,SAAS,CAAC;AAAA,IAC/B,mBAAmB;AAAA,EACpB;AAEA,QAAM,sBAA2D;AAAA,IAChE,UAAU;AAAA,IACV,mBAAmB,CAAC,YAAY,KAAK,SAAS,GAAG,QAAQ,gBAAgB;AAAA,EAC1E;AAEA,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM,gBAAgB,sBAAsB;AAAA,IAC7C,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,uBAAuB;AACxD,YAAM,IAAI,MAAM,uBAAuB;AAAA,IACxC;AAEA,WAAO;AAAA,MACN,MAAM,kBAAkB;AAAA,MACxB;AAAA,IACD;AAAA,EACD,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,0BAA0B,MAAM,OAAO,EAAE;AAAA,EAC1D;AACD;;;ACrDA,eAAsB,eAAe,OAAqB,MAA4B;AACrF,MAAI;AACH,UAAM,yBAAyB,MAAM,MAAM,4CAA4C;AAEvF,UAAM,iBAAiB,MAAM,uBAAuB,KAAK;AAEzD,UAAM,aAAa,eAAe,KAAK,KAAK,CAAC,SAAc,KAAK,MAAM,KAAK,SAAS,IAAI,CAAC;AAEzF,QAAI,CAAC,YAAY;AAChB,YAAM,IAAI,MAAM,gBAAgB;AAAA,IACjC;AAEA,WAAO;AAAA,MACN,WAAW,WAAW,MAAM;AAAA,MAC5B,cAAc;AAAA,MACd,KAAK,WAAW;AAAA,MAChB,UAAU,WAAW,MAAM;AAAA,MAC3B,YAAY,OAAO,WAAW,UAAU,IAAI,WAAW,MAAM;AAAA,MAC7D,eAAe,OAAO,WAAW,aAAa,IAAI,WAAW,MAAM;AAAA,MACnE,YAAY,WAAW;AAAA,MACvB,iBAAiB,WAAW,SAAS;AAAA,MACrC,WAAW,WAAW;AAAA,MACtB,OAAO,WAAW,UAAU;AAAA,IAC7B;AAAA,EACD,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,+BAA+B,MAAM,OAAO,EAAE;AAAA,EAC/D;AACD;;;AC1BA,eAAsB,gBACrB,OACA,aACA,YACe;AACf,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,KAAK;AAAA,MAC1C,SAAS;AAAA,QACR,UAAU;AAAA,QACV,mBAAmB,CAAC,YAAY,SAAS,GAAG,UAAU;AAAA,MACvD;AAAA,IACD,CAAC;AAED,QAAI,CAAC,aAAa;AACjB,YAAM,IAAI,MAAM,+BAA+B;AAAA,IAChD;AAEA,WAAO;AAAA,EACR,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,gCAAgC,MAAM,OAAO,EAAE;AAAA,EAChE;AACD;;;ACnCO,IAAM,8BAA8B,CAAC,QAAkB;AAC7D,MAAI,CAAC,OAAO,OAAO,QAAQ,UAAU;AACpC,WAAO;AAAA,EACR;AAEA,MAAI,MAAM,QAAQ,GAAG,GAAG;AACvB,WAAO,IAAI,IAAI,CAAC,SAAS,4BAA4B,IAAI,CAAC;AAAA,EAC3D;AAEA,SAAO,OAAO,QAAQ,GAAG,EAAE,OAAO,CAAC,KAA6B,CAAC,KAAK,KAAK,MAAM;AAChF,QAAI,QAAQ,4BAA4B;AACvC,aAAO;AAAA,IACR;AAEA,QAAI,GAAG,IAAI,4BAA4B,KAAK;AAC5C,WAAO;AAAA,EACR,GAAG,CAAC,CAAC;AACN;;;ACPA,eAAsB,oBAAoB,OAAqB,aAAoD;AAClH,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,KAAK;AAAA,MAC1C,SAAS;AAAA,QACR,UAAU;AAAA,QACV,mBAAmB,CAAC,YAAY,SAAS,CAAC;AAAA,MAC3C;AAAA,IACD,CAAC;AAED,QAAI,CAAC,aAAa;AACjB,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACrD;AAIA,UAAM,qBAAqB,4BAA4B,WAAW;AAElE,WAAO;AAAA,EACR,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,qCAAqC,MAAM,OAAO,EAAE;AAAA,EACrE;AACD;;;ACtBA,eAAsB,YAAY,OAAqB,gBAAwD;AAC9G,MAAI;AACH,UAAM,aAAa,GAAG,cAAc,OAAO,QAAQ,MAAM,GAAG;AAE5D,UAAM,kBACL,mBAAmB;AAEpB,YAAQ,IAAI;AAAA,MACX,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe;AAAA,UACd,kBACG,8FACA;AAAA,QACJ;AAAA,QACA,mBAAmB,CAAC,YAAY,kBAAkB,oBAAoB,eAAe;AAAA,MACtF;AAAA,IACD,CAAC;AACD,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe;AAAA,UACd,kBACG,8FACA;AAAA,QACJ;AAAA,QACA,mBAAmB,CAAC,YAAY,kBAAkB,oBAAoB,eAAe;AAAA,MACtF;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,sBAAsB;AACvD,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACvC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,yBAAyB,MAAM,OAAO,EAAE;AAAA,EACzD;AACD;;;ACjDA,eAAsB,mBAAmB,OAAsC;AAC9E,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,cAAc;AAAA,MACnC;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,uBAAuB;AACxD,YAAM,IAAI,MAAM,uBAAuB;AAAA,IACxC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,0BAA0B,MAAM,OAAO,EAAE;AAAA,EAC1D;AACD;;;ACtBA,eAAsB,eAAe,OAAqB,UAAwB,QAAiC;AAClH,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe,CAAC,QAAQ;AAAA,QACxB,mBAAmB,CAAC,gBAAgB,QAAQ,KAAK;AAAA,MAClD;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,aAAa;AAC9C,YAAM,IAAI,MAAM,aAAa;AAAA,IAC9B;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,gBAAgB,MAAM,OAAO,EAAE;AAAA,EAChD;AACD;;;AC1BA,eAAsB,iBAAiB,OAAqB,UAAwB,QAAiC;AACpH,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe,CAAC,QAAQ;AAAA,QACxB,mBAAmB,CAAC,gBAAgB,QAAQ,IAAI;AAAA,MACjD;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,eAAe;AAChD,YAAM,IAAI,MAAM,eAAe;AAAA,IAChC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,kBAAkB,MAAM,OAAO,EAAE;AAAA,EAClD;AACD;;;AC1BA,eAAsB,mBAAmB,OAAqB,UAAwB,QAAiC;AACtH,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe,CAAC,QAAQ;AAAA,QACxB,mBAAmB,CAAC,gBAAgB,QAAQ,KAAK;AAAA,MAClD;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,iBAAiB;AAClD,YAAM,IAAI,MAAM,iBAAiB;AAAA,IAClC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,oBAAoB,MAAM,OAAO,EAAE;AAAA,EACpD;AACD;;;AC1BA,eAAsB,gBAAgB,OAAqB,UAAwB,QAAiC;AACnH,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe,CAAC,QAAQ;AAAA,QACxB,mBAAmB,CAAC,gBAAgB,QAAQ,IAAI;AAAA,MACjD;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,cAAc;AAC/C,YAAM,IAAI,MAAM,cAAc;AAAA,IAC/B;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,iBAAiB,MAAM,OAAO,EAAE;AAAA,EACjD;AACD;;;ACxBA,eAAsB,qBACrB,OACA,UACA,QACA,aACA,eACkB;AAClB,MAAI;AACH,UAAM,uBAAuB,CAAC,aAAa,MAAM;AAEjD,UAAM,qBAA0D;AAAA,MAC/D,UAAU;AAAA,MACV,eAAe,CAAC,SAAS,SAAS,CAAC;AAAA,MACnC,mBAAmB;AAAA,IACpB;AAEA,UAAM,sBAA2D;AAAA,MAChE,UAAU;AAAA,MACV,mBAAmB;AAAA,IACpB;AAEA,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM,gBAAgB,sBAAsB;AAAA,IAC7C,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,aAAa;AAC9C,YAAM,IAAI,MAAM,aAAa;AAAA,IAC9B;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,gBAAgB,MAAM,OAAO,EAAE;AAAA,EAChD;AACD;;;ACzCA,eAAsB,yBACrB,OACA,UACA,QACA,aACA,eACkB;AAClB,MAAI;AACH,UAAM,uBAAuB,CAAC,aAAa,MAAM;AAEjD,UAAM,qBAA0D;AAAA,MAC/D,UAAU;AAAA,MACV,eAAe,CAAC,SAAS,SAAS,CAAC;AAAA,MACnC,mBAAmB;AAAA,IACpB;AAEA,UAAM,sBAA2D;AAAA,MAChE,UAAU;AAAA,MACV,mBAAmB;AAAA,IACpB;AAEA,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM,gBAAgB,sBAAsB;AAAA,IAC7C,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,iBAAiB;AAClD,YAAM,IAAI,MAAM,iBAAiB;AAAA,IAClC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,oBAAoB,MAAM,OAAO,EAAE;AAAA,EACpD;AACD;;;ACzCA,eAAsB,sBACrB,OACA,UACA,QACA,aACA,eACkB;AAClB,MAAI;AACH,UAAM,uBAAuB,CAAC,aAAa,MAAM;AAEjD,UAAM,qBAA0D;AAAA,MAC/D,UAAU;AAAA,MACV,eAAe,CAAC,SAAS,SAAS,CAAC;AAAA,MACnC,mBAAmB;AAAA,IACpB;AAEA,UAAM,sBAA2D;AAAA,MAChE,UAAU;AAAA,MACV,mBAAmB;AAAA,IACpB;AAEA,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM,gBAAgB,sBAAsB;AAAA,IAC7C,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,cAAc;AAC/C,YAAM,IAAI,MAAM,cAAc;AAAA,IAC/B;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,iBAAiB,MAAM,OAAO,EAAE;AAAA,EACjD;AACD;;;ACzCA,eAAsB,uBACrB,OACA,UACA,QACA,aACA,eACkB;AAClB,QAAM,uBAAuB,CAAC,aAAa,MAAM;AAEjD,QAAM,qBAA0D;AAAA,IAC/D,UAAU;AAAA,IACV,eAAe,CAAC,SAAS,SAAS,CAAC;AAAA,IACnC,mBAAmB;AAAA,EACpB;AAEA,QAAM,sBAA2D;AAAA,IAChE,UAAU;AAAA,IACV,mBAAmB;AAAA,EACpB;AAEA,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM,gBAAgB,sBAAsB;AAAA,IAC7C,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,eAAe;AAChD,YAAM,IAAI,MAAM,eAAe;AAAA,IAChC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,kBAAkB,MAAM,OAAO,EAAE;AAAA,EAClD;AACD;;;AC7CA,eAAsB,mBAAmB,OAAqB,QAAiC;AAC9F,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,MAAM;AAAA,MAC3B;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,4BAA4B;AAC7D,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC7C;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,+BAA+B,MAAM,OAAO,EAAE;AAAA,EAC/D;AACD;;;ACzBA,eAAsB,qBAAqB,OAAqB,QAAiC;AAChG,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,MAAM;AAAA,MAC3B;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,8BAA8B;AAC/D,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAC/C;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,iCAAiC,MAAM,OAAO,EAAE;AAAA,EACjE;AACD;;;ACrBA,eAAsB,KACrB,OACA,OACA,OACA,YACA,aAAa,GACK;AAClB,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,mBAAmB,CAAC,YAAY,UAAU;AAAA,MAC3C;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,aAAa;AAC9C,YAAM,IAAI,MAAM,aAAa;AAAA,IAC9B;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,gBAAgB,MAAM,OAAO,EAAE;AAAA,EAChD;AACD;;;ACtCA,eAAsB,WAAW,OAAqB,OAAqB,OAAsC;AAChH,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,mBAAmB,CAAC;AAAA,MACrB;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,oBAAoB;AACrD,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACrC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,uBAAuB,MAAM,OAAO,EAAE;AAAA,EACvD;AACD;;;AC5BA,eAAsB,aACrB,OACA,OACA,OACA,aACA,aACkB;AAClB,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,mBAAmB;AAAA,UAClB;AAAA,UACA;AAAA;AAAA,UACA;AAAA,UACA;AAAA;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,sBAAsB;AACvD,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACvC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,YAAQ,MAAM,OAAO,sBAAsB;AAC3C,UAAM,IAAI,MAAM,yBAAyB,MAAM,OAAO,EAAE;AAAA,EACzD;AACD;;;ACzCA,eAAsB,gBACrB,OACA,OACA,OACA,UACA,WAAW,GACX,WAAW,GACO;AAClB,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,mBAAmB,CAAC,UAAU,UAAU,QAAQ;AAAA,MACjD;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,yBAAyB;AAC1D,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC1C;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,4BAA4B,MAAM,OAAO,EAAE;AAAA,EAC5D;AACD;;;AClDA,OAAOC,YAAW;AAYlB,eAAsB,eACrB,OACA,WACA,SACA,YACA,iBACkB;AAClB,MAAI;AACH,UAAM,mBAAmB;AAAA,MACxB,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,MAChB,iBAAiB,WAAW,SAAS;AAAA,MACrC,iBAAiB,kBAAkB,kBAAkB,MAAM,QAAQ,WAAW,EAAE,SAAS;AAAA,IAC1F;AAEA,UAAM,MAAM,oCAAoC,IAAI,gBAAgB,gBAAgB,EAAE,SAAS,CAAC;AAEhG,UAAM,eAAe,MAAM,OAAO;AAClC,QAAI,CAAC,cAAc;AAClB,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC9C;AAEA,UAAM,MAAM,MAAMA,OAAM;AAAA,MACvB;AAAA,MACA,CAAC;AAAA,MACD;AAAA,QACC,SAAS;AAAA,UACR,aAAa;AAAA,QACd;AAAA,MACD;AAAA,IACD;AACA,UAAM,WAAW,MAAM,IAAI;AAE3B,QAAI,SAAS,OAAO,UAAU,GAAG;AAChC,YAAM,IAAI,MAAM,iCAAiC;AAAA,IAClD;AAEA,UAAM,kBAAkB,SAAS,OAAO,CAAC,EAAE;AAE3C,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU,gBAAgB;AAAA,QAC1B,eAAe,gBAAgB;AAAA,QAC/B,mBAAmB,gBAAgB;AAAA,MACpC;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,aAAa;AAC9C,YAAM,IAAI,MAAM,gBAAgB;AAAA,IACjC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,gBAAgB,MAAM,OAAO,EAAE;AAAA,EAChD;AACD;;;AC3EA,OAAO,YAAY;AAWnB,eAAsB,YACrB,OACA,QACA,OAA4C,aAC5C,IAAI,GACH;AACD,MAAI;AACH,UAAM,SAAS,MAAM,OAAO;AAC5B,QAAI,CAAC,QAAQ;AACZ,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC9C;AAEA,UAAM,SAAS,IAAI,OAAO,EAAE,OAAO,CAAC;AAEpC,UAAM,WAAW,MAAM,OAAO,OAAO,SAAS;AAAA,MAC7C;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAED,WAAO;AAAA,MACN,QAAQ,SAAS,KAAK,IAAI,CAAC,QAAa,IAAI,GAAG;AAAA,IAChD;AAAA,EACD,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,4BAA4B,MAAM,OAAO,EAAE;AAAA,EAC5D;AACD;;;AC7BA,eAAsB,oBAAoB,OAAqB,QAAiC;AAC/F,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,MAAM;AAAA,MAC3B;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,kBAAkB;AACnD,YAAM,IAAI,MAAM,kBAAkB;AAAA,IACnC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,qBAAqB,MAAM,OAAO,EAAE;AAAA,EACrD;AACD;;;ACzBA,eAAsB,oBAAoB,OAAqB,QAAiC;AAC/F,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,mBAAmB,CAAC,MAAM;AAAA,MAC3B;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,sBAAsB;AACvD,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACvC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,yBAAyB,MAAM,OAAO,EAAE;AAAA,EACzD;AACD;;;ACvBA,eAAsB,iBAAiB,OAAqB,UAAwB,QAAiC;AACpH,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe,CAAC,QAAQ;AAAA,QACxB,mBAAmB,CAAC,MAAM;AAAA,MAC3B;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,iBAAiB;AAClD,YAAM,IAAI,MAAM,iBAAiB;AAAA,IAClC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,oBAAoB,MAAM,OAAO,EAAE;AAAA,EACpD;AACD;;;AC1BA,eAAsB,mBAAmB,OAAqB,UAAwB,QAAiC;AACtH,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UAAU;AAAA,QACV,eAAe,CAAC,QAAQ;AAAA,QACxB,mBAAmB,CAAC,MAAM;AAAA,MAC3B;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,mBAAmB;AACpD,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACpC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,sBAAsB,MAAM,OAAO,EAAE;AAAA,EACtD;AACD;;;ACxBA,eAAsB,sBACrB,OACA,WACA,WACA,aACA,aACkB;AAClB,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UACC;AAAA,QACD,eAAe;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,mBAAmB,CAAC,aAAa,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,MAC/D;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,sBAAsB;AACvD,YAAM,IAAI,MAAM,sBAAsB;AAAA,IACvC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,yBAAyB,MAAM,OAAO,EAAE;AAAA,EACzD;AACD;;;AC3CA,eAAsB,yBACrB,OACA,WACA,WACA,UACkB;AAClB,MAAI;AACH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UACC;AAAA,QACD,eAAe;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACA,mBAAmB,CAAC,UAAU,GAAG,GAAG,GAAG,CAAC;AAAA,MACzC;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,yBAAyB;AAC1D,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC1C;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,4BAA4B,MAAM,OAAO,EAAE;AAAA,EAC5D;AACD;;;ACtCA,IAAM,WAAW;AACjB,eAAsB,oBACrB,OACA,OACA,OACA,SACA,SACA,SACA,qBACkB;AAClB,MAAI;AACH,UAAM,UAAU,UAAU,gCAAgC,MAAM,SAAS,IAAI;AAC7E,UAAM,UAAU,UAAU,gCAAgC,MAAM,SAAS,IAAI;AAE7E,UAAM,eAAe;AAAA,MACpB,CAAC,UAAU,QAAQ,OAAO,UAAU,QAAQ,KAAK;AAAA,MACjD,CAAC,SAAS,OAAO;AAAA,MACjB;AAAA,MACA;AAAA,IACD;AAEA,UAAM,WAAW,CAAC,UAAU,QAAQ,UAAU,UAAU,QAAQ,UAAU,UAAU,UAAU,UAAU,QAAQ;AAEhH,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,QACL,UACC;AAAA,QACD,eAAe;AAAA,QACf,mBAAmB;AAAA,MACpB;AAAA,IACD,CAAC;AAED,UAAM,2BAA2B,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAEhF,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,cAAQ,MAAM,mBAAmB,oBAAoB;AACrD,YAAM,IAAI,MAAM,oBAAoB;AAAA,IACrC;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,uBAAuB,MAAM,OAAO,EAAE;AAAA,EACvD;AACD;;;AC9DA,SAAS,cAAc,oBAAoB,kBAAkB;;;ACEtD,IAAM,kBAAN,MAAM,yBAAwB,MAAM;AAAA,EACjC;AAAA,EACA;AAAA,EAET,YAAY,QAAgB,MAAc,SAAiB;AAC1D,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,SAAS;AAEd,WAAO,eAAe,MAAM,iBAAgB,SAAS;AAAA,EACtD;AACD;AAEO,IAAM,wBAAN,cAAoC,gBAAgB;AAAA,EACjD;AAAA,EACA;AAAA,EAET,YAAY,MAAc,QAAiB,SAAiB;AAC3D,UAAM,SAAS,sBAAsB,OAAO;AAC5C,SAAK,OAAO;AACZ,SAAK,SAAS;AAAA,EACf;AACD;AAEO,IAAM,6BAAN,cAAyC,gBAAgB;AAAA,EACtD;AAAA,EACT,YAAY,SAAiB,IAAkC;AAC9D,UAAM,SAAS,2BAA2B,OAAO;AACjD,SAAK,KAAK;AAAA,EACX;AACD;;;ADlBA,eAAsB,+BACrB,OACA,MACA,QACA,WACA,iBACA,OACC;AACD,MAAI;AACH,UAAM,SAAS,IAAI,aAAa,MAAM,mBAAmB,QAAQ,CAAC;AAElE,UAAM,UAAU,OAAO,SAAS,gBAAgB;AAAA,MAC/C;AAAA,MACA,aAAa,MAAM,QAAQ,WAAW;AAAA,MACtC,WAAW,WAAW,WAAW,CAAC;AAAA,MAClC,iBAAiB,WAAW,iBAAiB,CAAC;AAAA,MAC9C,OAAO,WAAW,OAAO,EAAE;AAAA,MAC3B;AAAA,MACA,YAAY;AAAA,IACb,CAAC;AAED,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,IACP,CAAC;AAED,UAAM,SAAS,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAE9D,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,YAAM,IAAI,2BAA2B,4BAA4B,iBAAiB;AAAA,IACnF;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,QAAI,iBAAiB,iBAAiB;AACrC,YAAM;AAAA,IACP;AACA,UAAM,IAAI,MAAM,8BAA8B,MAAM,OAAO,EAAE;AAAA,EAC9D;AACD;;;AEzDA,SAAS,gBAAAC,eAAc,sBAAAC,qBAAoB,cAAAC,mBAAkB;AAa7D,eAAsB,gCACrB,OACA,MACA,QACA,WACA,iBACC;AACD,MAAI;AACH,UAAM,SAAS,IAAIC,cAAa,MAAMC,oBAAmB,QAAQ,CAAC;AAElE,UAAM,UAAU,OAAO,SAAS,iBAAiB;AAAA,MAChD;AAAA,MACA,aAAa,MAAM,QAAQ,WAAW;AAAA,MACtC,WAAWC,YAAW,WAAW,CAAC;AAAA,MAClC,iBAAiBA,YAAW,iBAAiB,CAAC;AAAA,MAC9C;AAAA,MACA,YAAY;AAAA,IACb,CAAC;AAED,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,IACP,CAAC;AAED,UAAM,SAAS,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAE9D,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,YAAM,IAAI,2BAA2B,6BAA6B,iBAAiB;AAAA,IACpF;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,QAAI,iBAAiB,iBAAiB;AACrC,YAAM;AAAA,IACP;AACA,UAAM,IAAI,MAAM,8BAA8B,MAAM,OAAO,EAAE;AAAA,EAC9D;AACD;;;ACtDA,SAAS,gBAAAC,eAAc,sBAAAC,2BAA0B;AAWjD,eAAsB,6BAA6B,OAAqB,MAAc,QAAiB;AACtG,MAAI;AACH,UAAM,SAAS,IAAIC,cAAa,MAAMC,oBAAmB,QAAQ,CAAC;AAElE,UAAM,YAAY,MAAM,OAAO,aAAa;AAAA,MAC3C,SAAS,MAAM,QAAQ,WAAW,EAAE,SAAS;AAAA,IAC9C,CAAC;AAED,UAAM,WAAW,UAAU,KAAK,CAACC,cAAaA,UAAS,aAAa,QAAQA,UAAS,WAAW,MAAM;AACtG,QAAI,CAAC,UAAU;AACd,YAAM,IAAI,sBAAsB,MAAM,QAAQ,oBAAoB;AAAA,IACnE;AAEA,UAAM,UAAU,OAAO,SAAS,iBAAiB;AAAA,MAChD;AAAA,MACA,aAAa,MAAM,QAAQ,WAAW;AAAA,MACtC,WAAW,SAAS;AAAA,MACpB,iBAAiB,SAAS;AAAA,MAC1B,QAAQ,SAAS;AAAA,MACjB,YAAY;AAAA,IACb,CAAC;AAED,UAAM,cAAc,MAAM,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MAC9D,QAAQ,MAAM,QAAQ,WAAW;AAAA,MACjC,MAAM;AAAA,IACP,CAAC;AAED,UAAM,SAAS,MAAM,MAAM,QAAQ,gBAAgB,WAAW;AAE9D,UAAM,oBAAoB,MAAM,MAAM,MAAM,mBAAmB;AAAA,MAC9D,iBAAiB;AAAA,IAClB,CAAC;AAED,QAAI,CAAC,kBAAkB,SAAS;AAC/B,YAAM,IAAI,2BAA2B,yBAAyB,iBAAiB;AAAA,IAChF;AAEA,WAAO,kBAAkB;AAAA,EAC1B,SAAS,OAAY;AACpB,QAAI,iBAAiB,iBAAiB;AACrC,YAAM;AAAA,IACP;AACA,UAAM,IAAI,MAAM,0BAA0B,MAAM,OAAO,EAAE;AAAA,EAC1D;AACD;;;ACvDA,SAAS,gBAAAC,eAAc,sBAAAC,qBAAoB,gBAAgB;AAQ3D,eAAsB,4BAA4B,OAAqB;AACtE,MAAI;AACH,UAAM,SAAS,IAAID,cAAa,MAAMC,oBAAmB,QAAQ,CAAC;AAElE,UAAM,YAAY,MAAM,OAAO,aAAa;AAAA,MAC3C,SAAS,MAAM,QAAQ,WAAW,EAAE,SAAS;AAAA,IAC9C,CAAC;AAED,UAAM,yBAAyB,UAAU,IAAI,CAAC,cAAc;AAAA,MAC3D,GAAG;AAAA,MACH,MAAM,SAAS,SAAS,MAAM,CAAC;AAAA,MAC/B,YAAY,SAAS,SAAS,YAAY,CAAC;AAAA,MAC3C,UAAU,SAAS,SAAS,UAAU,EAAE;AAAA,MACxC,sBAAsB,SAAS,SAAS,sBAAsB,EAAE;AAAA,MAChE,wBAAwB,SAAS,SAAS,wBAAwB,EAAE;AAAA,IACrE,EAAE;AAEF,WAAO;AAAA,EACR,SAAS,OAAY;AACpB,UAAM,IAAI,MAAM,yBAAyB,MAAM,OAAO,EAAE;AAAA,EACzD;AACD;;;AC7BO,IAAM,aAAa;AAAA,EACzB;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cACC;AAAA,EACF;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cAAc;AAAA,EACf;AAAA,EACA;AAAA,IACC,MAAM;AAAA,IACN,aAAa;AAAA,IACb,UAAU;AAAA,IACV,cACC;AAAA,EACF;AACD;AAEO,IAAM,sBAAsB,CAAC,SAAiB;AACpD,QAAM,QAAQ,WAAW;AAAA,IACxB,CAACC,WAAUA,OAAM,KAAK,YAAY,MAAM,KAAK,YAAY,KAAKA,OAAM,KAAK,YAAY,EAAE,SAAS,KAAK,YAAY,CAAC;AAAA,EACnH;AAEA,SAAO;AACR;AAEO,IAAM,yBAAyB,CAAC,YAAoB;AAC1D,QAAM,QAAQ,WAAW,KAAK,CAACA,WAAUA,OAAM,aAAa,YAAY,MAAM,QAAQ,YAAY,CAAC;AAEnG,SAAO;AACR;;;ApDrDO,IAAM,eAAN,MAAmB;AAAA,EAClB;AAAA,EACA;AAAA,EACA;AAAA,EAEP,YAAY,SAAqB,OAAc,QAAc;AAC5D,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,SAAS,SAAS,SAAS,CAAC;AAAA,EAClC;AAAA,EAEA,MAAM,cAAc;AACnB,UAAM,aAAa,IAAI,4BAA4B,6BAA6B;AAEhF,WAAO,MAAM,WAAW,wBAAwB,SAAS;AAAA,EAC1D;AAAA,EAEA,WAAW,MAA8B;AACxC,WAAO,WAAW,MAAM,IAAI;AAAA,EAC7B;AAAA,EAEA,gBAAgB,OAAe;AAC9B,WAAO,gBAAgB,KAAK;AAAA,EAC7B;AAAA,EAEA,oBAAoB,MAAc;AACjC,WAAO,oBAAoB,IAAI;AAAA,EAChC;AAAA,EAEA,cAAc,OAAe;AAC5B,WAAO,cAAc,KAAK;AAAA,EAC3B;AAAA,EAEA,eAAe,IAAoB,QAAgB,MAAc;AAChE,WAAO,eAAe,MAAM,IAAI,QAAQ,IAAI;AAAA,EAC7C;AAAA,EAEA,eAAe,MAAc;AAC5B,WAAO,eAAe,MAAM,IAAI;AAAA,EACjC;AAAA,EAEA,UAAU,QAAgB,MAAc;AACvC,WAAO,UAAU,MAAM,QAAQ,IAAI;AAAA,EACpC;AAAA,EAEA,YAAY,MAAc,QAAgB,SAAiB,YAAoB;AAC9E,WAAO,YAAY,MAAM,MAAM,QAAQ,SAAS,UAAU;AAAA,EAC3D;AAAA,EAEA,UAAU,IAAoB,MAAc,QAAgB;AAC3D,WAAO,UAAU,MAAM,IAAI,MAAM,MAAM;AAAA,EACxC;AAAA,EAEA,qBAAqB,IAAoB,QAAgB;AACxD,WAAO,YAAY,MAAM,IAAI,MAAM;AAAA,EACpC;AAAA,EAEA,uBAAuB,IAAoB,QAAgB;AAC1D,WAAO,cAAc,MAAM,IAAI,MAAM;AAAA,EACtC;AAAA,EAEA,YAAY,IAAoB,MAAsB;AACrD,WAAO,YAAY,MAAM,IAAI,IAAI;AAAA,EAClC;AAAA,EAEA,QAAQ,MAAsB;AAC7B,WAAO,QAAQ,MAAM,IAAI;AAAA,EAC1B;AAAA,EAEA,UAAU,QAAgB,MAAoB,YAAoB,aAAsB,eAAwB;AAC/G,WAAO,UAAU,MAAM,QAAQ,MAAM,YAAY,aAAa,aAAa;AAAA,EAC5E;AAAA,EAEA,YAAY,QAAgB,MAAoB,YAAoB,eAAwB;AAC3F,WAAO,YAAY,MAAM,QAAQ,MAAM,YAAY,aAAa;AAAA,EACjE;AAAA,EAEA,cAAc,QAAgB,MAAoB,YAAoB,eAAwB;AAC7F,WAAO,cAAc,MAAM,QAAQ,MAAM,YAAY,aAAa;AAAA,EACnE;AAAA,EAEA,WAAW,QAAgB,MAAoB,YAAoB,eAAwB;AAC1F,WAAO,WAAW,MAAM,QAAQ,MAAM,YAAY,aAAa;AAAA,EAChE;AAAA,EAEA,gBAAgB,aAA6B,YAAoB;AAChE,WAAO,gBAAgB,MAAM,aAAa,UAAU;AAAA,EACrD;AAAA,EAEA,oBAAoB,aAA6B;AAChD,WAAO,oBAAoB,MAAM,WAAW;AAAA,EAC7C;AAAA,EACA,eAAe,MAAc;AAC5B,WAAO,eAAe,MAAM,IAAI;AAAA,EACjC;AAAA,EAEA,aAAa,OAAqB,OAAqB,aAAqB,aAAqB;AAChG,WAAO,aAAa,MAAM,OAAO,OAAO,aAAa,WAAW;AAAA,EACjE;AAAA,EAEA,gBAAgB,OAAqB,OAAqB,UAAkB,WAAW,GAAG,WAAW,GAAG;AACvG,WAAO,gBAAgB,MAAM,OAAO,OAAO,UAAU,UAAU,QAAQ;AAAA,EACxE;AAAA,EAEA,KAAK,OAAqB,OAAqB,YAAoB,YAAqB;AACvF,WAAO,KAAK,MAAM,OAAO,OAAO,YAAY,UAAU;AAAA,EACvD;AAAA,EAEA,WAAW,OAAqB,OAAqB;AACpD,WAAO,WAAW,MAAM,OAAO,KAAK;AAAA,EACrC;AAAA,EAEA,YAAY,gBAAuC;AAClD,WAAO,YAAY,MAAM,cAAc;AAAA,EACxC;AAAA;AAAA,EAIA,qBAAqB;AACpB,WAAO,mBAAmB,IAAI;AAAA,EAC/B;AAAA,EAEA,eAAe,UAAwB,QAAgB;AACtD,WAAO,eAAe,MAAM,UAAU,MAAM;AAAA,EAC7C;AAAA,EAEA,iBAAiB,UAAwB,QAAgB;AACxD,WAAO,iBAAiB,MAAM,UAAU,MAAM;AAAA,EAC/C;AAAA,EAEA,mBAAmB,UAAwB,QAAgB;AAC1D,WAAO,mBAAmB,MAAM,UAAU,MAAM;AAAA,EACjD;AAAA,EAEA,gBAAgB,UAAwB,QAAgB;AACvD,WAAO,gBAAgB,MAAM,UAAU,MAAM;AAAA,EAC9C;AAAA;AAAA,EAIA,qBAAqB,QAAgB;AACpC,WAAO,oBAAoB,MAAM,MAAM;AAAA,EACxC;AAAA,EAEA,uBAAuB,QAAgB;AACtC,WAAO,oBAAoB,MAAM,MAAM;AAAA,EACxC;AAAA,EAEA,iBAAiB,UAAwB,QAAgB;AACxD,WAAO,iBAAiB,MAAM,UAAU,MAAM;AAAA,EAC/C;AAAA,EAEA,mBAAmB,UAAwB,QAAgB;AAC1D,WAAO,mBAAmB,MAAM,UAAU,MAAM;AAAA,EACjD;AAAA,EAEA,sBAAsB,OAAqB,OAAqB,aAAqB,aAAqB;AACzG,WAAO,sBAAsB,MAAM,OAAO,OAAO,aAAa,WAAW;AAAA,EAC1E;AAAA,EAEA,yBAAyB,OAAqB,OAAqB,UAAkB;AACpF,WAAO,yBAAyB,MAAM,OAAO,OAAO,QAAQ;AAAA,EAC7D;AAAA,EAEA,oBACC,OACA,OACA,SACA,SACA,SACA,qBACC;AACD,WAAO,oBAAoB,MAAM,OAAO,OAAO,SAAS,SAAS,SAAS,mBAAmB;AAAA,EAC9F;AAAA;AAAA,EAIA,eAAe,WAAmB,SAAiB,YAAoB,iBAA0B;AAChG,WAAO,eAAe,MAAM,WAAW,SAAS,YAAY,eAAe;AAAA,EAC5E;AAAA;AAAA,EAIA,sBAAsB,QAAgB,MAA2C,GAAW;AAC3F,WAAO,YAAY,MAAM,QAAQ,MAAM,CAAC;AAAA,EACzC;AAAA;AAAA,EAIA,mBAAmB,QAAgB;AAClC,WAAO,mBAAmB,MAAM,MAAM;AAAA,EACvC;AAAA,EAEA,qBAAqB,QAAgB;AACpC,WAAO,qBAAqB,MAAM,MAAM;AAAA,EACzC;AAAA;AAAA,EAIA,qBAAqB,UAAwB,QAAgB,aAAqB,eAAwB;AACzG,WAAO,qBAAqB,MAAM,UAAU,QAAQ,aAAa,aAAa;AAAA,EAC/E;AAAA,EAEA,yBAAyB,UAAwB,QAAgB,aAAqB,eAAwB;AAC7G,WAAO,yBAAyB,MAAM,UAAU,QAAQ,aAAa,aAAa;AAAA,EACnF;AAAA,EAEA,sBAAsB,UAAwB,QAAgB,aAAqB,eAAwB;AAC1G,WAAO,sBAAsB,MAAM,UAAU,QAAQ,aAAa,aAAa;AAAA,EAChF;AAAA,EAEA,uBAAuB,UAAwB,QAAgB,aAAqB,eAAwB;AAC3G,WAAO,uBAAuB,MAAM,UAAU,QAAQ,aAAa,aAAa;AAAA,EACjF;AAAA;AAAA,EAIA,gCAAgC,MAAc,QAAiB,WAAmB,iBAAyB;AAC1G,WAAO,gCAAgC,MAAM,MAAM,QAAQ,WAAW,eAAe;AAAA,EACtF;AAAA,EAEA,+BACC,MACA,QACA,WACA,iBACA,OACC;AACD,WAAO,+BAA+B,MAAM,MAAM,QAAQ,WAAW,iBAAiB,KAAK;AAAA,EAC5F;AAAA,EAEA,6BAA6B,MAAc,QAAiB;AAC3D,WAAO,6BAA6B,MAAM,MAAM,MAAM;AAAA,EACvD;AAAA,EAEA,8BAA8B;AAC7B,WAAO,4BAA4B,IAAI;AAAA,EACxC;AACD;;;AqD1SA,SAAS,YAAY;AAGd,IAAM,0BAAN,cAAsC,KAAK;AAAA,EAIjD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EALA,OAAO;AAAA,EACP,cAAc;AAAA,EAMd,MAAM,MAAM,QAAiC;AAC5C,WAAO,KAAK,MAAM,QAAQ,WAAW,EAAE,SAAS;AAAA,EACjD;AACD;;;ACdA,SAAS,kBAAAC,iBAAgB,+CAA+C;AACxE,SAAS,QAAAC,aAAY;AAGd,IAAM,iBAAN,cAA6BC,MAAK;AAAA,EAUxC,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAXA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,YAAYC,gBAAe,KAAK,YAAY,SAAS,KAAK,KAAK,MAAM,QAAQ,WAAW;AAE9F,YAAM,uBAAuB,MAAM,KAAK,MAAM;AAAA,QAC7C;AAAA,QACA,wCAAwC,YAAY,QAAQ,CAAC;AAAA,MAC9D;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC7CA,SAAS,kBAAAC,iBAAgB,2CAAAC,gDAA+C;AACxE,SAAS,QAAAC,aAAY;AAGd,IAAM,yBAAN,cAAqCC,MAAK;AAAA,EAUhD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAXA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,YAAYC,gBAAe,KAAK,YAAY,SAAS,KAAK,KAAK,MAAM,QAAQ,WAAW;AAE9F,YAAM,+BAA+B,MAAM,KAAK,MAAM;AAAA,QACrD;AAAA,QACAC,yCAAwC,YAAY,QAAQ,CAAC;AAAA,MAC9D;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC7CA,SAAS,QAAAC,aAAY;AAGd,IAAM,mBAAN,cAA+BC,MAAK;AAAA,EAY1C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAbA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AACnC,YAAM,OAAO,YAAY,QAAQ;AACjC,YAAM,cAAmB,KAAK,MAAM,gBAAgB,IAAI;AACxD,YAAM,UAAU,MAAM,KAAK,MAAM,WAAW,IAAI;AAEhD,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,YAAY,QAAQ;AAAA,UAC1B,UAAU,YAAY,YAAY;AAAA,QACnC;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC1CA,SAAS,QAAAC,aAAY;AAGd,IAAM,0BAAN,cAAsCC,MAAK;AAAA,EASjD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAVA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AACnC,YAAM,OAAO,YAAY,SAAS;AAElC,YAAM,YAAY,MAAM,KAAK,MAAM,gBAAgB,IAAI;AAEvD,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACnCA,SAAS,kBAAAC,iBAAgB,2CAAAC,gDAA+C;AACxE,SAAS,QAAAC,aAAY;AAGd,IAAM,yBAAN,cAAqCC,MAAK;AAAA,EAgBhD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAjBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,YAAYC,gBAAe,KAAK,YAAY,EAAE,KAAK,KAAK,MAAM,QAAQ,WAAW;AAEvF,YAAM,+BAA+B,MAAM,KAAK,MAAM;AAAA,QACrD;AAAA,QACAC,yCAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,YAAY;AAAA,MACb;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW;AAAA,UACjB,UAAU,WAAW;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACtDA,SAAS,2CAAAC,gDAA+C;AACxD,SAAS,QAAAC,aAAY;AAGd,IAAM,qBAAN,cAAiCC,MAAK;AAAA,EAQ5C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EATA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAUd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,sBAAsB,MAAM,KAAK,MAAM;AAAA,QAC5CC,yCAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,YAAY;AAAA,MACb;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW;AAAA,UACjB,UAAU,WAAW;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC3CA,SAAS,kBAAAC,uBAAsB;AAC/B,SAAS,QAAAC,aAAY;AAGd,IAAM,qBAAN,cAAiCC,MAAK;AAAA,EAY5C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAbA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,YAAYC,gBAAe,KAAK,YAAY,EAAE,KAAK,KAAK,MAAM,QAAQ,WAAW;AACvF,YAAM,2BAA2B,MAAM,KAAK,MAAM,UAAU,WAAW,YAAY,MAAM,YAAY,MAAM;AAE3G,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW,QAAQ;AAAA,UACzB,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC7CA,SAAS,QAAAC,aAAY;AAGd,IAAM,uBAAN,cAAmCC,MAAK;AAAA,EAW9C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAZA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAad,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,6BAA6B,MAAM,KAAK,MAAM;AAAA,QACnD,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,MACb;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,YAAY;AAAA,UAClB,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC7CA,SAAS,QAAAC,cAAY;AAGd,IAAM,uBAAN,cAAmCC,OAAK;AAAA,EAO9C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EARA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA,EASd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,mBAAmB,MAAM,KAAK,MAAM,eAAe,YAAY,eAAe;AAEpF,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AChCA,SAAS,QAAAC,cAAY;AAGd,IAAM,yBAAN,cAAqCC,OAAK;AAAA,EAUhD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAXA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYd,MAAgB,MAAM,OAAgC;AACrD,YAAQ,IAAI,SAAS,KAAK;AAC1B,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AACnC,YAAM,QAAQ,YAAY,SAAS,SAAS;AAE5C,YAAM,YAAY,MAAM,KAAK,MAAM,cAAc,KAAK;AAEtD,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACrCA,SAAS,QAAAC,cAAY;AAGd,IAAM,yBAAN,cAAqCA,OAAK;AAAA,EAKhD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EANA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA,EAOd,MAAgB,QAAyB;AACxC,QAAI;AACH,YAAM,+BAA+B,MAAM,KAAK,MAAM,mBAAmB;AAEzE,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC5BA,SAAS,2CAAAC,gDAA+C;AACxD,SAAS,QAAAC,cAAY;;;ACDd,IAAM,YAAY,CAAC,UAAkB;AAC3C,MAAI;AACH,UAAM,iBAAiB,CAAC,QAAQ,aAAa,IAAI;AACjD,QAAI,SAAS,eAAgB,OAAM,IAAI,MAAM;AAE7C,UAAM,cAAc,KAAK,MAAM,KAAK;AAEpC,WAAO;AAAA,EACR,SAAS,GAAG;AACX,WAAO,CAAC;AAAA,EACT;AACD;;;ADNO,IAAM,gBAAN,cAA4BC,OAAK;AAAA,EAWvC,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAZA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAad,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,2BAA2B,MAAM,KAAK,MAAM;AAAA,QACjD,YAAY;AAAA,QACZC,yCAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,MACrF;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW;AAAA,UACjB,UAAU,WAAW;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AE/CA,SAAS,2CAAAC,gDAA+C;AACxD,SAAS,QAAAC,cAAY;AAId,IAAM,oBAAN,cAAgCC,OAAK;AAAA,EAW3C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAZA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAad,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,+BAA+B,MAAM,KAAK,MAAM;AAAA,QACrD,YAAY;AAAA,QACZC,yCAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,MACrF;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW;AAAA,UACjB,UAAU,WAAW,YAAY;AAAA,QAClC;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC/CA,SAAS,2CAAAC,gDAA+C;AACxD,SAAS,QAAAC,cAAY;AAId,IAAM,kBAAN,cAA8BC,OAAK;AAAA,EAWzC,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAZA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAad,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,6BAA6B,MAAM,KAAK,MAAM;AAAA,QACnD,YAAY;AAAA,QACZC,yCAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,MACrF;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW;AAAA,UACjB,UAAU,WAAW;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC/CA,SAAS,2CAAAC,gDAA+C;AACxD,SAAS,QAAAC,cAAY;AAId,IAAM,iBAAN,cAA6BC,OAAK;AAAA,EAWxC,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAZA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAad,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,4BAA4B,MAAM,KAAK,MAAM;AAAA,QAClD,YAAY;AAAA,QACZC,yCAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,MACrF;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW;AAAA,UACjB,UAAU,WAAW;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC/CA,SAAS,2CAAAC,gDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,qBAAN,cAAiCC,OAAK;AAAA,EAiB5C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAlBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,gBAAgB,WAAW,UAAU,YAAY,MAAM,YAAY,KAAK,YAAY;AAE1F,YAAM,2BAA2B,MAAM,KAAK,MAAM;AAAA,QACjDC,yCAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ;AAAA,MACD;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW;AAAA,UACjB,UAAU,WAAW;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACzDA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,uBAAN,cAAmCC,OAAK;AAAA,EAc9C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAfA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,gBAAgB,WAAW,UAAU,YAAY,MAAM,YAAY,KAAK,YAAY;AAE1F,YAAM,6BAA6B,MAAM,KAAK,MAAM;AAAA,QACnDC,0CAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ;AAAA,MACD;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW,QAAQ;AAAA,UACzB,UAAU,WAAW,YAAY;AAAA,QAClC;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACrDA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,yBAAN,cAAqCC,OAAK;AAAA,EAehD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAhBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,gBAAgB,WAAW,UAAU,YAAY,MAAM,YAAY,KAAK,YAAY;AAE1F,YAAM,+BAA+B,MAAM,KAAK,MAAM;AAAA,QACrDC,0CAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ;AAAA,MACD;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW;AAAA,UACjB,UAAU,WAAW;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACtDA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,sBAAN,cAAkCC,OAAK;AAAA,EAe7C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAhBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,YAAY,IAAI;AAEpE,YAAM,4BAA4B,MAAM,KAAK,MAAM;AAAA,QAClDC,0CAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,MACb;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW;AAAA,UACjB,UAAU,WAAW;AAAA,QACtB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACpDA,SAAS,QAAAC,cAAY;AAGd,IAAM,sBAAN,cAAkCC,OAAK;AAAA,EAU7C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAXA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,OAAO,MAAM,KAAK,MAAM,eAAe,YAAY,IAAI;AAE7D,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACnCA,SAAS,kBAAAC,uBAAsB;AAC/B,SAAS,QAAAC,cAAY;AAGd,IAAM,uBAAN,cAAmCC,OAAK;AAAA,EAc9C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAfA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,cAAcC,gBAAe,KAAK,YAAY,WAAW,KAAK,KAAK,MAAM,QAAQ,WAAW;AAElG,YAAM,oBAAoB,MAAM,KAAK,MAAM,gBAAgB,aAAa,YAAY,UAAU;AAE9F,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC1CA,SAAS,kBAAAC,uBAAsB;AAC/B,SAAS,QAAAC,cAAY;AAId,IAAM,2BAAN,cAAuCC,OAAK;AAAA,EAUlD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAXA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,cAAcC,gBAAe,KAAK,YAAY,WAAW,KAAK,KAAK,MAAM,QAAQ,WAAW;AAElG,YAAM,wBAAwB,MAAM,KAAK,MAAM,oBAAoB,WAAW;AAE9E,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,QAAQ,WAAW,IAAI,CAAC,UAAU;AACjC,iBAAO;AAAA,YACN,MAAM,MAAM;AAAA,YACZ,UAAU,MAAM;AAAA,YAChB,cAAc,MAAM;AAAA,UACrB;AAAA,QACD,CAAC;AAAA,MACF,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC9CA,SAAS,QAAAC,cAAY;AAId,IAAM,uBAAN,cAAmCC,OAAK;AAAA,EAgB9C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAjBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,8BAA8B,MAAM,KAAK,MAAM,YAAY,YAAY,cAAc;AAE3F,YAAM,eAAe,MAAM,KAAK,MAAM,gBAAgB,YAAY,cAAc;AAEhF,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,QAAQ;AAAA,UACP,UAAU,YAAY;AAAA,UACtB,MAAM,aAAa;AAAA,UACnB,MAAM,YAAY;AAAA,UAClB,UAAU,aAAa;AAAA,QACxB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AClDA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAKd,IAAM,qBAAN,cAAiCC,OAAK;AAAA,EAqB5C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAtBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,UAAI,QAAQ,YAAY;AACxB,YAAM,SAAS,oBAAoB,KAAK;AACxC,UAAI,QAAQ;AACX,gBAAQ,OAAO;AAAA,MAChB;AAEA,UAAI,QAAQ,YAAY;AACxB,YAAM,SAAS,oBAAoB,KAAK;AACxC,UAAI,QAAQ;AACX,gBAAQ,OAAO;AAAA,MAChB;AAEA,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,KAAK;AAE1D,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,KAAK;AAE1D,YAAM,sBAAsB,MAAM,KAAK,MAAM;AAAA,QAC5C;AAAA,QACA;AAAA,QACAC,0CAAwC,YAAY,YAAY,YAAY,QAAQ;AAAA,QACpFA,0CAAwC,YAAY,YAAY,YAAY,QAAQ,KAAK;AAAA,MAC1F;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AChFA,SAAS,QAAAC,cAAY;;;ACEd,IAAM,iDAAiD,CAAC,iBAAsD;AACpH,MAAI,iBAAiB,sEAAsE;AAC1F,WAAO;AAAA,EACR;AACA,SAAO;AACR;;;ADFO,IAAM,2BAAN,cAAuCC,OAAK;AAAA,EAelD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAhBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAGnC,UAAI,QAAQ,YAAY;AACxB,YAAM,SAAS,oBAAoB,KAAK;AACxC,UAAI,QAAQ;AACX,gBAAQ,OAAO;AAAA,MAChB;AAEA,UAAI,QAAQ,YAAY;AACxB,YAAM,SAAS,oBAAoB,KAAK;AACxC,UAAI,QAAQ;AACX,gBAAQ,OAAO;AAAA,MAChB;AAEA,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,KAAK;AAE1D,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,KAAK;AAE1D,YAAM,4BAA4B,MAAM,KAAK,MAAM;AAAA,QAClD,+CAA+C,KAAK;AAAA,QACpD,+CAA+C,KAAK;AAAA,MACrD;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AExEA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAKd,IAAM,6BAAN,cAAyCC,OAAK;AAAA,EAkBpD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAnBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAGnC,UAAI,QAAQ,YAAY;AACxB,YAAM,SAAS,oBAAoB,KAAK;AACxC,UAAI,QAAQ;AACX,gBAAQ,OAAO;AAAA,MAChB;AAEA,UAAI,QAAQ,YAAY;AACxB,YAAM,SAAS,oBAAoB,KAAK;AACxC,UAAI,QAAQ;AACX,gBAAQ,OAAO;AAAA,MAChB;AAEA,YAAM,eAAe,+CAA+C,KAAK;AACzE,YAAM,eAAe,+CAA+C,KAAK;AAEzE,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY;AACjE,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY;AAEjE,YAAM,sBAAsB,MAAM,KAAK,MAAM;AAAA,QAC5C;AAAA,QACA;AAAA,QACAC,0CAAwC,YAAY,aAAa,YAAY,QAAQ;AAAA,QACrFA,0CAAwC,YAAY,aAAa,YAAY,QAAQ;AAAA,MACtF;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AChFA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAKd,IAAM,gCAAN,cAA4CC,OAAK;AAAA,EAqBvD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAtBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAGnC,UAAI,QAAQ,YAAY;AACxB,YAAM,SAAS,oBAAoB,KAAK;AACxC,UAAI,QAAQ;AACX,gBAAQ,OAAO;AAAA,MAChB;AAEA,UAAI,QAAQ,YAAY;AACxB,YAAM,SAAS,oBAAoB,KAAK;AACxC,UAAI,QAAQ;AACX,gBAAQ,OAAO;AAAA,MAChB;AAEA,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,KAAK;AAC1D,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,KAAK;AAE1D,YAAM,iCAAiC,MAAM,KAAK,MAAM;AAAA,QACvD,+CAA+C,KAAK;AAAA,QACpD,+CAA+C,KAAK;AAAA,QACpDC,0CAAwC,YAAY,UAAU,CAAC;AAAA,QAC/DA,0CAAwC,YAAY,YAAY,GAAG,YAAY,QAAQ;AAAA,QACvFA,0CAAwC,YAAY,YAAY,GAAG,YAAY,QAAQ;AAAA,MACxF;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACjFA,SAA4B,2CAAAC,iDAA+C;AAC3E,SAAS,QAAAC,cAAY;AAId,IAAM,uBAAN,cAAmCC,OAAK;AAAA,EAc9C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAfA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,QAAQ,oBAAoB,YAAY,IAAI,KAAK,uBAAuB,YAAY,IAAI;AAE9F,UAAI,CAAC,MAAO,OAAM,IAAI,MAAM,iBAAiB;AAE7C,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,MAAM,YAAY;AAEtE,cAAQ,IAAI,cAAc,UAAU;AAEpC,YAAM,2BAA2B,MAAM,KAAK,MAAM;AAAA,QACjD,MAAM;AAAA,QACNC,0CAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,MAAM;AAAA,QACN,MAAM,aAAa,MAAM,IAAI,EAAE,WAAW;AAAA,MAC3C;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW,QAAQ;AAAA,UACzB,UAAU,WAAW,YAAY;AAAA,QAClC;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC1DA,SAA4B,2CAAAC,iDAA+C;AAC3E,SAAS,QAAAC,cAAY;AAId,IAAM,2BAAN,cAAuCC,OAAK;AAAA,EAclD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAfA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,QAAQ,oBAAoB,YAAY,IAAI,KAAK,uBAAuB,YAAY,IAAI;AAE9F,UAAI,CAAC,MAAO,OAAM,IAAI,MAAM,iBAAiB;AAE7C,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,MAAM,YAAY;AAEtE,cAAQ,IAAI,cAAc,UAAU;AAEpC,YAAM,+BAA+B,MAAM,KAAK,MAAM;AAAA,QACrD,MAAM;AAAA,QACNC,0CAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,MAAM;AAAA,QACN,MAAM,aAAa,MAAM,IAAI,EAAE,WAAW;AAAA,MAC3C;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW,QAAQ;AAAA,UACzB,UAAU,WAAW,YAAY;AAAA,QAClC;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC1DA,SAA4B,2CAAAC,iDAA+C;AAC3E,SAAS,QAAAC,cAAY;AAId,IAAM,wBAAN,cAAoCC,OAAK;AAAA,EAc/C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAfA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,QAAQ,oBAAoB,YAAY,IAAI,KAAK,uBAAuB,YAAY,IAAI;AAE9F,UAAI,CAAC,MAAO,OAAM,IAAI,MAAM,iBAAiB;AAE7C,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,MAAM,YAAY;AAEtE,YAAM,4BAA4B,MAAM,KAAK,MAAM;AAAA,QAClD,MAAM;AAAA,QACNC,0CAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,MAAM;AAAA,QACN,MAAM,aAAa,MAAM,IAAI,EAAE,WAAW;AAAA,MAC3C;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW,QAAQ;AAAA,UACzB,UAAU,WAAW,YAAY;AAAA,QAClC;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACxDA,SAA4B,2CAAAC,iDAA+C;AAC3E,SAAS,QAAAC,cAAY;AAId,IAAM,yBAAN,cAAqCC,OAAK;AAAA,EAgBhD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAjBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,QAAQ,oBAAoB,YAAY,IAAI,KAAK,uBAAuB,YAAY,IAAI;AAE9F,UAAI,CAAC,MAAO,OAAM,IAAI,MAAM,iBAAiB;AAE7C,YAAM,aAAa,MAAM,KAAK,MAAM,gBAAgB,MAAM,YAAY;AAEtE,YAAM,6BAA6B,MAAM,KAAK,MAAM;AAAA,QACnD,MAAM;AAAA,QACNC,0CAAwC,YAAY,QAAQ,WAAW,YAAY,CAAC;AAAA,QACpF,MAAM;AAAA,QACN,MAAM,aAAa,MAAM,IAAI,EAAE,WAAW;AAAA,MAC3C;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,WAAW,QAAQ;AAAA,UACzB,UAAU,WAAW,YAAY;AAAA,QAClC;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC1DA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,qBAAN,cAAiCC,OAAK;AAAA,EAQ5C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EATA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAUd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,uBAAuB,MAAM,KAAK,MAAM;AAAA,QAC7CC,0CAAwC,YAAY,QAAQ,CAAC;AAAA,MAC9D;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACxCA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,uBAAN,cAAmCC,OAAK;AAAA,EAQ9C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EATA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAUd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,yBAAyB,MAAM,KAAK,MAAM;AAAA,QAC/CC,0CAAwC,YAAY,QAAQ,CAAC;AAAA,MAC9D;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACxCA,SAAS,QAAAC,cAAY;AAGd,IAAM,6BAAN,cAAyCA,OAAK;AAAA,EAMpD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAPA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA,EAQd,MAAgB,QAAyB;AACxC,QAAI;AACH,YAAM,WAAW,MAAM,KAAK,MAAM,4BAA4B;AAE9D,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC7BA,SAAS,QAAAC,cAAY;AAId,IAAM,iCAAN,cAA6CC,OAAK;AAAA,EAcxD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAfA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,SAAS,MAAM,KAAK,MAAM;AAAA,QAC/B,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,MACb;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,2BAA2B;AAAA,QAC3B,UAAU;AAAA,UACT,MAAM,YAAY;AAAA,UAClB,QAAQ,YAAY;AAAA,UACpB,WAAW,YAAY;AAAA,UACvB,iBAAiB,YAAY;AAAA,UAC7B,OAAO,YAAY;AAAA,QACpB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACrDA,SAAS,QAAAC,cAAY;AAId,IAAM,kCAAN,cAA8CC,OAAK;AAAA,EAezD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAhBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,SAAS,MAAM,KAAK,MAAM;AAAA,QAC/B,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,MACb;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,4BAA4B;AAAA,QAC5B,UAAU;AAAA,UACT,MAAM,YAAY;AAAA,UAClB,QAAQ,YAAY;AAAA,UACpB,WAAW,YAAY;AAAA,UACvB,iBAAiB,YAAY;AAAA,QAC9B;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACpDA,SAAS,QAAAC,cAAY;AAId,IAAM,+BAAN,cAA2CC,OAAK;AAAA,EAWtD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAZA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAad,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,SAAS,MAAM,KAAK,MAAM,6BAA6B,YAAY,MAAM,YAAY,MAAM;AAEjG,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,8BAA8B;AAAA,QAC9B,UAAU;AAAA,UACT,MAAM,YAAY;AAAA,UAClB,QAAQ,YAAY;AAAA,UACpB,WAAW,YAAY;AAAA,UACvB,iBAAiB,YAAY;AAAA,UAC7B,OAAO,YAAY;AAAA,QACpB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;AC5CA,SAAS,QAAAC,cAAY;AAGd,IAAM,wBAAN,cAAoCC,OAAK;AAAA,EAU/C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAXA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,WAAW,MAAM,KAAK,MAAM,sBAAsB,YAAY,QAAQ,YAAY,MAAM,YAAY,CAAC;AAE3G,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACnCA,SAAS,QAAAC,cAAY;AAGd,IAAM,iBAAN,cAA6BC,OAAK;AAAA,EAaxC,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAdA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAed,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY,SAAS;AAE1E,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY,OAAO;AAExE,YAAM,sBAAsB,MAAM,KAAK,MAAM;AAAA,QAC5C,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,MACb;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACzDA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,sBAAN,cAAkCC,OAAK;AAAA,EAQ7C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EATA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAUd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,uBAAuB,MAAM,KAAK,MAAM;AAAA,QAC7CC,0CAAwC,YAAY,QAAQ,CAAC;AAAA,MAC9D;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACxCA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,wBAAN,cAAoCC,OAAK;AAAA,EAQ/C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EATA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAUd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,yBAAyB,MAAM,KAAK,MAAM;AAAA,QAC/CC,0CAAwC,YAAY,QAAQ,CAAC;AAAA,MAC9D;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACxCA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAId,IAAM,mBAAN,cAA+BC,OAAK;AAAA,EAiB1C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAlBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,yBAAyB,MAAM,KAAK,MAAM;AAAA,QAC/C,YAAY;AAAA,QACZC,0CAAwC,YAAY,QAAQ,CAAC;AAAA,MAC9D;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,QACX;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACnDA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,qBAAN,cAAiCC,OAAK;AAAA,EAkB5C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAnBA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,eAAe,MAAM,KAAK,MAAM,gBAAgB,YAAY,QAAQ;AAE1E,YAAM,2BAA2B,MAAM,KAAK,MAAM;AAAA,QACjD,YAAY;AAAA,QACZC,0CAAwC,YAAY,QAAQ,CAAC;AAAA,MAC9D;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,OAAO;AAAA,UACN,MAAM,aAAa;AAAA,UACnB,UAAU,aAAa;AAAA,QACxB;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACrDA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAGd,IAAM,wBAAN,cAAoCC,OAAK;AAAA,EAa/C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAdA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAed,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY,KAAK;AACtE,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY,KAAK;AAEtE,YAAM,8BAA8B,MAAM,KAAK,MAAM;AAAA,QACpD,YAAY;AAAA,QACZ,YAAY;AAAA,QACZC,0CAAwC,YAAY,aAAa,YAAY,QAAQ;AAAA,QACrFA,0CAAwC,YAAY,aAAa,YAAY,QAAQ;AAAA,MACtF;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,QAAQ;AAAA,UACP;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACzDA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAId,IAAM,2BAAN,cAAuCC,OAAK;AAAA,EAYlD,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EAbA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY,KAAK;AAEtE,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY,KAAK;AAEtE,YAAM,iCAAiC,MAAM,KAAK,MAAM;AAAA,QACvD,YAAY;AAAA,QACZ,YAAY;AAAA,QACZC,0CAAwC,YAAY,UAAU,CAAC;AAAA,MAChE;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,QAAQ;AAAA,UACP;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU;AAAA,UACX;AAAA,UACA;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU;AAAA,UACX;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACzDA,SAAS,2CAAAC,iDAA+C;AACxD,SAAS,QAAAC,cAAY;AAId,IAAM,sBAAN,cAAkCC,OAAK;AAAA,EA2B7C,YAAoB,OAAqB;AACxC,UAAM;AADa;AAAA,EAEpB;AAAA,EA5BA,OAAO;AAAA,EACP,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6Bd,MAAgB,MAAM,OAAgC;AACrD,QAAI;AACH,YAAM,cAAc,UAAU,KAAK;AAEnC,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY,KAAK;AACtE,YAAM,cAAc,MAAM,KAAK,MAAM,gBAAgB,YAAY,KAAK;AAEtE,YAAM,4BAA4B,MAAM,KAAK,MAAM;AAAA,QAClD,YAAY;AAAA,QACZ,YAAY;AAAA,QACZC,0CAAwC,YAAY,SAAS,YAAY,QAAQ;AAAA,QACjFA,0CAAwC,YAAY,SAAS,YAAY,QAAQ;AAAA,QACjF,YAAY;AAAA,QACZ,YAAY;AAAA,MACb;AAEA,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR;AAAA,QACA,QAAQ;AAAA,UACP;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,UACA;AAAA,YACC,OAAO,YAAY;AAAA,YACnB,UAAU,YAAY;AAAA,UACvB;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF,SAAS,OAAY;AACpB,aAAO,KAAK,UAAU;AAAA,QACrB,QAAQ;AAAA,QACR,SAAS,MAAM;AAAA,QACf,MAAM,MAAM,QAAQ;AAAA,MACrB,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACjBO,IAAM,mBAAmB,CAAC,OAAqB,SAAuC,CAAC,MAAM;AACnG,QAAM,QAAQ;AAAA;AAAA,IAEb,IAAI,iBAAiB,KAAK;AAAA,IAC1B,IAAI,wBAAwB,KAAK;AAAA,IACjC,IAAI,uBAAuB,KAAK;AAAA;AAAA,IAEhC,IAAI,mBAAmB,KAAK;AAAA;AAAA,IAE5B,IAAI,qBAAqB,KAAK;AAAA,IAC9B,IAAI,wBAAwB,KAAK;AAAA,IACjC,IAAI,mBAAmB,KAAK;AAAA,IAC5B,IAAI,qBAAqB,KAAK;AAAA,IAC9B,IAAI,uBAAuB,KAAK;AAAA;AAAA,IAEhC,IAAI,eAAe,KAAK;AAAA,IACxB,IAAI,uBAAuB,KAAK;AAAA;AAAA,IAEhC,IAAI,mBAAmB,KAAK;AAAA,IAC5B,IAAI,uBAAuB,KAAK;AAAA,IAChC,IAAI,qBAAqB,KAAK;AAAA,IAC9B,IAAI,oBAAoB,KAAK;AAAA,IAC7B,IAAI,oBAAoB,KAAK;AAAA,IAC7B,IAAI,qBAAqB,KAAK;AAAA,IAC9B,IAAI,yBAAyB,KAAK;AAAA,IAClC,IAAI,qBAAqB,KAAK;AAAA;AAAA,IAE9B,IAAI,yBAAyB,KAAK;AAAA,IAClC,IAAI,2BAA2B,KAAK;AAAA,IACpC,IAAI,8BAA8B,KAAK;AAAA,IACvC,IAAI,mBAAmB,KAAK;AAAA;AAAA,IAE5B,IAAI,uBAAuB,KAAK;AAAA,IAChC,IAAI,kBAAkB,KAAK;AAAA,IAC3B,IAAI,gBAAgB,KAAK;AAAA,IACzB,IAAI,cAAc,KAAK;AAAA,IACvB,IAAI,eAAe,KAAK;AAAA;AAAA,IAExB,IAAI,sBAAsB,KAAK;AAAA,IAC/B,IAAI,yBAAyB,KAAK;AAAA,IAClC,IAAI,iBAAiB,KAAK;AAAA,IAC1B,IAAI,mBAAmB,KAAK;AAAA,IAC5B,IAAI,sBAAsB,KAAK;AAAA,IAC/B,IAAI,oBAAoB,KAAK;AAAA,IAC7B,IAAI,oBAAoB,KAAK;AAAA;AAAA,IAE7B,IAAI,eAAe,KAAK;AAAA;AAAA,IAExB,IAAI,sBAAsB,KAAK;AAAA;AAAA,IAE/B,IAAI,mBAAmB,KAAK;AAAA,IAC5B,IAAI,qBAAqB,KAAK;AAAA;AAAA,IAE9B,IAAI,qBAAqB,KAAK;AAAA,IAC9B,IAAI,yBAAyB,KAAK;AAAA,IAClC,IAAI,sBAAsB,KAAK;AAAA,IAC/B,IAAI,uBAAuB,KAAK;AAAA;AAAA,IAEhC,IAAI,6BAA6B,KAAK;AAAA,IACtC,IAAI,2BAA2B,KAAK;AAAA,IACpC,IAAI,+BAA+B,KAAK;AAAA,IACxC,IAAI,gCAAgC,KAAK;AAAA,EAC1C;AAEA,SAAO,OAAO,SAAS,MAAM,OAAO,CAAC,SAAS,QAAQ,QAAQ,SAAS,KAAK,IAAqB,CAAC,IAAI;AACvG;","names":["Aptos","AptosConfig","Network","Network","AptosConfig","Aptos","balance","priceFeed","axios","MerkleClient","MerkleClientConfig","fromNumber","MerkleClient","MerkleClientConfig","fromNumber","MerkleClient","MerkleClientConfig","MerkleClient","MerkleClientConfig","position","MerkleClient","MerkleClientConfig","token","AccountAddress","Tool","Tool","AccountAddress","AccountAddress","convertAmountFromHumanReadableToOnChain","Tool","Tool","AccountAddress","convertAmountFromHumanReadableToOnChain","Tool","Tool","Tool","Tool","AccountAddress","convertAmountFromHumanReadableToOnChain","Tool","Tool","AccountAddress","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","AccountAddress","Tool","Tool","AccountAddress","Tool","Tool","Tool","Tool","Tool","Tool","Tool","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","Tool","Tool","AccountAddress","Tool","Tool","AccountAddress","AccountAddress","Tool","Tool","AccountAddress","Tool","Tool","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","Tool","Tool","Tool","Tool","Tool","Tool","Tool","Tool","Tool","Tool","Tool","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain","convertAmountFromHumanReadableToOnChain","Tool","Tool","convertAmountFromHumanReadableToOnChain"]}