import * as _aptos_labs_ts_sdk from '@aptos-labs/ts-sdk';
import { AccountAuthenticator, Account, Aptos, AccountAddress, AnyRawTransaction, Network, MoveStructId } from '@aptos-labs/ts-sdk';
import * as _aptos_labs_wallet_adapter_react from '@aptos-labs/wallet-adapter-react';
import { InputTransactionData, AptosSignMessageInput, AptosSignMessageOutput, WalletContextState } from '@aptos-labs/wallet-adapter-react';
import * as _merkletrade_ts_sdk from '@merkletrade/ts-sdk';
import { Tool } from 'langchain/tools';

type ToolsNameList = "aptos_balance" | "aptos_get_wallet_address" | "aptos_transfer_token" | "aptos_burn_token" | "aptos_get_transaction" | "aptos_token_details" | "aptos_mint_token" | "aptos_create_token" | "amnis_stake" | "amnis_withdraw_stake" | "joule_lend_token" | "joule_withdraw_token" | "joule_borrow_token" | "joule_repay_token" | "joule_get_pool_details" | "joule_get_user_position" | "joule_get_user_all_positions" | "liquidswap_add_liquidity" | "liquidswap_create_pool" | "liquidswap_remove_liquidity" | "liquidswap_swap" | "aries_create_profile" | "aries_withdraw" | "aries_borrow" | "aries_lend" | "aries_repay" | "thala_add_liquidity" | "thala_remove_liquidity" | "thala_mint_mod" | "thala_redeem_mod" | "thala_unstake_token" | "thala_stake_token" | "panora_aggregator_swap" | "openai_create_image" | "echo_stake_token" | "echo_unstake_token" | "echelon_lend_token" | "echelon_withdraw_token" | "echelon_borrow_token" | "echelon_repay_token" | "merkle_trade_place_market_order" | "merkle_trade_place_limit_order" | "merkle_trade_close_position" | "merkle_trade_get_position";
type SignedTransactionResponse = {
    senderAuthenticator?: AccountAuthenticator;
    signature?: Uint8Array<ArrayBufferLike>;
};

declare abstract class BaseSigner {
    protected readonly account: Account;
    protected readonly aptos: Aptos;
    protected constructor(account: Account, aptos: Aptos);
    getAddress(): AccountAddress;
    abstract signTransaction(transaction: AnyRawTransaction): Promise<SignedTransactionResponse>;
    abstract sendTransaction(transaction: InputTransactionData | AnyRawTransaction): Promise<string>;
    abstract signMessage(message: AptosSignMessageInput | string): Promise<AptosSignMessageOutput | string>;
}

declare class LocalSigner extends BaseSigner {
    constructor(account: Account, network?: Network);
    getAddress(): AccountAddress;
    signTransaction(transaction: AnyRawTransaction): Promise<{
        senderAuthenticator: _aptos_labs_ts_sdk.AccountAuthenticator;
    }>;
    sendTransaction(transaction: AnyRawTransaction): Promise<string>;
    signMessage(message: any): Promise<string>;
}

declare class WalletSigner extends BaseSigner {
    private readonly wallet;
    constructor(account: Account, wallet: WalletContextState, network?: Network);
    getAddress(): AccountAddress;
    signTransaction(transaction: AnyRawTransaction): Promise<SignedTransactionResponse>;
    sendTransaction(transaction: InputTransactionData): Promise<string>;
    signMessage(message: AptosSignMessageInput): Promise<_aptos_labs_wallet_adapter_react.AptosSignMessageOutput>;
}

declare class AgentRuntime {
    account: BaseSigner;
    aptos: Aptos;
    config: any;
    constructor(account: BaseSigner, aptos: Aptos, config?: any);
    getPythData(): Promise<number[][]>;
    getBalance(mint?: string | MoveStructId): Promise<number>;
    getTokenDetails(token: string): Promise<any>;
    getTokenByTokenName(name: string): {
        name: string;
        poolAddress: string;
        decimals: number;
        tokenAddress: string;
    } | undefined;
    getTokenPrice(query: string): Promise<any>;
    transferTokens(to: AccountAddress, amount: number, mint: string): Promise<string>;
    getTransaction(hash: string): Promise<_aptos_labs_ts_sdk.TransactionResponse>;
    burnToken(amount: number, mint: string): Promise<string>;
    createToken(name: string, symbol: string, iconURI: string, projectURI: string): Promise<{
        hash: string;
        token: any;
    }>;
    mintToken(to: AccountAddress, mint: string, amount: number): Promise<string>;
    stakeTokensWithAmnis(to: AccountAddress, amount: number): Promise<string>;
    withdrawStakeFromAmnis(to: AccountAddress, amount: number): Promise<string>;
    transferNFT(to: AccountAddress, mint: AccountAddress): Promise<string>;
    burnNFT(mint: AccountAddress): Promise<string>;
    lendToken(amount: number, mint: MoveStructId, positionId: string, newPosition: boolean, fungibleAsset: boolean): Promise<{
        hash: string;
        positionId: string;
    }>;
    borrowToken(amount: number, mint: MoveStructId, positionId: string, fungibleAsset: boolean): Promise<{
        hash: string;
        positionId: string;
    }>;
    withdrawToken(amount: number, mint: MoveStructId, positionId: string, fungibleAsset: boolean): Promise<{
        hash: string;
        positionId: string;
    }>;
    repayToken(amount: number, mint: MoveStructId, positionId: string, fungibleAsset: boolean): Promise<{
        hash: string;
        positionId: string;
    }>;
    getUserPosition(userAddress: AccountAddress, positionId: string): Promise<any>;
    getUserAllPositions(userAddress: AccountAddress): Promise<any>;
    getPoolDetails(mint: string): Promise<any>;
    addLiquidity(mintX: MoveStructId, mintY: MoveStructId, mintXAmount: number, mintYAmount: number): Promise<string>;
    removeLiquidity(mintX: MoveStructId, mintY: MoveStructId, lpAmount: number, minMintX?: number, minMintY?: number): Promise<string>;
    swap(mintX: MoveStructId, mintY: MoveStructId, swapAmount: number, minCoinOut?: number): Promise<string>;
    createPool(mintX: MoveStructId, mintY: MoveStructId): Promise<string>;
    claimReward(rewardCoinType: MoveStructId | string): Promise<string>;
    createAriesProfile(): Promise<string>;
    lendAriesToken(mintType: MoveStructId, amount: number): Promise<string>;
    borrowAriesToken(mintType: MoveStructId, amount: number): Promise<string>;
    withdrawAriesToken(mintType: MoveStructId, amount: number): Promise<string>;
    repayAriesToken(mintType: MoveStructId, amount: number): Promise<string>;
    stakeTokensWithThala(amount: number): Promise<string>;
    unstakeTokensWithThala(amount: number): Promise<string>;
    mintMODWithThala(mintType: MoveStructId, amount: number): Promise<string>;
    redeemMODWithThala(mintType: MoveStructId, amount: number): Promise<string>;
    addLiquidityWithThala(mintX: MoveStructId, mintY: MoveStructId, mintXAmount: number, mintYAmount: number): Promise<string>;
    removeLiquidityWithThala(mintX: MoveStructId, mintY: MoveStructId, lpAmount: number): Promise<string>;
    createPoolWithThala(mintX: MoveStructId | string, mintY: MoveStructId | string, amountX: number, amountY: number, feeTier: number, amplificationFactor: number): Promise<string>;
    swapWithPanora(fromToken: string, toToken: string, swapAmount: number, toWalletAddress?: string): Promise<string>;
    createImageWithOpenAI(prompt: string, size: "256x256" | "512x512" | "1024x1024", n: number): Promise<{
        images: any[];
    }>;
    stakeTokenWithEcho(amount: number): Promise<string>;
    unstakeTokenWithEcho(amount: number): Promise<string>;
    lendTokenWithEchelon(mintType: MoveStructId, amount: number, poolAddress: string, fungibleAsset: boolean): Promise<string>;
    withdrawTokenWithEchelon(mintType: MoveStructId, amount: number, poolAddress: string, fungibleAsset: boolean): Promise<string>;
    repayTokenWithEchelon(mintType: MoveStructId, amount: number, poolAddress: string, fungibleAsset: boolean): Promise<string>;
    borrowTokenWithEchelon(mintType: MoveStructId, amount: number, poolAddress: string, fungibleAsset: boolean): Promise<string>;
    placeMarketOrderWithMerkleTrade(pair: string, isLong: boolean, sizeDelta: number, collateralDelta: number): Promise<string>;
    placeLimitOrderWithMerkleTrade(pair: string, isLong: boolean, sizeDelta: number, collateralDelta: number, price: number): Promise<string>;
    closePositionWithMerkleTrade(pair: string, isLong: boolean): Promise<string>;
    getPositionsWithMerkleTrade(): Promise<{
        size: number;
        collateral: number;
        avgPrice: number;
        stopLossTriggerPrice: number;
        takeProfitTriggerPrice: number;
        version: number;
        timestamp: Date;
        pairType: _merkletrade_ts_sdk.MoveStructId;
        collateralType: _merkletrade_ts_sdk.MoveStructId;
        isLong: boolean;
        user: _merkletrade_ts_sdk.Hex;
        uid: number;
        lastExecuteTimestamp: number;
        accRolloverFeePerCollateral: _merkletrade_ts_sdk.Decimals.FundingPrecision;
        accFundingFeePerSize: _merkletrade_ts_sdk.Decimals.FundingPrecision;
    }[]>;
}

declare class AptosAccountAddressTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    _call(_input: string): Promise<string>;
}

declare class AmnisStakeTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AmnisWithdrawStakeTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AptosBalanceTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AptosGetTokenDetailTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AptosTransferTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AptosBurnTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AptosMintTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AptosCreateTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AptosTransactionTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AptosGetTokenPriceTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AriesCreateProfileTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(): Promise<string>;
}

declare class AriesLendTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AriesWithdrawTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AriesBorrowTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class AriesRepayTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class JouleLendTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class JouleBorrowTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class JouleWithdrawTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class JouleRepayTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class JouleGetPoolDetails extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class JouleGetUserPosition extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class JouleGetUserAllPositions extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class JouleClaimRewardTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class LiquidSwapSwapTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class LiquidSwapCreatePoolTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class LiquidSwapAddLiquidityTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class LiquidSwapRemoveLiquidityTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class EchelonLendTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class EchelonWithdrawTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class EchelonRepayTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class EchelonBorrowTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class EchoStakeTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class EchoUnstakeTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class MerkleTradeGetPositionTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(): Promise<string>;
}

declare class MerkleTradePlaceLimitOrderTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class MerkleTradePlaceMarketOrderTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class MerkleTradeClosePositionTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class OpenAICreateImageTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class PanoraSwapTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class ThalaStakeTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class ThalaUnstakeTokenTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class ThalaMintMODTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class ThalaRedeemMODTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class ThalaAddLiquidityTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class ThalaRemoveLiquidityTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare class ThalaCreatePoolTool extends Tool {
    private agent;
    name: string;
    description: string;
    constructor(agent: AgentRuntime);
    protected _call(input: string): Promise<string>;
}

declare const createAptosTools: (agent: AgentRuntime, config?: {
    filter?: ToolsNameList[];
}) => (AptosAccountAddressTool | AmnisStakeTool | AmnisWithdrawStakeTool | AptosBalanceTool | AptosGetTokenDetailTool | AptosTransferTokenTool | AptosBurnTokenTool | AptosMintTokenTool | AptosCreateTokenTool | AptosTransactionTool | AptosGetTokenPriceTool | AriesCreateProfileTool | AriesLendTool | AriesWithdrawTool | AriesBorrowTool | AriesRepayTool | JouleLendTokenTool | JouleBorrowTokenTool | JouleWithdrawTokenTool | JouleRepayTokenTool | JouleGetPoolDetails | JouleGetUserPosition | JouleGetUserAllPositions | JouleClaimRewardTool | LiquidSwapSwapTool | LiquidSwapCreatePoolTool | LiquidSwapAddLiquidityTool | LiquidSwapRemoveLiquidityTool | EchelonLendTokenTool | EchelonWithdrawTokenTool | EchelonRepayTokenTool | EchelonBorrowTokenTool | EchoStakeTokenTool | EchoUnstakeTokenTool | MerkleTradeGetPositionTool | MerkleTradePlaceLimitOrderTool | MerkleTradePlaceMarketOrderTool | MerkleTradeClosePositionTool | OpenAICreateImageTool | PanoraSwapTool | ThalaStakeTokenTool | ThalaUnstakeTokenTool | ThalaMintMODTool | ThalaRedeemMODTool | ThalaAddLiquidityTool | ThalaRemoveLiquidityTool | ThalaCreatePoolTool)[];

declare const parseJson: (input: string) => any;

export { AgentRuntime, AmnisStakeTool, AmnisWithdrawStakeTool, AptosAccountAddressTool, AptosBalanceTool, AptosBurnTokenTool, AptosCreateTokenTool, AptosGetTokenDetailTool, AptosGetTokenPriceTool, AptosMintTokenTool, AptosTransactionTool, AptosTransferTokenTool, AriesBorrowTool, AriesCreateProfileTool, AriesLendTool, AriesRepayTool, AriesWithdrawTool, BaseSigner, EchelonBorrowTokenTool, EchelonLendTokenTool, EchelonRepayTokenTool, EchelonWithdrawTokenTool, EchoStakeTokenTool, EchoUnstakeTokenTool, JouleBorrowTokenTool, JouleClaimRewardTool, JouleGetPoolDetails, JouleGetUserAllPositions, JouleGetUserPosition, JouleLendTokenTool, JouleRepayTokenTool, JouleWithdrawTokenTool, LiquidSwapAddLiquidityTool, LiquidSwapCreatePoolTool, LiquidSwapRemoveLiquidityTool, LiquidSwapSwapTool, LocalSigner, OpenAICreateImageTool, PanoraSwapTool, ThalaAddLiquidityTool, ThalaMintMODTool, ThalaRedeemMODTool, ThalaRemoveLiquidityTool, ThalaStakeTokenTool, ThalaUnstakeTokenTool, WalletSigner, createAptosTools, parseJson };
