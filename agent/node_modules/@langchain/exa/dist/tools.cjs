"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExaFindSimilarResults = exports.ExaSearchResults = void 0;
const tools_1 = require("@langchain/core/tools");
/**
 * Exa search tool integration.
 *
 * Setup:
 * Install `@langchain/exa` and `exa-js`. You'll also need an API key.
 *
 * ```bash
 * npm install @langchain/exa exa-js
 * ```
 *
 * ## [Constructor args](https://api.js.langchain.com/classes/_langchain_exa.ExaSearchResults.html#constructor)
 *
 * <details open>
 * <summary><strong>Instantiate</strong></summary>
 *
 * ```typescript
 * import { ExaSearchResults } from "@langchain/exa";
 * import Exa from "exa-js";
 *
 * const client = new Exa(process.env.EXASEARCH_API_KEY);
 *
 * const tool = new ExaSearchResults({
 *   client,
 *   searchArgs: {
 *     numResults: 2,
 *   },
 * });
 * ```
 * </details>
 *
 * <br />
 *
 * <details>
 *
 * <summary><strong>Invocation</strong></summary>
 *
 * ```typescript
 * await tool.invoke("what is the current weather in sf?");
 * ```
 * </details>
 *
 * <br />
 *
 * <details>
 *
 * <summary><strong>Invocation with tool call</strong></summary>
 *
 * ```typescript
 * // This is usually generated by a model, but we'll create a tool call directly for demo purposes.
 * const modelGeneratedToolCall = {
 *   args: {
 *     input: "what is the current weather in sf?",
 *   },
 *   id: "tool_call_id",
 *   name: tool.name,
 *   type: "tool_call",
 * };
 * await tool.invoke(modelGeneratedToolCall);
 * ```
 *
 * ```text
 * ToolMessage {
 *   "content": "...",
 *   "name": "exa_search_results_json",
 *   "additional_kwargs": {},
 *   "response_metadata": {},
 *   "tool_call_id": "tool_call_id"
 * }
 * ```
 * </details>
 */
class ExaSearchResults extends tools_1.Tool {
    static lc_name() {
        return "ExaSearchResults";
    }
    constructor(fields) {
        super(fields);
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "A wrapper around Exa Search. Input should be an Exa-optimized query. Output is a JSON array of the query results"
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "exa_search_results_json"
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "searchArgs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = fields.client;
        this.searchArgs = fields.searchArgs;
    }
    async _call(input, _runManager) {
        return JSON.stringify(await this.client.searchAndContents(input, this.searchArgs));
    }
}
exports.ExaSearchResults = ExaSearchResults;
class ExaFindSimilarResults extends tools_1.Tool {
    static lc_name() {
        return "ExaFindSimilarResults";
    }
    constructor(fields) {
        super(fields);
        Object.defineProperty(this, "description", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "A wrapper around Exa Find Similar. Input should be an Exa-optimized query. Output is a JSON array of the query results"
        });
        Object.defineProperty(this, "name", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: "exa_find_similar_results_json"
        });
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "searchArgs", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = fields.client;
        this.searchArgs = fields.searchArgs;
    }
    async _call(url, _runManager) {
        return JSON.stringify(await this.client.findSimilarAndContents(url, this.searchArgs));
    }
}
exports.ExaFindSimilarResults = ExaFindSimilarResults;
