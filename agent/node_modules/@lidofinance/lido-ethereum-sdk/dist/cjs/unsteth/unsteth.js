"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LidoSDKUnstETH = void 0;
const index_js_1 = require("../common/decorators/index.js");
const viem_1 = require("viem");
const unsteth_abi_js_1 = require("./abi/unsteth-abi.js");
const constants_js_1 = require("../common/constants.js");
const sdk_module_js_1 = require("../common/class-primitives/sdk-module.js");
let LidoSDKUnstETH = (() => {
    var _a;
    let _classSuper = sdk_module_js_1.LidoSDKModule;
    let _instanceExtraInitializers = [];
    let _contractAddress_decorators;
    let _getContract_decorators;
    let _getNFTsByAccount_decorators;
    let _getAccountByNFT_decorators;
    let _transfer_decorators;
    let _transferSimulateTx_decorators;
    let _transferPopulateTx_decorators;
    let _getSingleTokenApproval_decorators;
    let _setSingleTokenApproval_decorators;
    let _setSingleTokenApprovalPopulateTx_decorators;
    let _setSingleTokenApprovalSimulateTx_decorators;
    let _areAllTokensApproved_decorators;
    let _setAllTokensApproval_decorators;
    let _setAllTokensApprovalPopulateTx_decorators;
    let _setAllTokensApprovalSimulateTx_decorators;
    let _getContractMetadata_decorators;
    let _getTokenMetadataURI_decorators;
    return _a = class LidoSDKUnstETH extends _classSuper {
            contractAddress() {
                return this.core.getContractAddress(constants_js_1.LIDO_CONTRACT_NAMES.withdrawalQueue);
            }
            async getContract() {
                const address = await this.contractAddress();
                return (0, viem_1.getContract)({
                    address,
                    abi: unsteth_abi_js_1.unstethAbi,
                    client: {
                        public: this.core.rpcProvider,
                        wallet: this.core.web3Provider,
                    },
                });
            }
            async getNFTsByAccount(account) {
                const parsedAccount = await this.core.useAccount(account);
                const contract = await this.getContract();
                const ids = await contract.read.getWithdrawalRequests([
                    parsedAccount.address,
                ]);
                const statuses = await contract.read.getWithdrawalStatus([ids]);
                return ids.map((id, index) => ({ ...statuses[index], id }));
            }
            async getAccountByNFT(id) {
                const contract = await this.getContract();
                return contract.read.ownerOf([id]);
            }
            async transfer(props) {
                const { account, callback, id, to, from: _from, data, ...rest } = await this.parseProps(props);
                const from = _from ?? account.address;
                const args = (data ? [from, to, id, data] : [from, to, id]);
                const contract = await this.getContract();
                return this.core.performTransaction({
                    ...rest,
                    callback,
                    account,
                    getGasLimit: (options) => contract.estimateGas.safeTransferFrom(args, options),
                    sendTransaction: (options) => contract.write.safeTransferFrom(args, options),
                });
            }
            async transferSimulateTx(props) {
                const { account, id, to, from: _from, data } = await this.parseProps(props);
                const from = _from ?? account.address;
                const args = (data ? [from, to, id, data] : [from, to, id]);
                const contract = await this.getContract();
                return contract.simulate.safeTransferFrom(args, {
                    account,
                });
            }
            async transferPopulateTx(props) {
                const { account, id, to, from: _from, data } = await this.parseProps(props);
                const from = _from ?? account.address;
                const args = (data ? [from, to, id, data] : [from, to, id]);
                const contract = await this.getContract();
                return {
                    from: account.address,
                    to: contract.address,
                    data: (0, viem_1.encodeFunctionData)({
                        abi: contract.abi,
                        functionName: 'safeTransferFrom',
                        args,
                    }),
                };
            }
            async getSingleTokenApproval({ id, account: accountProp, }) {
                const contract = await this.getContract();
                const account = await this.core.useAccount(accountProp);
                return contract.read.getApproved([id], { account });
            }
            async setSingleTokenApproval(props) {
                const { account, callback, to = viem_1.zeroAddress, id, ...rest } = await this.parseProps(props);
                const args = [to, id];
                const contract = await this.getContract();
                return this.core.performTransaction({
                    ...rest,
                    callback,
                    account,
                    getGasLimit: (options) => contract.estimateGas.approve(args, options),
                    sendTransaction: (options) => contract.write.approve(args, options),
                });
            }
            async setSingleTokenApprovalPopulateTx(props) {
                const { account, to = viem_1.zeroAddress, id } = await this.parseProps(props);
                const args = [to, id];
                const contract = await this.getContract();
                return {
                    from: account.address,
                    to: contract.address,
                    data: (0, viem_1.encodeFunctionData)({
                        abi: contract.abi,
                        functionName: 'approve',
                        args,
                    }),
                };
            }
            async setSingleTokenApprovalSimulateTx(props) {
                const { account, to = viem_1.zeroAddress, id } = await this.parseProps(props);
                const args = [to, id];
                const contract = await this.getContract();
                return contract.simulate.approve(args, {
                    account,
                });
            }
            async areAllTokensApproved({ account, to, }) {
                const parsedAccount = await this.core.useAccount(account);
                const contract = await this.getContract();
                return contract.read.isApprovedForAll([parsedAccount.address, to]);
            }
            async setAllTokensApproval(props) {
                const { account, callback, to, allow, ...rest } = await this.parseProps(props);
                const args = [to, allow];
                const contract = await this.getContract();
                return this.core.performTransaction({
                    ...rest,
                    callback,
                    account,
                    getGasLimit: (options) => contract.estimateGas.setApprovalForAll(args, options),
                    sendTransaction: (options) => contract.write.setApprovalForAll(args, options),
                });
            }
            async setAllTokensApprovalPopulateTx(props) {
                const { account, to, allow } = await this.parseProps(props);
                const args = [to, allow];
                const contract = await this.getContract();
                return {
                    from: account.address,
                    to: contract.address,
                    data: (0, viem_1.encodeFunctionData)({
                        abi: contract.abi,
                        functionName: 'setApprovalForAll',
                        args,
                    }),
                };
            }
            async setAllTokensApprovalSimulateTx(props) {
                const { account, to, allow } = await this.parseProps(props);
                const args = [to, allow];
                const contract = await this.getContract();
                return contract.simulate.setApprovalForAll(args, {
                    account,
                });
            }
            async getContractMetadata() {
                if (this.core.rpcProvider.multicall) {
                    const address = await this.contractAddress();
                    const common = { abi: unsteth_abi_js_1.unstethAbi, address };
                    const [name, version, symbol, baseURI] = await this.core.rpcProvider.multicall({
                        allowFailure: false,
                        contracts: [
                            {
                                ...common,
                                functionName: 'name',
                            },
                            {
                                ...common,
                                functionName: 'getContractVersion',
                            },
                            {
                                ...common,
                                functionName: 'symbol',
                            },
                            {
                                ...common,
                                functionName: 'getBaseURI',
                            },
                        ],
                    });
                    return {
                        name,
                        version,
                        symbol,
                        baseURI,
                    };
                }
                else {
                    const contract = await this.getContract();
                    const [name, version, symbol, baseURI] = await Promise.all([
                        contract.read.name(),
                        contract.read.getContractVersion(),
                        contract.read.symbol(),
                        contract.read.getBaseURI(),
                    ]);
                    return {
                        name,
                        version,
                        symbol,
                        baseURI,
                    };
                }
            }
            async getTokenMetadataURI(id) {
                const contract = await this.getContract();
                return contract.read.tokenURI([id]);
            }
            async parseProps(props) {
                return {
                    ...props,
                    callback: props.callback ?? constants_js_1.NOOP,
                    account: await this.core.useAccount(props.account),
                };
            }
            constructor() {
                super(...arguments);
                __runInitializers(this, _instanceExtraInitializers);
            }
        },
        (() => {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _contractAddress_decorators = [(0, index_js_1.Logger)('Contracts:'), (0, index_js_1.Cache)(30 * 60 * 1000, ['core.chain.id'])];
            _getContract_decorators = [(0, index_js_1.Logger)('Contracts:'), (0, index_js_1.Cache)(30 * 60 * 1000, ['core.chain.id', 'contractAddressWstETH'])];
            _getNFTsByAccount_decorators = [(0, index_js_1.Logger)('Balances:'), (0, index_js_1.ErrorHandler)()];
            _getAccountByNFT_decorators = [(0, index_js_1.Logger)('Balances:'), (0, index_js_1.ErrorHandler)()];
            _transfer_decorators = [(0, index_js_1.Logger)('Call:'), (0, index_js_1.ErrorHandler)()];
            _transferSimulateTx_decorators = [(0, index_js_1.Logger)('Utils:'), (0, index_js_1.ErrorHandler)()];
            _transferPopulateTx_decorators = [(0, index_js_1.Logger)('Utils:'), (0, index_js_1.ErrorHandler)()];
            _getSingleTokenApproval_decorators = [(0, index_js_1.Logger)('Views:'), (0, index_js_1.ErrorHandler)()];
            _setSingleTokenApproval_decorators = [(0, index_js_1.Logger)('Call:'), (0, index_js_1.ErrorHandler)()];
            _setSingleTokenApprovalPopulateTx_decorators = [(0, index_js_1.Logger)('Utils:'), (0, index_js_1.ErrorHandler)()];
            _setSingleTokenApprovalSimulateTx_decorators = [(0, index_js_1.Logger)('Utils:'), (0, index_js_1.ErrorHandler)()];
            _areAllTokensApproved_decorators = [(0, index_js_1.Logger)('Views:'), (0, index_js_1.ErrorHandler)()];
            _setAllTokensApproval_decorators = [(0, index_js_1.Logger)('Call:'), (0, index_js_1.ErrorHandler)()];
            _setAllTokensApprovalPopulateTx_decorators = [(0, index_js_1.Logger)('Call:'), (0, index_js_1.ErrorHandler)()];
            _setAllTokensApprovalSimulateTx_decorators = [(0, index_js_1.Logger)('Call:'), (0, index_js_1.ErrorHandler)()];
            _getContractMetadata_decorators = [(0, index_js_1.Logger)('Views:'), (0, index_js_1.ErrorHandler)(), (0, index_js_1.Cache)(30 * 60 * 1000, ['core.chain.id'])];
            _getTokenMetadataURI_decorators = [(0, index_js_1.Logger)('Views:'), (0, index_js_1.ErrorHandler)()];
            __esDecorate(_a, null, _contractAddress_decorators, { kind: "method", name: "contractAddress", static: false, private: false, access: { has: obj => "contractAddress" in obj, get: obj => obj.contractAddress }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getContract_decorators, { kind: "method", name: "getContract", static: false, private: false, access: { has: obj => "getContract" in obj, get: obj => obj.getContract }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getNFTsByAccount_decorators, { kind: "method", name: "getNFTsByAccount", static: false, private: false, access: { has: obj => "getNFTsByAccount" in obj, get: obj => obj.getNFTsByAccount }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getAccountByNFT_decorators, { kind: "method", name: "getAccountByNFT", static: false, private: false, access: { has: obj => "getAccountByNFT" in obj, get: obj => obj.getAccountByNFT }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _transfer_decorators, { kind: "method", name: "transfer", static: false, private: false, access: { has: obj => "transfer" in obj, get: obj => obj.transfer }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _transferSimulateTx_decorators, { kind: "method", name: "transferSimulateTx", static: false, private: false, access: { has: obj => "transferSimulateTx" in obj, get: obj => obj.transferSimulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _transferPopulateTx_decorators, { kind: "method", name: "transferPopulateTx", static: false, private: false, access: { has: obj => "transferPopulateTx" in obj, get: obj => obj.transferPopulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getSingleTokenApproval_decorators, { kind: "method", name: "getSingleTokenApproval", static: false, private: false, access: { has: obj => "getSingleTokenApproval" in obj, get: obj => obj.getSingleTokenApproval }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _setSingleTokenApproval_decorators, { kind: "method", name: "setSingleTokenApproval", static: false, private: false, access: { has: obj => "setSingleTokenApproval" in obj, get: obj => obj.setSingleTokenApproval }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _setSingleTokenApprovalPopulateTx_decorators, { kind: "method", name: "setSingleTokenApprovalPopulateTx", static: false, private: false, access: { has: obj => "setSingleTokenApprovalPopulateTx" in obj, get: obj => obj.setSingleTokenApprovalPopulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _setSingleTokenApprovalSimulateTx_decorators, { kind: "method", name: "setSingleTokenApprovalSimulateTx", static: false, private: false, access: { has: obj => "setSingleTokenApprovalSimulateTx" in obj, get: obj => obj.setSingleTokenApprovalSimulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _areAllTokensApproved_decorators, { kind: "method", name: "areAllTokensApproved", static: false, private: false, access: { has: obj => "areAllTokensApproved" in obj, get: obj => obj.areAllTokensApproved }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _setAllTokensApproval_decorators, { kind: "method", name: "setAllTokensApproval", static: false, private: false, access: { has: obj => "setAllTokensApproval" in obj, get: obj => obj.setAllTokensApproval }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _setAllTokensApprovalPopulateTx_decorators, { kind: "method", name: "setAllTokensApprovalPopulateTx", static: false, private: false, access: { has: obj => "setAllTokensApprovalPopulateTx" in obj, get: obj => obj.setAllTokensApprovalPopulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _setAllTokensApprovalSimulateTx_decorators, { kind: "method", name: "setAllTokensApprovalSimulateTx", static: false, private: false, access: { has: obj => "setAllTokensApprovalSimulateTx" in obj, get: obj => obj.setAllTokensApprovalSimulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getContractMetadata_decorators, { kind: "method", name: "getContractMetadata", static: false, private: false, access: { has: obj => "getContractMetadata" in obj, get: obj => obj.getContractMetadata }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getTokenMetadataURI_decorators, { kind: "method", name: "getTokenMetadataURI", static: false, private: false, access: { has: obj => "getTokenMetadataURI" in obj, get: obj => obj.getTokenMetadataURI }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        })(),
        _a;
})();
exports.LidoSDKUnstETH = LidoSDKUnstETH;
//# sourceMappingURL=unsteth.js.map