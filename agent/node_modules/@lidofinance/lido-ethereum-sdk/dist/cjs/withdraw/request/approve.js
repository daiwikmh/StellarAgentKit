"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LidoSDKWithdrawApprove = void 0;
const viem_1 = require("viem");
const constants_js_1 = require("../../common/constants.js");
const parse_value_js_1 = require("../../common/utils/parse-value.js");
const index_js_1 = require("../../common/decorators/index.js");
const bus_module_js_1 = require("../bus-module.js");
let LidoSDKWithdrawApprove = (() => {
    var _a;
    let _classSuper = bus_module_js_1.BusModule;
    let _instanceExtraInitializers = [];
    let _approve_decorators;
    let _approveSimulateTx_decorators;
    let _approvePopulateTx_decorators;
    let _approveGasLimit_decorators;
    let _getAllowance_decorators;
    let _checkAllowance_decorators;
    return _a = class LidoSDKWithdrawApprove extends _classSuper {
            async approve(props) {
                this.bus.core.useWeb3Provider();
                const { account, token, callback = constants_js_1.NOOP, amount: _amount, ...rest } = props;
                const amount = (0, parse_value_js_1.parseValue)(_amount);
                const addressWithdrawalsQueue = await this.bus.contract.contractAddressWithdrawalQueue();
                const isSteth = token === 'stETH';
                const contract = (isSteth
                    ? await this.bus.contract.getContractStETH()
                    : await this.bus.contract.getContractWstETH());
                return this.bus.core.performTransaction({
                    ...rest,
                    account,
                    callback,
                    getGasLimit: (options) => contract.estimateGas.approve([addressWithdrawalsQueue, amount], options),
                    sendTransaction: (options) => contract.write.approve([addressWithdrawalsQueue, amount], options),
                });
            }
            async approveSimulateTx(props) {
                const account = await this.bus.core.useAccount(props.account);
                const { token, amount: _amount } = props;
                const amount = (0, parse_value_js_1.parseValue)(_amount);
                const isSteth = token === 'stETH';
                const addressWithdrawalsQueue = await this.bus.contract.contractAddressWithdrawalQueue();
                const contract = (isSteth
                    ? await this.bus.contract.getContractStETH()
                    : await this.bus.contract.getContractWstETH());
                const result = contract.simulate.approve([addressWithdrawalsQueue, amount], { account });
                return result;
            }
            async approvePopulateTx(props) {
                const { token, amount: _amount } = props;
                const account = await this.bus.core.useAccount(props.account);
                const amount = (0, parse_value_js_1.parseValue)(_amount);
                const isSteth = token === 'stETH';
                const addressWithdrawalsQueue = await this.bus.contract.contractAddressWithdrawalQueue();
                const contract = (isSteth
                    ? await this.bus.contract.getContractStETH()
                    : await this.bus.contract.getContractWstETH());
                return {
                    from: account.address,
                    to: contract.address,
                    data: (0, viem_1.encodeFunctionData)({
                        abi: contract.abi,
                        functionName: 'approve',
                        args: [addressWithdrawalsQueue, amount],
                    }),
                };
            }
            async approveGasLimit({ account: accountProp, token, amount, }, options) {
                const account = await this.bus.core.useAccount(accountProp);
                const value = (0, parse_value_js_1.parseValue)(amount);
                const isSteth = token === 'stETH';
                let estimateGasMethod;
                if (isSteth)
                    estimateGasMethod = (await this.bus.contract.getContractStETH())
                        .estimateGas.approve;
                else
                    estimateGasMethod = (await this.bus.contract.getContractWstETH())
                        .estimateGas.approve;
                const addressWithdrawalsQueue = await this.bus.contract.contractAddressWithdrawalQueue();
                const gasLimit = await estimateGasMethod.call(this, [addressWithdrawalsQueue, value], { account, ...options });
                return gasLimit;
            }
            async getAllowance({ account: accountProp, token, }) {
                const account = await this.bus.core.useAccount(accountProp);
                const isSteth = token === 'stETH';
                let allowanceMethod;
                if (isSteth)
                    allowanceMethod = (await this.bus.contract.getContractStETH()).read
                        .allowance;
                else
                    allowanceMethod = (await this.bus.contract.getContractWstETH()).read
                        .allowance;
                const addressWithdrawalsQueue = await this.bus.contract.contractAddressWithdrawalQueue();
                const allowance = await allowanceMethod.call(this, [account.address, addressWithdrawalsQueue], { account });
                return allowance;
            }
            async checkAllowance({ amount: _amount, account: accountProp, token, }) {
                const account = await this.bus.core.useAccount(accountProp);
                const amount = (0, parse_value_js_1.parseValue)(_amount);
                const isSteth = token === 'stETH';
                let allowanceMethod;
                if (isSteth)
                    allowanceMethod = (await this.bus.contract.getContractStETH()).read
                        .allowance;
                else
                    allowanceMethod = (await this.bus.contract.getContractWstETH()).read
                        .allowance;
                const addressWithdrawalsQueue = await this.bus.contract.contractAddressWithdrawalQueue();
                const allowance = await allowanceMethod.call(this, [account.address, addressWithdrawalsQueue], { account });
                const needsApprove = allowance < amount;
                return { allowance, needsApprove };
            }
            constructor() {
                super(...arguments);
                __runInitializers(this, _instanceExtraInitializers);
            }
        },
        (() => {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _approve_decorators = [(0, index_js_1.Logger)('Call:'), (0, index_js_1.ErrorHandler)()];
            _approveSimulateTx_decorators = [(0, index_js_1.Logger)('Views:'), (0, index_js_1.ErrorHandler)()];
            _approvePopulateTx_decorators = [(0, index_js_1.Logger)('Views:'), (0, index_js_1.ErrorHandler)()];
            _approveGasLimit_decorators = [(0, index_js_1.Logger)('Utils:'), (0, index_js_1.Cache)(30 * 1000, ['bus.core.chain.id'])];
            _getAllowance_decorators = [(0, index_js_1.Logger)('Utils:'), (0, index_js_1.ErrorHandler)()];
            _checkAllowance_decorators = [(0, index_js_1.Logger)('Utils:'), (0, index_js_1.ErrorHandler)()];
            __esDecorate(_a, null, _approve_decorators, { kind: "method", name: "approve", static: false, private: false, access: { has: obj => "approve" in obj, get: obj => obj.approve }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _approveSimulateTx_decorators, { kind: "method", name: "approveSimulateTx", static: false, private: false, access: { has: obj => "approveSimulateTx" in obj, get: obj => obj.approveSimulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _approvePopulateTx_decorators, { kind: "method", name: "approvePopulateTx", static: false, private: false, access: { has: obj => "approvePopulateTx" in obj, get: obj => obj.approvePopulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _approveGasLimit_decorators, { kind: "method", name: "approveGasLimit", static: false, private: false, access: { has: obj => "approveGasLimit" in obj, get: obj => obj.approveGasLimit }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getAllowance_decorators, { kind: "method", name: "getAllowance", static: false, private: false, access: { has: obj => "getAllowance" in obj, get: obj => obj.getAllowance }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _checkAllowance_decorators, { kind: "method", name: "checkAllowance", static: false, private: false, access: { has: obj => "checkAllowance" in obj, get: obj => obj.checkAllowance }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        })(),
        _a;
})();
exports.LidoSDKWithdrawApprove = LidoSDKWithdrawApprove;
//# sourceMappingURL=approve.js.map