"use strict";
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LidoSDKWithdrawClaim = void 0;
const viem_1 = require("viem");
const index_js_1 = require("../../common/decorators/index.js");
const constants_js_1 = require("../../common/constants.js");
const bus_module_js_1 = require("../bus-module.js");
const bigint_comparator_js_1 = require("../../common/utils/bigint-comparator.js");
const index_js_2 = require("../../common/index.js");
const withdrawalQueue_js_1 = require("../abi/withdrawalQueue.js");
let LidoSDKWithdrawClaim = (() => {
    var _a;
    let _classSuper = bus_module_js_1.BusModule;
    let _instanceExtraInitializers = [];
    let _claimRequests_decorators;
    let _claimRequestsEstimateGas_decorators;
    let _claimRequestsSimulateTx_decorators;
    let _claimRequestsPopulateTx_decorators;
    let _sortRequestsWithHints_decorators;
    let _decodeClaimEvents_decorators;
    return _a = class LidoSDKWithdrawClaim extends _classSuper {
            async claimRequests(props) {
                const { account, callback = constants_js_1.NOOP, ...rest } = props;
                const { requestsIds, hints } = await this.sortRequestsWithHints(props.requestsIds, props.hints);
                const params = [requestsIds, hints];
                const contract = await this.bus.contract.getContractWithdrawalQueue();
                return this.bus.core.performTransaction({
                    ...rest,
                    account,
                    callback,
                    getGasLimit: (options) => contract.estimateGas.claimWithdrawals(params, options),
                    sendTransaction: (options) => contract.write.claimWithdrawals(params, options),
                    decodeResult: (receipt) => this.decodeClaimEvents(receipt),
                });
            }
            async claimRequestsEstimateGas(props, options) {
                const account = await this.bus.core.useAccount(props.account);
                const { requestsIds, hints } = await this.sortRequestsWithHints(props.requestsIds, props.hints);
                const contract = await this.bus.contract.getContractWithdrawalQueue();
                return contract.estimateGas.claimWithdrawals([requestsIds, hints], {
                    account,
                    ...options,
                });
            }
            async claimRequestsSimulateTx(props) {
                const account = await this.bus.core.useAccount(props.account);
                const { requestsIds, hints } = await this.sortRequestsWithHints(props.requestsIds, props.hints);
                const contract = await this.bus.contract.getContractWithdrawalQueue();
                return contract.simulate.claimWithdrawals([requestsIds, hints], {
                    account,
                });
            }
            async claimRequestsPopulateTx(props) {
                const account = await this.bus.core.useAccount(props.account);
                const { requestsIds, hints } = await this.sortRequestsWithHints(props.requestsIds, props.hints);
                const contract = await this.bus.contract.getContractWithdrawalQueue();
                return {
                    from: account.address,
                    to: contract.address,
                    data: (0, viem_1.encodeFunctionData)({
                        abi: contract.abi,
                        functionName: 'claimWithdrawals',
                        args: [requestsIds, hints],
                    }),
                };
            }
            async sortRequestsWithHints(requestsIds, hints) {
                (0, index_js_2.invariantArgument)(requestsIds.length > 0, 'requests array is empty');
                if (hints) {
                    return requestsIds
                        .map((request, index) => {
                        const hint = hints[index];
                        (0, index_js_2.invariantArgument)(hint, 'Hints array does not match request array');
                        return [request, hint];
                    })
                        .sort(([r1], [r2]) => (0, bigint_comparator_js_1.bigintComparator)(r1, r2))
                        .reduce((acc, [request, hint]) => {
                        acc.requestsIds.push(request);
                        acc.hints.push(hint);
                        return acc;
                    }, { requestsIds: [], hints: [] });
                }
                const sortedRequestsIds = [...requestsIds].sort(bigint_comparator_js_1.bigintComparator);
                const fetchedHints = await this.bus.views.findCheckpointHints({
                    sortedIds: sortedRequestsIds,
                });
                return {
                    requestsIds: sortedRequestsIds,
                    hints: fetchedHints,
                };
            }
            async decodeClaimEvents(receipt) {
                const requests = [];
                for (const log of receipt.logs) {
                    if (log.topics[0] !== _a.CLAIM_SIGNATURE)
                        continue;
                    const parsedLog = (0, viem_1.decodeEventLog)({
                        abi: withdrawalQueue_js_1.PartialWithdrawalQueueEventsAbi,
                        strict: true,
                        ...log,
                    });
                    if (parsedLog.eventName === 'WithdrawalClaimed') {
                        requests.push({ ...parsedLog.args });
                    }
                }
                return { requests };
            }
            constructor() {
                super(...arguments);
                __runInitializers(this, _instanceExtraInitializers);
            }
        },
        (() => {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _claimRequests_decorators = [(0, index_js_1.Logger)('Call:'), (0, index_js_1.ErrorHandler)()];
            _claimRequestsEstimateGas_decorators = [(0, index_js_1.Logger)('Views:'), (0, index_js_1.ErrorHandler)()];
            _claimRequestsSimulateTx_decorators = [(0, index_js_1.Logger)('Views:'), (0, index_js_1.ErrorHandler)()];
            _claimRequestsPopulateTx_decorators = [(0, index_js_1.Logger)('Views:'), (0, index_js_1.ErrorHandler)()];
            _sortRequestsWithHints_decorators = [(0, index_js_1.Logger)('Utils:')];
            _decodeClaimEvents_decorators = [(0, index_js_1.Logger)('Utils:')];
            __esDecorate(_a, null, _claimRequests_decorators, { kind: "method", name: "claimRequests", static: false, private: false, access: { has: obj => "claimRequests" in obj, get: obj => obj.claimRequests }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _claimRequestsEstimateGas_decorators, { kind: "method", name: "claimRequestsEstimateGas", static: false, private: false, access: { has: obj => "claimRequestsEstimateGas" in obj, get: obj => obj.claimRequestsEstimateGas }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _claimRequestsSimulateTx_decorators, { kind: "method", name: "claimRequestsSimulateTx", static: false, private: false, access: { has: obj => "claimRequestsSimulateTx" in obj, get: obj => obj.claimRequestsSimulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _claimRequestsPopulateTx_decorators, { kind: "method", name: "claimRequestsPopulateTx", static: false, private: false, access: { has: obj => "claimRequestsPopulateTx" in obj, get: obj => obj.claimRequestsPopulateTx }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _sortRequestsWithHints_decorators, { kind: "method", name: "sortRequestsWithHints", static: false, private: false, access: { has: obj => "sortRequestsWithHints" in obj, get: obj => obj.sortRequestsWithHints }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _decodeClaimEvents_decorators, { kind: "method", name: "decodeClaimEvents", static: false, private: false, access: { has: obj => "decodeClaimEvents" in obj, get: obj => obj.decodeClaimEvents }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        })(),
        Object.defineProperty(_a, "CLAIM_SIGNATURE", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0, viem_1.toEventHash)((0, viem_1.getAbiItem)({
                abi: withdrawalQueue_js_1.PartialWithdrawalQueueEventsAbi,
                name: 'WithdrawalClaimed',
            }))
        }),
        _a;
})();
exports.LidoSDKWithdrawClaim = LidoSDKWithdrawClaim;
//# sourceMappingURL=claim.js.map