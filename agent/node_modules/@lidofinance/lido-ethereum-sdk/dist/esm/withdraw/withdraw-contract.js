var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
import { getContract } from 'viem';
import { Logger, Cache } from '../common/decorators/index.js';
import { LIDO_CONTRACT_NAMES } from '../common/constants.js';
import { WithdrawalQueueAbi } from './abi/withdrawalQueue.js';
import { PartStethAbi } from './abi/partStETH.js';
import { PartWstethAbi } from './abi/partWstETH.js';
import { BusModule } from './bus-module.js';
let LidoSDKWithdrawContract = (() => {
    var _a;
    let _classSuper = BusModule;
    let _instanceExtraInitializers = [];
    let _contractAddressWithdrawalQueue_decorators;
    let _getContractWithdrawalQueue_decorators;
    let _contractAddressStETH_decorators;
    let _getContractStETH_decorators;
    let _contractAddressWstETH_decorators;
    let _getContractWstETH_decorators;
    return _a = class LidoSDKWithdrawContract extends _classSuper {
            // Contracts
            async contractAddressWithdrawalQueue() {
                return await this.bus.core.getContractAddress(LIDO_CONTRACT_NAMES.withdrawalQueue);
            }
            async getContractWithdrawalQueue() {
                const address = await this.contractAddressWithdrawalQueue();
                return getContract({
                    address,
                    abi: WithdrawalQueueAbi,
                    client: {
                        public: this.bus.core.rpcProvider,
                        wallet: this.bus.core.web3Provider,
                    },
                });
            }
            async contractAddressStETH() {
                return await this.bus.core.getContractAddress(LIDO_CONTRACT_NAMES.lido);
            }
            async getContractStETH() {
                const address = await this.contractAddressStETH();
                return getContract({
                    address,
                    abi: PartStethAbi,
                    client: {
                        public: this.bus.core.rpcProvider,
                        wallet: this.bus.core.web3Provider,
                    },
                });
            }
            async contractAddressWstETH() {
                return await this.bus.core.getContractAddress(LIDO_CONTRACT_NAMES.wsteth);
            }
            async getContractWstETH() {
                const address = await this.contractAddressWstETH();
                return getContract({
                    address,
                    abi: PartWstethAbi,
                    client: {
                        public: this.bus.core.rpcProvider,
                        wallet: this.bus.core.web3Provider,
                    },
                });
            }
            constructor() {
                super(...arguments);
                __runInitializers(this, _instanceExtraInitializers);
            }
        },
        (() => {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _contractAddressWithdrawalQueue_decorators = [Logger('Contracts:'), Cache(30 * 60 * 1000, ['bus.core.chain.id'])];
            _getContractWithdrawalQueue_decorators = [Logger('Contracts:'), Cache(30 * 60 * 1000, [
                    'bus.core.chain.id',
                    'contractAddressWithdrawalQueue',
                ])];
            _contractAddressStETH_decorators = [Logger('Contracts:'), Cache(30 * 60 * 1000, ['bus.core.chain.id'])];
            _getContractStETH_decorators = [Logger('Contracts:'), Cache(30 * 60 * 1000, ['bus.core.chain.id', 'contractAddressStETH'])];
            _contractAddressWstETH_decorators = [Logger('Contracts:'), Cache(30 * 60 * 1000, ['bus.core.chain.id'])];
            _getContractWstETH_decorators = [Logger('Contracts:'), Cache(30 * 60 * 1000, ['bus.core.chain.id', 'contractAddressWstETH'])];
            __esDecorate(_a, null, _contractAddressWithdrawalQueue_decorators, { kind: "method", name: "contractAddressWithdrawalQueue", static: false, private: false, access: { has: obj => "contractAddressWithdrawalQueue" in obj, get: obj => obj.contractAddressWithdrawalQueue }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getContractWithdrawalQueue_decorators, { kind: "method", name: "getContractWithdrawalQueue", static: false, private: false, access: { has: obj => "getContractWithdrawalQueue" in obj, get: obj => obj.getContractWithdrawalQueue }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _contractAddressStETH_decorators, { kind: "method", name: "contractAddressStETH", static: false, private: false, access: { has: obj => "contractAddressStETH" in obj, get: obj => obj.contractAddressStETH }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getContractStETH_decorators, { kind: "method", name: "getContractStETH", static: false, private: false, access: { has: obj => "getContractStETH" in obj, get: obj => obj.getContractStETH }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _contractAddressWstETH_decorators, { kind: "method", name: "contractAddressWstETH", static: false, private: false, access: { has: obj => "contractAddressWstETH" in obj, get: obj => obj.contractAddressWstETH }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getContractWstETH_decorators, { kind: "method", name: "getContractWstETH", static: false, private: false, access: { has: obj => "getContractWstETH" in obj, get: obj => obj.getContractWstETH }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        })(),
        _a;
})();
export { LidoSDKWithdrawContract };
//# sourceMappingURL=withdraw-contract.js.map