var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
import { LidoSDKEvents } from '../events/index.js';
import { Logger, ErrorHandler } from '../common/decorators/index.js';
import { ERROR_CODE, invariant } from '../common/utils/sdk-error.js';
import { LidoSDKModule } from '../common/class-primitives/sdk-module.js';
let LidoSDKApr = (() => {
    var _a;
    let _classSuper = LidoSDKModule;
    let _instanceExtraInitializers = [];
    let _getLastApr_decorators;
    let _getSmaApr_decorators;
    return _a = class LidoSDKApr extends _classSuper {
            constructor(props) {
                super(props);
                Object.defineProperty(this, "events", {
                    enumerable: true,
                    configurable: true,
                    writable: true,
                    value: __runInitializers(this, _instanceExtraInitializers)
                });
                this.events = new LidoSDKEvents({ ...props, core: this.core });
            }
            static calculateAprFromRebaseEvent({ preTotalEther, preTotalShares, postTotalEther, postTotalShares, timeElapsed, }) {
                const preShareRate = (preTotalEther * BigInt(10 ** 27)) / preTotalShares;
                const postShareRate = (postTotalEther * BigInt(10 ** 27)) / postTotalShares;
                const mulForPrecision = 1000000;
                const secondsInYear = 31536000n;
                const userAPR = (secondsInYear *
                    ((postShareRate - preShareRate) * BigInt(mulForPrecision))) /
                    preShareRate /
                    timeElapsed;
                return (Number(userAPR) * 100) / mulForPrecision;
            }
            async getLastApr() {
                const event = await this.events.stethEvents.getLastRebaseEvent();
                invariant(event, 'Could not find last Rebase event', ERROR_CODE.READ_ERROR);
                const apr = _a.calculateAprFromRebaseEvent(event.args);
                return apr;
            }
            async getSmaApr(props) {
                const { days } = props;
                const lastEvent = await this.events.stethEvents.getLastRebaseEvent();
                invariant(lastEvent, 'Could not find last Rebase event', ERROR_CODE.READ_ERROR);
                const firstEvent = await this.events.stethEvents.getFirstRebaseEvent({
                    days,
                    fromBlockNumber: lastEvent.blockNumber,
                });
                invariant(firstEvent, 'Could not locate first Rebase event. Likely days range greatly preceded first firing of the event.', ERROR_CODE.READ_ERROR);
                const timeElapsed = firstEvent.args.timeElapsed +
                    (lastEvent.args.reportTimestamp - firstEvent.args.reportTimestamp);
                const smaApr = _a.calculateAprFromRebaseEvent({
                    preTotalEther: firstEvent.args.preTotalEther,
                    preTotalShares: firstEvent.args.preTotalShares,
                    postTotalEther: lastEvent.args.postTotalEther,
                    postTotalShares: lastEvent.args.postTotalShares,
                    timeElapsed,
                });
                return smaApr;
            }
        },
        (() => {
            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
            _getLastApr_decorators = [Logger('Statistic:'), ErrorHandler()];
            _getSmaApr_decorators = [Logger('Statistic:'), ErrorHandler()];
            __esDecorate(_a, null, _getLastApr_decorators, { kind: "method", name: "getLastApr", static: false, private: false, access: { has: obj => "getLastApr" in obj, get: obj => obj.getLastApr }, metadata: _metadata }, null, _instanceExtraInitializers);
            __esDecorate(_a, null, _getSmaApr_decorators, { kind: "method", name: "getSmaApr", static: false, private: false, access: { has: obj => "getSmaApr" in obj, get: obj => obj.getSmaApr }, metadata: _metadata }, null, _instanceExtraInitializers);
            if (_metadata) Object.defineProperty(_a, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        })(),
        _a;
})();
export { LidoSDKApr };
//# sourceMappingURL=apr.js.map