import { type Address, type WalletClient, type PublicClient, type Chain, type GetContractReturnType, type CustomTransportConfig, type GetBlockReturnType, JsonRpcAccount } from 'viem';
import { type SDKErrorProps, SDKError } from '../common/utils/index.js';
import { type CHAINS, LIDO_CONTRACT_NAMES, LIDO_L2_CONTRACT_NAMES } from '../common/constants.js';
import { LidoLocatorAbi } from './abi/lidoLocator.js';
import type { LidoSDKCoreProps, PermitSignature, SignPermitProps, LOG_MODE, PerformTransactionOptions, TransactionResult, GetFeeDataResult, BlockArgumentType, BackArgumentType, AccountValue } from './types.js';
import { LidoSDKCacheable } from '../common/class-primitives/cacheable.js';
export default class LidoSDKCore extends LidoSDKCacheable {
    #private;
    static readonly INFINITY_DEADLINE_VALUE: bigint;
    private static readonly SECONDS_PER_DAY;
    readonly chainId: CHAINS;
    readonly rpcUrls: string[] | undefined;
    readonly chain: Chain;
    readonly rpcProvider: PublicClient;
    readonly logMode: LOG_MODE;
    get web3Provider(): WalletClient | undefined;
    constructor(props: LidoSDKCoreProps, version?: string);
    static createRpcProvider(chainId: CHAINS, rpcUrls: string[]): PublicClient;
    static createWeb3Provider(chainId: CHAINS, transport: {
        request(...args: any): Promise<any>;
    }, transportConfig?: CustomTransportConfig): WalletClient;
    private init;
    useWeb3Provider(): WalletClient;
    balanceETH(address?: AccountValue): Promise<bigint>;
    contractAddressLidoLocator(): Address;
    getContractLidoLocator(): GetContractReturnType<typeof LidoLocatorAbi, PublicClient>;
    signPermit(props: SignPermitProps): Promise<PermitSignature>;
    private getPermitContractData;
    getFeeData(): Promise<GetFeeDataResult>;
    getWeb3Address(accountValue?: AccountValue): Promise<Address>;
    useAccount(accountValue?: AccountValue): Promise<JsonRpcAccount>;
    isContract(address: Address): Promise<boolean>;
    error(props: SDKErrorProps): SDKError;
    getContractAddress(contract: LIDO_CONTRACT_NAMES): Promise<Address>;
    getL2ContractAddress(contract: LIDO_L2_CONTRACT_NAMES): Address;
    getSubgraphId(): string | null;
    getLatestBlockToTimestamp(timestamp: bigint): Promise<GetBlockReturnType<Chain, false, 'latest'>>;
    toBlockNumber(arg: BlockArgumentType): Promise<bigint>;
    toBackBlock(arg: BackArgumentType, start: bigint): Promise<bigint>;
    performTransaction<TDecodedResult = undefined>(props: PerformTransactionOptions<TDecodedResult>): Promise<TransactionResult<TDecodedResult>>;
}
//# sourceMappingURL=core.d.ts.map