import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';

/**
 * Resources are categories for tool calls and come with a set of permissions. For example, an
 * action called `bucket.read` will only be allowed if a tool has defined the `bucket` as its
 * resource and has the `read` permission set.
 */
type Resource = "account" | "bucket";
/**
 * Permissions are used alongside resources to restrict how a tool can be used. Write operations
 * are associated with a private key and are not allowed to be called without one, while read
 * operations are open to anyone (e.g., reading Recall network information).
 */
type Permission = "read" | "write";
/**
 * Actions are used to restrict the subset of API calls that can be made through a {@link Resource}
 * and {@link Permission}. Setting a permission to false prevents the related "tool" from being
 * considered. For example, if no private key is provided, the `write` permission should be set to
 * false.
 * @example
 * ```ts
 * const actions: Actions = {
 *   bucket: {
 *     write: true,
 *   },
 * }
 * ```
 */
type Actions = {
    [K in Resource]?: {
        [K in Permission]?: boolean;
    };
};
/**
 * Context are settings that are applied to all requests made by the integration.
 * @param network - The Recall network to use for the integration (defaults to `testnet`).
 * @param [key: string] - Additional custom settings that are applied to the integration.
 */
type Context = {
    network?: string;
    [key: string]: unknown;
};
/**
 * Configuration provides various settings and options for the integration to tune and manage how
 * it behaves.
 * @param actions - Restricts the subset of API calls ({@link Actions}) that can be made.
 * @param context - {@link Context} are settings that are applied to all requests made by the integration.
 */
type Configuration = {
    actions: Actions;
    context?: Context;
};

/**
 * Recall agent toolkit for the Model Context Protocol.
 * @example
 * ```ts
 * import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
 * import { RecallAgentToolkit } from "@recallnet/agent-toolkit/mcp";
 * import { Configuration } from "@recallnet/agent-toolkit/shared";
 *
 * const configuration: Configuration = {
 *   actions: {
 *     bucket: {
 *       read: true,
 *       write: true,
 *     },
 *   },
 *   context: {},
 * };
 * const privateKey = "0x...";
 * const server = new RecallAgentToolkit(privateKey, configuration);
 * const transport = new StdioServerTransport();
 * await server.connect(transport);
 * ```
 */
declare class RecallAgentToolkit extends McpServer {
    /**
     * The Recall API instance used to interact with the Recall network.
     * @private
     */
    private _recall;
    /**
     * Create a new RecallAgentToolkit instance.
     * @param privateKey - The private key of the account to use.
     * @param configuration - The {@link Configuration} to use.
     */
    constructor({ privateKey, configuration, }: {
        privateKey: string;
        configuration: Configuration;
    });
}

export { RecallAgentToolkit };
