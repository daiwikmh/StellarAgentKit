import { StructuredTool, BaseToolkit } from '@langchain/core/tools';
import { CallbackManagerForToolRun } from '@langchain/core/callbacks/manager';
import { RunnableConfig } from '@langchain/core/runnables';
import { z } from 'zod';
import { RecallClient } from '@recallnet/sdk/client';

/**
 * The result of a function that succeeds.
 */
type SuccessResult<T> = {
    success: true;
    result: T;
};
/**
 * The result of a function that fails.
 */
type ErrorResult = {
    success: false;
    error: string;
};
/**
 * The result of a function.
 */
type Result<T> = SuccessResult<T> | ErrorResult;

/**
 * A tool is a function that can be called by the agent.
 * @param method - The method name.
 * @param name - The name of the tool.
 * @param description - The description of the tool.
 * @param parameters - The parameters of the tool.
 * @param actions - The {@link Actions} of the tool.
 */
type Tool = {
    method: string;
    name: string;
    description: string;
    parameters: z.ZodObject<any, any, any, any>;
    actions: Actions;
    execute: (recall: RecallClient, context: Context, params: any) => Promise<Result<any>>;
};

/**
 * Resources are categories for tool calls and come with a set of permissions. For example, an
 * action called `bucket.read` will only be allowed if a tool has defined the `bucket` as its
 * resource and has the `read` permission set.
 */
type Resource = "account" | "bucket";
/**
 * Permissions are used alongside resources to restrict how a tool can be used. Write operations
 * are associated with a private key and are not allowed to be called without one, while read
 * operations are open to anyone (e.g., reading Recall network information).
 */
type Permission = "read" | "write";
/**
 * Actions are used to restrict the subset of API calls that can be made through a {@link Resource}
 * and {@link Permission}. Setting a permission to false prevents the related "tool" from being
 * considered. For example, if no private key is provided, the `write` permission should be set to
 * false.
 * @example
 * ```ts
 * const actions: Actions = {
 *   bucket: {
 *     write: true,
 *   },
 * }
 * ```
 */
type Actions = {
    [K in Resource]?: {
        [K in Permission]?: boolean;
    };
};
/**
 * Context are settings that are applied to all requests made by the integration.
 * @param network - The Recall network to use for the integration (defaults to `testnet`).
 * @param [key: string] - Additional custom settings that are applied to the integration.
 */
type Context = {
    network?: string;
    [key: string]: unknown;
};
/**
 * Configuration provides various settings and options for the integration to tune and manage how
 * it behaves.
 * @param actions - Restricts the subset of API calls ({@link Actions}) that can be made.
 * @param context - {@link Context} are settings that are applied to all requests made by the integration.
 */
type Configuration = {
    actions: Actions;
    context?: Context;
};

/**
 * The Recall API provides a simple interface for the Recall network and SDK, designed for
 * agentic use.
 * @example
 * ```ts
 * const privateKey = "0x...";
 * const recall = new RecallAPI(privateKey);
 * const result = await recall.run("get_account_info", {});
 * ```
 */
declare class RecallAPI {
    private _recall;
    private _context;
    private _tools;
    private _serialize;
    /**
     * Create a new RecallAPI instance.
     * @param privateKey - The private key of the account to use.
     * @param context - The context to use, including the network name (e.g., `testnet` or `localnet`).
     * @param serializer - The serializer to use, which formats the return value of the method.
     * Defaults to `jsonStringify` (i.e.,`JSON.stringify` with `bigint`s converted to strings).
     */
    constructor(privateKey: string, context?: Context, serializer?: (data: unknown) => string);
    /**
     * Get the tools available to the `RecallAPI` instance.
     * @returns The tools available to the `RecallAPI` instance.
     */
    getTools(): Tool[];
    /**
     * Run a method on the Recall network.
     * @param method - The method to run.
     * @param arg - The arguments to pass to the method.
     * @returns The result of the method.
     */
    run(method: string, arg: any): Promise<string>;
}

/**
 * A LangChain compatible structured tool for the Recall agent toolkit.
 * @example
 * ```ts
 * const tool = new RecallTool(recallAPI, "get_account_info", "Get account info", getAccountInfoParameters);
 * ```
 */
declare class RecallTool extends StructuredTool {
    private _recall;
    method: string;
    name: string;
    description: string;
    schema: z.ZodObject<any, any, any, any>;
    constructor(recallAPI: RecallAPI, method: string, description: string, schema: z.ZodObject<any, any, any, any>);
    _call(arg: z.output<typeof this.schema>, _runManager?: CallbackManagerForToolRun, _parentConfig?: RunnableConfig): Promise<string>;
}

/**
 * A LangChain compatible toolkit for the Recall agent toolkit.
 * @example
 * ```ts
 * const toolkit = new RecallAgentToolkit({
 *   privateKey: "0x...",
 *   configuration: {
 *     actions: {
 *       account: {
 *         read: true,
 *         write: true,
 *       },
 *     },
 *   },
 * });
 * ```
 */
declare class RecallAgentToolkit implements BaseToolkit {
    /**
     * The Recall API instance used to interact with the Recall network.
     * @private
     */
    private _recall;
    /**
     * The collection of tools available in this toolkit. Each tool is configured as a
     * LangChain `StructuredTool` that can be used in function calling scenarios.
     */
    tools: RecallTool[];
    /**
     * Create a new RecallAgentToolkit instance.
     * @param privateKey - The private key of the account to use.
     * @param configuration - The {@link Configuration} to use.
     */
    constructor({ privateKey, configuration, }: {
        privateKey: string;
        configuration: Configuration;
    });
    getTools(): RecallTool[];
}

export { RecallAgentToolkit };
