{"version":3,"sources":["../../src/openai/toolkit.ts","../../src/shared/api.ts","../../src/shared/functions.ts","../../src/shared/parameters.ts","../../src/shared/prompts.ts","../../src/shared/tools.ts","../../src/shared/util.ts","../../src/shared/configuration.ts"],"sourcesContent":["import type {\n  ChatCompletionMessageToolCall,\n  ChatCompletionTool,\n  ChatCompletionToolMessageParam,\n} from \"openai/resources\";\nimport { zodToJsonSchema } from \"zod-to-json-schema\";\n\nimport RecallAPI from \"../shared/api.js\";\nimport { type Configuration, isToolAllowed } from \"../shared/configuration.js\";\n\n/**\n * An OpenAI compatible toolkit for the Recall agent.\n * @example\n * ```ts\n * const toolkit = new RecallAgentToolkit({\n *   privateKey: \"0x...\",\n *   configuration: {\n *     actions: {\n *       account: {\n *         read: true,\n *         write: true,\n *       },\n *     },\n *   },\n * });\n * ```\n */\nexport default class RecallAgentToolkit {\n  /**\n   * The Recall API instance used to interact with the Recall network.\n   * @private\n   */\n  private _recall: RecallAPI;\n\n  /**\n   * The collection of tools available in this toolkit. Each tool is configured as an OpenAI\n   * `ChatCompletionTool` that can be used in function calling scenarios.\n   */\n  tools: ChatCompletionTool[];\n\n  /**\n   * Create a new RecallAgentToolkit instance.\n   * @param privateKey - The private key of the account to use.\n   * @param configuration - The {@link Configuration} to use.\n   */\n  constructor({\n    privateKey,\n    configuration,\n  }: {\n    privateKey: string;\n    configuration: Configuration;\n  }) {\n    this._recall = new RecallAPI(privateKey, configuration.context);\n\n    const filteredTools = this._recall\n      .getTools()\n      .filter((tool) => isToolAllowed(tool, configuration));\n\n    this.tools = filteredTools.map((tool) => ({\n      type: \"function\",\n      function: {\n        name: tool.method,\n        description: tool.description,\n        parameters: zodToJsonSchema(tool.parameters),\n      },\n    }));\n  }\n\n  getTools(): ChatCompletionTool[] {\n    return this.tools;\n  }\n\n  /**\n   * Processes a single OpenAI tool call by executing the requested function.\n   *\n   * @param toolCall - The tool call object from OpenAI containing function name, arguments, and ID\n   * @returns A promise that resolves to a tool message object containing the result of the tool\n   * execution with the proper format for the OpenAI API\n   */\n  async handleToolCall(\n    toolCall: ChatCompletionMessageToolCall,\n  ): Promise<ChatCompletionToolMessageParam> {\n    const args = JSON.parse(toolCall.function.arguments);\n    const response = await this._recall.run(toolCall.function.name, args);\n    return {\n      role: \"tool\",\n      tool_call_id: toolCall.id,\n      content: response,\n    };\n  }\n}\n","import { Hex } from \"viem\";\n\nimport {\n  ChainName,\n  checkChainName,\n  getChain,\n  testnet,\n} from \"@recallnet/chains\";\nimport {\n  RecallClient,\n  walletClientFromPrivateKey,\n} from \"@recallnet/sdk/client\";\n\nimport type { Context } from \"./configuration.js\";\nimport { Tool, tools } from \"./tools.js\";\nimport { jsonStringify } from \"./util.js\";\n\n/**\n * The Recall API provides a simple interface for the Recall network and SDK, designed for\n * agentic use.\n * @example\n * ```ts\n * const privateKey = \"0x...\";\n * const recall = new RecallAPI(privateKey);\n * const result = await recall.run(\"get_account_info\", {});\n * ```\n */\nexport default class RecallAPI {\n  private _recall: RecallClient;\n  private _context: Context;\n  private _tools: Tool[];\n  private _serialize: (data: unknown) => string;\n  /**\n   * Create a new RecallAPI instance.\n   * @param privateKey - The private key of the account to use.\n   * @param context - The context to use, including the network name (e.g., `testnet` or `localnet`).\n   * @param serializer - The serializer to use, which formats the return value of the method.\n   * Defaults to `jsonStringify` (i.e.,`JSON.stringify` with `bigint`s converted to strings).\n   */\n  constructor(\n    privateKey: string,\n    context?: Context,\n    serializer: (data: unknown) => string = jsonStringify,\n  ) {\n    const chain =\n      context?.network !== undefined && checkChainName(context.network)\n        ? getChain(context.network as ChainName)\n        : testnet;\n    const walletClient = walletClientFromPrivateKey(privateKey as Hex, chain);\n    const recallClient = new RecallClient({ walletClient });\n\n    this._recall = recallClient;\n    this._context = context || {};\n    this._tools = tools(context);\n    this._serialize = serializer;\n  }\n\n  /**\n   * Get the tools available to the `RecallAPI` instance.\n   * @returns The tools available to the `RecallAPI` instance.\n   */\n  getTools() {\n    return this._tools;\n  }\n\n  /**\n   * Run a method on the Recall network.\n   * @param method - The method to run.\n   * @param arg - The arguments to pass to the method.\n   * @returns The result of the method.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async run(method: string, arg: any) {\n    const tool = this._tools.find((t) => t.method === method);\n    if (tool !== undefined) {\n      const output = this._serialize(\n        await tool.execute(this._recall, this._context, arg),\n      );\n      return output;\n    } else {\n      throw new Error(`Invalid method: ${method}`);\n    }\n  }\n}\n","import { Address, parseEther } from \"viem\";\nimport { z } from \"zod\";\n\nimport { AccountInfo } from \"@recallnet/sdk/account\";\nimport { ListResult, QueryResult } from \"@recallnet/sdk/bucket\";\nimport { RecallClient } from \"@recallnet/sdk/client\";\nimport { CreditAccount } from \"@recallnet/sdk/credit\";\n\nimport type { Context } from \"./configuration.js\";\nimport {\n  addObjectParameters,\n  buyCreditParameters,\n  createBucketParameters,\n  getAccountInfoParameters,\n  getCreditInfoParameters,\n  getObjectParameters,\n  getOrCreateBucketParameters,\n  listBucketsParameters,\n  queryObjectsParameters,\n} from \"./parameters.js\";\nimport { Result } from \"./util.js\";\n\n/**\n * Gets the account information for the current user.\n * @param recall - The Recall client.\n * @param _context - The context to provide to the function.\n * @param params - The function parameters.\n * @returns The account information.\n */\nexport const getAccountInfo = async (\n  recall: RecallClient,\n  _context: Context,\n  params: z.infer<ReturnType<typeof getAccountInfoParameters>>,\n): Promise<Result<AccountInfo>> => {\n  try {\n    const address = params.address ? (params.address as Address) : undefined;\n    const { result } = await recall.accountManager().info(address);\n    if (!result) {\n      return { success: false, error: \"Failed to get account info\" };\n    }\n    return { success: true, result };\n  } catch (error) {\n    if (error instanceof Error) {\n      return {\n        success: false,\n        error: `Failed to get account info: ${error.message}`,\n      };\n    }\n    return {\n      success: false,\n      error: \"Failed to get account info: Unknown error\",\n    };\n  }\n};\n\n/**\n * Lists all buckets for the current user.\n * @param recall - The Recall client.\n * @param _context - The context to provide to the function.\n * @param params - The function parameters.\n * @returns The list of buckets.\n */\nexport const listBuckets = async (\n  recall: RecallClient,\n  _context: Context,\n  params: z.infer<ReturnType<typeof listBucketsParameters>>,\n): Promise<Result<ListResult>> => {\n  try {\n    const address = params.address ? (params.address as Address) : undefined;\n    const { result } = await recall.bucketManager().list(address);\n    if (!result) {\n      return { success: false, error: \"Failed to list buckets\" };\n    }\n    return { success: true, result };\n  } catch (error) {\n    if (error instanceof Error) {\n      return {\n        success: false,\n        error: `Failed to list buckets: ${error.message}`,\n      };\n    }\n    return {\n      success: false,\n      error: \"Failed to list buckets: Unknown error\",\n    };\n  }\n};\n\n/**\n * Gets the credit information for the current user.\n * @param recall - The Recall client.\n * @param _context - The context to provide to the function.\n * @param params - The function parameters.\n * @returns The credit information.\n */\nexport const getCreditInfo = async (\n  recall: RecallClient,\n  _context: Context,\n  params: z.infer<ReturnType<typeof getCreditInfoParameters>>,\n): Promise<Result<CreditAccount>> => {\n  try {\n    const address = params.address ? (params.address as Address) : undefined;\n    const { result } = await recall.creditManager().getAccount(address);\n    if (!result) {\n      return { success: false, error: \"Failed to get credit info\" };\n    }\n    return { success: true, result };\n  } catch (error) {\n    if (error instanceof Error) {\n      return {\n        success: false,\n        error: `Failed to get credit info: ${error.message}`,\n      };\n    }\n    return {\n      success: false,\n      error: \"Failed to get credit info: Unknown error\",\n    };\n  }\n};\n\n/**\n * Buys credit for the current user.\n * @param recall - The Recall client.\n * @param _context - The context to provide to the function.\n * @param params - The function parameters.\n * @returns The transaction hash of the credit purchase.\n */\nexport const buyCredit = async (\n  recall: RecallClient,\n  _context: Context,\n  params: z.infer<ReturnType<typeof buyCreditParameters>>,\n): Promise<Result<string>> => {\n  try {\n    const to = params.to ? (params.to as Address) : undefined;\n    const { meta } = await recall\n      .creditManager()\n      .buy(parseEther(params.amount), to);\n    if (!meta?.tx?.transactionHash) {\n      return { success: false, error: \"Transaction not found\" };\n    }\n    return { success: true, result: meta.tx.transactionHash };\n  } catch (error) {\n    if (error instanceof Error) {\n      return {\n        success: false,\n        error: `Failed to buy credit: ${error.message}`,\n      };\n    }\n    return { success: false, error: \"Failed to buy credit: Unknown error\" };\n  }\n};\n\n/**\n * Creates a new bucket for the current user.\n * @param recall - The Recall client.\n * @param _context - The context to provide to the function.\n * @param params - The function parameters.\n * @returns The bucket address and transaction hash.\n */\nexport const createBucket = async (\n  recall: RecallClient,\n  _context: Context,\n  params: z.infer<ReturnType<typeof createBucketParameters>>,\n): Promise<Result<{ bucket: Address; txHash: string }>> => {\n  try {\n    const metadata = params.metadata ?? {};\n    const { meta, result } = await recall.bucketManager().create({\n      metadata: { alias: params.bucketAlias, ...metadata },\n    });\n    if (!meta?.tx || !result) {\n      return { success: false, error: \"Failed to create bucket\" };\n    }\n    return {\n      success: true,\n      result: { bucket: result.bucket, txHash: meta.tx.transactionHash },\n    };\n  } catch (error) {\n    if (error instanceof Error) {\n      return {\n        success: false,\n        error: `Failed to create bucket: ${error.message}`,\n      };\n    }\n    return {\n      success: false,\n      error: \"Failed to create bucket: Unknown error\",\n    };\n  }\n};\n\n/**\n * Gets or creates a bucket for the current user.\n * @param recall - The Recall client.\n * @param _context - The context to provide to the function.\n * @param params - The function parameters.\n * @returns The bucket address and transaction hash.\n */\nexport const getOrCreateBucket = async (\n  recall: RecallClient,\n  _context: Context,\n  params: z.infer<ReturnType<typeof getOrCreateBucketParameters>>,\n): Promise<Result<{ bucket: Address; tx: string }>> => {\n  try {\n    // Try to find the bucket by alias\n    const buckets = await recall.bucketManager().list();\n    if (buckets?.result) {\n      const bucket = buckets.result.find(\n        (b) => b.metadata?.alias === params.bucketAlias,\n      );\n      if (bucket) {\n        return { success: true, result: { bucket: bucket.addr, tx: \"\" } };\n      }\n    }\n\n    // Create new bucket if not found\n    const metadata = params.metadata ?? {};\n    const { result, meta } = await recall.bucketManager().create({\n      metadata: { alias: params.bucketAlias, ...metadata },\n    });\n    if (!meta?.tx || !result) {\n      return { success: false, error: \"Transaction not found\" };\n    }\n    return {\n      success: true,\n      result: { bucket: result.bucket, tx: meta.tx.transactionHash },\n    };\n  } catch (error) {\n    if (error instanceof Error) {\n      return {\n        success: false,\n        error: `Failed to get or create bucket: ${error.message}`,\n      };\n    }\n    return {\n      success: false,\n      error: \"Failed to get or create bucket: Unknown error\",\n    };\n  }\n};\n\n/**\n * Adds an object to a bucket.\n * @param recall - The Recall client.\n * @param _context - The context to provide to the function.\n * @param params - The function parameters.\n * @returns The transaction hash of the object addition.\n */\nexport const addObject = async (\n  recall: RecallClient,\n  _context: Context,\n  params: z.infer<ReturnType<typeof addObjectParameters>>,\n): Promise<Result<{ txHash: string }>> => {\n  try {\n    const metadata = params.metadata ?? {};\n    const data = new TextEncoder().encode(params.data);\n\n    const { meta } = await recall\n      .bucketManager()\n      .add(params.bucket as Address, params.key, data, {\n        overwrite: params.overwrite ?? false,\n        metadata,\n      });\n    if (!meta?.tx) {\n      return { success: false, error: \"Transaction not found\" };\n    }\n    return { success: true, result: { txHash: meta.tx.transactionHash } };\n  } catch (error) {\n    if (error instanceof Error) {\n      return {\n        success: false,\n        error: `Failed to add object: ${error.message}`,\n      };\n    }\n    return { success: false, error: \"Failed to add object: Unknown error\" };\n  }\n};\n\n/**\n * Gets an object from a bucket.\n * @param recall - The Recall client.\n * @param _context - The context to provide to the function.\n * @param params - The function parameters.\n * @returns The object as a string value.\n */\nexport const getObject = async (\n  recall: RecallClient,\n  _context: Context,\n  params: z.infer<ReturnType<typeof getObjectParameters>>,\n): Promise<Result<string>> => {\n  try {\n    const { result: object } = await recall\n      .bucketManager()\n      .get(params.bucket as Address, params.key);\n\n    if (!object) {\n      return { success: false, error: \"Object not found\" };\n    }\n    const result = new TextDecoder().decode(object);\n    return { success: true, result };\n  } catch (error) {\n    if (error instanceof Error) {\n      return {\n        success: false,\n        error: `Failed to get object: ${error.message}`,\n      };\n    }\n    return { success: false, error: \"Failed to get object: Unknown error\" };\n  }\n};\n\n/**\n * Queries objects in a bucket.\n * @param recall - The Recall client.\n * @param _context - The context to provide to the function.\n * @param params - The function parameters.\n * @returns The query result.\n */\nexport const queryObjects = async (\n  recall: RecallClient,\n  _context: Context,\n  params: z.infer<ReturnType<typeof queryObjectsParameters>>,\n): Promise<Result<QueryResult>> => {\n  try {\n    const { result } = await recall\n      .bucketManager()\n      .query(params.bucket as Address, {\n        prefix: params.prefix,\n        delimiter: params.delimiter,\n        startKey: params.startKey,\n        limit: params.limit,\n      });\n    if (!result) {\n      return { success: false, error: \"Failed to query objects\" };\n    }\n    return { success: true, result };\n  } catch (error) {\n    if (error instanceof Error) {\n      return {\n        success: false,\n        error: `Failed to query objects: ${error.message}`,\n      };\n    }\n    return { success: false, error: \"Failed to query objects: Unknown error\" };\n  }\n};\n","import { z } from \"zod\";\n\nimport { Context } from \"./configuration.js\";\n\n/**\n * EVM hex string address (e.g., accounts or buckets).\n */\nconst addressSchema = z.string().regex(/^0x[a-fA-F0-9]{40}$/);\n\n/**\n * Parameters for the getAccountInfo function\n * @param address - The address of the account to get account info for (optional)\n */\nexport const getAccountInfoParameters = (_context: Context = {}) =>\n  z.object({\n    address: addressSchema\n      .optional()\n      .describe(\"The address of the account (EVM hex string address)\"),\n  });\n\n/**\n * Parameters for the listBuckets function\n * @param address - The address of the account to list buckets for (optional)\n */\nexport const listBucketsParameters = (_context: Context = {}) =>\n  z.object({\n    address: addressSchema\n      .optional()\n      .describe(\n        \"The address of the account to list buckets for (EVM hex string address)\",\n      ),\n  });\n\n/**\n * Parameters for the getCreditInfo function\n * @param address - The address of the account to get credit info for (optional)\n */\nexport const getCreditInfoParameters = (_context: Context = {}) =>\n  z.object({\n    address: addressSchema\n      .optional()\n      .describe(\"The address of the account (EVM hex string address)\"),\n  });\n\n/**\n * Parameters for the buyCredit function\n * @param amount - The amount of credit to buy\n * @param to - The address of the account to buy credit for (optional)\n */\nexport const buyCreditParameters = (_context: Context = {}) =>\n  z.object({\n    amount: z.string().min(1).describe(\"The amount of credit to buy\"),\n    to: addressSchema\n      .optional()\n      .describe(\n        \"The address of the account to buy credit for (EVM hex string address)\",\n      ),\n  });\n\n/**\n * Parameters for the createBucket function\n * @param bucketAlias - The alias of the bucket to create\n * @param metadata - The metadata to store with the bucket (optional)\n */\nexport const createBucketParameters = (_context: Context = {}) =>\n  z.object({\n    bucketAlias: z\n      .string()\n      .min(1)\n      .describe(\"The alias of the bucket to create\"),\n    metadata: z\n      .record(\n        z.string().min(1).describe(\"The key of the metadata\"),\n        z.string().min(1).describe(\"The value of the metadata\"),\n      )\n      .optional()\n      .describe(\"The metadata to store with the bucket\"),\n  });\n\n/**\n * Parameters for the getOrCreateBucket function\n * @param bucketAlias - The alias of the bucket to retrieve or create\n * @param metadata - The metadata to store with the bucket (optional)\n */\nexport const getOrCreateBucketParameters = (_context: Context = {}) =>\n  z.object({\n    bucketAlias: z\n      .string()\n      .describe(\"The alias of the bucket to retrieve or create\"),\n    metadata: z\n      .record(\n        z.string().min(1).describe(\"The key of the metadata\"),\n        z.string().min(1).describe(\"The value of the metadata\"),\n      )\n      .optional()\n      .describe(\"The metadata to store with the bucket\"),\n  });\n\n/**\n * Parameters for the addObject function\n * @param bucket - The address of the bucket\n * @param key - The key under which to store the object\n * @param data - The data to store as a string value\n * @param metadata - The metadata to store with the object\n * @param overwrite - Whether to overwrite existing data at that key\n */\nexport const addObjectParameters = (_context: Context = {}) =>\n  z.object({\n    bucket: addressSchema.describe(\"The address of the bucket\"),\n    key: z.string().min(1).describe(\"The key under which to store the object\"),\n    data: z.string().describe(\"The data to store as a string value\"),\n    metadata: z\n      .record(\n        z.string().min(1).describe(\"The key of the metadata\"),\n        z.string().min(1).describe(\"The value of the metadata\"),\n      )\n      .optional()\n      .describe(\"The metadata to store with the object\"),\n    overwrite: z\n      .boolean()\n      .optional()\n      .describe(\"Whether to overwrite existing data at that key\"),\n  });\n\n/**\n * Parameters for the getObject function\n * @param bucket - The address of the bucket\n * @param key - The key under which the object is stored\n */\nexport const getObjectParameters = (_context: Context = {}) =>\n  z.object({\n    bucket: addressSchema.describe(\"The address of the bucket\"),\n    key: z.string().min(1).describe(\"The key under which the object is stored\"),\n  });\n\n/**\n * Parameters for the queryObjects function\n * @param bucket - The address of the bucket\n * @param prefix - The prefix of the objects to query (optional)\n * @param delimiter - The delimiter of the objects to query (optional)\n * @param startKey - The starting key of the objects to query (optional)\n * @param limit - The maximum number of objects to query (optional)\n */\nexport const queryObjectsParameters = (_context: Context = {}) =>\n  z.object({\n    bucket: addressSchema.describe(\"The address of the bucket\"),\n    prefix: z\n      .string()\n      .min(1)\n      .optional()\n      .describe(\"The prefix of the objects to query\"),\n    delimiter: z\n      .string()\n      .min(1)\n      .optional()\n      .describe(\"The delimiter of the objects to query\"),\n    startKey: z\n      .string()\n      .min(1)\n      .optional()\n      .describe(\"The starting key of the objects to query\"),\n    limit: z\n      .number()\n      .min(1)\n      .optional()\n      .describe(\"The maximum number of objects to query\"),\n  });\n","import { Context } from \"./configuration.js\";\n\n/**\n * Prompt for the getAccountInfo function\n * @returns The prompt for getting account info\n */\nexport const getAccountInfoPrompt = (_context: Context = {}) => `\nGets account information from Recall, including token $RECALL balances, address, and nonce.\n\nArguments:\n- address (str, optional): The address of the account, else, defaults to the connected user's account address.\n\nReturns the account's balance, address, and nonce information. \n`;\n\n/**\n * Prompt for the listBuckets function\n * @returns The prompt for listing buckets\n */\nexport const listBucketsPrompt = (_context: Context = {}) => `\nLists all buckets owned by the connected account in Recall.\n\nArguments:\n- owner (str, optional): The address of the account, else, defaults to the connected user's account address.\n\nReturns an array of buckets, each containing the bucket's address and metadata (which includes the alias, if present).\n`;\n\n/**\n * Prompt for the getCreditInfo function\n * @returns The prompt for getting credit info\n */\nexport const getCreditInfoPrompt = (_context: Context = {}) => `\nGets the credit information for the connected account.\n\nArguments:\n- address (str, optional): The address of the account, else, defaults to the connected user's account address.\n\nReturns the account's credit balance and credit approval information (used for access control).\n`;\n\n/**\n * Prompt for the buyCredit function\n * @returns The prompt for buying credit\n */\nexport const buyCreditPrompt = (_context: Context = {}) => `\nBuys credit for the connected account. Use this to purchase storage and computation credits.\n\nArguments:\n- amount (str): The amount of credit to buy (denominated in RECALL tokens).\n- to (str, optional): The address of the account to buy credit for, else, defaults to the connected user's account address.\n\nReturns a transaction hash confirming the credit purchase.\n`;\n\n/**\n * Prompt for the createBucket function\n * @returns The prompt for creating bucket\n */\nexport const createBucketPrompt = (_context: Context = {}) => `\nCreates a new bucket in Recall. Buckets are containers for storing objects and data.\n\nArguments:\n- bucketAlias (str): The alias to assign to the new bucket. Choose a descriptive name for your use case.\n\nReturns the new bucket's address (unique identifier) and the transaction hash at which it was created.\n`;\n\n/**\n * Prompt for the getOrCreateBucket function\n * @returns The prompt for getting or creating bucket\n */\nexport const getOrCreateBucketPrompt = (_context: Context = {}) => `\nGets an existing bucket by alias, or creates a new one if it doesn't exist. Use this to ensure you have a bucket for storage.\n\nArguments:\n- bucketAlias (str): The alias of the bucket to retrieve or create.\n\nReturns the bucket's address (unique identifier) and the transaction hash at which it was created.\n`;\n\n/**\n * Prompt for the addObject function\n * @returns The prompt for adding object\n */\nexport const addObjectPrompt = (_context: Context = {}) => `\nAdds an object to a bucket in Recall. Use this to store data like files, JSON, or raw bytes.\n\nArguments:\n- bucket (str): The address of the bucket (EVM hex string address).\n- key (str): The key under which to store the object. Use a descriptive path-like structure (e.g. \"users/profile/avatar.jpg\").\n- data (str): The data to store as a string value.\n- overwrite (bool, optional): Whether to overwrite existing data. Defaults to false.\n\nReturns the transaction hash at which the object was stored.\n`;\n\n/**\n * Prompt for the getObject function\n * @returns The prompt for getting object\n */\nexport const getObjectPrompt = (_context: Context = {}) => `\nGets an object from a bucket in Recall. Use this to retrieve previously stored data.\n\nArguments:\n- bucket (str): The address of the bucket (EVM hex string address).\n- key (str): The key under which the object is stored.\n\nReturns the object's data as a string value.\n`;\n\n/**\n * Prompt for the queryObjects function\n * @returns The prompt for querying objects\n */\nexport const queryObjectsPrompt = (_context: Context = {}) => `\nQueries objects from a bucket in Recall. Use this to list or search for stored objects matching certain criteria.\n\nArguments:\n- bucket (str): The address of the bucket (EVM hex string address).\n- prefix (str, optional): The prefix of the objects to query (e.g. \"users/\" to list all user-related objects).\n- delimiter (str, optional): The delimiter of the objects to query (e.g. \"/\" to group by directory-like structure).\n- startKey (str, optional): The starting key of the objects to query, useful for pagination.\n- limit (int, optional): The maximum number of objects to return.\n\nReturns an array of objects matching the query criteria, including keys, blake3 hashes, sizes, and storage information.\n`;\n","import { z } from \"zod\";\n\nimport { RecallClient } from \"@recallnet/sdk/client\";\n\nimport { Actions, Context } from \"./configuration.js\";\nimport {\n  addObject,\n  buyCredit,\n  createBucket,\n  getAccountInfo,\n  getCreditInfo,\n  getObject,\n  getOrCreateBucket,\n  listBuckets,\n  queryObjects,\n} from \"./functions.js\";\nimport {\n  addObjectParameters,\n  buyCreditParameters,\n  createBucketParameters,\n  getAccountInfoParameters,\n  getCreditInfoParameters,\n  getObjectParameters,\n  getOrCreateBucketParameters,\n  listBucketsParameters,\n  queryObjectsParameters,\n} from \"./parameters.js\";\nimport {\n  addObjectPrompt,\n  buyCreditPrompt,\n  createBucketPrompt,\n  getAccountInfoPrompt,\n  getCreditInfoPrompt,\n  getObjectPrompt,\n  getOrCreateBucketPrompt,\n  listBucketsPrompt,\n  queryObjectsPrompt,\n} from \"./prompts.js\";\nimport { Result } from \"./util.js\";\n\n/**\n * A tool is a function that can be called by the agent.\n * @param method - The method name.\n * @param name - The name of the tool.\n * @param description - The description of the tool.\n * @param parameters - The parameters of the tool.\n * @param actions - The {@link Actions} of the tool.\n */\nexport type Tool = {\n  method: string;\n  name: string;\n  description: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  parameters: z.ZodObject<any, any, any, any>;\n  actions: Actions;\n  execute: (\n    recall: RecallClient,\n    context: Context,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params: any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) => Promise<Result<any>>;\n};\n\n/**\n * A list of {@link Tool}s that can be used by the agent.\n */\nexport const tools = (context?: Context): Tool[] => [\n  // Account read methods\n  {\n    method: \"get_account_info\",\n    name: \"Get Account Info\",\n    description: getAccountInfoPrompt(context),\n    parameters: getAccountInfoParameters(context),\n    actions: {\n      account: {\n        read: true,\n      },\n    },\n    execute: getAccountInfo,\n  },\n  {\n    method: \"get_credit_info\",\n    name: \"Get Credit Info\",\n    description: getCreditInfoPrompt(context),\n    parameters: getCreditInfoParameters(context),\n    actions: {\n      account: {\n        read: true,\n      },\n    },\n    execute: getCreditInfo,\n  },\n  // Account write methods\n  {\n    method: \"buy_credit\",\n    name: \"Buy Credit\",\n    description: buyCreditPrompt(context),\n    parameters: buyCreditParameters(context),\n    actions: {\n      account: {\n        write: true,\n      },\n    },\n    execute: buyCredit,\n  },\n  // Bucket read methods\n  {\n    method: \"list_buckets\",\n    name: \"List Buckets\",\n    description: listBucketsPrompt(context),\n    parameters: listBucketsParameters(context),\n    actions: {\n      bucket: {\n        read: true,\n      },\n    },\n    execute: listBuckets,\n  },\n  {\n    method: \"get_object\",\n    name: \"Get Object\",\n    description: getObjectPrompt(context),\n    parameters: getObjectParameters(context),\n    actions: {\n      bucket: {\n        read: true,\n      },\n    },\n    execute: getObject,\n  },\n  {\n    method: \"query_objects\",\n    name: \"Query Objects\",\n    description: queryObjectsPrompt(context),\n    parameters: queryObjectsParameters(context),\n    actions: {\n      bucket: {\n        read: true,\n      },\n    },\n    execute: queryObjects,\n  },\n  // Bucket write methods\n  {\n    method: \"create_bucket\",\n    name: \"Create Bucket\",\n    description: createBucketPrompt(context),\n    parameters: createBucketParameters(context),\n    actions: {\n      bucket: {\n        write: true,\n      },\n    },\n    execute: createBucket,\n  },\n  {\n    method: \"get_or_create_bucket\",\n    name: \"Get or Create Bucket\",\n    description: getOrCreateBucketPrompt(context),\n    parameters: getOrCreateBucketParameters(context),\n    actions: {\n      bucket: {\n        read: true,\n        write: true,\n      },\n    },\n    execute: getOrCreateBucket,\n  },\n  {\n    method: \"add_object\",\n    name: \"Add Object\",\n    description: addObjectPrompt(context),\n    parameters: addObjectParameters(context),\n    actions: {\n      bucket: {\n        write: true,\n      },\n    },\n    execute: addObject,\n  },\n];\n","/**\n * JSON stringify with bigint support.\n * @param obj - The object to stringify.\n * @returns The stringified object.\n */\nexport function jsonStringify(obj: unknown) {\n  return JSON.stringify(obj, (_, value) =>\n    typeof value === \"bigint\" ? value.toString() : value,\n  );\n}\n\n/**\n * The result of a function that succeeds.\n */\nexport type SuccessResult<T> = {\n  success: true;\n  result: T;\n};\n\n/**\n * The result of a function that fails.\n */\nexport type ErrorResult = {\n  success: false;\n  error: string;\n};\n\n/**\n * The result of a function.\n */\nexport type Result<T> = SuccessResult<T> | ErrorResult;\n","import type { Tool } from \"./tools.js\";\n\n/**\n * Resources are categories for tool calls and come with a set of permissions. For example, an\n * action called `bucket.read` will only be allowed if a tool has defined the `bucket` as its\n * resource and has the `read` permission set.\n */\nexport type Resource = \"account\" | \"bucket\";\n\n/**\n * Permissions are used alongside resources to restrict how a tool can be used. Write operations\n * are associated with a private key and are not allowed to be called without one, while read\n * operations are open to anyone (e.g., reading Recall network information).\n */\nexport type Permission = \"read\" | \"write\";\n\n/**\n * Actions are used to restrict the subset of API calls that can be made through a {@link Resource}\n * and {@link Permission}. Setting a permission to false prevents the related \"tool\" from being\n * considered. For example, if no private key is provided, the `write` permission should be set to\n * false.\n * @example\n * ```ts\n * const actions: Actions = {\n *   bucket: {\n *     write: true,\n *   },\n * }\n * ```\n */\nexport type Actions = {\n  [K in Resource]?: {\n    [K in Permission]?: boolean;\n  };\n};\n\n// TODO: figure out what we need to pass here\n/**\n * Context are settings that are applied to all requests made by the integration.\n * @param network - The Recall network to use for the integration (defaults to `testnet`).\n * @param [key: string] - Additional custom settings that are applied to the integration.\n */\nexport type Context = {\n  network?: string;\n  [key: string]: unknown;\n};\n\n/**\n * Configuration provides various settings and options for the integration to tune and manage how\n * it behaves.\n * @param actions - Restricts the subset of API calls ({@link Actions}) that can be made.\n * @param context - {@link Context} are settings that are applied to all requests made by the integration.\n */\nexport type Configuration = {\n  actions: Actions;\n  context?: Context;\n};\n\n/**\n * Checks if a tool is allowed to be used based on the configuration.\n * @param tool - The {@link Tool} to check.\n * @param configuration - The {@link Configuration} to check against.\n * @returns `true` if the tool is allowed, `false` otherwise.\n */\nexport const isToolAllowed = (\n  tool: Tool,\n  configuration: Configuration,\n): boolean => {\n  return Object.keys(tool.actions).every((resource) => {\n    // For each resource.permission pair, check the configuration.\n    const permissions = tool.actions[resource as Resource];\n    if (!permissions) {\n      return false;\n    }\n\n    return Object.keys(permissions).every((permission) => {\n      return (\n        configuration.actions?.[resource as Resource]?.[\n          permission as Permission\n        ] === true\n      );\n    });\n  });\n};\n"],"mappings":"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","names":[]}