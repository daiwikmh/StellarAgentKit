import { z } from 'zod';
import { RecallClient } from '@recallnet/sdk/client';
import { Address } from 'viem';
import { AccountInfo } from '@recallnet/sdk/account';
import { ListResult, QueryResult } from '@recallnet/sdk/bucket';
import { CreditAccount } from '@recallnet/sdk/credit';

/**
 * The result of a function that succeeds.
 */
type SuccessResult<T> = {
    success: true;
    result: T;
};
/**
 * The result of a function that fails.
 */
type ErrorResult = {
    success: false;
    error: string;
};
/**
 * The result of a function.
 */
type Result<T> = SuccessResult<T> | ErrorResult;

/**
 * A tool is a function that can be called by the agent.
 * @param method - The method name.
 * @param name - The name of the tool.
 * @param description - The description of the tool.
 * @param parameters - The parameters of the tool.
 * @param actions - The {@link Actions} of the tool.
 */
type Tool = {
    method: string;
    name: string;
    description: string;
    parameters: z.ZodObject<any, any, any, any>;
    actions: Actions;
    execute: (recall: RecallClient, context: Context, params: any) => Promise<Result<any>>;
};
/**
 * A list of {@link Tool}s that can be used by the agent.
 */
declare const tools: (context?: Context) => Tool[];

/**
 * Resources are categories for tool calls and come with a set of permissions. For example, an
 * action called `bucket.read` will only be allowed if a tool has defined the `bucket` as its
 * resource and has the `read` permission set.
 */
type Resource = "account" | "bucket";
/**
 * Permissions are used alongside resources to restrict how a tool can be used. Write operations
 * are associated with a private key and are not allowed to be called without one, while read
 * operations are open to anyone (e.g., reading Recall network information).
 */
type Permission = "read" | "write";
/**
 * Actions are used to restrict the subset of API calls that can be made through a {@link Resource}
 * and {@link Permission}. Setting a permission to false prevents the related "tool" from being
 * considered. For example, if no private key is provided, the `write` permission should be set to
 * false.
 * @example
 * ```ts
 * const actions: Actions = {
 *   bucket: {
 *     write: true,
 *   },
 * }
 * ```
 */
type Actions = {
    [K in Resource]?: {
        [K in Permission]?: boolean;
    };
};
/**
 * Context are settings that are applied to all requests made by the integration.
 * @param network - The Recall network to use for the integration (defaults to `testnet`).
 * @param [key: string] - Additional custom settings that are applied to the integration.
 */
type Context = {
    network?: string;
    [key: string]: unknown;
};
/**
 * Configuration provides various settings and options for the integration to tune and manage how
 * it behaves.
 * @param actions - Restricts the subset of API calls ({@link Actions}) that can be made.
 * @param context - {@link Context} are settings that are applied to all requests made by the integration.
 */
type Configuration = {
    actions: Actions;
    context?: Context;
};
/**
 * Checks if a tool is allowed to be used based on the configuration.
 * @param tool - The {@link Tool} to check.
 * @param configuration - The {@link Configuration} to check against.
 * @returns `true` if the tool is allowed, `false` otherwise.
 */
declare const isToolAllowed: (tool: Tool, configuration: Configuration) => boolean;

/**
 * The Recall API provides a simple interface for the Recall network and SDK, designed for
 * agentic use.
 * @example
 * ```ts
 * const privateKey = "0x...";
 * const recall = new RecallAPI(privateKey);
 * const result = await recall.run("get_account_info", {});
 * ```
 */
declare class RecallAPI {
    private _recall;
    private _context;
    private _tools;
    private _serialize;
    /**
     * Create a new RecallAPI instance.
     * @param privateKey - The private key of the account to use.
     * @param context - The context to use, including the network name (e.g., `testnet` or `localnet`).
     * @param serializer - The serializer to use, which formats the return value of the method.
     * Defaults to `jsonStringify` (i.e.,`JSON.stringify` with `bigint`s converted to strings).
     */
    constructor(privateKey: string, context?: Context, serializer?: (data: unknown) => string);
    /**
     * Get the tools available to the `RecallAPI` instance.
     * @returns The tools available to the `RecallAPI` instance.
     */
    getTools(): Tool[];
    /**
     * Run a method on the Recall network.
     * @param method - The method to run.
     * @param arg - The arguments to pass to the method.
     * @returns The result of the method.
     */
    run(method: string, arg: any): Promise<string>;
}

/**
 * Parameters for the getAccountInfo function
 * @param address - The address of the account to get account info for (optional)
 */
declare const getAccountInfoParameters: (_context?: Context) => z.ZodObject<{
    address: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    address?: string | undefined;
}, {
    address?: string | undefined;
}>;
/**
 * Parameters for the listBuckets function
 * @param address - The address of the account to list buckets for (optional)
 */
declare const listBucketsParameters: (_context?: Context) => z.ZodObject<{
    address: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    address?: string | undefined;
}, {
    address?: string | undefined;
}>;
/**
 * Parameters for the getCreditInfo function
 * @param address - The address of the account to get credit info for (optional)
 */
declare const getCreditInfoParameters: (_context?: Context) => z.ZodObject<{
    address: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    address?: string | undefined;
}, {
    address?: string | undefined;
}>;
/**
 * Parameters for the buyCredit function
 * @param amount - The amount of credit to buy
 * @param to - The address of the account to buy credit for (optional)
 */
declare const buyCreditParameters: (_context?: Context) => z.ZodObject<{
    amount: z.ZodString;
    to: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    amount: string;
    to?: string | undefined;
}, {
    amount: string;
    to?: string | undefined;
}>;
/**
 * Parameters for the createBucket function
 * @param bucketAlias - The alias of the bucket to create
 * @param metadata - The metadata to store with the bucket (optional)
 */
declare const createBucketParameters: (_context?: Context) => z.ZodObject<{
    bucketAlias: z.ZodString;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    bucketAlias: string;
    metadata?: Record<string, string> | undefined;
}, {
    bucketAlias: string;
    metadata?: Record<string, string> | undefined;
}>;
/**
 * Parameters for the getOrCreateBucket function
 * @param bucketAlias - The alias of the bucket to retrieve or create
 * @param metadata - The metadata to store with the bucket (optional)
 */
declare const getOrCreateBucketParameters: (_context?: Context) => z.ZodObject<{
    bucketAlias: z.ZodString;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    bucketAlias: string;
    metadata?: Record<string, string> | undefined;
}, {
    bucketAlias: string;
    metadata?: Record<string, string> | undefined;
}>;
/**
 * Parameters for the addObject function
 * @param bucket - The address of the bucket
 * @param key - The key under which to store the object
 * @param data - The data to store as a string value
 * @param metadata - The metadata to store with the object
 * @param overwrite - Whether to overwrite existing data at that key
 */
declare const addObjectParameters: (_context?: Context) => z.ZodObject<{
    bucket: z.ZodString;
    key: z.ZodString;
    data: z.ZodString;
    metadata: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    overwrite: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    bucket: string;
    key: string;
    data: string;
    metadata?: Record<string, string> | undefined;
    overwrite?: boolean | undefined;
}, {
    bucket: string;
    key: string;
    data: string;
    metadata?: Record<string, string> | undefined;
    overwrite?: boolean | undefined;
}>;
/**
 * Parameters for the getObject function
 * @param bucket - The address of the bucket
 * @param key - The key under which the object is stored
 */
declare const getObjectParameters: (_context?: Context) => z.ZodObject<{
    bucket: z.ZodString;
    key: z.ZodString;
}, "strip", z.ZodTypeAny, {
    bucket: string;
    key: string;
}, {
    bucket: string;
    key: string;
}>;
/**
 * Parameters for the queryObjects function
 * @param bucket - The address of the bucket
 * @param prefix - The prefix of the objects to query (optional)
 * @param delimiter - The delimiter of the objects to query (optional)
 * @param startKey - The starting key of the objects to query (optional)
 * @param limit - The maximum number of objects to query (optional)
 */
declare const queryObjectsParameters: (_context?: Context) => z.ZodObject<{
    bucket: z.ZodString;
    prefix: z.ZodOptional<z.ZodString>;
    delimiter: z.ZodOptional<z.ZodString>;
    startKey: z.ZodOptional<z.ZodString>;
    limit: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    bucket: string;
    prefix?: string | undefined;
    delimiter?: string | undefined;
    startKey?: string | undefined;
    limit?: number | undefined;
}, {
    bucket: string;
    prefix?: string | undefined;
    delimiter?: string | undefined;
    startKey?: string | undefined;
    limit?: number | undefined;
}>;

/**
 * Gets the account information for the current user.
 * @param recall - The Recall client.
 * @param _context - The context to provide to the function.
 * @param params - The function parameters.
 * @returns The account information.
 */
declare const getAccountInfo: (recall: RecallClient, _context: Context, params: z.infer<ReturnType<typeof getAccountInfoParameters>>) => Promise<Result<AccountInfo>>;
/**
 * Lists all buckets for the current user.
 * @param recall - The Recall client.
 * @param _context - The context to provide to the function.
 * @param params - The function parameters.
 * @returns The list of buckets.
 */
declare const listBuckets: (recall: RecallClient, _context: Context, params: z.infer<ReturnType<typeof listBucketsParameters>>) => Promise<Result<ListResult>>;
/**
 * Gets the credit information for the current user.
 * @param recall - The Recall client.
 * @param _context - The context to provide to the function.
 * @param params - The function parameters.
 * @returns The credit information.
 */
declare const getCreditInfo: (recall: RecallClient, _context: Context, params: z.infer<ReturnType<typeof getCreditInfoParameters>>) => Promise<Result<CreditAccount>>;
/**
 * Buys credit for the current user.
 * @param recall - The Recall client.
 * @param _context - The context to provide to the function.
 * @param params - The function parameters.
 * @returns The transaction hash of the credit purchase.
 */
declare const buyCredit: (recall: RecallClient, _context: Context, params: z.infer<ReturnType<typeof buyCreditParameters>>) => Promise<Result<string>>;
/**
 * Creates a new bucket for the current user.
 * @param recall - The Recall client.
 * @param _context - The context to provide to the function.
 * @param params - The function parameters.
 * @returns The bucket address and transaction hash.
 */
declare const createBucket: (recall: RecallClient, _context: Context, params: z.infer<ReturnType<typeof createBucketParameters>>) => Promise<Result<{
    bucket: Address;
    txHash: string;
}>>;
/**
 * Gets or creates a bucket for the current user.
 * @param recall - The Recall client.
 * @param _context - The context to provide to the function.
 * @param params - The function parameters.
 * @returns The bucket address and transaction hash.
 */
declare const getOrCreateBucket: (recall: RecallClient, _context: Context, params: z.infer<ReturnType<typeof getOrCreateBucketParameters>>) => Promise<Result<{
    bucket: Address;
    tx: string;
}>>;
/**
 * Adds an object to a bucket.
 * @param recall - The Recall client.
 * @param _context - The context to provide to the function.
 * @param params - The function parameters.
 * @returns The transaction hash of the object addition.
 */
declare const addObject: (recall: RecallClient, _context: Context, params: z.infer<ReturnType<typeof addObjectParameters>>) => Promise<Result<{
    txHash: string;
}>>;
/**
 * Gets an object from a bucket.
 * @param recall - The Recall client.
 * @param _context - The context to provide to the function.
 * @param params - The function parameters.
 * @returns The object as a string value.
 */
declare const getObject: (recall: RecallClient, _context: Context, params: z.infer<ReturnType<typeof getObjectParameters>>) => Promise<Result<string>>;
/**
 * Queries objects in a bucket.
 * @param recall - The Recall client.
 * @param _context - The context to provide to the function.
 * @param params - The function parameters.
 * @returns The query result.
 */
declare const queryObjects: (recall: RecallClient, _context: Context, params: z.infer<ReturnType<typeof queryObjectsParameters>>) => Promise<Result<QueryResult>>;

/**
 * Prompt for the getAccountInfo function
 * @returns The prompt for getting account info
 */
declare const getAccountInfoPrompt: (_context?: Context) => string;
/**
 * Prompt for the listBuckets function
 * @returns The prompt for listing buckets
 */
declare const listBucketsPrompt: (_context?: Context) => string;
/**
 * Prompt for the getCreditInfo function
 * @returns The prompt for getting credit info
 */
declare const getCreditInfoPrompt: (_context?: Context) => string;
/**
 * Prompt for the buyCredit function
 * @returns The prompt for buying credit
 */
declare const buyCreditPrompt: (_context?: Context) => string;
/**
 * Prompt for the createBucket function
 * @returns The prompt for creating bucket
 */
declare const createBucketPrompt: (_context?: Context) => string;
/**
 * Prompt for the getOrCreateBucket function
 * @returns The prompt for getting or creating bucket
 */
declare const getOrCreateBucketPrompt: (_context?: Context) => string;
/**
 * Prompt for the addObject function
 * @returns The prompt for adding object
 */
declare const addObjectPrompt: (_context?: Context) => string;
/**
 * Prompt for the getObject function
 * @returns The prompt for getting object
 */
declare const getObjectPrompt: (_context?: Context) => string;
/**
 * Prompt for the queryObjects function
 * @returns The prompt for querying objects
 */
declare const queryObjectsPrompt: (_context?: Context) => string;

export { type Actions, type Configuration, type Context, type Permission, RecallAPI, type Resource, type Result, type Tool, addObject, addObjectParameters, addObjectPrompt, buyCredit, buyCreditParameters, buyCreditPrompt, createBucket, createBucketParameters, createBucketPrompt, getAccountInfo, getAccountInfoParameters, getAccountInfoPrompt, getCreditInfo, getCreditInfoParameters, getCreditInfoPrompt, getObject, getObjectParameters, getObjectPrompt, getOrCreateBucket, getOrCreateBucketParameters, getOrCreateBucketPrompt, isToolAllowed, listBuckets, listBucketsParameters, listBucketsPrompt, queryObjects, queryObjectsParameters, queryObjectsPrompt, tools };
